

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Oct 13 14:32:46 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	idataCOMRAM
    54  002E76                     __pidataCOMRAM:
    55                           	opt stack 0
    56                           
    57                           ;initializer for _RAPIDO
    58  002E76  0001               	dw	1
    59                           
    60                           ;initializer for _tmues
    61  002E78  000A               	dw	10
    62                           
    63                           ;initializer for _tvis
    64  002E7A  0005               	dw	5
    65                           
    66                           	psect	idataBANK0
    67  002E66                     __pidataBANK0:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _binnum
    71  002E66  0001               	dw	1
    72                           
    73                           ;initializer for _info
    74  002E68  0001               	dw	1
    75                           
    76                           ;initializer for _muestreo1
    77  002E6A  0001               	dw	1
    78                           
    79                           ;initializer for _muestreo2
    80  002E6C  0001               	dw	1
    81                           
    82                           ;initializer for _muestreo3
    83  002E6E  0001               	dw	1
    84                           
    85                           ;initializer for _visualizacion1
    86  002E70  0001               	dw	1
    87                           
    88                           ;initializer for _visualizacion2
    89  002E72  0001               	dw	1
    90                           
    91                           ;initializer for _visualizacion3
    92  002E74  0001               	dw	1
    93                           
    94                           	psect	mediumconst
    95  007E0A                     __pmediumconst:
    96                           	opt stack 0
    97  007E0A  00                 	db	0
    98  007E0B                     _dpowers:
    99                           	opt stack 0
   100  007E0B  0001               	dw	1
   101  007E0D  0000               	dw	0
   102  007E0F  000A               	dw	10
   103  007E11  0000               	dw	0
   104  007E13  0064               	dw	100
   105  007E15  0000               	dw	0
   106  007E17  03E8               	dw	1000
   107  007E19  0000               	dw	0
   108  007E1B  2710               	dw	10000
   109  007E1D  0000               	dw	0
   110  007E1F  86A0               	dw	34464
   111  007E21  0001               	dw	1
   112  007E23  4240               	dw	16960
   113  007E25  000F               	dw	15
   114  007E27  9680               	dw	38528
   115  007E29  0098               	dw	152
   116  007E2B  E100               	dw	57600
   117  007E2D  05F5               	dw	1525
   118  007E2F  CA00               	dw	51712
   119  007E31  3B9A               	dw	15258
   120  007E33                     __end_of_dpowers:
   121                           	opt stack 0
   122  007E33                     __npowers_:
   123                           	opt stack 0
   124  007E33  00                 	db	0
   125  007E34  80                 	db	128
   126  007E35  3F                 	db	63
   127  007E36  CD                 	db	205
   128  007E37  CC                 	db	204
   129  007E38  3D                 	db	61
   130  007E39  D7                 	db	215
   131  007E3A  23                 	db	35
   132  007E3B  3C                 	db	60
   133  007E3C  12                 	db	18
   134  007E3D  83                 	db	131
   135  007E3E  3A                 	db	58
   136  007E3F  B7                 	db	183
   137  007E40  D1                 	db	209
   138  007E41  38                 	db	56
   139  007E42  C6                 	db	198
   140  007E43  27                 	db	39
   141  007E44  37                 	db	55
   142  007E45  38                 	db	56
   143  007E46  86                 	db	134
   144  007E47  35                 	db	53
   145  007E48  C0                 	db	192
   146  007E49  D6                 	db	214
   147  007E4A  33                 	db	51
   148  007E4B  CC                 	db	204
   149  007E4C  2B                 	db	43
   150  007E4D  32                 	db	50
   151  007E4E  70                 	db	112
   152  007E4F  89                 	db	137
   153  007E50  30                 	db	48
   154  007E51  E7                 	db	231
   155  007E52  DB                 	db	219
   156  007E53  2E                 	db	46
   157  007E54  E5                 	db	229
   158  007E55  3C                 	db	60
   159  007E56  1E                 	db	30
   160  007E57  42                 	db	66
   161  007E58  A2                 	db	162
   162  007E59  0D                 	db	13
   163  007E5A                     __end_of__npowers_:
   164                           	opt stack 0
   165  007E5A                     __powers_:
   166                           	opt stack 0
   167  007E5A  00                 	db	0
   168  007E5B  80                 	db	128
   169  007E5C  3F                 	db	63
   170  007E5D  00                 	db	0
   171  007E5E  20                 	db	32
   172  007E5F  41                 	db	65
   173  007E60  00                 	db	0
   174  007E61  C8                 	db	200
   175  007E62  42                 	db	66
   176  007E63  00                 	db	0
   177  007E64  7A                 	db	122
   178  007E65  44                 	db	68
   179  007E66  40                 	db	64
   180  007E67  1C                 	db	28
   181  007E68  46                 	db	70
   182  007E69  50                 	db	80
   183  007E6A  C3                 	db	195
   184  007E6B  47                 	db	71
   185  007E6C  24                 	db	36
   186  007E6D  74                 	db	116
   187  007E6E  49                 	db	73
   188  007E6F  97                 	db	151
   189  007E70  18                 	db	24
   190  007E71  4B                 	db	75
   191  007E72  BC                 	db	188
   192  007E73  BE                 	db	190
   193  007E74  4C                 	db	76
   194  007E75  6B                 	db	107
   195  007E76  6E                 	db	110
   196  007E77  4E                 	db	78
   197  007E78  03                 	db	3
   198  007E79  15                 	db	21
   199  007E7A  50                 	db	80
   200  007E7B  79                 	db	121
   201  007E7C  AD                 	db	173
   202  007E7D  60                 	db	96
   203  007E7E  F3                 	db	243
   204  007E7F  49                 	db	73
   205  007E80  71                 	db	113
   206  007E81                     __end_of__powers_:
   207                           	opt stack 0
   208  007E81                     _hexpowers:
   209                           	opt stack 0
   210  007E81  0001               	dw	1
   211  007E83  0000               	dw	0
   212  007E85  0010               	dw	16
   213  007E87  0000               	dw	0
   214  007E89  0100               	dw	256
   215  007E8B  0000               	dw	0
   216  007E8D  1000               	dw	4096
   217  007E8F  0000               	dw	0
   218  007E91  0000               	dw	0
   219  007E93  0001               	dw	1
   220  007E95  0000               	dw	0
   221  007E97  0010               	dw	16
   222  007E99  0000               	dw	0
   223  007E9B  0100               	dw	256
   224  007E9D  0000               	dw	0
   225  007E9F  1000               	dw	4096
   226  007EA1                     __end_of_hexpowers:
   227                           	opt stack 0
   228  007EA1                     _canal2:
   229                           	opt stack 0
   230  007EA1  63                 	db	99
   231  007EA2  61                 	db	97
   232  007EA3  6E                 	db	110
   233  007EA4  61                 	db	97
   234  007EA5  6C                 	db	108
   235  007EA6  20                 	db	32
   236  007EA7  32                 	db	50
   237  007EA8  20                 	db	32
   238  007EA9  3A                 	db	58
   239  007EAA  00                 	db	0
   240  007EAB                     __end_of_canal2:
   241                           	opt stack 0
   242  007EAB                     _saludo:
   243                           	opt stack 0
   244  007EAB  42                 	db	66
   245  007EAC  49                 	db	73
   246  007EAD  45                 	db	69
   247  007EAE  4E                 	db	78
   248  007EAF  56                 	db	86
   249  007EB0  45                 	db	69
   250  007EB1  4E                 	db	78
   251  007EB2  49                 	db	73
   252  007EB3  44                 	db	68
   253  007EB4  4F                 	db	79
   254  007EB5  20                 	db	32
   255  007EB6  41                 	db	65
   256  007EB7  20                 	db	32
   257  007EB8  4C                 	db	76
   258  007EB9  41                 	db	65
   259  007EBA  20                 	db	32
   260  007EBB  43                 	db	67
   261  007EBC  4F                 	db	79
   262  007EBD  4E                 	db	78
   263  007EBE  56                 	db	86
   264  007EBF  45                 	db	69
   265  007EC0  52                 	db	82
   266  007EC1  53                 	db	83
   267  007EC2  49                 	db	73
   268  007EC3  4F                 	db	79
   269  007EC4  4E                 	db	78
   270  007EC5  20                 	db	32
   271  007EC6  41                 	db	65
   272  007EC7  44                 	db	68
   273  007EC8  43                 	db	67
   274  007EC9  00                 	db	0
   275  007ECA                     __end_of_saludo:
   276                           	opt stack 0
   277  007ECA                     _estadoactualnormal:
   278                           	opt stack 0
   279  007ECA  4D                 	db	77
   280  007ECB  6F                 	db	111
   281  007ECC  64                 	db	100
   282  007ECD  6F                 	db	111
   283  007ECE  20                 	db	32
   284  007ECF  64                 	db	100
   285  007ED0  65                 	db	101
   286  007ED1  20                 	db	32
   287  007ED2  6D                 	db	109
   288  007ED3  75                 	db	117
   289  007ED4  65                 	db	101
   290  007ED5  73                 	db	115
   291  007ED6  74                 	db	116
   292  007ED7  72                 	db	114
   293  007ED8  65                 	db	101
   294  007ED9  6F                 	db	111
   295  007EDA  20                 	db	32
   296  007EDB  6E                 	db	110
   297  007EDC  6F                 	db	111
   298  007EDD  72                 	db	114
   299  007EDE  6D                 	db	109
   300  007EDF  61                 	db	97
   301  007EE0  6C                 	db	108
   302  007EE1  00                 	db	0
   303  007EE2                     __end_of_estadoactualnormal:
   304                           	opt stack 0
   305  007EE2                     _estadoactualrapido:
   306                           	opt stack 0
   307  007EE2  4D                 	db	77
   308  007EE3  6F                 	db	111
   309  007EE4  64                 	db	100
   310  007EE5  6F                 	db	111
   311  007EE6  20                 	db	32
   312  007EE7  64                 	db	100
   313  007EE8  65                 	db	101
   314  007EE9  20                 	db	32
   315  007EEA  6D                 	db	109
   316  007EEB  75                 	db	117
   317  007EEC  65                 	db	101
   318  007EED  73                 	db	115
   319  007EEE  74                 	db	116
   320  007EEF  72                 	db	114
   321  007EF0  65                 	db	101
   322  007EF1  6F                 	db	111
   323  007EF2  20                 	db	32
   324  007EF3  72                 	db	114
   325  007EF4  61                 	db	97
   326  007EF5  70                 	db	112
   327  007EF6  69                 	db	105
   328  007EF7  64                 	db	100
   329  007EF8  6F                 	db	111
   330  007EF9  00                 	db	0
   331  007EFA                     __end_of_estadoactualrapido:
   332                           	opt stack 0
   333  007EFA                     _visualizacionnoaplica:
   334                           	opt stack 0
   335  007EFA  76                 	db	118
   336  007EFB  69                 	db	105
   337  007EFC  73                 	db	115
   338  007EFD  75                 	db	117
   339  007EFE  61                 	db	97
   340  007EFF  6C                 	db	108
   341  007F00  69                 	db	105
   342  007F01  7A                 	db	122
   343  007F02  61                 	db	97
   344  007F03  63                 	db	99
   345  007F04  69                 	db	105
   346  007F05  6F                 	db	111
   347  007F06  6E                 	db	110
   348  007F07  20                 	db	32
   349  007F08  4E                 	db	78
   350  007F09  4F                 	db	79
   351  007F0A  20                 	db	32
   352  007F0B  41                 	db	65
   353  007F0C  50                 	db	80
   354  007F0D  4C                 	db	76
   355  007F0E  49                 	db	73
   356  007F0F  43                 	db	67
   357  007F10  41                 	db	65
   358  007F11  00                 	db	0
   359  007F12                     __end_of_visualizacionnoaplica:
   360                           	opt stack 0
   361  007F12                     _noreconocido:
   362                           	opt stack 0
   363  007F12  43                 	db	67
   364  007F13  4F                 	db	79
   365  007F14  4D                 	db	77
   366  007F15  41                 	db	65
   367  007F16  4E                 	db	78
   368  007F17  44                 	db	68
   369  007F18  4F                 	db	79
   370  007F19  20                 	db	32
   371  007F1A  4E                 	db	78
   372  007F1B  4F                 	db	79
   373  007F1C  20                 	db	32
   374  007F1D  52                 	db	82
   375  007F1E  45                 	db	69
   376  007F1F  43                 	db	67
   377  007F20  4F                 	db	79
   378  007F21  4E                 	db	78
   379  007F22  4F                 	db	79
   380  007F23  43                 	db	67
   381  007F24  49                 	db	73
   382  007F25  44                 	db	68
   383  007F26  4F                 	db	79
   384  007F27  00                 	db	0
   385  007F28                     __end_of_noreconocido:
   386                           	opt stack 0
   387  007F28                     _muestreonoaplica:
   388                           	opt stack 0
   389  007F28  4D                 	db	77
   390  007F29  75                 	db	117
   391  007F2A  65                 	db	101
   392  007F2B  73                 	db	115
   393  007F2C  74                 	db	116
   394  007F2D  72                 	db	114
   395  007F2E  65                 	db	101
   396  007F2F  6F                 	db	111
   397  007F30  20                 	db	32
   398  007F31  4E                 	db	78
   399  007F32  4F                 	db	79
   400  007F33  20                 	db	32
   401  007F34  41                 	db	65
   402  007F35  50                 	db	80
   403  007F36  4C                 	db	76
   404  007F37  49                 	db	73
   405  007F38  43                 	db	67
   406  007F39  41                 	db	65
   407  007F3A  00                 	db	0
   408  007F3B                     __end_of_muestreonoaplica:
   409                           	opt stack 0
   410  007F3B                     _VISUALIZACION1:
   411                           	opt stack 0
   412  007F3B  56                 	db	86
   413  007F3C  49                 	db	73
   414  007F3D  53                 	db	83
   415  007F3E  55                 	db	85
   416  007F3F  41                 	db	65
   417  007F40  4C                 	db	76
   418  007F41  49                 	db	73
   419  007F42  5A                 	db	90
   420  007F43  41                 	db	65
   421  007F44  43                 	db	67
   422  007F45  49                 	db	73
   423  007F46  4F                 	db	79
   424  007F47  4E                 	db	78
   425  007F48  31                 	db	49
   426  007F49  00                 	db	0
   427  007F4A                     __end_of_VISUALIZACION1:
   428                           	opt stack 0
   429  007F4A                     _VISUALIZACION2:
   430                           	opt stack 0
   431  007F4A  56                 	db	86
   432  007F4B  49                 	db	73
   433  007F4C  53                 	db	83
   434  007F4D  55                 	db	85
   435  007F4E  41                 	db	65
   436  007F4F  4C                 	db	76
   437  007F50  49                 	db	73
   438  007F51  5A                 	db	90
   439  007F52  41                 	db	65
   440  007F53  43                 	db	67
   441  007F54  49                 	db	73
   442  007F55  4F                 	db	79
   443  007F56  4E                 	db	78
   444  007F57  32                 	db	50
   445  007F58  00                 	db	0
   446  007F59                     __end_of_VISUALIZACION2:
   447                           	opt stack 0
   448  007F59                     _VISUALIZACION3:
   449                           	opt stack 0
   450  007F59  56                 	db	86
   451  007F5A  49                 	db	73
   452  007F5B  53                 	db	83
   453  007F5C  55                 	db	85
   454  007F5D  41                 	db	65
   455  007F5E  4C                 	db	76
   456  007F5F  49                 	db	73
   457  007F60  5A                 	db	90
   458  007F61  41                 	db	65
   459  007F62  43                 	db	67
   460  007F63  49                 	db	73
   461  007F64  4F                 	db	79
   462  007F65  4E                 	db	78
   463  007F66  33                 	db	51
   464  007F67  00                 	db	0
   465  007F68                     __end_of_VISUALIZACION3:
   466                           	opt stack 0
   467  007F68                     _MODONORMAL:
   468                           	opt stack 0
   469  007F68  4D                 	db	77
   470  007F69  4F                 	db	79
   471  007F6A  44                 	db	68
   472  007F6B  4F                 	db	79
   473  007F6C  4E                 	db	78
   474  007F6D  4F                 	db	79
   475  007F6E  52                 	db	82
   476  007F6F  4D                 	db	77
   477  007F70  41                 	db	65
   478  007F71  4C                 	db	76
   479  007F72  00                 	db	0
   480  007F73                     __end_of_MODONORMAL:
   481                           	opt stack 0
   482  007F73                     _MODORAPIDO:
   483                           	opt stack 0
   484  007F73  4D                 	db	77
   485  007F74  4F                 	db	79
   486  007F75  44                 	db	68
   487  007F76  4F                 	db	79
   488  007F77  52                 	db	82
   489  007F78  41                 	db	65
   490  007F79  50                 	db	80
   491  007F7A  49                 	db	73
   492  007F7B  44                 	db	68
   493  007F7C  4F                 	db	79
   494  007F7D  00                 	db	0
   495  007F7E                     __end_of_MODORAPIDO:
   496                           	opt stack 0
   497  007F7E                     _MUESTREO1:
   498                           	opt stack 0
   499  007F7E  4D                 	db	77
   500  007F7F  55                 	db	85
   501  007F80  45                 	db	69
   502  007F81  53                 	db	83
   503  007F82  54                 	db	84
   504  007F83  52                 	db	82
   505  007F84  45                 	db	69
   506  007F85  4F                 	db	79
   507  007F86  31                 	db	49
   508  007F87  00                 	db	0
   509  007F88                     __end_of_MUESTREO1:
   510                           	opt stack 0
   511  007F88                     _MUESTREO2:
   512                           	opt stack 0
   513  007F88  4D                 	db	77
   514  007F89  55                 	db	85
   515  007F8A  45                 	db	69
   516  007F8B  53                 	db	83
   517  007F8C  54                 	db	84
   518  007F8D  52                 	db	82
   519  007F8E  45                 	db	69
   520  007F8F  4F                 	db	79
   521  007F90  32                 	db	50
   522  007F91  00                 	db	0
   523  007F92                     __end_of_MUESTREO2:
   524                           	opt stack 0
   525  007F92                     _MUESTREO3:
   526                           	opt stack 0
   527  007F92  4D                 	db	77
   528  007F93  55                 	db	85
   529  007F94  45                 	db	69
   530  007F95  53                 	db	83
   531  007F96  54                 	db	84
   532  007F97  52                 	db	82
   533  007F98  45                 	db	69
   534  007F99  4F                 	db	79
   535  007F9A  33                 	db	51
   536  007F9B  00                 	db	0
   537  007F9C                     __end_of_MUESTREO3:
   538                           	opt stack 0
   539  007F9C                     _INFO:
   540                           	opt stack 0
   541  007F9C  49                 	db	73
   542  007F9D  4E                 	db	78
   543  007F9E  46                 	db	70
   544  007F9F  4F                 	db	79
   545  007FA0  00                 	db	0
   546  007FA1                     __end_of_INFO:
   547                           	opt stack 0
   548  0000                     _TMR0	set	4054
   549  0000                     _TMR1	set	4046
   550  0000                     _TMR3	set	4018
   551  0000                     _ADCON0bits	set	4034
   552  0000                     _ADCON1bits	set	4033
   553  0000                     _ADRESH	set	4036
   554  0000                     _ADRESL	set	4035
   555  0000                     _INTCON2bits	set	4081
   556  0000                     _INTCONbits	set	4082
   557  0000                     _IPR1bits	set	3999
   558  0000                     _IPR2bits	set	4002
   559  0000                     _LATBbits	set	3978
   560  0000                     _PIE1bits	set	3997
   561  0000                     _PIE2bits	set	4000
   562  0000                     _PIR1bits	set	3998
   563  0000                     _PIR2bits	set	4001
   564  0000                     _PORTA	set	3968
   565  0000                     _PORTB	set	3969
   566  0000                     _PORTBbits	set	3969
   567  0000                     _PORTC	set	3970
   568  0000                     _RCONbits	set	4048
   569  0000                     _RCREG	set	4014
   570  0000                     _RCSTAbits	set	4011
   571  0000                     _SPBRG	set	4015
   572  0000                     _T0CONbits	set	4053
   573  0000                     _T1CONbits	set	4045
   574  0000                     _T3CONbits	set	4017
   575  0000                     _TRISAbits	set	3986
   576  0000                     _TRISBbits	set	3987
   577  0000                     _TRISCbits	set	3988
   578  0000                     _TXREG	set	4013
   579  0000                     _TXSTAbits	set	4012
   580  007FA1                     STR_5:
   581  007FA1  20                 	db	32
   582  007FA2  20                 	db	32
   583  007FA3  63                 	db	99	;'c'
   584  007FA4  61                 	db	97	;'a'
   585  007FA5  6E                 	db	110	;'n'
   586  007FA6  61                 	db	97	;'a'
   587  007FA7  6C                 	db	108	;'l'
   588  007FA8  20                 	db	32
   589  007FA9  33                 	db	51	;'3'
   590  007FAA  3A                 	db	58	;':'
   591  007FAB  20                 	db	32
   592  007FAC  30                 	db	48	;'0'
   593  007FAD  78                 	db	120	;'x'
   594  007FAE  25                 	db	37
   595  007FAF  30                 	db	48	;'0'
   596  007FB0  34                 	db	52	;'4'
   597  007FB1  58                 	db	88	;'X'
   598  007FB2  2E                 	db	46
   599  007FB3  0A                 	db	10
   600  007FB4  0D                 	db	13
   601  007FB5  00                 	db	0
   602  007FB6                     STR_3:
   603  007FB6  76                 	db	118	;'v'
   604  007FB7  69                 	db	105	;'i'
   605  007FB8  73                 	db	115	;'s'
   606  007FB9  75                 	db	117	;'u'
   607  007FBA  61                 	db	97	;'a'
   608  007FBB  6C                 	db	108	;'l'
   609  007FBC  69                 	db	105	;'i'
   610  007FBD  7A                 	db	122	;'z'
   611  007FBE  61                 	db	97	;'a'
   612  007FBF  63                 	db	99	;'c'
   613  007FC0  69                 	db	105	;'i'
   614  007FC1  6F                 	db	111	;'o'
   615  007FC2  6E                 	db	110	;'n'
   616  007FC3  20                 	db	32
   617  007FC4  25                 	db	37
   618  007FC5  64                 	db	100	;'d'
   619  007FC6  20                 	db	32
   620  007FC7  6D                 	db	109	;'m'
   621  007FC8  73                 	db	115	;'s'
   622  007FC9  2E                 	db	46
   623  007FCA  00                 	db	0
   624  007FCB                     STR_7:
   625  007FCB  30                 	db	48	;'0'
   626  007FCC  31                 	db	49	;'1'
   627  007FCD  32                 	db	50	;'2'
   628  007FCE  33                 	db	51	;'3'
   629  007FCF  34                 	db	52	;'4'
   630  007FD0  35                 	db	53	;'5'
   631  007FD1  36                 	db	54	;'6'
   632  007FD2  37                 	db	55	;'7'
   633  007FD3  38                 	db	56	;'8'
   634  007FD4  39                 	db	57	;'9'
   635  007FD5  41                 	db	65	;'A'
   636  007FD6  42                 	db	66	;'B'
   637  007FD7  43                 	db	67	;'C'
   638  007FD8  44                 	db	68	;'D'
   639  007FD9  45                 	db	69	;'E'
   640  007FDA  46                 	db	70	;'F'
   641  007FDB  00                 	db	0
   642  007FDC                     STR_4:
   643  007FDC  63                 	db	99	;'c'
   644  007FDD  61                 	db	97	;'a'
   645  007FDE  6E                 	db	110	;'n'
   646  007FDF  61                 	db	97	;'a'
   647  007FE0  6C                 	db	108	;'l'
   648  007FE1  20                 	db	32
   649  007FE2  31                 	db	49	;'1'
   650  007FE3  3A                 	db	58	;':'
   651  007FE4  20                 	db	32
   652  007FE5  25                 	db	37
   653  007FE6  66                 	db	102	;'f'
   654  007FE7  20                 	db	32
   655  007FE8  56                 	db	86	;'V'
   656  007FE9  20                 	db	32
   657  007FEA  20                 	db	32
   658  007FEB  00                 	db	0
   659  007FEC                     STR_2:
   660  007FEC  6D                 	db	109	;'m'
   661  007FED  75                 	db	117	;'u'
   662  007FEE  65                 	db	101	;'e'
   663  007FEF  73                 	db	115	;'s'
   664  007FF0  74                 	db	116	;'t'
   665  007FF1  72                 	db	114	;'r'
   666  007FF2  65                 	db	101	;'e'
   667  007FF3  6F                 	db	111	;'o'
   668  007FF4  20                 	db	32
   669  007FF5  25                 	db	37
   670  007FF6  64                 	db	100	;'d'
   671  007FF7  20                 	db	32
   672  007FF8  6D                 	db	109	;'m'
   673  007FF9  73                 	db	115	;'s'
   674  007FFA  2E                 	db	46
   675  007FFB  00                 	db	0
   676  007FFC                     STR_1:
   677  007FFC  25                 	db	37
   678  007FFD  64                 	db	100	;'d'
   679  007FFE  00                 	db	0
   680  0000                     
   681                           ; #config settings
   682  007FFF  00                 	db	0	; dummy byte at the end
   683  0000                     
   684                           	psect	cinit
   685  002BC8                     __pcinit:
   686                           	opt stack 0
   687  002BC8                     start_initialization:
   688                           	opt stack 0
   689  002BC8                     __initialization:
   690                           	opt stack 0
   691                           
   692                           ; Initialize objects allocated to BANK0 (16 bytes)
   693                           ; load TBLPTR registers with __pidataBANK0
   694  002BC8  0E66               	movlw	low __pidataBANK0
   695  002BCA  6EF6               	movwf	tblptrl,c
   696  002BCC  0E2E               	movlw	high __pidataBANK0
   697  002BCE  6EF7               	movwf	tblptrh,c
   698  002BD0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   699  002BD2  6EF8               	movwf	tblptru,c
   700  002BD4  EE00  F0E6         	lfsr	0,__pdataBANK0
   701  002BD8  EE10 F010          	lfsr	1,16
   702  002BDC                     copy_data0:
   703  002BDC  0009               	tblrd		*+
   704  002BDE  CFF5 FFEE          	movff	tablat,postinc0
   705  002BE2  50E5               	movf	postdec1,w,c
   706  002BE4  50E1               	movf	fsr1l,w,c
   707  002BE6  E1FA               	bnz	copy_data0
   708                           
   709                           ; Initialize objects allocated to COMRAM (6 bytes)
   710                           ; load TBLPTR registers with __pidataCOMRAM
   711  002BE8  0E76               	movlw	low __pidataCOMRAM
   712  002BEA  6EF6               	movwf	tblptrl,c
   713  002BEC  0E2E               	movlw	high __pidataCOMRAM
   714  002BEE  6EF7               	movwf	tblptrh,c
   715  002BF0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   716  002BF2  6EF8               	movwf	tblptru,c
   717  002BF4  EE00  F057         	lfsr	0,__pdataCOMRAM
   718  002BF8  EE10 F006          	lfsr	1,6
   719  002BFC                     copy_data1:
   720  002BFC  0009               	tblrd		*+
   721  002BFE  CFF5 FFEE          	movff	tablat,postinc0
   722  002C02  50E5               	movf	postdec1,w,c
   723  002C04  50E1               	movf	fsr1l,w,c
   724  002C06  E1FA               	bnz	copy_data1
   725                           
   726                           ; Clear objects allocated to BANK1 (95 bytes)
   727  002C08  EE01  F000         	lfsr	0,__pbssBANK1
   728  002C0C  0E5F               	movlw	95
   729  002C0E                     clear_0:
   730  002C0E  6AEE               	clrf	postinc0,c
   731  002C10  06E8               	decf	wreg,f,c
   732  002C12  E1FD               	bnz	clear_0
   733                           
   734                           ; Clear objects allocated to BANK0 (49 bytes)
   735  002C14  EE00  F0B5         	lfsr	0,__pbssBANK0
   736  002C18  0E31               	movlw	49
   737  002C1A                     clear_1:
   738  002C1A  6AEE               	clrf	postinc0,c
   739  002C1C  06E8               	decf	wreg,f,c
   740  002C1E  E1FD               	bnz	clear_1
   741                           
   742                           ; Clear objects allocated to COMRAM (27 bytes)
   743  002C20  EE00  F03C         	lfsr	0,__pbssCOMRAM
   744  002C24  0E1B               	movlw	27
   745  002C26                     clear_2:
   746  002C26  6AEE               	clrf	postinc0,c
   747  002C28  06E8               	decf	wreg,f,c
   748  002C2A  E1FD               	bnz	clear_2
   749  002C2C                     end_of_initialization:
   750                           	opt stack 0
   751  002C2C                     __end_of__initialization:
   752                           	opt stack 0
   753  002C2C  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   754  002C2E  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   755  002C30  0E00               	movlw	low (__Lmediumconst shr (0+16))
   756  002C32  6EF8               	movwf	tblptru,c
   757  002C34  0100               	movlb	0
   758  002C36  EFEC  F006         	goto	_main	;jump to C main() function
   759                           tblptru	equ	0xFF8
   760                           tblptrh	equ	0xFF7
   761                           tblptrl	equ	0xFF6
   762                           tablat	equ	0xFF5
   763                           postinc0	equ	0xFEE
   764                           wreg	equ	0xFE8
   765                           postdec1	equ	0xFE5
   766                           fsr1l	equ	0xFE1
   767                           
   768                           	psect	bssCOMRAM
   769  00003C                     __pbssCOMRAM:
   770                           	opt stack 0
   771  00003C                     _NORMAL:
   772                           	opt stack 0
   773  00003C                     	ds	2
   774  00003E                     _conversionadc:
   775                           	opt stack 0
   776  00003E                     	ds	2
   777  000040                     _enter:
   778                           	opt stack 0
   779  000040                     	ds	2
   780  000042                     _i:
   781                           	opt stack 0
   782  000042                     	ds	2
   783  000044                     _led:
   784                           	opt stack 0
   785  000044                     	ds	2
   786  000046                     _modoestado:
   787                           	opt stack 0
   788  000046                     	ds	2
   789  000048                     _muestreo:
   790                           	opt stack 0
   791  000048                     	ds	2
   792  00004A                     _promedio:
   793                           	opt stack 0
   794  00004A                     	ds	2
   795  00004C                     _resultadoadc:
   796                           	opt stack 0
   797  00004C                     	ds	2
   798  00004E                     _suma0:
   799                           	opt stack 0
   800  00004E                     	ds	2
   801  000050                     _suma1:
   802                           	opt stack 0
   803  000050                     	ds	2
   804  000052                     _suma2:
   805                           	opt stack 0
   806  000052                     	ds	2
   807  000054                     _tama:
   808                           	opt stack 0
   809  000054                     	ds	2
   810  000056                     _dato:
   811                           	opt stack 0
   812  000056                     	ds	1
   813                           tblptru	equ	0xFF8
   814                           tblptrh	equ	0xFF7
   815                           tblptrl	equ	0xFF6
   816                           tablat	equ	0xFF5
   817                           postinc0	equ	0xFEE
   818                           wreg	equ	0xFE8
   819                           postdec1	equ	0xFE5
   820                           fsr1l	equ	0xFE1
   821                           
   822                           	psect	dataCOMRAM
   823  000057                     __pdataCOMRAM:
   824                           	opt stack 0
   825  000057                     _RAPIDO:
   826                           	opt stack 0
   827  000057                     	ds	2
   828  000059                     _tmues:
   829                           	opt stack 0
   830  000059                     	ds	2
   831  00005B                     _tvis:
   832                           	opt stack 0
   833  00005B                     	ds	2
   834                           tblptru	equ	0xFF8
   835                           tblptrh	equ	0xFF7
   836                           tblptrl	equ	0xFF6
   837                           tablat	equ	0xFF5
   838                           postinc0	equ	0xFEE
   839                           wreg	equ	0xFE8
   840                           postdec1	equ	0xFE5
   841                           fsr1l	equ	0xFE1
   842                           
   843                           	psect	bssBANK0
   844  0000B5                     __pbssBANK0:
   845                           	opt stack 0
   846  0000B5                     _bin:
   847                           	opt stack 0
   848  0000B5                     	ds	10
   849  0000BF                     _promediovolt1:
   850                           	opt stack 0
   851  0000BF                     	ds	3
   852  0000C2                     _a:
   853                           	opt stack 0
   854  0000C2                     	ds	2
   855  0000C4                     _b:
   856                           	opt stack 0
   857  0000C4                     	ds	2
   858  0000C6                     _d:
   859                           	opt stack 0
   860  0000C6                     	ds	2
   861  0000C8                     _e:
   862                           	opt stack 0
   863  0000C8                     	ds	2
   864  0000CA                     _g:
   865                           	opt stack 0
   866  0000CA                     	ds	2
   867  0000CC                     _h0:
   868                           	opt stack 0
   869  0000CC                     	ds	2
   870  0000CE                     _h1:
   871                           	opt stack 0
   872  0000CE                     	ds	2
   873  0000D0                     _h2:
   874                           	opt stack 0
   875  0000D0                     	ds	2
   876  0000D2                     _modo:
   877                           	opt stack 0
   878  0000D2                     	ds	2
   879  0000D4                     _n:
   880                           	opt stack 0
   881  0000D4                     	ds	2
   882  0000D6                     _promedio1:
   883                           	opt stack 0
   884  0000D6                     	ds	2
   885  0000D8                     _promedio2:
   886                           	opt stack 0
   887  0000D8                     	ds	2
   888  0000DA                     _promedio3:
   889                           	opt stack 0
   890  0000DA                     	ds	2
   891  0000DC                     _promediovolt2:
   892                           	opt stack 0
   893  0000DC                     	ds	2
   894  0000DE                     _promediovolt3:
   895                           	opt stack 0
   896  0000DE                     	ds	2
   897  0000E0                     _tvisualizacion:
   898                           	opt stack 0
   899  0000E0                     	ds	2
   900  0000E2                     _unSegundo:
   901                           	opt stack 0
   902  0000E2                     	ds	2
   903  0000E4                     _visualizacion:
   904                           	opt stack 0
   905  0000E4                     	ds	2
   906                           tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           postinc0	equ	0xFEE
   911                           wreg	equ	0xFE8
   912                           postdec1	equ	0xFE5
   913                           fsr1l	equ	0xFE1
   914                           
   915                           	psect	dataBANK0
   916  0000E6                     __pdataBANK0:
   917                           	opt stack 0
   918  0000E6                     _binnum:
   919                           	opt stack 0
   920  0000E6                     	ds	2
   921  0000E8                     _info:
   922                           	opt stack 0
   923  0000E8                     	ds	2
   924  0000EA                     _muestreo1:
   925                           	opt stack 0
   926  0000EA                     	ds	2
   927  0000EC                     _muestreo2:
   928                           	opt stack 0
   929  0000EC                     	ds	2
   930  0000EE                     _muestreo3:
   931                           	opt stack 0
   932  0000EE                     	ds	2
   933  0000F0                     _visualizacion1:
   934                           	opt stack 0
   935  0000F0                     	ds	2
   936  0000F2                     _visualizacion2:
   937                           	opt stack 0
   938  0000F2                     	ds	2
   939  0000F4                     _visualizacion3:
   940                           	opt stack 0
   941  0000F4                     	ds	2
   942                           tblptru	equ	0xFF8
   943                           tblptrh	equ	0xFF7
   944                           tblptrl	equ	0xFF6
   945                           tablat	equ	0xFF5
   946                           postinc0	equ	0xFEE
   947                           wreg	equ	0xFE8
   948                           postdec1	equ	0xFE5
   949                           fsr1l	equ	0xFE1
   950                           
   951                           	psect	bssBANK1
   952  000100                     __pbssBANK1:
   953                           	opt stack 0
   954  000100                     _tam:
   955                           	opt stack 0
   956  000100                     	ds	40
   957  000128                     _salida:
   958                           	opt stack 0
   959  000128                     	ds	30
   960  000146                     _comando:
   961                           	opt stack 0
   962  000146                     	ds	25
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           postdec1	equ	0xFE5
   970                           fsr1l	equ	0xFE1
   971                           
   972                           	psect	cstackBANK1
   973  00015F                     __pcstackBANK1:
   974                           	opt stack 0
   975  00015F                     _sprintf$2073:
   976                           	opt stack 0
   977                           
   978                           ; 3 bytes @ 0x0
   979  00015F                     	ds	3
   980  000162                     sprintf@idx:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0x3
   984  000162                     	ds	1
   985  000163                     sprintf@ap:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x4
   989  000163                     	ds	2
   990  000165                     sprintf@prec:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x6
   994  000165                     	ds	2
   995  000167                     sprintf@tmpval:
   996                           	opt stack 0
   997                           
   998                           ; 4 bytes @ 0x8
   999  000167                     	ds	4
  1000  00016B                     sprintf@width:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0xC
  1004  00016B                     	ds	2
  1005  00016D                     sprintf@exp:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0xE
  1009  00016D                     	ds	2
  1010  00016F                     sprintf@val:
  1011                           	opt stack 0
  1012                           
  1013                           ; 4 bytes @ 0x10
  1014  00016F                     	ds	4
  1015  000173                     sprintf@flag:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x14
  1019  000173                     	ds	2
  1020  000175                     sprintf@fval:
  1021                           	opt stack 0
  1022                           
  1023                           ; 3 bytes @ 0x16
  1024  000175                     	ds	3
  1025  000178                     sprintf@c:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x19
  1029  000178                     	ds	1
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           tblptrl	equ	0xFF6
  1033                           tablat	equ	0xFF5
  1034                           postinc0	equ	0xFEE
  1035                           wreg	equ	0xFE8
  1036                           postdec1	equ	0xFE5
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	cstackBANK0
  1040  000080                     __pcstackBANK0:
  1041                           	opt stack 0
  1042  000080                     ??___ftmul:
  1043                           
  1044                           ; 1 bytes @ 0x0
  1045  000080                     	ds	3
  1046  000083                     ___ftmul@exp:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x3
  1050  000083                     	ds	1
  1051  000084                     ___ftmul@f3_as_product:
  1052                           	opt stack 0
  1053                           
  1054                           ; 3 bytes @ 0x4
  1055  000084                     	ds	3
  1056  000087                     ___ftmul@cntr:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x7
  1060  000087                     	ds	1
  1061  000088                     ___ftmul@sign:
  1062                           	opt stack 0
  1063                           
  1064                           ; 1 bytes @ 0x8
  1065  000088                     	ds	1
  1066  000089                     ?___ftdiv:
  1067                           	opt stack 0
  1068  000089                     ?_fround:
  1069                           	opt stack 0
  1070  000089                     ?_scale:
  1071                           	opt stack 0
  1072  000089                     ___ftdiv@f1:
  1073                           	opt stack 0
  1074                           
  1075                           ; 3 bytes @ 0x9
  1076  000089                     	ds	3
  1077  00008C                     ___ftdiv@f2:
  1078                           	opt stack 0
  1079  00008C                     _fround$2071:
  1080                           	opt stack 0
  1081  00008C                     _scale$2072:
  1082                           	opt stack 0
  1083                           
  1084                           ; 3 bytes @ 0xC
  1085  00008C                     	ds	3
  1086  00008F                     ??___ftdiv:
  1087  00008F                     scale@scl:
  1088                           	opt stack 0
  1089  00008F                     _fround$2070:
  1090                           	opt stack 0
  1091                           
  1092                           ; 3 bytes @ 0xF
  1093  00008F                     	ds	1
  1094  000090                     ?___fttol:
  1095                           	opt stack 0
  1096  000090                     ___fttol@f1:
  1097                           	opt stack 0
  1098                           
  1099                           ; 3 bytes @ 0x10
  1100  000090                     	ds	2
  1101  000092                     fround@prec:
  1102                           	opt stack 0
  1103  000092                     ___ftdiv@cntr:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x12
  1107  000092                     	ds	1
  1108  000093                     ?___ftadd:
  1109                           	opt stack 0
  1110  000093                     ___ftadd@f1:
  1111                           	opt stack 0
  1112  000093                     ___ftdiv@f3:
  1113                           	opt stack 0
  1114                           
  1115                           ; 3 bytes @ 0x13
  1116  000093                     	ds	1
  1117  000094                     ??___fttol:
  1118                           
  1119                           ; 1 bytes @ 0x14
  1120  000094                     	ds	2
  1121  000096                     ___ftdiv@exp:
  1122                           	opt stack 0
  1123  000096                     ___ftadd@f2:
  1124                           	opt stack 0
  1125                           
  1126                           ; 3 bytes @ 0x16
  1127  000096                     	ds	1
  1128  000097                     ___ftdiv@sign:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0x17
  1132  000097                     	ds	2
  1133  000099                     ??___ftadd:
  1134  000099                     ___fttol@sign1:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x19
  1138  000099                     	ds	1
  1139  00009A                     ___fttol@lval:
  1140                           	opt stack 0
  1141                           
  1142                           ; 4 bytes @ 0x1A
  1143  00009A                     	ds	2
  1144  00009C                     ___ftadd@sign:
  1145                           	opt stack 0
  1146                           
  1147                           ; 1 bytes @ 0x1C
  1148  00009C                     	ds	1
  1149  00009D                     ___ftadd@exp2:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x1D
  1153  00009D                     	ds	1
  1154  00009E                     ___ftadd@exp1:
  1155                           	opt stack 0
  1156  00009E                     ___fttol@exp1:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x1E
  1160  00009E                     	ds	1
  1161  00009F                     ?___ftsub:
  1162                           	opt stack 0
  1163  00009F                     ___ftsub@f1:
  1164                           	opt stack 0
  1165                           
  1166                           ; 3 bytes @ 0x1F
  1167  00009F                     	ds	3
  1168  0000A2                     ___ftsub@f2:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0x22
  1172  0000A2                     	ds	3
  1173  0000A5                     ?_sprintf:
  1174                           	opt stack 0
  1175  0000A5                     sprintf@sp:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x25
  1179  0000A5                     	ds	2
  1180  0000A7                     sprintf@f:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x27
  1184  0000A7                     	ds	5
  1185  0000AC                     ??_sprintf:
  1186                           
  1187                           ; 1 bytes @ 0x2C
  1188  0000AC                     	ds	6
  1189  0000B2                     ??_main:
  1190                           
  1191                           ; 1 bytes @ 0x32
  1192  0000B2                     	ds	3
  1193                           tblptru	equ	0xFF8
  1194                           tblptrh	equ	0xFF7
  1195                           tblptrl	equ	0xFF6
  1196                           tablat	equ	0xFF5
  1197                           postinc0	equ	0xFEE
  1198                           wreg	equ	0xFE8
  1199                           postdec1	equ	0xFE5
  1200                           fsr1l	equ	0xFE1
  1201                           
  1202                           	psect	cstackCOMRAM
  1203  000001                     __pcstackCOMRAM:
  1204                           	opt stack 0
  1205  000001                     ??_high_isr:
  1206  000001                     
  1207                           ; 1 bytes @ 0x0
  1208  000001                     	ds	16
  1209  000011                     ??_low_isr:
  1210                           
  1211                           ; 1 bytes @ 0x10
  1212  000011                     	ds	17
  1213  000022                     ??_isdigit:
  1214  000022                     ?_strcmp:
  1215                           	opt stack 0
  1216  000022                     ?___awmod:
  1217                           	opt stack 0
  1218  000022                     ?___ftpack:
  1219                           	opt stack 0
  1220  000022                     ?___ftneg:
  1221                           	opt stack 0
  1222  000022                     ?__tdiv_to_l_:
  1223                           	opt stack 0
  1224  000022                     ?__div_to_l_:
  1225                           	opt stack 0
  1226  000022                     ?___lldiv:
  1227                           	opt stack 0
  1228  000022                     ledestado@tiempoled:
  1229                           	opt stack 0
  1230  000022                     enviarTrama@datos:
  1231                           	opt stack 0
  1232  000022                     enviarTramaSE@datos:
  1233                           	opt stack 0
  1234  000022                     InitApp@i:
  1235                           	opt stack 0
  1236  000022                     ___awmod@dividend:
  1237                           	opt stack 0
  1238  000022                     strcmp@s1:
  1239                           	opt stack 0
  1240  000022                     __div_to_l_@f1:
  1241                           	opt stack 0
  1242  000022                     ___ftpack@arg:
  1243                           	opt stack 0
  1244  000022                     __tdiv_to_l_@f1:
  1245                           	opt stack 0
  1246  000022                     ___ftge@ff1:
  1247                           	opt stack 0
  1248  000022                     ___ftneg@f1:
  1249                           	opt stack 0
  1250  000022                     ___lldiv@dividend:
  1251                           	opt stack 0
  1252                           
  1253                           ; 4 bytes @ 0x21
  1254  000022                     	ds	1
  1255  000023                     _isdigit$1743:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x22
  1259  000023                     	ds	1
  1260  000024                     ??_ledestado:
  1261  000024                     isdigit@c:
  1262                           	opt stack 0
  1263  000024                     ___awmod@divisor:
  1264                           	opt stack 0
  1265  000024                     strcmp@s2:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x23
  1269  000024                     	ds	1
  1270  000025                     ___ftpack@exp:
  1271                           	opt stack 0
  1272  000025                     __div_to_l_@f2:
  1273                           	opt stack 0
  1274  000025                     __tdiv_to_l_@f2:
  1275                           	opt stack 0
  1276  000025                     ___ftge@ff2:
  1277                           	opt stack 0
  1278                           
  1279                           ; 3 bytes @ 0x24
  1280  000025                     	ds	1
  1281  000026                     ??_strcmp:
  1282  000026                     ___awmod@counter:
  1283                           	opt stack 0
  1284  000026                     ___ftpack@sign:
  1285                           	opt stack 0
  1286  000026                     ___lldiv@divisor:
  1287                           	opt stack 0
  1288                           
  1289                           ; 4 bytes @ 0x25
  1290  000026                     	ds	1
  1291  000027                     ??___ftpack:
  1292  000027                     ___awmod@sign:
  1293                           	opt stack 0
  1294  000027                     strcmp@r:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x26
  1298  000027                     	ds	1
  1299  000028                     ??__tdiv_to_l_:
  1300  000028                     ??___ftge:
  1301  000028                     ?___awdiv:
  1302                           	opt stack 0
  1303  000028                     ___awdiv@dividend:
  1304                           	opt stack 0
  1305  000028                     __div_to_l_@quot:
  1306                           	opt stack 0
  1307                           
  1308                           ; 4 bytes @ 0x27
  1309  000028                     	ds	2
  1310  00002A                     ?___awtoft:
  1311                           	opt stack 0
  1312  00002A                     ?___lltoft:
  1313                           	opt stack 0
  1314  00002A                     ___awdiv@divisor:
  1315                           	opt stack 0
  1316  00002A                     ___awtoft@c:
  1317                           	opt stack 0
  1318  00002A                     ___lldiv@quotient:
  1319                           	opt stack 0
  1320  00002A                     ___lltoft@c:
  1321                           	opt stack 0
  1322                           
  1323                           ; 4 bytes @ 0x29
  1324  00002A                     	ds	1
  1325  00002B                     __tdiv_to_l_@quot:
  1326                           	opt stack 0
  1327                           
  1328                           ; 4 bytes @ 0x2A
  1329  00002B                     	ds	1
  1330  00002C                     ___awdiv@counter:
  1331                           	opt stack 0
  1332  00002C                     __div_to_l_@cntr:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x2B
  1336  00002C                     	ds	1
  1337  00002D                     ___awdiv@sign:
  1338                           	opt stack 0
  1339  00002D                     ___awtoft@sign:
  1340                           	opt stack 0
  1341  00002D                     __div_to_l_@exp1:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x2C
  1345  00002D                     	ds	1
  1346  00002E                     ??___lltoft:
  1347  00002E                     ___lldiv@counter:
  1348                           	opt stack 0
  1349  00002E                     ___awdiv@quotient:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x2D
  1353  00002E                     	ds	1
  1354  00002F                     ?___llmod:
  1355                           	opt stack 0
  1356  00002F                     __tdiv_to_l_@cntr:
  1357                           	opt stack 0
  1358  00002F                     ___llmod@dividend:
  1359                           	opt stack 0
  1360                           
  1361                           ; 4 bytes @ 0x2E
  1362  00002F                     	ds	1
  1363  000030                     ?_conversionADMues:
  1364                           	opt stack 0
  1365  000030                     ?___wmul:
  1366                           	opt stack 0
  1367  000030                     __tdiv_to_l_@exp1:
  1368                           	opt stack 0
  1369  000030                     conversionADMues@canal:
  1370                           	opt stack 0
  1371  000030                     ___wmul@multiplier:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x2F
  1375  000030                     	ds	2
  1376  000032                     ___lltoft@exp:
  1377                           	opt stack 0
  1378  000032                     conversionADMues@i:
  1379                           	opt stack 0
  1380  000032                     ___wmul@multiplicand:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x31
  1384  000032                     	ds	1
  1385  000033                     ___llmod@divisor:
  1386                           	opt stack 0
  1387                           
  1388                           ; 4 bytes @ 0x32
  1389  000033                     	ds	1
  1390  000034                     conversionADMues@i_608:
  1391                           	opt stack 0
  1392  000034                     ___wmul@product:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x33
  1396  000034                     	ds	2
  1397  000036                     ?___ftmul:
  1398                           	opt stack 0
  1399  000036                     conversionADMues@i_609:
  1400                           	opt stack 0
  1401  000036                     ___ftmul@f1:
  1402                           	opt stack 0
  1403                           
  1404                           ; 3 bytes @ 0x35
  1405  000036                     	ds	1
  1406  000037                     ___llmod@counter:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x36
  1410  000037                     	ds	2
  1411  000039                     ___ftmul@f2:
  1412                           	opt stack 0
  1413                           
  1414                           ; 3 bytes @ 0x38
  1415  000039                     	ds	3
  1416  00003C                     tblptru	equ	0xFF8
  1417                           tblptrh	equ	0xFF7
  1418                           tblptrl	equ	0xFF6
  1419                           tablat	equ	0xFF5
  1420                           postinc0	equ	0xFEE
  1421                           wreg	equ	0xFE8
  1422                           postdec1	equ	0xFE5
  1423                           fsr1l	equ	0xFE1
  1424                           
  1425                           ; 1 bytes @ 0x3B
  1426 ;;
  1427 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1428 ;;
  1429 ;; *************** function _main *****************
  1430 ;; Defined at:
  1431 ;;		line 103 in file "main.c"
  1432 ;; Parameters:    Size  Location     Type
  1433 ;;		None
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;		None
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  1    wreg      void 
  1438 ;; Registers used:
  1439 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1445 ;;      Params:         0       0       0       0       0       0       0
  1446 ;;      Locals:         0       0       0       0       0       0       0
  1447 ;;      Temps:          0       3       0       0       0       0       0
  1448 ;;      Totals:         0       3       0       0       0       0       0
  1449 ;;Total ram usage:        3 bytes
  1450 ;; Hardware stack levels required when called:    6
  1451 ;; This function calls:
  1452 ;;		_ConfigureOscillator
  1453 ;;		_InitApp
  1454 ;;		___awtoft
  1455 ;;		___ftdiv
  1456 ;;		___ftmul
  1457 ;;		___wmul
  1458 ;;		_conversionADMues
  1459 ;;		_enviarTrama
  1460 ;;		_enviarTramaSE
  1461 ;;		_ledestado
  1462 ;;		_sprintf
  1463 ;;		_strcmp
  1464 ;; This function is called by:
  1465 ;;		Startup code after reset
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469                           	psect	text0
  1470  000DD8                     __ptext0:
  1471                           	opt stack 0
  1472  000DD8                     _main:
  1473                           	opt stack 0
  1474  000DD8  FFFF               	dw	65535	; assembler added errata NOP
  1475                           
  1476                           ;main.c: 105: ConfigureOscillator();
  1477                           
  1478                           ;incstack = 0
  1479  000DDA  EC3E  F017         	call	_ConfigureOscillator	;wreg free
  1480                           
  1481                           ;main.c: 108: InitApp();
  1482  000DDE  EC85  F013         	call	_InitApp	;wreg free
  1483                           
  1484                           ;main.c: 111: enviarTrama(saludo);
  1485  000DE2  0EAB               	movlw	low _saludo
  1486  000DE4  6E22               	movwf	enviarTrama@datos,c
  1487  000DE6  0E7E               	movlw	high _saludo
  1488  000DE8  6E23               	movwf	enviarTrama@datos+1,c
  1489  000DEA  EC6E  F015         	call	_enviarTrama	;wreg free
  1490  000DEE                     l5104:
  1491  000DEE  FFFF               	dw	65535	; assembler added errata NOP
  1492                           
  1493                           ;main.c: 113: if (led == 1 && modoestado == 1) {
  1494  000DF0  0444               	decf	_led,w,c
  1495  000DF2  1045               	iorwf	_led+1,w,c
  1496  000DF4  A4D8               	btfss	status,2,c
  1497  000DF6  D00A               	goto	l5110
  1498  000DF8  0446               	decf	_modoestado,w,c
  1499  000DFA  1047               	iorwf	_modoestado+1,w,c
  1500  000DFC  A4D8               	btfss	status,2,c
  1501  000DFE  D006               	goto	l5110
  1502                           
  1503                           ;main.c: 114: ledestado(10);
  1504  000E00  0E00               	movlw	0
  1505  000E02  6E23               	movwf	ledestado@tiempoled+1,c
  1506  000E04  0E0A               	movlw	10
  1507  000E06  6E22               	movwf	ledestado@tiempoled,c
  1508  000E08  ECC1  F016         	call	_ledestado	;wreg free
  1509  000E0C                     l5110:
  1510  000E0C  FFFF               	dw	65535	; assembler added errata NOP
  1511                           
  1512                           ;main.c: 115: }
  1513                           ;main.c: 116: if (led == 1 && modoestado == 0) {
  1514  000E0E  0444               	decf	_led,w,c
  1515  000E10  1045               	iorwf	_led+1,w,c
  1516  000E12  A4D8               	btfss	status,2,c
  1517  000E14  D00A               	goto	l5116
  1518  000E16  5046               	movf	_modoestado,w,c
  1519  000E18  1047               	iorwf	_modoestado+1,w,c
  1520  000E1A  A4D8               	btfss	status,2,c
  1521  000E1C  D006               	goto	l5116
  1522                           
  1523                           ;main.c: 117: ledestado(5);
  1524  000E1E  0E00               	movlw	0
  1525  000E20  6E23               	movwf	ledestado@tiempoled+1,c
  1526  000E22  0E05               	movlw	5
  1527  000E24  6E22               	movwf	ledestado@tiempoled,c
  1528  000E26  ECC1  F016         	call	_ledestado	;wreg free
  1529  000E2A                     l5116:
  1530  000E2A  FFFF               	dw	65535	; assembler added errata NOP
  1531                           
  1532                           ;main.c: 118: }
  1533                           ;main.c: 119: if (enter == 1) {
  1534  000E2C  0440               	decf	_enter,w,c
  1535  000E2E  1041               	iorwf	_enter+1,w,c
  1536  000E30  A4D8               	btfss	status,2,c
  1537  000E32  D122               	goto	l5184
  1538                           
  1539                           ;main.c: 120: enviarTrama(comando);
  1540  000E34  0E46               	movlw	low _comando
  1541  000E36  6E22               	movwf	enviarTrama@datos,c
  1542  000E38  0E01               	movlw	high _comando
  1543  000E3A  6E23               	movwf	enviarTrama@datos+1,c
  1544  000E3C  EC6E  F015         	call	_enviarTrama	;wreg free
  1545                           
  1546                           ;main.c: 121: if (tama == 10) {
  1547  000E40  0E0A               	movlw	10
  1548  000E42  1854               	xorwf	_tama,w,c
  1549  000E44  1055               	iorwf	_tama+1,w,c
  1550  000E46  A4D8               	btfss	status,2,c
  1551  000E48  D01D               	goto	l5124
  1552                           
  1553                           ;main.c: 122: NORMAL = strcmp(comando, MODONORMAL);
  1554  000E4A  0E46               	movlw	low _comando
  1555  000E4C  6E22               	movwf	strcmp@s1,c
  1556  000E4E  0E01               	movlw	high _comando
  1557  000E50  6E23               	movwf	strcmp@s1+1,c
  1558  000E52  0E68               	movlw	low _MODONORMAL
  1559  000E54  6E24               	movwf	strcmp@s2,c
  1560  000E56  0E7F               	movlw	high _MODONORMAL
  1561  000E58  6E25               	movwf	strcmp@s2+1,c
  1562  000E5A  EC4F  F016         	call	_strcmp	;wreg free
  1563  000E5E  C022  F03C         	movff	?_strcmp,_NORMAL
  1564  000E62  C023  F03D         	movff	?_strcmp+1,_NORMAL+1
  1565                           
  1566                           ;main.c: 123: RAPIDO = strcmp(comando, MODORAPIDO);
  1567  000E66  0E46               	movlw	low _comando
  1568  000E68  6E22               	movwf	strcmp@s1,c
  1569  000E6A  0E01               	movlw	high _comando
  1570  000E6C  6E23               	movwf	strcmp@s1+1,c
  1571  000E6E  0E73               	movlw	low _MODORAPIDO
  1572  000E70  6E24               	movwf	strcmp@s2,c
  1573  000E72  0E7F               	movlw	high _MODORAPIDO
  1574  000E74  6E25               	movwf	strcmp@s2+1,c
  1575  000E76  EC4F  F016         	call	_strcmp	;wreg free
  1576  000E7A  C022  F057         	movff	?_strcmp,_RAPIDO
  1577  000E7E  C023  F058         	movff	?_strcmp+1,_RAPIDO+1
  1578                           
  1579                           ;main.c: 125: } else if (tama == 9) {
  1580  000E82  D07E               	goto	l5138
  1581  000E84                     l5124:
  1582  000E84  FFFF               	dw	65535	; assembler added errata NOP
  1583  000E86  0E09               	movlw	9
  1584  000E88  1854               	xorwf	_tama,w,c
  1585  000E8A  1055               	iorwf	_tama+1,w,c
  1586  000E8C  A4D8               	btfss	status,2,c
  1587  000E8E  D02B               	goto	l5128
  1588                           
  1589                           ;main.c: 126: muestreo1 = strcmp(comando, MUESTREO1);
  1590  000E90  0E46               	movlw	low _comando
  1591  000E92  6E22               	movwf	strcmp@s1,c
  1592  000E94  0E01               	movlw	high _comando
  1593  000E96  6E23               	movwf	strcmp@s1+1,c
  1594  000E98  0E7E               	movlw	low _MUESTREO1
  1595  000E9A  6E24               	movwf	strcmp@s2,c
  1596  000E9C  0E7F               	movlw	high _MUESTREO1
  1597  000E9E  6E25               	movwf	strcmp@s2+1,c
  1598  000EA0  EC4F  F016         	call	_strcmp	;wreg free
  1599  000EA4  C022  F0EA         	movff	?_strcmp,_muestreo1
  1600  000EA8  C023  F0EB         	movff	?_strcmp+1,_muestreo1+1
  1601                           
  1602                           ;main.c: 127: muestreo2 = strcmp(comando, MUESTREO2);
  1603  000EAC  0E46               	movlw	low _comando
  1604  000EAE  6E22               	movwf	strcmp@s1,c
  1605  000EB0  0E01               	movlw	high _comando
  1606  000EB2  6E23               	movwf	strcmp@s1+1,c
  1607  000EB4  0E88               	movlw	low _MUESTREO2
  1608  000EB6  6E24               	movwf	strcmp@s2,c
  1609  000EB8  0E7F               	movlw	high _MUESTREO2
  1610  000EBA  6E25               	movwf	strcmp@s2+1,c
  1611  000EBC  EC4F  F016         	call	_strcmp	;wreg free
  1612  000EC0  C022  F0EC         	movff	?_strcmp,_muestreo2
  1613  000EC4  C023  F0ED         	movff	?_strcmp+1,_muestreo2+1
  1614                           
  1615                           ;main.c: 128: muestreo3 = strcmp(comando, MUESTREO3);
  1616  000EC8  0E46               	movlw	low _comando
  1617  000ECA  6E22               	movwf	strcmp@s1,c
  1618  000ECC  0E01               	movlw	high _comando
  1619  000ECE  6E23               	movwf	strcmp@s1+1,c
  1620  000ED0  0E92               	movlw	low _MUESTREO3
  1621  000ED2  6E24               	movwf	strcmp@s2,c
  1622  000ED4  0E7F               	movlw	high _MUESTREO3
  1623  000ED6  6E25               	movwf	strcmp@s2+1,c
  1624  000ED8  EC4F  F016         	call	_strcmp	;wreg free
  1625  000EDC  C022  F0EE         	movff	?_strcmp,_muestreo3
  1626  000EE0  C023  F0EF         	movff	?_strcmp+1,_muestreo3+1
  1627                           
  1628                           ;main.c: 130: } else if (tama == 14) {
  1629  000EE4  D04D               	goto	l5138
  1630  000EE6                     l5128:
  1631  000EE6  FFFF               	dw	65535	; assembler added errata NOP
  1632  000EE8  0E0E               	movlw	14
  1633  000EEA  1854               	xorwf	_tama,w,c
  1634  000EEC  1055               	iorwf	_tama+1,w,c
  1635  000EEE  A4D8               	btfss	status,2,c
  1636  000EF0  D02B               	goto	l5132
  1637                           
  1638                           ;main.c: 131: visualizacion1 = strcmp(comando, VISUALIZACION1);
  1639  000EF2  0E46               	movlw	low _comando
  1640  000EF4  6E22               	movwf	strcmp@s1,c
  1641  000EF6  0E01               	movlw	high _comando
  1642  000EF8  6E23               	movwf	strcmp@s1+1,c
  1643  000EFA  0E3B               	movlw	low _VISUALIZACION1
  1644  000EFC  6E24               	movwf	strcmp@s2,c
  1645  000EFE  0E7F               	movlw	high _VISUALIZACION1
  1646  000F00  6E25               	movwf	strcmp@s2+1,c
  1647  000F02  EC4F  F016         	call	_strcmp	;wreg free
  1648  000F06  C022  F0F0         	movff	?_strcmp,_visualizacion1
  1649  000F0A  C023  F0F1         	movff	?_strcmp+1,_visualizacion1+1
  1650                           
  1651                           ;main.c: 132: visualizacion2 = strcmp(comando, VISUALIZACION2);
  1652  000F0E  0E46               	movlw	low _comando
  1653  000F10  6E22               	movwf	strcmp@s1,c
  1654  000F12  0E01               	movlw	high _comando
  1655  000F14  6E23               	movwf	strcmp@s1+1,c
  1656  000F16  0E4A               	movlw	low _VISUALIZACION2
  1657  000F18  6E24               	movwf	strcmp@s2,c
  1658  000F1A  0E7F               	movlw	high _VISUALIZACION2
  1659  000F1C  6E25               	movwf	strcmp@s2+1,c
  1660  000F1E  EC4F  F016         	call	_strcmp	;wreg free
  1661  000F22  C022  F0F2         	movff	?_strcmp,_visualizacion2
  1662  000F26  C023  F0F3         	movff	?_strcmp+1,_visualizacion2+1
  1663                           
  1664                           ;main.c: 133: visualizacion3 = strcmp(comando, VISUALIZACION3);
  1665  000F2A  0E46               	movlw	low _comando
  1666  000F2C  6E22               	movwf	strcmp@s1,c
  1667  000F2E  0E01               	movlw	high _comando
  1668  000F30  6E23               	movwf	strcmp@s1+1,c
  1669  000F32  0E59               	movlw	low _VISUALIZACION3
  1670  000F34  6E24               	movwf	strcmp@s2,c
  1671  000F36  0E7F               	movlw	high _VISUALIZACION3
  1672  000F38  6E25               	movwf	strcmp@s2+1,c
  1673  000F3A  EC4F  F016         	call	_strcmp	;wreg free
  1674  000F3E  C022  F0F4         	movff	?_strcmp,_visualizacion3
  1675  000F42  C023  F0F5         	movff	?_strcmp+1,_visualizacion3+1
  1676                           
  1677                           ;main.c: 135: } else if (tama == 4) {
  1678  000F46  D01C               	goto	l5138
  1679  000F48                     l5132:
  1680  000F48  FFFF               	dw	65535	; assembler added errata NOP
  1681  000F4A  0E04               	movlw	4
  1682  000F4C  1854               	xorwf	_tama,w,c
  1683  000F4E  1055               	iorwf	_tama+1,w,c
  1684  000F50  A4D8               	btfss	status,2,c
  1685  000F52  D00F               	goto	l5136
  1686                           
  1687                           ;main.c: 136: info = strcmp(comando, INFO);
  1688  000F54  0E46               	movlw	low _comando
  1689  000F56  6E22               	movwf	strcmp@s1,c
  1690  000F58  0E01               	movlw	high _comando
  1691  000F5A  6E23               	movwf	strcmp@s1+1,c
  1692  000F5C  0E9C               	movlw	low _INFO
  1693  000F5E  6E24               	movwf	strcmp@s2,c
  1694  000F60  0E7F               	movlw	high _INFO
  1695  000F62  6E25               	movwf	strcmp@s2+1,c
  1696  000F64  EC4F  F016         	call	_strcmp	;wreg free
  1697  000F68  C022  F0E8         	movff	?_strcmp,_info
  1698  000F6C  C023  F0E9         	movff	?_strcmp+1,_info+1
  1699                           
  1700                           ;main.c: 137: }
  1701  000F70  D007               	goto	l5138
  1702  000F72                     l5136:
  1703  000F72  FFFF               	dw	65535	; assembler added errata NOP
  1704                           
  1705                           ;main.c: 138: else {
  1706                           ;main.c: 139: enviarTrama(noreconocido);
  1707  000F74  0E12               	movlw	low _noreconocido
  1708  000F76  6E22               	movwf	enviarTrama@datos,c
  1709  000F78  0E7F               	movlw	high _noreconocido
  1710  000F7A  6E23               	movwf	enviarTrama@datos+1,c
  1711  000F7C  EC6E  F015         	call	_enviarTrama	;wreg free
  1712  000F80                     l5138:
  1713  000F80  FFFF               	dw	65535	; assembler added errata NOP
  1714                           
  1715                           ;main.c: 140: }
  1716                           ;main.c: 141: if (NORMAL != 0 && RAPIDO != 0) {
  1717  000F82  503C               	movf	_NORMAL,w,c
  1718  000F84  103D               	iorwf	_NORMAL+1,w,c
  1719  000F86  B4D8               	btfsc	status,2,c
  1720  000F88  D012               	goto	l5148
  1721  000F8A  5057               	movf	_RAPIDO,w,c
  1722  000F8C  1058               	iorwf	_RAPIDO+1,w,c
  1723  000F8E  B4D8               	btfsc	status,2,c
  1724  000F90  D00E               	goto	l5148
  1725                           
  1726                           ;main.c: 142: enviarTrama(noreconocido);
  1727  000F92  0E12               	movlw	low _noreconocido
  1728  000F94  6E22               	movwf	enviarTrama@datos,c
  1729  000F96  0E7F               	movlw	high _noreconocido
  1730  000F98  6E23               	movwf	enviarTrama@datos+1,c
  1731  000F9A  EC6E  F015         	call	_enviarTrama	;wreg free
  1732                           
  1733                           ;main.c: 143: NORMAL = 0 ;
  1734  000F9E  0E00               	movlw	0
  1735  000FA0  6E3D               	movwf	_NORMAL+1,c
  1736  000FA2  0E00               	movlw	0
  1737  000FA4  6E3C               	movwf	_NORMAL,c
  1738                           
  1739                           ;main.c: 144: RAPIDO = 1 ;
  1740  000FA6  0E00               	movlw	0
  1741  000FA8  6E58               	movwf	_RAPIDO+1,c
  1742  000FAA  0E01               	movlw	1
  1743  000FAC  6E57               	movwf	_RAPIDO,c
  1744  000FAE                     l5148:
  1745  000FAE  FFFF               	dw	65535	; assembler added errata NOP
  1746                           
  1747                           ;main.c: 145: }
  1748                           ;main.c: 146: for (i = 0; i < 25; i++) {
  1749  000FB0  0E00               	movlw	0
  1750  000FB2  6E43               	movwf	_i+1,c
  1751  000FB4  0E00               	movlw	0
  1752  000FB6  6E42               	movwf	_i,c
  1753  000FB8                     l5150:
  1754  000FB8  FFFF               	dw	65535	; assembler added errata NOP
  1755  000FBA  BE43               	btfsc	_i+1,7,c
  1756  000FBC  D006               	goto	l5154
  1757  000FBE  5043               	movf	_i+1,w,c
  1758  000FC0  E110               	bnz	l5160
  1759  000FC2  0E19               	movlw	25
  1760  000FC4  5C42               	subwf	_i,w,c
  1761  000FC6  B0D8               	btfsc	status,0,c
  1762  000FC8  D00C               	goto	l5160
  1763  000FCA                     l5154:
  1764  000FCA  FFFF               	dw	65535	; assembler added errata NOP
  1765                           
  1766                           ;main.c: 147: comando[i] = '\0';
  1767  000FCC  0E46               	movlw	low _comando
  1768  000FCE  2442               	addwf	_i,w,c
  1769  000FD0  6ED9               	movwf	fsr2l,c
  1770  000FD2  0E01               	movlw	high _comando
  1771  000FD4  2043               	addwfc	_i+1,w,c
  1772  000FD6  6EDA               	movwf	fsr2h,c
  1773  000FD8  0E00               	movlw	0
  1774  000FDA  6EDF               	movwf	indf2,c
  1775  000FDC  4A42               	infsnz	_i,f,c
  1776  000FDE  2A43               	incf	_i+1,f,c
  1777  000FE0  D7EB               	goto	l5150
  1778  000FE2                     l5160:
  1779  000FE2  FFFF               	dw	65535	; assembler added errata NOP
  1780                           
  1781                           ;main.c: 148: }
  1782                           ;main.c: 149: if (muestreo1 == 0) {
  1783  000FE4  0100               	movlb	0	; () banked
  1784  000FE6  51EA               	movf	_muestreo1& (0+255),w,b
  1785  000FE8  0100               	movlb	0	; () banked
  1786  000FEA  11EB               	iorwf	(_muestreo1+1)& (0+255),w,b
  1787  000FEC  A4D8               	btfss	status,2,c
  1788  000FEE  D004               	goto	l5164
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;main.c: 150: tmues = 10;
  1792  000FF0  0E00               	movlw	0
  1793  000FF2  6E5A               	movwf	_tmues+1,c
  1794  000FF4  0E0A               	movlw	10
  1795  000FF6  6E59               	movwf	_tmues,c
  1796  000FF8                     l5164:
  1797  000FF8  FFFF               	dw	65535	; assembler added errata NOP
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;main.c: 151: }
  1801                           ;main.c: 152: if (muestreo2 == 0) {
  1802  000FFA  0100               	movlb	0	; () banked
  1803  000FFC  51EC               	movf	_muestreo2& (0+255),w,b
  1804  000FFE  0100               	movlb	0	; () banked
  1805  001000  11ED               	iorwf	(_muestreo2+1)& (0+255),w,b
  1806  001002  A4D8               	btfss	status,2,c
  1807  001004  D004               	goto	l5168
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;main.c: 153: tmues = 12;
  1811  001006  0E00               	movlw	0
  1812  001008  6E5A               	movwf	_tmues+1,c
  1813  00100A  0E0C               	movlw	12
  1814  00100C  6E59               	movwf	_tmues,c
  1815  00100E                     l5168:
  1816  00100E  FFFF               	dw	65535	; assembler added errata NOP
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;main.c: 154: }
  1820                           ;main.c: 155: if (muestreo3 == 0) {
  1821  001010  0100               	movlb	0	; () banked
  1822  001012  51EE               	movf	_muestreo3& (0+255),w,b
  1823  001014  0100               	movlb	0	; () banked
  1824  001016  11EF               	iorwf	(_muestreo3+1)& (0+255),w,b
  1825  001018  A4D8               	btfss	status,2,c
  1826  00101A  D004               	goto	l5172
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;main.c: 156: tmues = 20;
  1830  00101C  0E00               	movlw	0
  1831  00101E  6E5A               	movwf	_tmues+1,c
  1832  001020  0E14               	movlw	20
  1833  001022  6E59               	movwf	_tmues,c
  1834  001024                     l5172:
  1835  001024  FFFF               	dw	65535	; assembler added errata NOP
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;main.c: 157: }
  1839                           ;main.c: 158: if (visualizacion1 == 0) {
  1840  001026  0100               	movlb	0	; () banked
  1841  001028  51F0               	movf	_visualizacion1& (0+255),w,b
  1842  00102A  0100               	movlb	0	; () banked
  1843  00102C  11F1               	iorwf	(_visualizacion1+1)& (0+255),w,b
  1844  00102E  A4D8               	btfss	status,2,c
  1845  001030  D004               	goto	l5176
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;main.c: 159: tvis = 5;
  1849  001032  0E00               	movlw	0
  1850  001034  6E5C               	movwf	_tvis+1,c
  1851  001036  0E05               	movlw	5
  1852  001038  6E5B               	movwf	_tvis,c
  1853  00103A                     l5176:
  1854  00103A  FFFF               	dw	65535	; assembler added errata NOP
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;main.c: 160: }
  1858                           ;main.c: 161: if (visualizacion2 == 0) {
  1859  00103C  0100               	movlb	0	; () banked
  1860  00103E  51F2               	movf	_visualizacion2& (0+255),w,b
  1861  001040  0100               	movlb	0	; () banked
  1862  001042  11F3               	iorwf	(_visualizacion2+1)& (0+255),w,b
  1863  001044  A4D8               	btfss	status,2,c
  1864  001046  D004               	goto	l5180
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;main.c: 162: tvis = 10;
  1868  001048  0E00               	movlw	0
  1869  00104A  6E5C               	movwf	_tvis+1,c
  1870  00104C  0E0A               	movlw	10
  1871  00104E  6E5B               	movwf	_tvis,c
  1872  001050                     l5180:
  1873  001050  FFFF               	dw	65535	; assembler added errata NOP
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;main.c: 163: }
  1877                           ;main.c: 164: if (visualizacion3 == 0) {
  1878  001052  0100               	movlb	0	; () banked
  1879  001054  51F4               	movf	_visualizacion3& (0+255),w,b
  1880  001056  0100               	movlb	0	; () banked
  1881  001058  11F5               	iorwf	(_visualizacion3+1)& (0+255),w,b
  1882  00105A  A4D8               	btfss	status,2,c
  1883  00105C  D004               	goto	l229
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;main.c: 165: tvis = 20;
  1887  00105E  0E00               	movlw	0
  1888  001060  6E5C               	movwf	_tvis+1,c
  1889  001062  0E14               	movlw	20
  1890  001064  6E5B               	movwf	_tvis,c
  1891  001066                     l229:
  1892  001066  FFFF               	dw	65535	; assembler added errata NOP
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 166: }
  1896                           ;main.c: 167: enter = 0;
  1897  001068  0E00               	movlw	0
  1898  00106A  6E41               	movwf	_enter+1,c
  1899  00106C  0E00               	movlw	0
  1900  00106E  6E40               	movwf	_enter,c
  1901                           
  1902                           ;main.c: 169: tama = 0 ;
  1903  001070  0E00               	movlw	0
  1904  001072  6E55               	movwf	_tama+1,c
  1905  001074  0E00               	movlw	0
  1906  001076  6E54               	movwf	_tama,c
  1907  001078                     l5184:
  1908  001078  FFFF               	dw	65535	; assembler added errata NOP
  1909                           
  1910                           ;main.c: 170: }
  1911                           ;main.c: 171: if (info == 0) {
  1912  00107A  0100               	movlb	0	; () banked
  1913  00107C  51E8               	movf	_info& (0+255),w,b
  1914  00107E  0100               	movlb	0	; () banked
  1915  001080  11E9               	iorwf	(_info+1)& (0+255),w,b
  1916  001082  A4D8               	btfss	status,2,c
  1917  001084  D07E               	goto	l5212
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;main.c: 172: __nop();
  1921  001086  F000               	nop	
  1922                           
  1923                           ;main.c: 175: sprintf(salida, "%d", modoestado);
  1924  001088  0E28               	movlw	low _salida
  1925  00108A  0100               	movlb	0	; () banked
  1926  00108C  6FA5               	movwf	sprintf@sp& (0+255),b
  1927  00108E  0E01               	movlw	high _salida
  1928  001090  0100               	movlb	0	; () banked
  1929  001092  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  1930  001094  0EFC               	movlw	low STR_1
  1931  001096  0100               	movlb	0	; () banked
  1932  001098  6FA7               	movwf	sprintf@f& (0+255),b
  1933  00109A  0E7F               	movlw	high STR_1
  1934  00109C  0100               	movlb	0	; () banked
  1935  00109E  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  1936  0010A0  C046  F0A9         	movff	_modoestado,?_sprintf+4
  1937  0010A4  C047  F0AA         	movff	_modoestado+1,?_sprintf+5
  1938  0010A8  EC57  F000         	call	_sprintf	;wreg free
  1939                           
  1940                           ;main.c: 176: enviarTrama(salida);
  1941  0010AC  0E28               	movlw	low _salida
  1942  0010AE  6E22               	movwf	enviarTrama@datos,c
  1943  0010B0  0E01               	movlw	high _salida
  1944  0010B2  6E23               	movwf	enviarTrama@datos+1,c
  1945  0010B4  EC6E  F015         	call	_enviarTrama	;wreg free
  1946                           
  1947                           ;main.c: 177: if (modoestado == 1) {
  1948  0010B8  0446               	decf	_modoestado,w,c
  1949  0010BA  1047               	iorwf	_modoestado+1,w,c
  1950  0010BC  A4D8               	btfss	status,2,c
  1951  0010BE  D044               	goto	l5206
  1952                           
  1953                           ;main.c: 178: enviarTrama(estadoactualnormal);
  1954  0010C0  0ECA               	movlw	low _estadoactualnormal
  1955  0010C2  6E22               	movwf	enviarTrama@datos,c
  1956  0010C4  0E7E               	movlw	high _estadoactualnormal
  1957  0010C6  6E23               	movwf	enviarTrama@datos+1,c
  1958  0010C8  EC6E  F015         	call	_enviarTrama	;wreg free
  1959                           
  1960                           ;main.c: 179: sprintf(salida, "muestreo %d ms.", tmues);
  1961  0010CC  0E28               	movlw	low _salida
  1962  0010CE  0100               	movlb	0	; () banked
  1963  0010D0  6FA5               	movwf	sprintf@sp& (0+255),b
  1964  0010D2  0E01               	movlw	high _salida
  1965  0010D4  0100               	movlb	0	; () banked
  1966  0010D6  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  1967  0010D8  0EEC               	movlw	low STR_2
  1968  0010DA  0100               	movlb	0	; () banked
  1969  0010DC  6FA7               	movwf	sprintf@f& (0+255),b
  1970  0010DE  0E7F               	movlw	high STR_2
  1971  0010E0  0100               	movlb	0	; () banked
  1972  0010E2  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  1973  0010E4  C059  F0A9         	movff	_tmues,?_sprintf+4
  1974  0010E8  C05A  F0AA         	movff	_tmues+1,?_sprintf+5
  1975  0010EC  EC57  F000         	call	_sprintf	;wreg free
  1976                           
  1977                           ;main.c: 180: enviarTrama(salida);
  1978  0010F0  0E28               	movlw	low _salida
  1979  0010F2  6E22               	movwf	enviarTrama@datos,c
  1980  0010F4  0E01               	movlw	high _salida
  1981  0010F6  6E23               	movwf	enviarTrama@datos+1,c
  1982  0010F8  EC6E  F015         	call	_enviarTrama	;wreg free
  1983                           
  1984                           ;main.c: 181: tvisualizacion = tvis * 100;
  1985  0010FC  C05B  F030         	movff	_tvis,___wmul@multiplier
  1986  001100  C05C  F031         	movff	_tvis+1,___wmul@multiplier+1
  1987  001104  0E00               	movlw	0
  1988  001106  6E33               	movwf	___wmul@multiplicand+1,c
  1989  001108  0E64               	movlw	100
  1990  00110A  6E32               	movwf	___wmul@multiplicand,c
  1991  00110C  ECF7  F016         	call	___wmul	;wreg free
  1992  001110  C030  F0E0         	movff	?___wmul,_tvisualizacion
  1993  001114  C031  F0E1         	movff	?___wmul+1,_tvisualizacion+1
  1994                           
  1995                           ;main.c: 182: sprintf(salida, "visualizacion %d ms.", tvisualizacion);
  1996  001118  0E28               	movlw	low _salida
  1997  00111A  0100               	movlb	0	; () banked
  1998  00111C  6FA5               	movwf	sprintf@sp& (0+255),b
  1999  00111E  0E01               	movlw	high _salida
  2000  001120  0100               	movlb	0	; () banked
  2001  001122  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  2002  001124  0EB6               	movlw	low STR_3
  2003  001126  0100               	movlb	0	; () banked
  2004  001128  6FA7               	movwf	sprintf@f& (0+255),b
  2005  00112A  0E7F               	movlw	high STR_3
  2006  00112C  0100               	movlb	0	; () banked
  2007  00112E  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  2008  001130  C0E0  F0A9         	movff	_tvisualizacion,?_sprintf+4
  2009  001134  C0E1  F0AA         	movff	_tvisualizacion+1,?_sprintf+5
  2010  001138  EC57  F000         	call	_sprintf	;wreg free
  2011                           
  2012                           ;main.c: 183: enviarTrama(salida);
  2013  00113C  0E28               	movlw	low _salida
  2014  00113E  6E22               	movwf	enviarTrama@datos,c
  2015  001140  0E01               	movlw	high _salida
  2016  001142  6E23               	movwf	enviarTrama@datos+1,c
  2017  001144  EC6E  F015         	call	_enviarTrama	;wreg free
  2018  001148                     l5206:
  2019  001148  FFFF               	dw	65535	; assembler added errata NOP
  2020                           
  2021                           ;main.c: 184: }
  2022                           ;main.c: 185: if (modoestado == 0) {
  2023  00114A  5046               	movf	_modoestado,w,c
  2024  00114C  1047               	iorwf	_modoestado+1,w,c
  2025  00114E  A4D8               	btfss	status,2,c
  2026  001150  D012               	goto	l5210
  2027                           
  2028                           ;main.c: 186: enviarTrama(estadoactualrapido);
  2029  001152  0EE2               	movlw	low _estadoactualrapido
  2030  001154  6E22               	movwf	enviarTrama@datos,c
  2031  001156  0E7E               	movlw	high _estadoactualrapido
  2032  001158  6E23               	movwf	enviarTrama@datos+1,c
  2033  00115A  EC6E  F015         	call	_enviarTrama	;wreg free
  2034                           
  2035                           ;main.c: 187: enviarTrama(muestreonoaplica);
  2036  00115E  0E28               	movlw	low _muestreonoaplica
  2037  001160  6E22               	movwf	enviarTrama@datos,c
  2038  001162  0E7F               	movlw	high _muestreonoaplica
  2039  001164  6E23               	movwf	enviarTrama@datos+1,c
  2040  001166  EC6E  F015         	call	_enviarTrama	;wreg free
  2041                           
  2042                           ;main.c: 188: enviarTrama(visualizacionnoaplica);
  2043  00116A  0EFA               	movlw	low _visualizacionnoaplica
  2044  00116C  6E22               	movwf	enviarTrama@datos,c
  2045  00116E  0E7E               	movlw	high _visualizacionnoaplica
  2046  001170  6E23               	movwf	enviarTrama@datos+1,c
  2047  001172  EC6E  F015         	call	_enviarTrama	;wreg free
  2048  001176                     l5210:
  2049  001176  FFFF               	dw	65535	; assembler added errata NOP
  2050                           
  2051                           ;main.c: 189: }
  2052                           ;main.c: 190: info = 1;
  2053  001178  0E00               	movlw	0
  2054  00117A  0100               	movlb	0	; () banked
  2055  00117C  6FE9               	movwf	(_info+1)& (0+255),b
  2056  00117E  0E01               	movlw	1
  2057  001180  6FE8               	movwf	_info& (0+255),b
  2058  001182                     l5212:
  2059  001182  FFFF               	dw	65535	; assembler added errata NOP
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;main.c: 191: }
  2063                           ;main.c: 192: if (NORMAL == 0) {
  2064  001184  503C               	movf	_NORMAL,w,c
  2065  001186  103D               	iorwf	_NORMAL+1,w,c
  2066  001188  A4D8               	btfss	status,2,c
  2067  00118A  D171               	goto	l5312
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;main.c: 193: modoestado = 1;
  2071  00118C  0E00               	movlw	0
  2072  00118E  6E47               	movwf	_modoestado+1,c
  2073  001190  0E01               	movlw	1
  2074  001192  6E46               	movwf	_modoestado,c
  2075                           
  2076                           ; BSR set to: 0
  2077                           ;main.c: 194: if (muestreo == 1) {
  2078  001194  0448               	decf	_muestreo,w,c
  2079  001196  1049               	iorwf	_muestreo+1,w,c
  2080  001198  A4D8               	btfss	status,2,c
  2081  00119A  D034               	goto	l5228
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;main.c: 195: e++;
  2085  00119C  0100               	movlb	0	; () banked
  2086  00119E  4BC8               	infsnz	_e& (0+255),f,b
  2087  0011A0  2BC9               	incf	(_e+1)& (0+255),f,b
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;main.c: 196: if (e == tmues) {
  2091  0011A2  5059               	movf	_tmues,w,c
  2092  0011A4  0100               	movlb	0	; () banked
  2093  0011A6  19C8               	xorwf	_e& (0+255),w,b
  2094  0011A8  E128               	bnz	l5226
  2095  0011AA  505A               	movf	_tmues+1,w,c
  2096  0011AC  0100               	movlb	0	; () banked
  2097  0011AE  19C9               	xorwf	(_e+1)& (0+255),w,b
  2098  0011B0  A4D8               	btfss	status,2,c
  2099  0011B2  D023               	goto	l5226
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;main.c: 197: promedio1 = conversionADMues(0);
  2103  0011B4  0E00               	movlw	0
  2104  0011B6  6E31               	movwf	conversionADMues@canal+1,c
  2105  0011B8  0E00               	movlw	0
  2106  0011BA  6E30               	movwf	conversionADMues@canal,c
  2107  0011BC  EC33  F00F         	call	_conversionADMues	;wreg free
  2108  0011C0  C030  F0D6         	movff	?_conversionADMues,_promedio1
  2109  0011C4  C031  F0D7         	movff	?_conversionADMues+1,_promedio1+1
  2110                           
  2111                           ;main.c: 198: promedio2 = conversionADMues(1);
  2112  0011C8  0E00               	movlw	0
  2113  0011CA  6E31               	movwf	conversionADMues@canal+1,c
  2114  0011CC  0E01               	movlw	1
  2115  0011CE  6E30               	movwf	conversionADMues@canal,c
  2116  0011D0  EC33  F00F         	call	_conversionADMues	;wreg free
  2117  0011D4  C030  F0D8         	movff	?_conversionADMues,_promedio2
  2118  0011D8  C031  F0D9         	movff	?_conversionADMues+1,_promedio2+1
  2119                           
  2120                           ;main.c: 199: promedio3 = conversionADMues(2);
  2121  0011DC  0E00               	movlw	0
  2122  0011DE  6E31               	movwf	conversionADMues@canal+1,c
  2123  0011E0  0E02               	movlw	2
  2124  0011E2  6E30               	movwf	conversionADMues@canal,c
  2125  0011E4  EC33  F00F         	call	_conversionADMues	;wreg free
  2126  0011E8  C030  F0DA         	movff	?_conversionADMues,_promedio3
  2127  0011EC  C031  F0DB         	movff	?_conversionADMues+1,_promedio3+1
  2128                           
  2129                           ;main.c: 200: e = 0;
  2130  0011F0  0E00               	movlw	0
  2131  0011F2  0100               	movlb	0	; () banked
  2132  0011F4  6FC9               	movwf	(_e+1)& (0+255),b
  2133  0011F6  0E00               	movlw	0
  2134  0011F8  6FC8               	movwf	_e& (0+255),b
  2135  0011FA                     l5226:
  2136  0011FA  FFFF               	dw	65535	; assembler added errata NOP
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;main.c: 201: }
  2140                           ;main.c: 202: muestreo = 0;
  2141  0011FC  0E00               	movlw	0
  2142  0011FE  6E49               	movwf	_muestreo+1,c
  2143  001200  0E00               	movlw	0
  2144  001202  6E48               	movwf	_muestreo,c
  2145  001204                     l5228:
  2146  001204  FFFF               	dw	65535	; assembler added errata NOP
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;main.c: 203: }
  2150                           ;main.c: 204: if (visualizacion == 1) {
  2151  001206  0100               	movlb	0	; () banked
  2152  001208  05E4               	decf	_visualizacion& (0+255),w,b
  2153  00120A  0100               	movlb	0	; () banked
  2154  00120C  11E5               	iorwf	(_visualizacion+1)& (0+255),w,b
  2155  00120E  A4D8               	btfss	status,2,c
  2156  001210  D12E               	goto	l5312
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;main.c: 205: a++;
  2160  001212  0100               	movlb	0	; () banked
  2161  001214  4BC2               	infsnz	_a& (0+255),f,b
  2162  001216  2BC3               	incf	(_a+1)& (0+255),f,b
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;main.c: 206: if (a == tvis) {
  2166  001218  505B               	movf	_tvis,w,c
  2167  00121A  0100               	movlb	0	; () banked
  2168  00121C  19C2               	xorwf	_a& (0+255),w,b
  2169  00121E  E104               	bnz	u6391
  2170  001220  505C               	movf	_tvis+1,w,c
  2171  001222  0100               	movlb	0	; () banked
  2172  001224  19C3               	xorwf	(_a+1)& (0+255),w,b
  2173  001226  A4D8               	btfss	status,2,c
  2174  001228                     u6391:
  2175  001228  D101               	goto	l5298
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;main.c: 207: promediovolt1 = promedio1 * 5.0 / 1024;
  2179  00122A  0E00               	movlw	0
  2180  00122C  6E39               	movwf	___ftmul@f2,c
  2181  00122E  0EA0               	movlw	160
  2182  001230  6E3A               	movwf	___ftmul@f2+1,c
  2183  001232  0E40               	movlw	64
  2184  001234  6E3B               	movwf	___ftmul@f2+2,c
  2185  001236  C0D6  F02A         	movff	_promedio1,___awtoft@c
  2186  00123A  C0D7  F02B         	movff	_promedio1+1,___awtoft@c+1
  2187  00123E  ECA2  F016         	call	___awtoft	;wreg free
  2188  001242  C02A  F036         	movff	?___awtoft,___ftmul@f1
  2189  001246  C02B  F037         	movff	?___awtoft+1,___ftmul@f1+1
  2190  00124A  C02C  F038         	movff	?___awtoft+2,___ftmul@f1+2
  2191  00124E  ECE0  F011         	call	___ftmul	;wreg free
  2192  001252  C036  F089         	movff	?___ftmul,___ftdiv@f1
  2193  001256  C037  F08A         	movff	?___ftmul+1,___ftdiv@f1+1
  2194  00125A  C038  F08B         	movff	?___ftmul+2,___ftdiv@f1+2
  2195  00125E  0E00               	movlw	0
  2196  001260  0100               	movlb	0	; () banked
  2197  001262  6F8C               	movwf	___ftdiv@f2& (0+255),b
  2198  001264  0E80               	movlw	128
  2199  001266  0100               	movlb	0	; () banked
  2200  001268  6F8D               	movwf	(___ftdiv@f2+1)& (0+255),b
  2201  00126A  0E44               	movlw	68
  2202  00126C  0100               	movlb	0	; () banked
  2203  00126E  6F8E               	movwf	(___ftdiv@f2+2)& (0+255),b
  2204  001270  EC09  F010         	call	___ftdiv	;wreg free
  2205  001274  C089  F0BF         	movff	?___ftdiv,_promediovolt1
  2206  001278  C08A  F0C0         	movff	?___ftdiv+1,_promediovolt1+1
  2207  00127C  C08B  F0C1         	movff	?___ftdiv+2,_promediovolt1+2
  2208                           
  2209                           ;main.c: 208: sprintf(salida, "canal 1: %f V  ", promediovolt1);
  2210  001280  0E28               	movlw	low _salida
  2211  001282  0100               	movlb	0	; () banked
  2212  001284  6FA5               	movwf	sprintf@sp& (0+255),b
  2213  001286  0E01               	movlw	high _salida
  2214  001288  0100               	movlb	0	; () banked
  2215  00128A  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  2216  00128C  0EDC               	movlw	low STR_4
  2217  00128E  0100               	movlb	0	; () banked
  2218  001290  6FA7               	movwf	sprintf@f& (0+255),b
  2219  001292  0E7F               	movlw	high STR_4
  2220  001294  0100               	movlb	0	; () banked
  2221  001296  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  2222  001298  C0BF  F0A9         	movff	_promediovolt1,?_sprintf+4
  2223  00129C  C0C0  F0AA         	movff	_promediovolt1+1,?_sprintf+5
  2224  0012A0  C0C1  F0AB         	movff	_promediovolt1+2,?_sprintf+6
  2225  0012A4  EC57  F000         	call	_sprintf	;wreg free
  2226                           
  2227                           ;main.c: 209: enviarTramaSE(salida);
  2228  0012A8  0E28               	movlw	low _salida
  2229  0012AA  6E22               	movwf	enviarTramaSE@datos,c
  2230  0012AC  0E01               	movlw	high _salida
  2231  0012AE  6E23               	movwf	enviarTramaSE@datos+1,c
  2232  0012B0  ECDE  F016         	call	_enviarTramaSE	;wreg free
  2233                           
  2234                           ;main.c: 210: for (i = 0; i < 10; i++) {
  2235  0012B4  0E00               	movlw	0
  2236  0012B6  6E43               	movwf	_i+1,c
  2237  0012B8  0E00               	movlw	0
  2238  0012BA  6E42               	movwf	_i,c
  2239  0012BC                     l5242:
  2240  0012BC  FFFF               	dw	65535	; assembler added errata NOP
  2241  0012BE  BE43               	btfsc	_i+1,7,c
  2242  0012C0  D006               	goto	l5246
  2243  0012C2  5043               	movf	_i+1,w,c
  2244  0012C4  E13F               	bnz	l5256
  2245  0012C6  0E0A               	movlw	10
  2246  0012C8  5C42               	subwf	_i,w,c
  2247  0012CA  B0D8               	btfsc	status,0,c
  2248  0012CC  D03B               	goto	l5256
  2249  0012CE                     l5246:
  2250  0012CE  FFFF               	dw	65535	; assembler added errata NOP
  2251                           
  2252                           ;main.c: 211: if ((promedio2 & binnum << (9 - i)) == 0) {
  2253  0012D0  5042               	movf	_i,w,c
  2254  0012D2  0800               	sublw	0
  2255  0012D4  0100               	movlb	0	; () banked
  2256  0012D6  6FB2               	movwf	??_main& (0+255),b
  2257  0012D8  0E09               	movlw	9
  2258  0012DA  0100               	movlb	0	; () banked
  2259  0012DC  27B2               	addwf	??_main& (0+255),f,b
  2260  0012DE  C0E6  F0B3         	movff	_binnum,??_main+1
  2261  0012E2  C0E7  F0B4         	movff	_binnum+1,??_main+2
  2262  0012E6  0100               	movlb	0	; () banked
  2263  0012E8  2BB2               	incf	??_main& (0+255),f,b
  2264  0012EA  D005               	goto	u6414
  2265  0012EC                     u6415:
  2266  0012EC  FFFF               	dw	65535	; assembler added errata NOP
  2267  0012EE  90D8               	bcf	status,0,c
  2268  0012F0  0100               	movlb	0	; () banked
  2269  0012F2  37B3               	rlcf	(??_main+1)& (0+255),f,b
  2270  0012F4  37B4               	rlcf	(??_main+2)& (0+255),f,b
  2271  0012F6                     u6414:
  2272  0012F6  FFFF               	dw	65535	; assembler added errata NOP
  2273  0012F8  0100               	movlb	0	; () banked
  2274  0012FA  2FB2               	decfsz	??_main& (0+255),f,b
  2275  0012FC  D7F7               	goto	u6415
  2276  0012FE  0100               	movlb	0	; () banked
  2277  001300  51D8               	movf	_promedio2& (0+255),w,b
  2278  001302  0100               	movlb	0	; () banked
  2279  001304  17B3               	andwf	(??_main+1)& (0+255),f,b
  2280  001306  0100               	movlb	0	; () banked
  2281  001308  51D9               	movf	(_promedio2+1)& (0+255),w,b
  2282  00130A  0100               	movlb	0	; () banked
  2283  00130C  17B4               	andwf	(??_main+2)& (0+255),f,b
  2284  00130E  0100               	movlb	0	; () banked
  2285  001310  51B3               	movf	(??_main+1)& (0+255),w,b
  2286  001312  0100               	movlb	0	; () banked
  2287  001314  11B4               	iorwf	(??_main+2)& (0+255),w,b
  2288  001316  A4D8               	btfss	status,2,c
  2289  001318  D008               	goto	l5250
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;main.c: 212: bin[i] = '0';
  2293  00131A  0EB5               	movlw	low _bin
  2294  00131C  2442               	addwf	_i,w,c
  2295  00131E  6ED9               	movwf	fsr2l,c
  2296  001320  0E00               	movlw	high _bin
  2297  001322  2043               	addwfc	_i+1,w,c
  2298  001324  6EDA               	movwf	fsr2h,c
  2299  001326  0E30               	movlw	48
  2300  001328  D008               	goto	L1
  2301  00132A                     l5250:
  2302  00132A  FFFF               	dw	65535	; assembler added errata NOP
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;main.c: 214: bin[i] = '1';
  2306  00132C  0EB5               	movlw	low _bin
  2307  00132E  2442               	addwf	_i,w,c
  2308  001330  6ED9               	movwf	fsr2l,c
  2309  001332  0E00               	movlw	high _bin
  2310  001334  2043               	addwfc	_i+1,w,c
  2311  001336  6EDA               	movwf	fsr2h,c
  2312  001338  0E31               	movlw	49
  2313  00133A                     L1:
  2314  00133A  FFFF               	dw	65535	; assembler added errata NOP
  2315  00133C  6EDF               	movwf	indf2,c
  2316                           
  2317                           ; BSR set to: 0
  2318                           
  2319                           ; BSR set to: 0
  2320  00133E  4A42               	infsnz	_i,f,c
  2321  001340  2A43               	incf	_i+1,f,c
  2322  001342  D7BC               	goto	l5242
  2323  001344                     l5256:
  2324  001344  FFFF               	dw	65535	; assembler added errata NOP
  2325                           
  2326                           ;main.c: 215: }
  2327                           ;main.c: 216: }
  2328                           ;main.c: 217: for (i = 0; i < 10; i++) {
  2329  001346  0E00               	movlw	0
  2330  001348  6E43               	movwf	_i+1,c
  2331  00134A  0E00               	movlw	0
  2332  00134C  6E42               	movwf	_i,c
  2333  00134E                     l5258:
  2334  00134E  FFFF               	dw	65535	; assembler added errata NOP
  2335  001350  BE43               	btfsc	_i+1,7,c
  2336  001352  D006               	goto	l5262
  2337  001354  5043               	movf	_i+1,w,c
  2338  001356  E115               	bnz	l5268
  2339  001358  0E0A               	movlw	10
  2340  00135A  5C42               	subwf	_i,w,c
  2341  00135C  B0D8               	btfsc	status,0,c
  2342  00135E  D011               	goto	l5268
  2343  001360                     l5262:
  2344  001360  FFFF               	dw	65535	; assembler added errata NOP
  2345                           
  2346                           ;main.c: 218: TXREG = canal2[i];
  2347  001362  0EA1               	movlw	low _canal2
  2348  001364  2442               	addwf	_i,w,c
  2349  001366  6EF6               	movwf	tblptrl,c
  2350  001368  0E7E               	movlw	high _canal2
  2351  00136A  2043               	addwfc	_i+1,w,c
  2352  00136C  6EF7               	movwf	tblptrh,c
  2353  00136E                     	if	0	;There are less than 3 active tblptr bytes
  2354  00136E                     	endif
  2355  00136E  0008               	tblrd		*
  2356  001370  FFFF               	dw	65535	; errata NOP
  2357  001372  CFF5 FFAD          	movff	tablat,4013	;volatile
  2358  001376                     l244:
  2359  001376  FFFF               	dw	65535	; assembler added errata NOP
  2360  001378  A2AC               	btfss	4012,1,c	;volatile
  2361  00137A  D7FD               	goto	l244
  2362  00137C  4A42               	infsnz	_i,f,c
  2363  00137E  2A43               	incf	_i+1,f,c
  2364  001380  D7E6               	goto	l5258
  2365  001382                     l5268:
  2366  001382  FFFF               	dw	65535	; assembler added errata NOP
  2367                           
  2368                           ;main.c: 220: }
  2369                           ;main.c: 221: for (i = 0; i < 10; i++) {
  2370  001384  0E00               	movlw	0
  2371  001386  6E43               	movwf	_i+1,c
  2372  001388  0E00               	movlw	0
  2373  00138A  6E42               	movwf	_i,c
  2374  00138C                     l5270:
  2375  00138C  FFFF               	dw	65535	; assembler added errata NOP
  2376  00138E  BE43               	btfsc	_i+1,7,c
  2377  001390  D006               	goto	l5274
  2378  001392  5043               	movf	_i+1,w,c
  2379  001394  E113               	bnz	l5280
  2380  001396  0E0A               	movlw	10
  2381  001398  5C42               	subwf	_i,w,c
  2382  00139A  B0D8               	btfsc	status,0,c
  2383  00139C  D00F               	goto	l5280
  2384  00139E                     l5274:
  2385  00139E  FFFF               	dw	65535	; assembler added errata NOP
  2386                           
  2387                           ;main.c: 222: TXREG = bin[i];
  2388  0013A0  0EB5               	movlw	low _bin
  2389  0013A2  2442               	addwf	_i,w,c
  2390  0013A4  6ED9               	movwf	fsr2l,c
  2391  0013A6  0E00               	movlw	high _bin
  2392  0013A8  2043               	addwfc	_i+1,w,c
  2393  0013AA  6EDA               	movwf	fsr2h,c
  2394  0013AC  50DF               	movf	indf2,w,c
  2395  0013AE  6EAD               	movwf	4013,c	;volatile
  2396  0013B0                     l249:
  2397  0013B0  FFFF               	dw	65535	; assembler added errata NOP
  2398  0013B2  A2AC               	btfss	4012,1,c	;volatile
  2399  0013B4  D7FD               	goto	l249
  2400  0013B6  4A42               	infsnz	_i,f,c
  2401  0013B8  2A43               	incf	_i+1,f,c
  2402  0013BA  D7E8               	goto	l5270
  2403  0013BC                     l5280:
  2404  0013BC  FFFF               	dw	65535	; assembler added errata NOP
  2405                           
  2406                           ;main.c: 224: }
  2407                           ;main.c: 225: for (i = 0; i < 10; i++) {
  2408  0013BE  0E00               	movlw	0
  2409  0013C0  6E43               	movwf	_i+1,c
  2410  0013C2  0E00               	movlw	0
  2411  0013C4  6E42               	movwf	_i,c
  2412  0013C6                     l5282:
  2413  0013C6  FFFF               	dw	65535	; assembler added errata NOP
  2414  0013C8  BE43               	btfsc	_i+1,7,c
  2415  0013CA  D006               	goto	l5286
  2416  0013CC  5043               	movf	_i+1,w,c
  2417  0013CE  E110               	bnz	l5292
  2418  0013D0  0E0A               	movlw	10
  2419  0013D2  5C42               	subwf	_i,w,c
  2420  0013D4  B0D8               	btfsc	status,0,c
  2421  0013D6  D00C               	goto	l5292
  2422  0013D8                     l5286:
  2423  0013D8  FFFF               	dw	65535	; assembler added errata NOP
  2424                           
  2425                           ;main.c: 226: bin[i] = 0;
  2426  0013DA  0EB5               	movlw	low _bin
  2427  0013DC  2442               	addwf	_i,w,c
  2428  0013DE  6ED9               	movwf	fsr2l,c
  2429  0013E0  0E00               	movlw	high _bin
  2430  0013E2  2043               	addwfc	_i+1,w,c
  2431  0013E4  6EDA               	movwf	fsr2h,c
  2432  0013E6  0E00               	movlw	0
  2433  0013E8  6EDF               	movwf	indf2,c
  2434  0013EA  4A42               	infsnz	_i,f,c
  2435  0013EC  2A43               	incf	_i+1,f,c
  2436  0013EE  D7EB               	goto	l5282
  2437  0013F0                     l5292:
  2438  0013F0  FFFF               	dw	65535	; assembler added errata NOP
  2439                           
  2440                           ;main.c: 227: }
  2441                           ;main.c: 228: sprintf(salida, "  canal 3: 0x%04X.\n\r", promedio3);
  2442  0013F2  0E28               	movlw	low _salida
  2443  0013F4  0100               	movlb	0	; () banked
  2444  0013F6  6FA5               	movwf	sprintf@sp& (0+255),b
  2445  0013F8  0E01               	movlw	high _salida
  2446  0013FA  0100               	movlb	0	; () banked
  2447  0013FC  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  2448  0013FE  0EA1               	movlw	low STR_5
  2449  001400  0100               	movlb	0	; () banked
  2450  001402  6FA7               	movwf	sprintf@f& (0+255),b
  2451  001404  0E7F               	movlw	high STR_5
  2452  001406  0100               	movlb	0	; () banked
  2453  001408  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  2454  00140A  C0DA  F0A9         	movff	_promedio3,?_sprintf+4
  2455  00140E  C0DB  F0AA         	movff	_promedio3+1,?_sprintf+5
  2456  001412  EC57  F000         	call	_sprintf	;wreg free
  2457                           
  2458                           ;main.c: 229: enviarTramaSE(salida);
  2459  001416  0E28               	movlw	low _salida
  2460  001418  6E22               	movwf	enviarTramaSE@datos,c
  2461  00141A  0E01               	movlw	high _salida
  2462  00141C  6E23               	movwf	enviarTramaSE@datos+1,c
  2463  00141E  ECDE  F016         	call	_enviarTramaSE	;wreg free
  2464                           
  2465                           ;main.c: 230: a = 0;
  2466  001422  0E00               	movlw	0
  2467  001424  0100               	movlb	0	; () banked
  2468  001426  6FC3               	movwf	(_a+1)& (0+255),b
  2469  001428  0E00               	movlw	0
  2470  00142A  6FC2               	movwf	_a& (0+255),b
  2471  00142C                     l5298:
  2472  00142C  FFFF               	dw	65535	; assembler added errata NOP
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;main.c: 231: }
  2476                           ;main.c: 232: visualizacion = 0;
  2477  00142E  0E00               	movlw	0
  2478  001430  0100               	movlb	0	; () banked
  2479  001432  6FE5               	movwf	(_visualizacion+1)& (0+255),b
  2480  001434  0E00               	movlw	0
  2481  001436  6FE4               	movwf	_visualizacion& (0+255),b
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;main.c: 233: h0 = 0;
  2485  001438  0E00               	movlw	0
  2486  00143A  0100               	movlb	0	; () banked
  2487  00143C  6FCD               	movwf	(_h0+1)& (0+255),b
  2488  00143E  0E00               	movlw	0
  2489  001440  6FCC               	movwf	_h0& (0+255),b
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;main.c: 234: suma0 = 0;
  2493  001442  0E00               	movlw	0
  2494  001444  6E4F               	movwf	_suma0+1,c
  2495  001446  0E00               	movlw	0
  2496  001448  6E4E               	movwf	_suma0,c
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;main.c: 235: h1 = 0;
  2500  00144A  0E00               	movlw	0
  2501  00144C  0100               	movlb	0	; () banked
  2502  00144E  6FCF               	movwf	(_h1+1)& (0+255),b
  2503  001450  0E00               	movlw	0
  2504  001452  6FCE               	movwf	_h1& (0+255),b
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;main.c: 236: suma1 = 0;
  2508  001454  0E00               	movlw	0
  2509  001456  6E51               	movwf	_suma1+1,c
  2510  001458  0E00               	movlw	0
  2511  00145A  6E50               	movwf	_suma1,c
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;main.c: 237: h2 = 0;
  2515  00145C  0E00               	movlw	0
  2516  00145E  0100               	movlb	0	; () banked
  2517  001460  6FD1               	movwf	(_h2+1)& (0+255),b
  2518  001462  0E00               	movlw	0
  2519  001464  6FD0               	movwf	_h2& (0+255),b
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;main.c: 238: suma2 = 0;
  2523  001466  0E00               	movlw	0
  2524  001468  6E53               	movwf	_suma2+1,c
  2525  00146A  0E00               	movlw	0
  2526  00146C  6E52               	movwf	_suma2,c
  2527  00146E                     l5312:
  2528  00146E  FFFF               	dw	65535	; assembler added errata NOP
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;main.c: 239: }
  2532                           ;main.c: 240: }
  2533                           ;main.c: 241: if (RAPIDO == 0) {
  2534  001470  5057               	movf	_RAPIDO,w,c
  2535  001472  1058               	iorwf	_RAPIDO+1,w,c
  2536  001474  A4D8               	btfss	status,2,c
  2537  001476  D4BB               	goto	l5104
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;main.c: 242: modoestado = 0;
  2541  001478  0E00               	movlw	0
  2542  00147A  6E47               	movwf	_modoestado+1,c
  2543  00147C  0E00               	movlw	0
  2544  00147E  6E46               	movwf	_modoestado,c
  2545                           
  2546                           ;main.c: 243: ADCON0bits.CHS = 0b011;
  2547  001480  50C2               	movf	4034,w,c	;volatile
  2548  001482  0BC7               	andlw	-57
  2549  001484  0918               	iorlw	24
  2550  001486  6EC2               	movwf	4034,c	;volatile
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;main.c: 244: if (muestreo == 1) {
  2554  001488  0448               	decf	_muestreo,w,c
  2555  00148A  1049               	iorwf	_muestreo+1,w,c
  2556  00148C  A4D8               	btfss	status,2,c
  2557  00148E  D4AF               	goto	l5104
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;main.c: 245: ADCON0bits.GODONE = 1;
  2561  001490  84C2               	bsf	4034,2,c	;volatile
  2562  001492                     l5320:
  2563  001492  FFFF               	dw	65535	; assembler added errata NOP
  2564  001494  503E               	movf	_conversionadc,w,c
  2565  001496  103F               	iorwf	_conversionadc+1,w,c
  2566  001498  B4D8               	btfsc	status,2,c
  2567  00149A  D7FB               	goto	l5320
  2568                           
  2569                           ;main.c: 247: }
  2570                           ;main.c: 248: sprintf(salida, "%d", resultadoadc);
  2571  00149C  0E28               	movlw	low _salida
  2572  00149E  0100               	movlb	0	; () banked
  2573  0014A0  6FA5               	movwf	sprintf@sp& (0+255),b
  2574  0014A2  0E01               	movlw	high _salida
  2575  0014A4  0100               	movlb	0	; () banked
  2576  0014A6  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  2577  0014A8  0EFC               	movlw	low STR_1
  2578  0014AA  0100               	movlb	0	; () banked
  2579  0014AC  6FA7               	movwf	sprintf@f& (0+255),b
  2580  0014AE  0E7F               	movlw	high STR_1
  2581  0014B0  0100               	movlb	0	; () banked
  2582  0014B2  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  2583  0014B4  C04C  F0A9         	movff	_resultadoadc,?_sprintf+4
  2584  0014B8  C04D  F0AA         	movff	_resultadoadc+1,?_sprintf+5
  2585  0014BC  EC57  F000         	call	_sprintf	;wreg free
  2586                           
  2587                           ;main.c: 249: enviarTrama(salida);
  2588  0014C0  0E28               	movlw	low _salida
  2589  0014C2  6E22               	movwf	enviarTrama@datos,c
  2590  0014C4  0E01               	movlw	high _salida
  2591  0014C6  6E23               	movwf	enviarTrama@datos+1,c
  2592  0014C8  EC6E  F015         	call	_enviarTrama	;wreg free
  2593                           
  2594                           ;main.c: 250: conversionadc = 0;
  2595  0014CC  0E00               	movlw	0
  2596  0014CE  6E3F               	movwf	_conversionadc+1,c
  2597  0014D0  0E00               	movlw	0
  2598  0014D2  6E3E               	movwf	_conversionadc,c
  2599                           
  2600                           ;main.c: 251: muestreo = 0;
  2601  0014D4  0E00               	movlw	0
  2602  0014D6  6E49               	movwf	_muestreo+1,c
  2603  0014D8  0E00               	movlw	0
  2604  0014DA  6E48               	movwf	_muestreo,c
  2605                           
  2606                           ;main.c: 252: LATBbits.LB7 = ~PORTBbits.RB7;
  2607  0014DC  AE81               	btfss	3969,7,c	;volatile
  2608  0014DE  D002               	goto	u6550
  2609  0014E0  0E01               	movlw	1
  2610  0014E2  D002               	goto	u6556
  2611  0014E4                     u6550:
  2612  0014E4  FFFF               	dw	65535	; assembler added errata NOP
  2613  0014E6  0E00               	movlw	0
  2614  0014E8                     u6556:
  2615  0014E8  FFFF               	dw	65535	; assembler added errata NOP
  2616  0014EA  0AFF               	xorlw	255
  2617  0014EC  0100               	movlb	0	; () banked
  2618  0014EE  6FB2               	movwf	??_main& (0+255),b
  2619  0014F0  0100               	movlb	0	; () banked
  2620  0014F2  33B2               	rrcf	??_main& (0+255),f,b
  2621  0014F4  33B2               	rrcf	??_main& (0+255),f,b
  2622  0014F6  508A               	movf	3978,w,c	;volatile
  2623  0014F8  0100               	movlb	0	; () banked
  2624  0014FA  19B2               	xorwf	??_main& (0+255),w,b
  2625  0014FC  0B7F               	andlw	-129
  2626  0014FE  19B2               	xorwf	??_main& (0+255),w,b
  2627  001500  6E8A               	movwf	3978,c	;volatile
  2628                           
  2629                           ; BSR set to: 0
  2630                           
  2631                           ; BSR set to: 0
  2632                           
  2633                           ; BSR set to: 0
  2634  001502  D475               	goto	l5104
  2635  001504                     __end_of_main:
  2636                           	opt stack 0
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           postinc0	equ	0xFEE
  2642                           wreg	equ	0xFE8
  2643                           postdec1	equ	0xFE5
  2644                           fsr1l	equ	0xFE1
  2645                           indf2	equ	0xFDF
  2646                           fsr2h	equ	0xFDA
  2647                           fsr2l	equ	0xFD9
  2648                           status	equ	0xFD8
  2649                           
  2650 ;; *************** function _strcmp *****************
  2651 ;; Defined at:
  2652 ;;		line 33 in file "/opt/microchip/xc8/v1.38/sources/common/strcmp.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  s1              2   33[COMRAM] PTR const unsigned char 
  2655 ;;		 -> comando(25), 
  2656 ;;  s2              2   35[COMRAM] PTR const unsigned char 
  2657 ;;		 -> INFO(5), VISUALIZACION3(15), VISUALIZACION2(15), VISUALIZACION1(15), 
  2658 ;;		 -> MUESTREO3(10), MUESTREO2(10), MUESTREO1(10), MODORAPIDO(11), 
  2659 ;;		 -> MODONORMAL(11), 
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;  r               1   38[COMRAM] char 
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  2   33[COMRAM] int 
  2664 ;; Registers used:
  2665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2671 ;;      Params:         4       0       0       0       0       0       0
  2672 ;;      Locals:         1       0       0       0       0       0       0
  2673 ;;      Temps:          1       0       0       0       0       0       0
  2674 ;;      Totals:         6       0       0       0       0       0       0
  2675 ;;Total ram usage:        6 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    2
  2678 ;; This function calls:
  2679 ;;		Nothing
  2680 ;; This function is called by:
  2681 ;;		_main
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           	psect	text1
  2686  002C9E                     __ptext1:
  2687                           	opt stack 0
  2688  002C9E                     _strcmp:
  2689                           	opt stack 0
  2690  002C9E  FFFF               	dw	65535	; assembler added errata NOP
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;incstack = 0
  2694  002CA0  D005               	goto	l3304
  2695  002CA2                     l3302:
  2696  002CA2  FFFF               	dw	65535	; assembler added errata NOP
  2697  002CA4  4A22               	infsnz	strcmp@s1,f,c
  2698  002CA6  2A23               	incf	strcmp@s1+1,f,c
  2699  002CA8  4A24               	infsnz	strcmp@s2,f,c
  2700  002CAA  2A25               	incf	strcmp@s2+1,f,c
  2701  002CAC                     l3304:
  2702  002CAC  FFFF               	dw	65535	; assembler added errata NOP
  2703  002CAE  C022  FFD9         	movff	strcmp@s1,fsr2l
  2704  002CB2  C023  FFDA         	movff	strcmp@s1+1,fsr2h
  2705  002CB6  50DF               	movf	indf2,w,c
  2706  002CB8  6E26               	movwf	??_strcmp& (0+255),c
  2707  002CBA  C024  FFF6         	movff	strcmp@s2,tblptrl
  2708  002CBE  C025  FFF7         	movff	strcmp@s2+1,tblptrh
  2709  002CC2                     	if	0	;tblptru may be non-zero
  2710  002CC2                     	endif
  2711  002CC2                     	if	0	;tblptru may be non-zero
  2712  002CC2                     	endif
  2713  002CC2  0008               	tblrd		*
  2714  002CC4  FFFF               	dw	65535	; errata NOP
  2715  002CC6  50F5               	movf	tablat,w,c
  2716  002CC8  0800               	sublw	0
  2717  002CCA  2426               	addwf	??_strcmp,w,c
  2718  002CCC  6E27               	movwf	strcmp@r,c
  2719  002CCE  5027               	movf	strcmp@r,w,c
  2720  002CD0  A4D8               	btfss	status,2,c
  2721  002CD2  D007               	goto	l3308
  2722  002CD4  C022  FFD9         	movff	strcmp@s1,fsr2l
  2723  002CD8  C023  FFDA         	movff	strcmp@s1+1,fsr2h
  2724  002CDC  50DF               	movf	indf2,w,c
  2725  002CDE  A4D8               	btfss	status,2,c
  2726  002CE0  D7E0               	goto	l3302
  2727  002CE2                     l3308:
  2728  002CE2  FFFF               	dw	65535	; assembler added errata NOP
  2729  002CE4  5027               	movf	strcmp@r,w,c
  2730  002CE6  6E22               	movwf	?_strcmp,c
  2731  002CE8  6A23               	clrf	?_strcmp+1,c
  2732  002CEA  BE22               	btfsc	?_strcmp,7,c
  2733  002CEC  0623               	decf	?_strcmp+1,f,c
  2734  002CEE  0012               	return		;funcret
  2735  002CF0  FFFF               	dw	65535	; errata NOP
  2736  002CF2                     __end_of_strcmp:
  2737                           	opt stack 0
  2738                           tblptru	equ	0xFF8
  2739                           tblptrh	equ	0xFF7
  2740                           tblptrl	equ	0xFF6
  2741                           tablat	equ	0xFF5
  2742                           postinc0	equ	0xFEE
  2743                           wreg	equ	0xFE8
  2744                           postdec1	equ	0xFE5
  2745                           fsr1l	equ	0xFE1
  2746                           indf2	equ	0xFDF
  2747                           fsr2h	equ	0xFDA
  2748                           fsr2l	equ	0xFD9
  2749                           status	equ	0xFD8
  2750                           
  2751 ;; *************** function _sprintf *****************
  2752 ;; Defined at:
  2753 ;;		line 492 in file "/opt/microchip/xc8/v1.38/sources/common/doprnt.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  sp              2   37[BANK0 ] PTR unsigned char 
  2756 ;;		 -> salida(30), 
  2757 ;;  f               2   39[BANK0 ] PTR const unsigned char 
  2758 ;;		 -> STR_6(3), STR_5(21), STR_4(16), STR_3(21), 
  2759 ;;		 -> STR_2(16), STR_1(3), 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;  idx             1    3[BANK1 ] unsigned char 
  2762 ;;  val             4   16[BANK1 ] unsigned long 
  2763 ;;  tmpval          4    8[BANK1 ] struct .
  2764 ;;  fval            3   22[BANK1 ] struct .
  2765 ;;  cp              3    0        PTR const unsigned char 
  2766 ;;  flag            2   20[BANK1 ] unsigned short 
  2767 ;;  exp             2   14[BANK1 ] int 
  2768 ;;  width           2   12[BANK1 ] int 
  2769 ;;  prec            2    6[BANK1 ] int 
  2770 ;;  ap              2    4[BANK1 ] PTR void [1]
  2771 ;;		 -> ?_sprintf(2), 
  2772 ;;  len             2    0        unsigned int 
  2773 ;;  c               1   25[BANK1 ] char 
  2774 ;;  d               1    0        unsigned char 
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  2   37[BANK0 ] int 
  2777 ;; Registers used:
  2778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2784 ;;      Params:         0       7       0       0       0       0       0
  2785 ;;      Locals:         0       0      26       0       0       0       0
  2786 ;;      Temps:          0       6       0       0       0       0       0
  2787 ;;      Totals:         0      13      26       0       0       0       0
  2788 ;;Total ram usage:       39 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:    5
  2791 ;; This function calls:
  2792 ;;		___awdiv
  2793 ;;		___ftadd
  2794 ;;		___ftge
  2795 ;;		___ftmul
  2796 ;;		___ftneg
  2797 ;;		___ftsub
  2798 ;;		___fttol
  2799 ;;		___lldiv
  2800 ;;		___llmod
  2801 ;;		___lltoft
  2802 ;;		___wmul
  2803 ;;		__div_to_l_
  2804 ;;		__tdiv_to_l_
  2805 ;;		_fround
  2806 ;;		_isdigit
  2807 ;;		_scale
  2808 ;; This function is called by:
  2809 ;;		_main
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text2
  2814  0000AE                     __ptext2:
  2815                           	opt stack 0
  2816  0000AE                     _sprintf:
  2817                           	opt stack 0
  2818  0000AE  FFFF               	dw	65535	; assembler added errata NOP
  2819                           
  2820                           ;doprnt.c: 494: va_list ap;
  2821                           ;doprnt.c: 499: signed char c;
  2822                           ;doprnt.c: 501: int width;
  2823                           ;doprnt.c: 504: int prec;
  2824                           ;doprnt.c: 508: unsigned short flag;
  2825                           ;doprnt.c: 515: char d;
  2826                           ;doprnt.c: 516: double fval;
  2827                           ;doprnt.c: 517: int exp;
  2828                           ;doprnt.c: 523: union {
  2829                           ;doprnt.c: 524: unsigned long vd;
  2830                           ;doprnt.c: 525: double integ;
  2831                           ;doprnt.c: 526: } tmpval;
  2832                           ;doprnt.c: 528: unsigned long val;
  2833                           ;doprnt.c: 529: unsigned len;
  2834                           ;doprnt.c: 530: const char * cp;
  2835                           ;doprnt.c: 533: *ap = __va_start();
  2836                           
  2837                           ;incstack = 0
  2838  0000B0  0EA9               	movlw	low (?_sprintf+4)
  2839  0000B2  0101               	movlb	1	; () banked
  2840  0000B4  6F63               	movwf	sprintf@ap& (0+255),b
  2841  0000B6  0E00               	movlw	high (?_sprintf+4)
  2842  0000B8  0101               	movlb	1	; () banked
  2843  0000BA  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  2844                           
  2845                           ;doprnt.c: 536: while(c = *f++) {
  2846  0000BC  EFD2  F006         	goto	l4948
  2847  0000C0                     l4630:
  2848  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  2849                           
  2850                           ; BSR set to: 1
  2851                           ;doprnt.c: 538: if(c != '%')
  2852  0000C2  0E25               	movlw	37
  2853  0000C4  0101               	movlb	1	; () banked
  2854  0000C6  1978               	xorwf	sprintf@c& (0+255),w,b
  2855  0000C8  B4D8               	btfsc	status,2,c
  2856  0000CA  D00B               	goto	l4636
  2857                           
  2858                           ; BSR set to: 1
  2859                           ;doprnt.c: 540: {
  2860                           ;doprnt.c: 541: ((*sp++ = (c)));
  2861  0000CC  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  2862  0000D0  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  2863  0000D4  C178  FFDF         	movff	sprintf@c,indf2
  2864                           
  2865                           ; BSR set to: 1
  2866  0000D8  0100               	movlb	0	; () banked
  2867  0000DA  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  2868  0000DC  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  2869                           
  2870                           ;doprnt.c: 542: continue;
  2871  0000DE  EFD2  F006         	goto	l4948
  2872  0000E2                     l4636:
  2873  0000E2  FFFF               	dw	65535	; assembler added errata NOP
  2874                           
  2875                           ;doprnt.c: 543: }
  2876                           ;doprnt.c: 546: width = 0;
  2877  0000E4  0E00               	movlw	0
  2878  0000E6  0101               	movlb	1	; () banked
  2879  0000E8  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  2880  0000EA  0E00               	movlw	0
  2881  0000EC  6F6B               	movwf	sprintf@width& (0+255),b
  2882                           
  2883                           ;doprnt.c: 548: flag = 0;
  2884  0000EE  0E00               	movlw	0
  2885  0000F0  0101               	movlb	1	; () banked
  2886  0000F2  6F74               	movwf	(sprintf@flag+1)& (0+255),b
  2887  0000F4  0E00               	movlw	0
  2888  0000F6  6F73               	movwf	sprintf@flag& (0+255),b
  2889                           
  2890                           ; BSR set to: 1
  2891                           ;doprnt.c: 551: switch(*f) {
  2892                           
  2893                           ;doprnt.c: 550: for(;;) {
  2894  0000F8  D006               	goto	l4642
  2895  0000FA                     l4638:
  2896  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  2897                           
  2898                           ;doprnt.c: 580: flag |= 0x04;
  2899  0000FC  0101               	movlb	1	; () banked
  2900  0000FE  8573               	bsf	sprintf@flag& (0+255),2,b
  2901                           
  2902                           ;doprnt.c: 581: f++;
  2903  000100  0100               	movlb	0	; () banked
  2904  000102  4BA7               	infsnz	sprintf@f& (0+255),f,b
  2905  000104  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  2906  000106                     l4642:
  2907  000106  FFFF               	dw	65535	; assembler added errata NOP
  2908  000108  C0A7  FFF6         	movff	sprintf@f,tblptrl
  2909  00010C  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  2910  000110                     	if	0	;tblptru may be non-zero
  2911  000110                     	endif
  2912  000110                     	if	0	;tblptru may be non-zero
  2913  000110                     	endif
  2914  000110  0008               	tblrd		*
  2915  000112  FFFF               	dw	65535	; errata NOP
  2916  000114  50F5               	movf	tablat,w,c
  2917                           
  2918                           ; Switch size 1, requested type "space"
  2919                           ; Number of cases is 1, Range of values is 48 to 48
  2920                           ; switch strategies available:
  2921                           ; Name         Instructions Cycles
  2922                           ; simple_byte            4     3 (average)
  2923                           ;	Chosen strategy is simple_byte
  2924  000116  0A30               	xorlw	48	; case 48
  2925  000118  B4D8               	btfsc	status,2,c
  2926  00011A  D7EF               	goto	l4638
  2927                           
  2928                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2929                           
  2930                           ;doprnt.c: 586: }
  2931                           
  2932                           ;doprnt.c: 585: break;
  2933  00011C  C0A7  FFF6         	movff	sprintf@f,tblptrl
  2934  000120  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  2935  000124                     	if	0	;tblptru may be non-zero
  2936  000124                     	endif
  2937  000124                     	if	0	;tblptru may be non-zero
  2938  000124                     	endif
  2939  000124  0008               	tblrd		*
  2940  000126  FFFF               	dw	65535	; errata NOP
  2941  000128  50F5               	movf	tablat,w,c
  2942  00012A  EC21  F017         	call	_isdigit
  2943  00012E  A0D8               	btfss	status,0,c
  2944  000130  D04B               	goto	l4662
  2945                           
  2946                           ;doprnt.c: 598: width = 0;
  2947  000132  0E00               	movlw	0
  2948  000134  0101               	movlb	1	; () banked
  2949  000136  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  2950  000138  0E00               	movlw	0
  2951  00013A  6F6B               	movwf	sprintf@width& (0+255),b
  2952  00013C                     l4648:
  2953  00013C  FFFF               	dw	65535	; assembler added errata NOP
  2954                           
  2955                           ;doprnt.c: 600: width *= 10;
  2956  00013E  C16B  F030         	movff	sprintf@width,___wmul@multiplier
  2957  000142  C16C  F031         	movff	sprintf@width+1,___wmul@multiplier+1
  2958  000146  0E00               	movlw	0
  2959  000148  6E33               	movwf	___wmul@multiplicand+1,c
  2960  00014A  0E0A               	movlw	10
  2961  00014C  6E32               	movwf	___wmul@multiplicand,c
  2962  00014E  ECF7  F016         	call	___wmul	;wreg free
  2963  000152  C030  F16B         	movff	?___wmul,sprintf@width
  2964  000156  C031  F16C         	movff	?___wmul+1,sprintf@width+1
  2965                           
  2966                           ;doprnt.c: 601: width += *f++ - '0';
  2967  00015A  0ED0               	movlw	208
  2968  00015C  0100               	movlb	0	; () banked
  2969  00015E  6FAC               	movwf	??_sprintf& (0+255),b
  2970  000160  0EFF               	movlw	255
  2971  000162  0100               	movlb	0	; () banked
  2972  000164  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  2973  000166  C0A7  FFF6         	movff	sprintf@f,tblptrl
  2974  00016A  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  2975  00016E                     	if	0	;tblptru may be non-zero
  2976  00016E                     	endif
  2977  00016E                     	if	0	;tblptru may be non-zero
  2978  00016E                     	endif
  2979  00016E  0008               	tblrd		*
  2980  000170  FFFF               	dw	65535	; errata NOP
  2981  000172  50F5               	movf	tablat,w,c
  2982  000174  0100               	movlb	0	; () banked
  2983  000176  6FAE               	movwf	(??_sprintf+2)& (0+255),b
  2984  000178  6BAF               	clrf	(??_sprintf+3)& (0+255),b
  2985  00017A  0100               	movlb	0	; () banked
  2986  00017C  51AC               	movf	??_sprintf& (0+255),w,b
  2987  00017E  0100               	movlb	0	; () banked
  2988  000180  27AE               	addwf	(??_sprintf+2)& (0+255),f,b
  2989  000182  0100               	movlb	0	; () banked
  2990  000184  51AD               	movf	(??_sprintf+1)& (0+255),w,b
  2991  000186  0100               	movlb	0	; () banked
  2992  000188  23AF               	addwfc	(??_sprintf+3)& (0+255),f,b
  2993  00018A  0100               	movlb	0	; () banked
  2994  00018C  51AE               	movf	(??_sprintf+2)& (0+255),w,b
  2995  00018E  0101               	movlb	1	; () banked
  2996  000190  276B               	addwf	sprintf@width& (0+255),f,b
  2997  000192  0100               	movlb	0	; () banked
  2998  000194  51AF               	movf	(??_sprintf+3)& (0+255),w,b
  2999  000196  0101               	movlb	1	; () banked
  3000  000198  236C               	addwfc	(sprintf@width+1)& (0+255),f,b
  3001                           
  3002                           ; BSR set to: 1
  3003  00019A  0100               	movlb	0	; () banked
  3004  00019C  4BA7               	infsnz	sprintf@f& (0+255),f,b
  3005  00019E  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3009  0001A0  C0A7  FFF6         	movff	sprintf@f,tblptrl
  3010  0001A4  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  3011  0001A8                     	if	0	;tblptru may be non-zero
  3012  0001A8                     	endif
  3013  0001A8                     	if	0	;tblptru may be non-zero
  3014  0001A8                     	endif
  3015  0001A8  0008               	tblrd		*
  3016  0001AA  FFFF               	dw	65535	; errata NOP
  3017  0001AC  50F5               	movf	tablat,w,c
  3018  0001AE  EC21  F017         	call	_isdigit
  3019  0001B2  A0D8               	btfss	status,0,c
  3020  0001B4  D009               	goto	l4662
  3021  0001B6  D7C2               	goto	l4648
  3022  0001B8                     l4656:
  3023  0001B8  FFFF               	dw	65535	; assembler added errata NOP
  3024                           
  3025                           ;doprnt.c: 663: flag |= 0x400;
  3026  0001BA  0101               	movlb	1	; () banked
  3027  0001BC  8574               	bsf	(sprintf@flag+1)& (0+255),2,b
  3028                           
  3029                           ; BSR set to: 1
  3030                           ;doprnt.c: 698: case 'i':
  3031                           ;doprnt.c: 699: break;
  3032                           
  3033                           ; BSR set to: 1
  3034                           
  3035                           ;doprnt.c: 697: case 'd':
  3036                           
  3037                           ;doprnt.c: 664: break;
  3038  0001BE  D027               	goto	l4664
  3039  0001C0                     l4658:
  3040  0001C0  FFFF               	dw	65535	; assembler added errata NOP
  3041                           
  3042                           ; BSR set to: 1
  3043                           ;doprnt.c: 718: case 'x':
  3044                           ;doprnt.c: 721: flag |= 0x80;
  3045  0001C2  0101               	movlb	1	; () banked
  3046  0001C4  8F73               	bsf	sprintf@flag& (0+255),7,b
  3047                           
  3048                           ;doprnt.c: 723: break;
  3049  0001C6  D023               	goto	l4664
  3050  0001C8                     l4662:
  3051  0001C8  FFFF               	dw	65535	; assembler added errata NOP
  3052  0001CA  C0A7  FFF6         	movff	sprintf@f,tblptrl
  3053  0001CE  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  3054  0001D2  0100               	movlb	0	; () banked
  3055  0001D4  4BA7               	infsnz	sprintf@f& (0+255),f,b
  3056  0001D6  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  3057  0001D8                     	if	0	;tblptru may be non-zero
  3058  0001D8                     	endif
  3059  0001D8                     	if	0	;tblptru may be non-zero
  3060  0001D8                     	endif
  3061  0001D8  0008               	tblrd		*
  3062  0001DA  FFFF               	dw	65535	; errata NOP
  3063  0001DC  CFF5 F178          	movff	tablat,sprintf@c
  3064  0001E0  0101               	movlb	1	; () banked
  3065  0001E2  5178               	movf	sprintf@c& (0+255),w,b
  3066                           
  3067                           ; Switch size 1, requested type "space"
  3068                           ; Number of cases is 6, Range of values is 0 to 120
  3069                           ; switch strategies available:
  3070                           ; Name         Instructions Cycles
  3071                           ; simple_byte           19    10 (average)
  3072                           ;	Chosen strategy is simple_byte
  3073  0001E4  0A00               	xorlw	0	; case 0
  3074  0001E6  B4D8               	btfsc	status,2,c
  3075  0001E8  EFE3  F006         	goto	l4950
  3076  0001EC  0A58               	xorlw	88	; case 88
  3077  0001EE  B4D8               	btfsc	status,2,c
  3078  0001F0  D7E7               	goto	l4658
  3079  0001F2  0A3C               	xorlw	60	; case 100
  3080  0001F4  B4D8               	btfsc	status,2,c
  3081  0001F6  D00B               	goto	l4664
  3082  0001F8  0A02               	xorlw	2	; case 102
  3083  0001FA  B4D8               	btfsc	status,2,c
  3084  0001FC  D7DD               	goto	l4656
  3085  0001FE  0A0F               	xorlw	15	; case 105
  3086  000200  B4D8               	btfsc	status,2,c
  3087  000202  D005               	goto	l4664
  3088  000204  0A11               	xorlw	17	; case 120
  3089  000206  B4D8               	btfsc	status,2,c
  3090  000208  D7DB               	goto	l4658
  3091  00020A  EFD2  F006         	goto	l4948
  3092  00020E                     l4664:
  3093  00020E  FFFF               	dw	65535	; assembler added errata NOP
  3094                           
  3095                           ; BSR set to: 1
  3096                           ;doprnt.c: 825: if(flag & (0x700)) {
  3097  000210  0E07               	movlw	7
  3098  000212  0101               	movlb	1	; () banked
  3099  000214  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  3100  000216  B4D8               	btfsc	status,2,c
  3101  000218  D3D3               	goto	l429
  3102                           
  3103                           ; BSR set to: 1
  3104                           ;doprnt.c: 829: prec = 6;
  3105  00021A  0E00               	movlw	0
  3106  00021C  0101               	movlb	1	; () banked
  3107  00021E  6F66               	movwf	(sprintf@prec+1)& (0+255),b
  3108  000220  0E06               	movlw	6
  3109  000222  6F65               	movwf	sprintf@prec& (0+255),b
  3110                           
  3111                           ; BSR set to: 1
  3112                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3113  000224  C163  FFD9         	movff	sprintf@ap,fsr2l
  3114  000228  C164  FFDA         	movff	sprintf@ap+1,fsr2h
  3115  00022C  CFDE F175          	movff	postinc2,sprintf@fval
  3116  000230  CFDE F176          	movff	postinc2,sprintf@fval+1
  3117  000234  CFDD F177          	movff	postdec2,sprintf@fval+2
  3118                           
  3119                           ; BSR set to: 1
  3120  000238  0E03               	movlw	3
  3121  00023A  0101               	movlb	1	; () banked
  3122  00023C  2763               	addwf	sprintf@ap& (0+255),f,b
  3123  00023E  0E00               	movlw	0
  3124  000240  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3125                           
  3126                           ; BSR set to: 1
  3127                           ;doprnt.c: 831: if(fval < 0.0) {
  3128  000242  0101               	movlb	1	; () banked
  3129  000244  AF77               	btfss	(sprintf@fval+2)& (0+255),7,b
  3130  000246  D011               	goto	l4678
  3131                           
  3132                           ; BSR set to: 1
  3133                           ;doprnt.c: 832: fval = -fval;
  3134  000248  C175  F022         	movff	sprintf@fval,___ftneg@f1
  3135  00024C  C176  F023         	movff	sprintf@fval+1,___ftneg@f1+1
  3136  000250  C177  F024         	movff	sprintf@fval+2,___ftneg@f1+2
  3137  000254  EC0C  F017         	call	___ftneg	;wreg free
  3138  000258  C022  F175         	movff	?___ftneg,sprintf@fval
  3139  00025C  C023  F176         	movff	?___ftneg+1,sprintf@fval+1
  3140  000260  C024  F177         	movff	?___ftneg+2,sprintf@fval+2
  3141                           
  3142                           ;doprnt.c: 833: flag |= 0x03;
  3143  000264  0E03               	movlw	3
  3144  000266  0101               	movlb	1	; () banked
  3145  000268  1373               	iorwf	sprintf@flag& (0+255),f,b
  3146  00026A                     l4678:
  3147  00026A  FFFF               	dw	65535	; assembler added errata NOP
  3148                           
  3149                           ; BSR set to: 1
  3150                           ;doprnt.c: 834: }
  3151                           ;doprnt.c: 835: exp = 0;
  3152  00026C  0E00               	movlw	0
  3153  00026E  0101               	movlb	1	; () banked
  3154  000270  6F6E               	movwf	(sprintf@exp+1)& (0+255),b
  3155  000272  0E00               	movlw	0
  3156  000274  6F6D               	movwf	sprintf@exp& (0+255),b
  3157                           
  3158                           ; BSR set to: 1
  3159                           ;doprnt.c: 836: if( fval!=0) {
  3160  000276  0101               	movlb	1	; () banked
  3161  000278  5175               	movf	sprintf@fval& (0+255),w,b
  3162  00027A  0101               	movlb	1	; () banked
  3163  00027C  1176               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3164  00027E  0101               	movlb	1	; () banked
  3165  000280  1177               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3166  000282  B4D8               	btfsc	status,2,c
  3167  000284  D095               	goto	l4706
  3168                           
  3169                           ; BSR set to: 1
  3170                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3171  000286  0E82               	movlw	130
  3172  000288  0100               	movlb	0	; () banked
  3173  00028A  6FAC               	movwf	??_sprintf& (0+255),b
  3174  00028C  0EFF               	movlw	255
  3175  00028E  0100               	movlb	0	; () banked
  3176  000290  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  3177  000292  C175  F0AE         	movff	sprintf@fval,??_sprintf+2
  3178  000296  C176  F0AF         	movff	sprintf@fval+1,??_sprintf+3
  3179  00029A  C177  F0B0         	movff	sprintf@fval+2,??_sprintf+4
  3180  00029E  C178  F0B1         	movff	sprintf@fval+3,??_sprintf+5
  3181  0002A2  0E10               	movlw	16
  3182  0002A4  D007               	goto	u5490
  3183  0002A6                     u5495:
  3184  0002A6  FFFF               	dw	65535	; assembler added errata NOP
  3185  0002A8  0100               	movlb	0	; () banked
  3186  0002AA  90D8               	bcf	status,0,c
  3187  0002AC  33B1               	rrcf	(??_sprintf+5)& (0+255),f,b
  3188  0002AE  33B0               	rrcf	(??_sprintf+4)& (0+255),f,b
  3189  0002B0  33AF               	rrcf	(??_sprintf+3)& (0+255),f,b
  3190  0002B2  33AE               	rrcf	(??_sprintf+2)& (0+255),f,b
  3191  0002B4                     u5490:
  3192  0002B4  FFFF               	dw	65535	; assembler added errata NOP
  3193  0002B6  2EE8               	decfsz	wreg,f,c
  3194  0002B8  D7F6               	goto	u5495
  3195  0002BA  0100               	movlb	0	; () banked
  3196  0002BC  51AE               	movf	(??_sprintf+2)& (0+255),w,b
  3197  0002BE  0100               	movlb	0	; () banked
  3198  0002C0  25AC               	addwf	??_sprintf& (0+255),w,b
  3199  0002C2  0101               	movlb	1	; () banked
  3200  0002C4  6F6D               	movwf	sprintf@exp& (0+255),b
  3201  0002C6  0E00               	movlw	0
  3202  0002C8  0100               	movlb	0	; () banked
  3203  0002CA  21AD               	addwfc	(??_sprintf+1)& (0+255),w,b
  3204  0002CC  0101               	movlb	1	; () banked
  3205  0002CE  6F6E               	movwf	(sprintf@exp+1)& (0+255),b
  3206                           
  3207                           ; BSR set to: 1
  3208                           ;doprnt.c: 838: exp--;
  3209  0002D0  0101               	movlb	1	; () banked
  3210  0002D2  076D               	decf	sprintf@exp& (0+255),f,b
  3211  0002D4  A0D8               	btfss	status,0,c
  3212  0002D6  076E               	decf	(sprintf@exp+1)& (0+255),f,b
  3213                           
  3214                           ; BSR set to: 1
  3215                           ;doprnt.c: 839: exp *= 3;
  3216  0002D8  C16D  F030         	movff	sprintf@exp,___wmul@multiplier
  3217  0002DC  C16E  F031         	movff	sprintf@exp+1,___wmul@multiplier+1
  3218  0002E0  0E00               	movlw	0
  3219  0002E2  6E33               	movwf	___wmul@multiplicand+1,c
  3220  0002E4  0E03               	movlw	3
  3221  0002E6  6E32               	movwf	___wmul@multiplicand,c
  3222  0002E8  ECF7  F016         	call	___wmul	;wreg free
  3223  0002EC  C030  F16D         	movff	?___wmul,sprintf@exp
  3224  0002F0  C031  F16E         	movff	?___wmul+1,sprintf@exp+1
  3225                           
  3226                           ;doprnt.c: 840: exp /= 10;
  3227  0002F4  C16D  F028         	movff	sprintf@exp,___awdiv@dividend
  3228  0002F8  C16E  F029         	movff	sprintf@exp+1,___awdiv@dividend+1
  3229  0002FC  0E00               	movlw	0
  3230  0002FE  6E2B               	movwf	___awdiv@divisor+1,c
  3231  000300  0E0A               	movlw	10
  3232  000302  6E2A               	movwf	___awdiv@divisor,c
  3233  000304  EC98  F014         	call	___awdiv	;wreg free
  3234  000308  C028  F16D         	movff	?___awdiv,sprintf@exp
  3235  00030C  C029  F16E         	movff	?___awdiv+1,sprintf@exp+1
  3236                           
  3237                           ;doprnt.c: 841: if(exp < 0)
  3238  000310  0101               	movlb	1	; () banked
  3239  000312  AF6E               	btfss	(sprintf@exp+1)& (0+255),7,b
  3240  000314  D004               	goto	l4694
  3241                           
  3242                           ; BSR set to: 1
  3243                           ;doprnt.c: 842: exp--;
  3244  000316  0101               	movlb	1	; () banked
  3245  000318  076D               	decf	sprintf@exp& (0+255),f,b
  3246  00031A  A0D8               	btfss	status,0,c
  3247  00031C  076E               	decf	(sprintf@exp+1)& (0+255),f,b
  3248  00031E                     l4694:
  3249  00031E  FFFF               	dw	65535	; assembler added errata NOP
  3250                           
  3251                           ; BSR set to: 1
  3252                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3253  000320  0101               	movlb	1	; () banked
  3254  000322  516D               	movf	sprintf@exp& (0+255),w,b
  3255  000324  0800               	sublw	0
  3256  000326  EC82  F00A         	call	_scale
  3257  00032A  C089  F167         	movff	?_scale,sprintf@tmpval
  3258  00032E  C08A  F168         	movff	?_scale+1,sprintf@tmpval+1
  3259  000332  C08B  F169         	movff	?_scale+2,sprintf@tmpval+2
  3260                           
  3261                           ;doprnt.c: 847: tmpval.integ *= fval;
  3262  000336  C167  F036         	movff	sprintf@tmpval,___ftmul@f1
  3263  00033A  C168  F037         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3264  00033E  C169  F038         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3265  000342  C175  F039         	movff	sprintf@fval,___ftmul@f2
  3266  000346  C176  F03A         	movff	sprintf@fval+1,___ftmul@f2+1
  3267  00034A  C177  F03B         	movff	sprintf@fval+2,___ftmul@f2+2
  3268  00034E  ECE0  F011         	call	___ftmul	;wreg free
  3269  000352  C036  F167         	movff	?___ftmul,sprintf@tmpval
  3270  000356  C037  F168         	movff	?___ftmul+1,sprintf@tmpval+1
  3271  00035A  C038  F169         	movff	?___ftmul+2,sprintf@tmpval+2
  3272                           
  3273                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3274  00035E  C167  F022         	movff	sprintf@tmpval,___ftge@ff1
  3275  000362  C168  F023         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3276  000366  C169  F024         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3277  00036A  0E00               	movlw	0
  3278  00036C  6E25               	movwf	___ftge@ff2,c
  3279  00036E  0E80               	movlw	128
  3280  000370  6E26               	movwf	___ftge@ff2+1,c
  3281  000372  0E3F               	movlw	63
  3282  000374  6E27               	movwf	___ftge@ff2+2,c
  3283  000376  EC4A  F014         	call	___ftge	;wreg free
  3284  00037A  B0D8               	btfsc	status,0,c
  3285  00037C  D005               	goto	l4702
  3286                           
  3287                           ;doprnt.c: 849: exp--;
  3288  00037E  0101               	movlb	1	; () banked
  3289  000380  076D               	decf	sprintf@exp& (0+255),f,b
  3290  000382  A0D8               	btfss	status,0,c
  3291  000384  076E               	decf	(sprintf@exp+1)& (0+255),f,b
  3292  000386  D014               	goto	l4706
  3293  000388                     l4702:
  3294  000388  FFFF               	dw	65535	; assembler added errata NOP
  3295                           
  3296                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3297  00038A  C167  F022         	movff	sprintf@tmpval,___ftge@ff1
  3298  00038E  C168  F023         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3299  000392  C169  F024         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3300  000396  0E00               	movlw	0
  3301  000398  6E25               	movwf	___ftge@ff2,c
  3302  00039A  0E20               	movlw	32
  3303  00039C  6E26               	movwf	___ftge@ff2+1,c
  3304  00039E  0E41               	movlw	65
  3305  0003A0  6E27               	movwf	___ftge@ff2+2,c
  3306  0003A2  EC4A  F014         	call	___ftge	;wreg free
  3307  0003A6  A0D8               	btfss	status,0,c
  3308  0003A8  D003               	goto	l4706
  3309                           
  3310                           ;doprnt.c: 851: exp++;
  3311  0003AA  0101               	movlb	1	; () banked
  3312  0003AC  4B6D               	infsnz	sprintf@exp& (0+255),f,b
  3313  0003AE  2B6E               	incf	(sprintf@exp+1)& (0+255),f,b
  3314  0003B0                     l4706:
  3315  0003B0  FFFF               	dw	65535	; assembler added errata NOP
  3316                           
  3317                           ;doprnt.c: 852: }
  3318                           ;doprnt.c: 1112: if(prec <= 12)
  3319  0003B2  0101               	movlb	1	; () banked
  3320  0003B4  BF66               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3321  0003B6  D008               	goto	l4708
  3322  0003B8  0101               	movlb	1	; () banked
  3323  0003BA  5166               	movf	(sprintf@prec+1)& (0+255),w,b
  3324  0003BC  E11E               	bnz	l4710
  3325  0003BE  0E0D               	movlw	13
  3326  0003C0  0101               	movlb	1	; () banked
  3327  0003C2  5D65               	subwf	sprintf@prec& (0+255),w,b
  3328  0003C4  B0D8               	btfsc	status,0,c
  3329  0003C6  D019               	goto	l4710
  3330  0003C8                     l4708:
  3331  0003C8  FFFF               	dw	65535	; assembler added errata NOP
  3332                           
  3333                           ; BSR set to: 1
  3334                           ;doprnt.c: 1113: fval += fround(prec);
  3335  0003CA  C175  F093         	movff	sprintf@fval,___ftadd@f1
  3336  0003CE  C176  F094         	movff	sprintf@fval+1,___ftadd@f1+1
  3337  0003D2  C177  F095         	movff	sprintf@fval+2,___ftadd@f1+2
  3338  0003D6  0101               	movlb	1	; () banked
  3339  0003D8  5165               	movf	sprintf@prec& (0+255),w,b
  3340  0003DA  ECFB  F00D         	call	_fround
  3341  0003DE  C089  F096         	movff	?_fround,___ftadd@f2
  3342  0003E2  C08A  F097         	movff	?_fround+1,___ftadd@f2+1
  3343  0003E6  C08B  F098         	movff	?_fround+2,___ftadd@f2+2
  3344  0003EA  ECB3  F00C         	call	___ftadd	;wreg free
  3345  0003EE  C093  F175         	movff	?___ftadd,sprintf@fval
  3346  0003F2  C094  F176         	movff	?___ftadd+1,sprintf@fval+1
  3347  0003F6  C095  F177         	movff	?___ftadd+2,sprintf@fval+2
  3348  0003FA                     l4710:
  3349  0003FA  FFFF               	dw	65535	; assembler added errata NOP
  3350                           
  3351                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3352  0003FC  0101               	movlb	1	; () banked
  3353  0003FE  BF6E               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3354  000400  D008               	goto	l4712
  3355  000402  0101               	movlb	1	; () banked
  3356  000404  516E               	movf	(sprintf@exp+1)& (0+255),w,b
  3357  000406  E12B               	bnz	l4718
  3358  000408  0E0A               	movlw	10
  3359  00040A  0101               	movlb	1	; () banked
  3360  00040C  5D6D               	subwf	sprintf@exp& (0+255),w,b
  3361  00040E  B0D8               	btfsc	status,0,c
  3362  000410  D026               	goto	l4718
  3363  000412                     l4712:
  3364  000412  FFFF               	dw	65535	; assembler added errata NOP
  3365                           
  3366                           ; BSR set to: 1
  3367  000414  0101               	movlb	1	; () banked
  3368  000416  5175               	movf	sprintf@fval& (0+255),w,b
  3369  000418  0101               	movlb	1	; () banked
  3370  00041A  1176               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3371  00041C  0101               	movlb	1	; () banked
  3372  00041E  1177               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3373  000420  B4D8               	btfsc	status,2,c
  3374  000422  D062               	goto	l4732
  3375                           
  3376                           ; BSR set to: 1
  3377  000424  C175  F090         	movff	sprintf@fval,___fttol@f1
  3378  000428  C176  F091         	movff	sprintf@fval+1,___fttol@f1+1
  3379  00042C  C177  F092         	movff	sprintf@fval+2,___fttol@f1+2
  3380  000430  ECAC  F010         	call	___fttol	;wreg free
  3381  000434  0100               	movlb	0	; () banked
  3382  000436  5190               	movf	?___fttol& (0+255),w,b
  3383  000438  0100               	movlb	0	; () banked
  3384  00043A  1191               	iorwf	(?___fttol+1)& (0+255),w,b
  3385  00043C  0100               	movlb	0	; () banked
  3386  00043E  1192               	iorwf	(?___fttol+2)& (0+255),w,b
  3387  000440  0100               	movlb	0	; () banked
  3388  000442  1193               	iorwf	(?___fttol+3)& (0+255),w,b
  3389  000444  A4D8               	btfss	status,2,c
  3390  000446  D050               	goto	l4732
  3391                           
  3392                           ; BSR set to: 0
  3393  000448  0101               	movlb	1	; () banked
  3394  00044A  BF6E               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3395  00044C  D04D               	goto	l4732
  3396  00044E  0101               	movlb	1	; () banked
  3397  000450  516E               	movf	(sprintf@exp+1)& (0+255),w,b
  3398  000452  E105               	bnz	l4718
  3399  000454  0E02               	movlw	2
  3400  000456  0101               	movlb	1	; () banked
  3401  000458  5D6D               	subwf	sprintf@exp& (0+255),w,b
  3402  00045A  A0D8               	btfss	status,0,c
  3403  00045C  D045               	goto	l4732
  3404  00045E                     l4718:
  3405  00045E  FFFF               	dw	65535	; assembler added errata NOP
  3406                           
  3407                           ; BSR set to: 1
  3408                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3409  000460  C167  F022         	movff	sprintf@tmpval,___ftge@ff1
  3410  000464  C168  F023         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3411  000468  C169  F024         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3412  00046C  0E70               	movlw	112
  3413  00046E  6E25               	movwf	___ftge@ff2,c
  3414  000470  0E89               	movlw	137
  3415  000472  6E26               	movwf	___ftge@ff2+1,c
  3416  000474  0E40               	movlw	64
  3417  000476  6E27               	movwf	___ftge@ff2+2,c
  3418  000478  EC4A  F014         	call	___ftge	;wreg free
  3419  00047C  B0D8               	btfsc	status,0,c
  3420  00047E  D003               	goto	l4722
  3421                           
  3422                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3423  000480  0101               	movlb	1	; () banked
  3424  000482  0EF7               	movlw	247
  3425  000484  D003               	goto	L2
  3426  000486                     l4722:
  3427  000486  FFFF               	dw	65535	; assembler added errata NOP
  3428                           
  3429                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3430  000488  0101               	movlb	1	; () banked
  3431  00048A  0EF8               	movlw	248
  3432  00048C                     L2:
  3433  00048C  FFFF               	dw	65535	; assembler added errata NOP
  3434  00048E  276D               	addwf	sprintf@exp& (0+255),f,b
  3435  000490  0EFF               	movlw	255
  3436  000492  236E               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3437                           
  3438                           ; BSR set to: 1
  3439                           ;doprnt.c: 1124: }
  3440                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3441                           
  3442                           ; BSR set to: 1
  3443  000494  0101               	movlb	1	; () banked
  3444  000496  516D               	movf	sprintf@exp& (0+255),w,b
  3445  000498  EC82  F00A         	call	_scale
  3446  00049C  C089  F167         	movff	?_scale,sprintf@tmpval
  3447  0004A0  C08A  F168         	movff	?_scale+1,sprintf@tmpval+1
  3448  0004A4  C08B  F169         	movff	?_scale+2,sprintf@tmpval+2
  3449                           
  3450                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3451  0004A8  C175  F022         	movff	sprintf@fval,__tdiv_to_l_@f1
  3452  0004AC  C176  F023         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3453  0004B0  C177  F024         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3454  0004B4  C167  F025         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3455  0004B8  C168  F026         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3456  0004BC  C169  F027         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3457  0004C0  EC78  F012         	call	__tdiv_to_l_	;wreg free
  3458  0004C4  C022  F16F         	movff	?__tdiv_to_l_,sprintf@val
  3459  0004C8  C023  F170         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3460  0004CC  C024  F171         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3461  0004D0  C025  F172         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3462                           
  3463                           ;doprnt.c: 1129: fval = 0.0;
  3464  0004D4  0E00               	movlw	0
  3465  0004D6  0101               	movlb	1	; () banked
  3466  0004D8  6F75               	movwf	sprintf@fval& (0+255),b
  3467  0004DA  0E00               	movlw	0
  3468  0004DC  0101               	movlb	1	; () banked
  3469  0004DE  6F76               	movwf	(sprintf@fval+1)& (0+255),b
  3470  0004E0  0E00               	movlw	0
  3471  0004E2  0101               	movlb	1	; () banked
  3472  0004E4  6F77               	movwf	(sprintf@fval+2)& (0+255),b
  3473                           
  3474                           ;doprnt.c: 1130: } else {
  3475  0004E6  D034               	goto	l4736
  3476  0004E8                     l4732:
  3477  0004E8  FFFF               	dw	65535	; assembler added errata NOP
  3478                           
  3479                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3480  0004EA  C175  F090         	movff	sprintf@fval,___fttol@f1
  3481  0004EE  C176  F091         	movff	sprintf@fval+1,___fttol@f1+1
  3482  0004F2  C177  F092         	movff	sprintf@fval+2,___fttol@f1+2
  3483  0004F6  ECAC  F010         	call	___fttol	;wreg free
  3484  0004FA  C090  F16F         	movff	?___fttol,sprintf@val
  3485  0004FE  C091  F170         	movff	?___fttol+1,sprintf@val+1
  3486  000502  C092  F171         	movff	?___fttol+2,sprintf@val+2
  3487  000506  C093  F172         	movff	?___fttol+3,sprintf@val+3
  3488                           
  3489                           ;doprnt.c: 1132: fval -= (double)val;
  3490  00050A  C175  F09F         	movff	sprintf@fval,___ftsub@f1
  3491  00050E  C176  F0A0         	movff	sprintf@fval+1,___ftsub@f1+1
  3492  000512  C177  F0A1         	movff	sprintf@fval+2,___ftsub@f1+2
  3493  000516  C16F  F02A         	movff	sprintf@val,___lltoft@c
  3494  00051A  C170  F02B         	movff	sprintf@val+1,___lltoft@c+1
  3495  00051E  C171  F02C         	movff	sprintf@val+2,___lltoft@c+2
  3496  000522  C172  F02D         	movff	sprintf@val+3,___lltoft@c+3
  3497  000526  EC1D  F016         	call	___lltoft	;wreg free
  3498  00052A  C02A  F0A2         	movff	?___lltoft,___ftsub@f2
  3499  00052E  C02B  F0A3         	movff	?___lltoft+1,___ftsub@f2+1
  3500  000532  C02C  F0A4         	movff	?___lltoft+2,___ftsub@f2+2
  3501  000536  EC79  F016         	call	___ftsub	;wreg free
  3502  00053A  C09F  F175         	movff	?___ftsub,sprintf@fval
  3503  00053E  C0A0  F176         	movff	?___ftsub+1,sprintf@fval+1
  3504  000542  C0A1  F177         	movff	?___ftsub+2,sprintf@fval+2
  3505                           
  3506                           ;doprnt.c: 1133: exp = 0;
  3507  000546  0E00               	movlw	0
  3508  000548  0101               	movlb	1	; () banked
  3509  00054A  6F6E               	movwf	(sprintf@exp+1)& (0+255),b
  3510  00054C  0E00               	movlw	0
  3511  00054E  6F6D               	movwf	sprintf@exp& (0+255),b
  3512  000550                     l4736:
  3513  000550  FFFF               	dw	65535	; assembler added errata NOP
  3514                           
  3515                           ; BSR set to: 1
  3516                           ;doprnt.c: 1134: }
  3517                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3518  000552  0E01               	movlw	1
  3519  000554  0101               	movlb	1	; () banked
  3520  000556  6F78               	movwf	sprintf@c& (0+255),b
  3521  000558                     l4738:
  3522  000558  FFFF               	dw	65535	; assembler added errata NOP
  3523                           
  3524                           ; BSR set to: 1
  3525  00055A  0E0A               	movlw	10
  3526  00055C  0101               	movlb	1	; () banked
  3527  00055E  1978               	xorwf	sprintf@c& (0+255),w,b
  3528  000560  B4D8               	btfsc	status,2,c
  3529  000562  D022               	goto	l4750
  3530                           
  3531                           ; BSR set to: 1
  3532                           ;doprnt.c: 1137: if(val < dpowers[c])
  3533                           
  3534                           ; BSR set to: 1
  3535                           
  3536                           ; BSR set to: 1
  3537  000564  0101               	movlb	1	; () banked
  3538  000566  5178               	movf	sprintf@c& (0+255),w,b
  3539  000568  0D04               	mullw	4
  3540  00056A  0E0B               	movlw	low _dpowers
  3541  00056C  24F3               	addwf	prodl,w,c
  3542  00056E  6EF6               	movwf	tblptrl,c
  3543  000570  0E7E               	movlw	high _dpowers
  3544  000572  20F4               	addwfc	prodh,w,c
  3545  000574  6EF7               	movwf	tblptrh,c
  3546  000576                     	if	0	;There are less than 3 active tblptr bytes
  3547  000576                     	endif
  3548  000576  0009               	tblrd		*+
  3549  000578  FFFF               	dw	65535	; errata NOP
  3550  00057A  50F5               	movf	tablat,w,c
  3551  00057C  0101               	movlb	1	; () banked
  3552  00057E  5D6F               	subwf	sprintf@val& (0+255),w,b
  3553  000580  0009               	tblrd		*+
  3554  000582  FFFF               	dw	65535	; errata NOP
  3555  000584  50F5               	movf	tablat,w,c
  3556  000586  0101               	movlb	1	; () banked
  3557  000588  5970               	subwfb	(sprintf@val+1)& (0+255),w,b
  3558  00058A  0009               	tblrd		*+
  3559  00058C  FFFF               	dw	65535	; errata NOP
  3560  00058E  50F5               	movf	tablat,w,c
  3561  000590  0101               	movlb	1	; () banked
  3562  000592  5971               	subwfb	(sprintf@val+2)& (0+255),w,b
  3563  000594  0009               	tblrd		*+
  3564  000596  FFFF               	dw	65535	; errata NOP
  3565  000598  50F5               	movf	tablat,w,c
  3566  00059A  0101               	movlb	1	; () banked
  3567  00059C  5972               	subwfb	(sprintf@val+3)& (0+255),w,b
  3568  00059E  A0D8               	btfss	status,0,c
  3569  0005A0  D003               	goto	l4750
  3570                           
  3571                           ; BSR set to: 1
  3572                           
  3573                           ; BSR set to: 1
  3574                           
  3575                           ; BSR set to: 1
  3576                           ;doprnt.c: 1138: break;
  3577  0005A2  0101               	movlb	1	; () banked
  3578  0005A4  2B78               	incf	sprintf@c& (0+255),f,b
  3579  0005A6  D7D8               	goto	l4738
  3580  0005A8                     l4750:
  3581  0005A8  FFFF               	dw	65535	; assembler added errata NOP
  3582                           
  3583                           ; BSR set to: 1
  3584                           ;doprnt.c: 1142: width -= prec + c + exp;
  3585  0005AA  C178  F0AC         	movff	sprintf@c,??_sprintf
  3586  0005AE  0100               	movlb	0	; () banked
  3587  0005B0  6BAD               	clrf	(??_sprintf+1)& (0+255),b
  3588  0005B2  BFAC               	btfsc	??_sprintf& (0+255),7,b
  3589  0005B4  07AD               	decf	(??_sprintf+1)& (0+255),f,b
  3590  0005B6  0101               	movlb	1	; () banked
  3591  0005B8  5165               	movf	sprintf@prec& (0+255),w,b
  3592  0005BA  0100               	movlb	0	; () banked
  3593  0005BC  27AC               	addwf	??_sprintf& (0+255),f,b
  3594  0005BE  0101               	movlb	1	; () banked
  3595  0005C0  5166               	movf	(sprintf@prec+1)& (0+255),w,b
  3596  0005C2  0100               	movlb	0	; () banked
  3597  0005C4  23AD               	addwfc	(??_sprintf+1)& (0+255),f,b
  3598  0005C6  0101               	movlb	1	; () banked
  3599  0005C8  516D               	movf	sprintf@exp& (0+255),w,b
  3600  0005CA  0100               	movlb	0	; () banked
  3601  0005CC  27AC               	addwf	??_sprintf& (0+255),f,b
  3602  0005CE  0101               	movlb	1	; () banked
  3603  0005D0  516E               	movf	(sprintf@exp+1)& (0+255),w,b
  3604  0005D2  0100               	movlb	0	; () banked
  3605  0005D4  23AD               	addwfc	(??_sprintf+1)& (0+255),f,b
  3606  0005D6  0100               	movlb	0	; () banked
  3607  0005D8  51AC               	movf	??_sprintf& (0+255),w,b
  3608  0005DA  0101               	movlb	1	; () banked
  3609  0005DC  5F6B               	subwf	sprintf@width& (0+255),f,b
  3610  0005DE  0100               	movlb	0	; () banked
  3611  0005E0  51AD               	movf	(??_sprintf+1)& (0+255),w,b
  3612  0005E2  0101               	movlb	1	; () banked
  3613  0005E4  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  3614                           
  3615                           ;doprnt.c: 1143: if(
  3616                           ;doprnt.c: 1147: prec)
  3617  0005E6  0101               	movlb	1	; () banked
  3618  0005E8  5165               	movf	sprintf@prec& (0+255),w,b
  3619  0005EA  0101               	movlb	1	; () banked
  3620  0005EC  1166               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3621  0005EE  B4D8               	btfsc	status,2,c
  3622  0005F0  D004               	goto	l4754
  3623                           
  3624                           ; BSR set to: 1
  3625                           ;doprnt.c: 1148: width--;
  3626  0005F2  0101               	movlb	1	; () banked
  3627  0005F4  076B               	decf	sprintf@width& (0+255),f,b
  3628  0005F6  A0D8               	btfss	status,0,c
  3629  0005F8  076C               	decf	(sprintf@width+1)& (0+255),f,b
  3630  0005FA                     l4754:
  3631  0005FA  FFFF               	dw	65535	; assembler added errata NOP
  3632                           
  3633                           ; BSR set to: 1
  3634                           ;doprnt.c: 1149: if(flag & 0x03)
  3635  0005FC  0E03               	movlw	3
  3636  0005FE  0101               	movlb	1	; () banked
  3637  000600  1573               	andwf	sprintf@flag& (0+255),w,b
  3638  000602  0100               	movlb	0	; () banked
  3639  000604  6FAC               	movwf	??_sprintf& (0+255),b
  3640  000606  0E00               	movlw	0
  3641  000608  0101               	movlb	1	; () banked
  3642  00060A  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  3643  00060C  0100               	movlb	0	; () banked
  3644  00060E  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  3645  000610  0100               	movlb	0	; () banked
  3646  000612  51AC               	movf	??_sprintf& (0+255),w,b
  3647  000614  0100               	movlb	0	; () banked
  3648  000616  11AD               	iorwf	(??_sprintf+1)& (0+255),w,b
  3649  000618  B4D8               	btfsc	status,2,c
  3650  00061A  D004               	goto	l4758
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;doprnt.c: 1150: width--;
  3654  00061C  0101               	movlb	1	; () banked
  3655  00061E  076B               	decf	sprintf@width& (0+255),f,b
  3656  000620  A0D8               	btfss	status,0,c
  3657  000622  076C               	decf	(sprintf@width+1)& (0+255),f,b
  3658  000624                     l4758:
  3659  000624  FFFF               	dw	65535	; assembler added errata NOP
  3660                           
  3661                           ;doprnt.c: 1153: if(flag & 0x04) {
  3662  000626  0101               	movlb	1	; () banked
  3663  000628  A573               	btfss	sprintf@flag& (0+255),2,b
  3664  00062A  D042               	goto	l4780
  3665                           
  3666                           ; BSR set to: 1
  3667                           ;doprnt.c: 1157: if(flag & 0x03)
  3668  00062C  0E03               	movlw	3
  3669  00062E  0101               	movlb	1	; () banked
  3670  000630  1573               	andwf	sprintf@flag& (0+255),w,b
  3671  000632  0100               	movlb	0	; () banked
  3672  000634  6FAC               	movwf	??_sprintf& (0+255),b
  3673  000636  0E00               	movlw	0
  3674  000638  0101               	movlb	1	; () banked
  3675  00063A  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  3676  00063C  0100               	movlb	0	; () banked
  3677  00063E  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  3678  000640  0100               	movlb	0	; () banked
  3679  000642  51AC               	movf	??_sprintf& (0+255),w,b
  3680  000644  0100               	movlb	0	; () banked
  3681  000646  11AD               	iorwf	(??_sprintf+1)& (0+255),w,b
  3682  000648  B4D8               	btfsc	status,2,c
  3683  00064A  D018               	goto	l4772
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  3687  00064C  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3688  000650  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3689  000654  0E2D               	movlw	45
  3690  000656  6EDF               	movwf	indf2,c
  3691                           
  3692                           ; BSR set to: 0
  3693  000658  0100               	movlb	0	; () banked
  3694  00065A  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3695  00065C  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;doprnt.c: 1168: while(width > 0) {
  3699  00065E  D00E               	goto	l4772
  3700  000660                     l4766:
  3701  000660  FFFF               	dw	65535	; assembler added errata NOP
  3702                           
  3703                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  3704  000662  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3705  000666  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3706  00066A  0E30               	movlw	48
  3707  00066C  6EDF               	movwf	indf2,c
  3708  00066E  0100               	movlb	0	; () banked
  3709  000670  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3710  000672  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;doprnt.c: 1170: width--;
  3714  000674  0101               	movlb	1	; () banked
  3715  000676  076B               	decf	sprintf@width& (0+255),f,b
  3716  000678  A0D8               	btfss	status,0,c
  3717  00067A  076C               	decf	(sprintf@width+1)& (0+255),f,b
  3718  00067C                     l4772:
  3719  00067C  FFFF               	dw	65535	; assembler added errata NOP
  3720  00067E  0101               	movlb	1	; () banked
  3721  000680  BF6C               	btfsc	(sprintf@width+1)& (0+255),7,b
  3722  000682  D08D               	goto	l4796
  3723  000684  0101               	movlb	1	; () banked
  3724  000686  516C               	movf	(sprintf@width+1)& (0+255),w,b
  3725  000688  E1EB               	bnz	l4766
  3726  00068A  0101               	movlb	1	; () banked
  3727  00068C  056B               	decf	sprintf@width& (0+255),w,b
  3728  00068E  A0D8               	btfss	status,0,c
  3729  000690  D086               	goto	l4796
  3730  000692  D7E6               	goto	l4766
  3731  000694                     l4774:
  3732  000694  FFFF               	dw	65535	; assembler added errata NOP
  3733                           
  3734                           ; BSR set to: 1
  3735                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3736  000696  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3737  00069A  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3738  00069E  0E20               	movlw	32
  3739  0006A0  6EDF               	movwf	indf2,c
  3740                           
  3741                           ; BSR set to: 1
  3742  0006A2  0100               	movlb	0	; () banked
  3743  0006A4  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3744  0006A6  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;doprnt.c: 1182: width--;
  3748  0006A8  0101               	movlb	1	; () banked
  3749  0006AA  076B               	decf	sprintf@width& (0+255),f,b
  3750  0006AC  A0D8               	btfss	status,0,c
  3751  0006AE  076C               	decf	(sprintf@width+1)& (0+255),f,b
  3752  0006B0                     l4780:
  3753  0006B0  FFFF               	dw	65535	; assembler added errata NOP
  3754                           
  3755                           ; BSR set to: 1
  3756  0006B2  0101               	movlb	1	; () banked
  3757  0006B4  BF6C               	btfsc	(sprintf@width+1)& (0+255),7,b
  3758  0006B6  D007               	goto	l4782
  3759  0006B8  0101               	movlb	1	; () banked
  3760  0006BA  516C               	movf	(sprintf@width+1)& (0+255),w,b
  3761  0006BC  E1EB               	bnz	l4774
  3762  0006BE  0101               	movlb	1	; () banked
  3763  0006C0  056B               	decf	sprintf@width& (0+255),w,b
  3764  0006C2  B0D8               	btfsc	status,0,c
  3765  0006C4  D7E7               	goto	l4774
  3766  0006C6                     l4782:
  3767  0006C6  FFFF               	dw	65535	; assembler added errata NOP
  3768                           
  3769                           ; BSR set to: 1
  3770                           ;doprnt.c: 1183: }
  3771                           ;doprnt.c: 1188: if(flag & 0x03)
  3772  0006C8  0E03               	movlw	3
  3773  0006CA  0101               	movlb	1	; () banked
  3774  0006CC  1573               	andwf	sprintf@flag& (0+255),w,b
  3775  0006CE  0100               	movlb	0	; () banked
  3776  0006D0  6FAC               	movwf	??_sprintf& (0+255),b
  3777  0006D2  0E00               	movlw	0
  3778  0006D4  0101               	movlb	1	; () banked
  3779  0006D6  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  3780  0006D8  0100               	movlb	0	; () banked
  3781  0006DA  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  3782  0006DC  0100               	movlb	0	; () banked
  3783  0006DE  51AC               	movf	??_sprintf& (0+255),w,b
  3784  0006E0  0100               	movlb	0	; () banked
  3785  0006E2  11AD               	iorwf	(??_sprintf+1)& (0+255),w,b
  3786  0006E4  B4D8               	btfsc	status,2,c
  3787  0006E6  D05B               	goto	l4796
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3791  0006E8  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3792  0006EC  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3793  0006F0  0E2D               	movlw	45
  3794  0006F2  D052               	goto	L3
  3795  0006F4                     l4786:
  3796  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  3797                           
  3798                           ; BSR set to: 0
  3799  0006F6  0100               	movlb	0	; () banked
  3800  0006F8  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3801  0006FA  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;doprnt.c: 1195: }
  3805                           ;doprnt.c: 1196: while(c--) {
  3806                           
  3807                           ; BSR set to: 0
  3808  0006FC  D050               	goto	l4796
  3809  0006FE                     l4788:
  3810  0006FE  FFFF               	dw	65535	; assembler added errata NOP
  3811                           
  3812                           ;doprnt.c: 1200: {
  3813                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3814  000700  C16F  F022         	movff	sprintf@val,___lldiv@dividend
  3815  000704  C170  F023         	movff	sprintf@val+1,___lldiv@dividend+1
  3816  000708  C171  F024         	movff	sprintf@val+2,___lldiv@dividend+2
  3817  00070C  C172  F025         	movff	sprintf@val+3,___lldiv@dividend+3
  3818  000710  0101               	movlb	1	; () banked
  3819  000712  5178               	movf	sprintf@c& (0+255),w,b
  3820  000714  0D04               	mullw	4
  3821  000716  0E0B               	movlw	low _dpowers
  3822  000718  24F3               	addwf	prodl,w,c
  3823  00071A  6EF6               	movwf	tblptrl,c
  3824  00071C  0E7E               	movlw	high _dpowers
  3825  00071E  20F4               	addwfc	prodh,w,c
  3826  000720  6EF7               	movwf	tblptrh,c
  3827  000722                     	if	0	;There are less than 3 active tblptr bytes
  3828  000722                     	endif
  3829  000722  0009               	tblrd		*+
  3830  000724  FFFF               	dw	65535	; errata NOP
  3831  000726  CFF5 F026          	movff	tablat,___lldiv@divisor
  3832  00072A  0009               	tblrd		*+
  3833  00072C  FFFF               	dw	65535	; errata NOP
  3834  00072E  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  3835  000732  0009               	tblrd		*+
  3836  000734  FFFF               	dw	65535	; errata NOP
  3837  000736  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  3838  00073A  000A               	tblrd		*-
  3839  00073C  FFFF               	dw	65535	; errata NOP
  3840  00073E  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  3841  000742  ECE4  F014         	call	___lldiv	;wreg free
  3842  000746  C022  F167         	movff	?___lldiv,sprintf@tmpval
  3843  00074A  C023  F168         	movff	?___lldiv+1,sprintf@tmpval+1
  3844  00074E  C024  F169         	movff	?___lldiv+2,sprintf@tmpval+2
  3845  000752  C025  F16A         	movff	?___lldiv+3,sprintf@tmpval+3
  3846                           
  3847                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3848  000756  C167  F02F         	movff	sprintf@tmpval,___llmod@dividend
  3849  00075A  C168  F030         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3850  00075E  C169  F031         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3851  000762  C16A  F032         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3852  000766  0E0A               	movlw	10
  3853  000768  6E33               	movwf	___llmod@divisor,c
  3854  00076A  0E00               	movlw	0
  3855  00076C  6E34               	movwf	___llmod@divisor+1,c
  3856  00076E  0E00               	movlw	0
  3857  000770  6E35               	movwf	___llmod@divisor+2,c
  3858  000772  0E00               	movlw	0
  3859  000774  6E36               	movwf	___llmod@divisor+3,c
  3860  000776  ECAA  F015         	call	___llmod	;wreg free
  3861  00077A  C02F  F167         	movff	?___llmod,sprintf@tmpval
  3862  00077E  C030  F168         	movff	?___llmod+1,sprintf@tmpval+1
  3863  000782  C031  F169         	movff	?___llmod+2,sprintf@tmpval+2
  3864  000786  C032  F16A         	movff	?___llmod+3,sprintf@tmpval+3
  3865                           
  3866                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3867  00078A  0101               	movlb	1	; () banked
  3868  00078C  5167               	movf	sprintf@tmpval& (0+255),w,b
  3869  00078E  0F30               	addlw	48
  3870  000790  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3871  000794  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3872  000798                     L3:
  3873  000798  FFFF               	dw	65535	; assembler added errata NOP
  3874  00079A  6EDF               	movwf	indf2,c
  3875  00079C  D7AB               	goto	l4786
  3876  00079E                     l4796:
  3877  00079E  FFFF               	dw	65535	; assembler added errata NOP
  3878  0007A0  0101               	movlb	1	; () banked
  3879  0007A2  0778               	decf	sprintf@c& (0+255),f,b
  3880  0007A4  0101               	movlb	1	; () banked
  3881  0007A6  2978               	incf	sprintf@c& (0+255),w,b
  3882  0007A8  B4D8               	btfsc	status,2,c
  3883  0007AA  D00F               	goto	l4804
  3884  0007AC  D7A8               	goto	l4788
  3885  0007AE                     l4798:
  3886  0007AE  FFFF               	dw	65535	; assembler added errata NOP
  3887                           
  3888                           ; BSR set to: 1
  3889                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3890  0007B0  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3891  0007B4  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3892  0007B8  0E30               	movlw	48
  3893  0007BA  6EDF               	movwf	indf2,c
  3894                           
  3895                           ; BSR set to: 1
  3896  0007BC  0100               	movlb	0	; () banked
  3897  0007BE  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3898  0007C0  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;doprnt.c: 1209: exp--;
  3902  0007C2  0101               	movlb	1	; () banked
  3903  0007C4  076D               	decf	sprintf@exp& (0+255),f,b
  3904  0007C6  A0D8               	btfss	status,0,c
  3905  0007C8  076E               	decf	(sprintf@exp+1)& (0+255),f,b
  3906  0007CA                     l4804:
  3907  0007CA  FFFF               	dw	65535	; assembler added errata NOP
  3908                           
  3909                           ; BSR set to: 1
  3910  0007CC  0101               	movlb	1	; () banked
  3911  0007CE  BF6E               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3912  0007D0  D007               	goto	l4806
  3913  0007D2  0101               	movlb	1	; () banked
  3914  0007D4  516E               	movf	(sprintf@exp+1)& (0+255),w,b
  3915  0007D6  E1EB               	bnz	l4798
  3916  0007D8  0101               	movlb	1	; () banked
  3917  0007DA  056D               	decf	sprintf@exp& (0+255),w,b
  3918  0007DC  B0D8               	btfsc	status,0,c
  3919  0007DE  D7E7               	goto	l4798
  3920  0007E0                     l4806:
  3921  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  3922                           
  3923                           ; BSR set to: 1
  3924                           ;doprnt.c: 1210: }
  3925                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3926  0007E2  0101               	movlb	1	; () banked
  3927  0007E4  BF66               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3928  0007E6  D00C               	goto	l468
  3929  0007E8  0101               	movlb	1	; () banked
  3930  0007EA  5166               	movf	(sprintf@prec+1)& (0+255),w,b
  3931  0007EC  E105               	bnz	u5710
  3932  0007EE  0E09               	movlw	9
  3933  0007F0  0101               	movlb	1	; () banked
  3934  0007F2  5D65               	subwf	sprintf@prec& (0+255),w,b
  3935  0007F4  A0D8               	btfss	status,0,c
  3936  0007F6  D004               	goto	l468
  3937  0007F8                     u5710:
  3938                           
  3939                           ; BSR set to: 1
  3940                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3941  0007F8  0E08               	movlw	8
  3942  0007FA  0101               	movlb	1	; () banked
  3943  0007FC  6F78               	movwf	sprintf@c& (0+255),b
  3944  0007FE  D003               	goto	l4810
  3945  000800                     l468:
  3946  000800  FFFF               	dw	65535	; assembler added errata NOP
  3947                           
  3948                           ; BSR set to: 1
  3949                           ;doprnt.c: 1213: else
  3950                           ;doprnt.c: 1214: c = prec;
  3951  000802  C165  F178         	movff	sprintf@prec,sprintf@c
  3952  000806                     l4810:
  3953  000806  FFFF               	dw	65535	; assembler added errata NOP
  3954                           
  3955                           ; BSR set to: 1
  3956                           ;doprnt.c: 1215: prec -= c;
  3957  000808  0101               	movlb	1	; () banked
  3958  00080A  5178               	movf	sprintf@c& (0+255),w,b
  3959  00080C  0101               	movlb	1	; () banked
  3960  00080E  5F65               	subwf	sprintf@prec& (0+255),f,b
  3961  000810  0E00               	movlw	0
  3962  000812  0101               	movlb	1	; () banked
  3963  000814  BF78               	btfsc	sprintf@c& (0+255),7,b
  3964  000816  0EFF               	movlw	255
  3965  000818  0101               	movlb	1	; () banked
  3966  00081A  5B66               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3967                           
  3968                           ; BSR set to: 1
  3969                           ;doprnt.c: 1219: if(c)
  3970  00081C  0101               	movlb	1	; () banked
  3971  00081E  5178               	movf	sprintf@c& (0+255),w,b
  3972  000820  0101               	movlb	1	; () banked
  3973  000822  B4D8               	btfsc	status,2,c
  3974  000824  D009               	goto	l4818
  3975                           
  3976                           ; BSR set to: 1
  3977                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3978  000826  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3979  00082A  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3980  00082E  0E2E               	movlw	46
  3981  000830  6EDF               	movwf	indf2,c
  3982                           
  3983                           ; BSR set to: 1
  3984  000832  0100               	movlb	0	; () banked
  3985  000834  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3986  000836  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3987  000838                     l4818:
  3988  000838  FFFF               	dw	65535	; assembler added errata NOP
  3989                           
  3990                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3991  00083A  0101               	movlb	1	; () banked
  3992  00083C  5178               	movf	sprintf@c& (0+255),w,b
  3993  00083E  EC82  F00A         	call	_scale
  3994  000842  C089  F15F         	movff	?_scale,_sprintf$2073
  3995  000846  C08A  F160         	movff	?_scale+1,_sprintf$2073+1
  3996  00084A  C08B  F161         	movff	?_scale+2,_sprintf$2073+2
  3997                           
  3998                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3999  00084E  C175  F039         	movff	sprintf@fval,___ftmul@f2
  4000  000852  C176  F03A         	movff	sprintf@fval+1,___ftmul@f2+1
  4001  000856  C177  F03B         	movff	sprintf@fval+2,___ftmul@f2+2
  4002  00085A  C15F  F036         	movff	_sprintf$2073,___ftmul@f1
  4003  00085E  C160  F037         	movff	_sprintf$2073+1,___ftmul@f1+1
  4004  000862  C161  F038         	movff	_sprintf$2073+2,___ftmul@f1+2
  4005  000866  ECE0  F011         	call	___ftmul	;wreg free
  4006  00086A  C036  F090         	movff	?___ftmul,___fttol@f1
  4007  00086E  C037  F091         	movff	?___ftmul+1,___fttol@f1+1
  4008  000872  C038  F092         	movff	?___ftmul+2,___fttol@f1+2
  4009  000876  ECAC  F010         	call	___fttol	;wreg free
  4010  00087A  C090  F16F         	movff	?___fttol,sprintf@val
  4011  00087E  C091  F170         	movff	?___fttol+1,sprintf@val+1
  4012  000882  C092  F171         	movff	?___fttol+2,sprintf@val+2
  4013  000886  C093  F172         	movff	?___fttol+3,sprintf@val+3
  4014                           
  4015                           ;doprnt.c: 1228: while(c--) {
  4016  00088A  D07C               	goto	l4832
  4017  00088C                     l4822:
  4018  00088C  FFFF               	dw	65535	; assembler added errata NOP
  4019                           
  4020                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4021  00088E  C16F  F022         	movff	sprintf@val,___lldiv@dividend
  4022  000892  C170  F023         	movff	sprintf@val+1,___lldiv@dividend+1
  4023  000896  C171  F024         	movff	sprintf@val+2,___lldiv@dividend+2
  4024  00089A  C172  F025         	movff	sprintf@val+3,___lldiv@dividend+3
  4025  00089E  0101               	movlb	1	; () banked
  4026  0008A0  5178               	movf	sprintf@c& (0+255),w,b
  4027  0008A2  0D04               	mullw	4
  4028  0008A4  0E0B               	movlw	low _dpowers
  4029  0008A6  24F3               	addwf	prodl,w,c
  4030  0008A8  6EF6               	movwf	tblptrl,c
  4031  0008AA  0E7E               	movlw	high _dpowers
  4032  0008AC  20F4               	addwfc	prodh,w,c
  4033  0008AE  6EF7               	movwf	tblptrh,c
  4034  0008B0                     	if	0	;There are less than 3 active tblptr bytes
  4035  0008B0                     	endif
  4036  0008B0  0009               	tblrd		*+
  4037  0008B2  FFFF               	dw	65535	; errata NOP
  4038  0008B4  CFF5 F026          	movff	tablat,___lldiv@divisor
  4039  0008B8  0009               	tblrd		*+
  4040  0008BA  FFFF               	dw	65535	; errata NOP
  4041  0008BC  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  4042  0008C0  0009               	tblrd		*+
  4043  0008C2  FFFF               	dw	65535	; errata NOP
  4044  0008C4  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  4045  0008C8  000A               	tblrd		*-
  4046  0008CA  FFFF               	dw	65535	; errata NOP
  4047  0008CC  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  4048  0008D0  ECE4  F014         	call	___lldiv	;wreg free
  4049  0008D4  C022  F167         	movff	?___lldiv,sprintf@tmpval
  4050  0008D8  C023  F168         	movff	?___lldiv+1,sprintf@tmpval+1
  4051  0008DC  C024  F169         	movff	?___lldiv+2,sprintf@tmpval+2
  4052  0008E0  C025  F16A         	movff	?___lldiv+3,sprintf@tmpval+3
  4053                           
  4054                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4055  0008E4  C167  F02F         	movff	sprintf@tmpval,___llmod@dividend
  4056  0008E8  C168  F030         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4057  0008EC  C169  F031         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4058  0008F0  C16A  F032         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4059  0008F4  0E0A               	movlw	10
  4060  0008F6  6E33               	movwf	___llmod@divisor,c
  4061  0008F8  0E00               	movlw	0
  4062  0008FA  6E34               	movwf	___llmod@divisor+1,c
  4063  0008FC  0E00               	movlw	0
  4064  0008FE  6E35               	movwf	___llmod@divisor+2,c
  4065  000900  0E00               	movlw	0
  4066  000902  6E36               	movwf	___llmod@divisor+3,c
  4067  000904  ECAA  F015         	call	___llmod	;wreg free
  4068  000908  C02F  F167         	movff	?___llmod,sprintf@tmpval
  4069  00090C  C030  F168         	movff	?___llmod+1,sprintf@tmpval+1
  4070  000910  C031  F169         	movff	?___llmod+2,sprintf@tmpval+2
  4071  000914  C032  F16A         	movff	?___llmod+3,sprintf@tmpval+3
  4072                           
  4073                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4074  000918  0101               	movlb	1	; () banked
  4075  00091A  5167               	movf	sprintf@tmpval& (0+255),w,b
  4076  00091C  0F30               	addlw	48
  4077  00091E  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4078  000922  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4079  000926  6EDF               	movwf	indf2,c
  4080                           
  4081                           ; BSR set to: 1
  4082  000928  0100               	movlb	0	; () banked
  4083  00092A  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4084  00092C  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;doprnt.c: 1232: val %= dpowers[c];
  4088  00092E  C16F  F02F         	movff	sprintf@val,___llmod@dividend
  4089  000932  C170  F030         	movff	sprintf@val+1,___llmod@dividend+1
  4090  000936  C171  F031         	movff	sprintf@val+2,___llmod@dividend+2
  4091  00093A  C172  F032         	movff	sprintf@val+3,___llmod@dividend+3
  4092  00093E  0101               	movlb	1	; () banked
  4093  000940  5178               	movf	sprintf@c& (0+255),w,b
  4094  000942  0D04               	mullw	4
  4095  000944  0E0B               	movlw	low _dpowers
  4096  000946  24F3               	addwf	prodl,w,c
  4097  000948  6EF6               	movwf	tblptrl,c
  4098  00094A  0E7E               	movlw	high _dpowers
  4099  00094C  20F4               	addwfc	prodh,w,c
  4100  00094E  6EF7               	movwf	tblptrh,c
  4101  000950                     	if	0	;There are less than 3 active tblptr bytes
  4102  000950                     	endif
  4103  000950  0009               	tblrd		*+
  4104  000952  FFFF               	dw	65535	; errata NOP
  4105  000954  CFF5 F033          	movff	tablat,___llmod@divisor
  4106  000958  0009               	tblrd		*+
  4107  00095A  FFFF               	dw	65535	; errata NOP
  4108  00095C  CFF5 F034          	movff	tablat,___llmod@divisor+1
  4109  000960  0009               	tblrd		*+
  4110  000962  FFFF               	dw	65535	; errata NOP
  4111  000964  CFF5 F035          	movff	tablat,___llmod@divisor+2
  4112  000968  000A               	tblrd		*-
  4113  00096A  FFFF               	dw	65535	; errata NOP
  4114  00096C  CFF5 F036          	movff	tablat,___llmod@divisor+3
  4115  000970  ECAA  F015         	call	___llmod	;wreg free
  4116  000974  C02F  F16F         	movff	?___llmod,sprintf@val
  4117  000978  C030  F170         	movff	?___llmod+1,sprintf@val+1
  4118  00097C  C031  F171         	movff	?___llmod+2,sprintf@val+2
  4119  000980  C032  F172         	movff	?___llmod+3,sprintf@val+3
  4120  000984                     l4832:
  4121  000984  FFFF               	dw	65535	; assembler added errata NOP
  4122  000986  0101               	movlb	1	; () banked
  4123  000988  0778               	decf	sprintf@c& (0+255),f,b
  4124  00098A  0101               	movlb	1	; () banked
  4125  00098C  2978               	incf	sprintf@c& (0+255),w,b
  4126  00098E  B4D8               	btfsc	status,2,c
  4127  000990  D00F               	goto	l4840
  4128  000992  D77C               	goto	l4822
  4129  000994                     l4834:
  4130  000994  FFFF               	dw	65535	; assembler added errata NOP
  4131                           
  4132                           ; BSR set to: 1
  4133                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4134  000996  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4135  00099A  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4136  00099E  0E30               	movlw	48
  4137  0009A0  6EDF               	movwf	indf2,c
  4138                           
  4139                           ; BSR set to: 1
  4140  0009A2  0100               	movlb	0	; () banked
  4141  0009A4  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4142  0009A6  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;doprnt.c: 1237: prec--;
  4146  0009A8  0101               	movlb	1	; () banked
  4147  0009AA  0765               	decf	sprintf@prec& (0+255),f,b
  4148  0009AC  A0D8               	btfss	status,0,c
  4149  0009AE  0766               	decf	(sprintf@prec+1)& (0+255),f,b
  4150  0009B0                     l4840:
  4151  0009B0  FFFF               	dw	65535	; assembler added errata NOP
  4152                           
  4153                           ; BSR set to: 1
  4154  0009B2  0101               	movlb	1	; () banked
  4155  0009B4  5165               	movf	sprintf@prec& (0+255),w,b
  4156  0009B6  0101               	movlb	1	; () banked
  4157  0009B8  1166               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4158  0009BA  B4D8               	btfsc	status,2,c
  4159  0009BC  D1F3               	goto	l4948
  4160  0009BE  D7EA               	goto	l4834
  4161  0009C0                     l429:
  4162  0009C0  FFFF               	dw	65535	; assembler added errata NOP
  4163                           
  4164                           ; BSR set to: 1
  4165                           ;doprnt.c: 1246: }
  4166                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4167  0009C2  0101               	movlb	1	; () banked
  4168  0009C4  BF73               	btfsc	sprintf@flag& (0+255),7,b
  4169  0009C6  D023               	goto	l4852
  4170                           
  4171                           ; BSR set to: 1
  4172                           ;doprnt.c: 1253: {
  4173                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4174  0009C8  C163  FFD9         	movff	sprintf@ap,fsr2l
  4175  0009CC  C164  FFDA         	movff	sprintf@ap+1,fsr2h
  4176  0009D0  CFDE F16F          	movff	postinc2,sprintf@val
  4177  0009D4  CFDD F170          	movff	postdec2,sprintf@val+1
  4178  0009D8  0101               	movlb	1	; () banked
  4179  0009DA  0E00               	movlw	0
  4180  0009DC  BF70               	btfsc	(sprintf@val+1)& (0+255),7,b
  4181  0009DE  0EFF               	movlw	-1
  4182  0009E0  6F71               	movwf	(sprintf@val+2)& (0+255),b
  4183  0009E2  6F72               	movwf	(sprintf@val+3)& (0+255),b
  4184                           
  4185                           ; BSR set to: 1
  4186  0009E4  0E02               	movlw	2
  4187  0009E6  0101               	movlb	1	; () banked
  4188  0009E8  2763               	addwf	sprintf@ap& (0+255),f,b
  4189  0009EA  0E00               	movlw	0
  4190  0009EC  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4191                           
  4192                           ; BSR set to: 1
  4193                           ;doprnt.c: 1261: if((long)val < 0) {
  4194  0009EE  0101               	movlb	1	; () banked
  4195  0009F0  AF72               	btfss	(sprintf@val+3)& (0+255),7,b
  4196  0009F2  D07B               	goto	l4886
  4197                           
  4198                           ; BSR set to: 1
  4199                           ;doprnt.c: 1262: flag |= 0x03;
  4200  0009F4  0E03               	movlw	3
  4201  0009F6  0101               	movlb	1	; () banked
  4202  0009F8  1373               	iorwf	sprintf@flag& (0+255),f,b
  4203                           
  4204                           ; BSR set to: 1
  4205                           ;doprnt.c: 1263: val = -val;
  4206  0009FA  0101               	movlb	1	; () banked
  4207  0009FC  1F72               	comf	(sprintf@val+3)& (0+255),f,b
  4208  0009FE  1F71               	comf	(sprintf@val+2)& (0+255),f,b
  4209  000A00  1F70               	comf	(sprintf@val+1)& (0+255),f,b
  4210  000A02  6D6F               	negf	sprintf@val& (0+255),b
  4211  000A04  0E00               	movlw	0
  4212  000A06  2370               	addwfc	(sprintf@val+1)& (0+255),f,b
  4213  000A08  2371               	addwfc	(sprintf@val+2)& (0+255),f,b
  4214  000A0A  2372               	addwfc	(sprintf@val+3)& (0+255),f,b
  4215                           
  4216                           ; BSR set to: 1
  4217                           ;doprnt.c: 1264: }
  4218                           ;doprnt.c: 1266: }
  4219  000A0C  D06E               	goto	l4886
  4220  000A0E                     l4852:
  4221  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  4222                           
  4223                           ; BSR set to: 1
  4224                           ;doprnt.c: 1268: else
  4225                           ;doprnt.c: 1273: {
  4226                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4227  000A10  C163  FFD9         	movff	sprintf@ap,fsr2l
  4228  000A14  C164  FFDA         	movff	sprintf@ap+1,fsr2h
  4229  000A18  CFDE F0AC          	movff	postinc2,??_sprintf
  4230  000A1C  CFDD F0AD          	movff	postdec2,??_sprintf+1
  4231  000A20  C0AC  F16F         	movff	??_sprintf,sprintf@val
  4232  000A24  C0AD  F170         	movff	??_sprintf+1,sprintf@val+1
  4233  000A28  0101               	movlb	1	; () banked
  4234  000A2A  6B71               	clrf	(sprintf@val+2)& (0+255),b
  4235  000A2C  6B72               	clrf	(sprintf@val+3)& (0+255),b
  4236                           
  4237                           ; BSR set to: 1
  4238  000A2E  0E02               	movlw	2
  4239  000A30  0101               	movlb	1	; () banked
  4240  000A32  2763               	addwf	sprintf@ap& (0+255),f,b
  4241  000A34  0E00               	movlw	0
  4242  000A36  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4243                           
  4244                           ; BSR set to: 1
  4245                           ;doprnt.c: 1287: }
  4246                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4247  000A38  D058               	goto	l4886
  4248  000A3A                     l4856:
  4249  000A3A  FFFF               	dw	65535	; assembler added errata NOP
  4250                           
  4251                           ; BSR set to: 1
  4252                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4253  000A3C  0E01               	movlw	1
  4254  000A3E  0101               	movlb	1	; () banked
  4255  000A40  6F78               	movwf	sprintf@c& (0+255),b
  4256  000A42                     l4858:
  4257  000A42  FFFF               	dw	65535	; assembler added errata NOP
  4258                           
  4259                           ; BSR set to: 1
  4260  000A44  0E0A               	movlw	10
  4261  000A46  0101               	movlb	1	; () banked
  4262  000A48  1978               	xorwf	sprintf@c& (0+255),w,b
  4263  000A4A  B4D8               	btfsc	status,2,c
  4264  000A4C  D058               	goto	l4888
  4265                           
  4266                           ; BSR set to: 1
  4267                           ;doprnt.c: 1306: if(val < dpowers[c])
  4268                           
  4269                           ; BSR set to: 1
  4270                           
  4271                           ; BSR set to: 1
  4272  000A4E  0101               	movlb	1	; () banked
  4273  000A50  5178               	movf	sprintf@c& (0+255),w,b
  4274  000A52  0D04               	mullw	4
  4275  000A54  0E0B               	movlw	low _dpowers
  4276  000A56  24F3               	addwf	prodl,w,c
  4277  000A58  6EF6               	movwf	tblptrl,c
  4278  000A5A  0E7E               	movlw	high _dpowers
  4279  000A5C  20F4               	addwfc	prodh,w,c
  4280  000A5E  6EF7               	movwf	tblptrh,c
  4281  000A60                     	if	0	;There are less than 3 active tblptr bytes
  4282  000A60                     	endif
  4283  000A60  0009               	tblrd		*+
  4284  000A62  FFFF               	dw	65535	; errata NOP
  4285  000A64  50F5               	movf	tablat,w,c
  4286  000A66  0101               	movlb	1	; () banked
  4287  000A68  5D6F               	subwf	sprintf@val& (0+255),w,b
  4288  000A6A  0009               	tblrd		*+
  4289  000A6C  FFFF               	dw	65535	; errata NOP
  4290  000A6E  50F5               	movf	tablat,w,c
  4291  000A70  0101               	movlb	1	; () banked
  4292  000A72  5970               	subwfb	(sprintf@val+1)& (0+255),w,b
  4293  000A74  0009               	tblrd		*+
  4294  000A76  FFFF               	dw	65535	; errata NOP
  4295  000A78  50F5               	movf	tablat,w,c
  4296  000A7A  0101               	movlb	1	; () banked
  4297  000A7C  5971               	subwfb	(sprintf@val+2)& (0+255),w,b
  4298  000A7E  0009               	tblrd		*+
  4299  000A80  FFFF               	dw	65535	; errata NOP
  4300  000A82  50F5               	movf	tablat,w,c
  4301  000A84  0101               	movlb	1	; () banked
  4302  000A86  5972               	subwfb	(sprintf@val+3)& (0+255),w,b
  4303  000A88  A0D8               	btfss	status,0,c
  4304  000A8A  D039               	goto	l4888
  4305                           
  4306                           ; BSR set to: 1
  4307                           
  4308                           ; BSR set to: 1
  4309                           
  4310                           ; BSR set to: 1
  4311                           ;doprnt.c: 1307: break;
  4312  000A8C  0101               	movlb	1	; () banked
  4313  000A8E  2B78               	incf	sprintf@c& (0+255),f,b
  4314  000A90  D7D8               	goto	l4858
  4315  000A92                     l4870:
  4316  000A92  FFFF               	dw	65535	; assembler added errata NOP
  4317                           
  4318                           ; BSR set to: 1
  4319                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4320  000A94  0E01               	movlw	1
  4321  000A96  0101               	movlb	1	; () banked
  4322  000A98  6F78               	movwf	sprintf@c& (0+255),b
  4323  000A9A                     l4872:
  4324  000A9A  FFFF               	dw	65535	; assembler added errata NOP
  4325                           
  4326                           ; BSR set to: 1
  4327  000A9C  0E08               	movlw	8
  4328  000A9E  0101               	movlb	1	; () banked
  4329  000AA0  1978               	xorwf	sprintf@c& (0+255),w,b
  4330  000AA2  B4D8               	btfsc	status,2,c
  4331  000AA4  D02C               	goto	l4888
  4332                           
  4333                           ; BSR set to: 1
  4334                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4335                           
  4336                           ; BSR set to: 1
  4337                           
  4338                           ; BSR set to: 1
  4339  000AA6  0101               	movlb	1	; () banked
  4340  000AA8  5178               	movf	sprintf@c& (0+255),w,b
  4341  000AAA  0D04               	mullw	4
  4342  000AAC  0E81               	movlw	low _hexpowers
  4343  000AAE  24F3               	addwf	prodl,w,c
  4344  000AB0  6EF6               	movwf	tblptrl,c
  4345  000AB2  0E7E               	movlw	high _hexpowers
  4346  000AB4  20F4               	addwfc	prodh,w,c
  4347  000AB6  6EF7               	movwf	tblptrh,c
  4348  000AB8                     	if	0	;There are less than 3 active tblptr bytes
  4349  000AB8                     	endif
  4350  000AB8  0009               	tblrd		*+
  4351  000ABA  FFFF               	dw	65535	; errata NOP
  4352  000ABC  50F5               	movf	tablat,w,c
  4353  000ABE  0101               	movlb	1	; () banked
  4354  000AC0  5D6F               	subwf	sprintf@val& (0+255),w,b
  4355  000AC2  0009               	tblrd		*+
  4356  000AC4  FFFF               	dw	65535	; errata NOP
  4357  000AC6  50F5               	movf	tablat,w,c
  4358  000AC8  0101               	movlb	1	; () banked
  4359  000ACA  5970               	subwfb	(sprintf@val+1)& (0+255),w,b
  4360  000ACC  0009               	tblrd		*+
  4361  000ACE  FFFF               	dw	65535	; errata NOP
  4362  000AD0  50F5               	movf	tablat,w,c
  4363  000AD2  0101               	movlb	1	; () banked
  4364  000AD4  5971               	subwfb	(sprintf@val+2)& (0+255),w,b
  4365  000AD6  0009               	tblrd		*+
  4366  000AD8  FFFF               	dw	65535	; errata NOP
  4367  000ADA  50F5               	movf	tablat,w,c
  4368  000ADC  0101               	movlb	1	; () banked
  4369  000ADE  5972               	subwfb	(sprintf@val+3)& (0+255),w,b
  4370  000AE0  A0D8               	btfss	status,0,c
  4371  000AE2  D00D               	goto	l4888
  4372                           
  4373                           ; BSR set to: 1
  4374                           
  4375                           ; BSR set to: 1
  4376                           
  4377                           ; BSR set to: 1
  4378                           ;doprnt.c: 1318: break;
  4379  000AE4  0101               	movlb	1	; () banked
  4380  000AE6  2B78               	incf	sprintf@c& (0+255),f,b
  4381  000AE8  D7D8               	goto	l4872
  4382  000AEA                     l4886:
  4383  000AEA  FFFF               	dw	65535	; assembler added errata NOP
  4384                           
  4385                           ; BSR set to: 1
  4386  000AEC  0101               	movlb	1	; () banked
  4387  000AEE  5173               	movf	sprintf@flag& (0+255),w,b
  4388  000AF0  0B80               	andlw	128
  4389                           
  4390                           ; Switch size 1, requested type "space"
  4391                           ; Number of cases is 2, Range of values is 0 to 128
  4392                           ; switch strategies available:
  4393                           ; Name         Instructions Cycles
  4394                           ; simple_byte            7     4 (average)
  4395                           ;	Chosen strategy is simple_byte
  4396  000AF2  0A00               	xorlw	0	; case 0
  4397  000AF4  B4D8               	btfsc	status,2,c
  4398  000AF6  D7A1               	goto	l4856
  4399  000AF8  0A80               	xorlw	128	; case 128
  4400  000AFA  B4D8               	btfsc	status,2,c
  4401  000AFC  D7CA               	goto	l4870
  4402  000AFE                     l4888:
  4403  000AFE  FFFF               	dw	65535	; assembler added errata NOP
  4404                           
  4405                           ; BSR set to: 1
  4406                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4407  000B00  0101               	movlb	1	; () banked
  4408  000B02  516B               	movf	sprintf@width& (0+255),w,b
  4409  000B04  0101               	movlb	1	; () banked
  4410  000B06  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  4411  000B08  B4D8               	btfsc	status,2,c
  4412  000B0A  D014               	goto	l4894
  4413                           
  4414                           ; BSR set to: 1
  4415  000B0C  0E03               	movlw	3
  4416  000B0E  0101               	movlb	1	; () banked
  4417  000B10  1573               	andwf	sprintf@flag& (0+255),w,b
  4418  000B12  0100               	movlb	0	; () banked
  4419  000B14  6FAC               	movwf	??_sprintf& (0+255),b
  4420  000B16  0E00               	movlw	0
  4421  000B18  0101               	movlb	1	; () banked
  4422  000B1A  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  4423  000B1C  0100               	movlb	0	; () banked
  4424  000B1E  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  4425  000B20  0100               	movlb	0	; () banked
  4426  000B22  51AC               	movf	??_sprintf& (0+255),w,b
  4427  000B24  0100               	movlb	0	; () banked
  4428  000B26  11AD               	iorwf	(??_sprintf+1)& (0+255),w,b
  4429  000B28  B4D8               	btfsc	status,2,c
  4430  000B2A  D004               	goto	l4894
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;doprnt.c: 1346: width--;
  4434  000B2C  0101               	movlb	1	; () banked
  4435  000B2E  076B               	decf	sprintf@width& (0+255),f,b
  4436  000B30  A0D8               	btfss	status,0,c
  4437  000B32  076C               	decf	(sprintf@width+1)& (0+255),f,b
  4438  000B34                     l4894:
  4439  000B34  FFFF               	dw	65535	; assembler added errata NOP
  4440                           
  4441                           ;doprnt.c: 1381: if(width > c)
  4442  000B36  0E80               	movlw	128
  4443  000B38  0101               	movlb	1	; () banked
  4444  000B3A  BF78               	btfsc	sprintf@c& (0+255),7,b
  4445  000B3C  0E7F               	movlw	127
  4446  000B3E  0100               	movlb	0	; () banked
  4447  000B40  6FAC               	movwf	??_sprintf& (0+255),b
  4448  000B42  0101               	movlb	1	; () banked
  4449  000B44  516B               	movf	sprintf@width& (0+255),w,b
  4450  000B46  0101               	movlb	1	; () banked
  4451  000B48  5D78               	subwf	sprintf@c& (0+255),w,b
  4452  000B4A  0101               	movlb	1	; () banked
  4453  000B4C  516C               	movf	(sprintf@width+1)& (0+255),w,b
  4454  000B4E  0A80               	xorlw	128
  4455  000B50  0100               	movlb	0	; () banked
  4456  000B52  59AC               	subwfb	??_sprintf& (0+255),w,b
  4457  000B54  B0D8               	btfsc	status,0,c
  4458  000B56  D00B               	goto	l4898
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;doprnt.c: 1382: width -= c;
  4462  000B58  0101               	movlb	1	; () banked
  4463  000B5A  5178               	movf	sprintf@c& (0+255),w,b
  4464  000B5C  0101               	movlb	1	; () banked
  4465  000B5E  5F6B               	subwf	sprintf@width& (0+255),f,b
  4466  000B60  0E00               	movlw	0
  4467  000B62  0101               	movlb	1	; () banked
  4468  000B64  BF78               	btfsc	sprintf@c& (0+255),7,b
  4469  000B66  0EFF               	movlw	255
  4470  000B68  0101               	movlb	1	; () banked
  4471  000B6A  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  4472  000B6C  D006               	goto	l4900
  4473  000B6E                     l4898:
  4474  000B6E  FFFF               	dw	65535	; assembler added errata NOP
  4475                           
  4476                           ;doprnt.c: 1383: else
  4477                           ;doprnt.c: 1384: width = 0;
  4478  000B70  0E00               	movlw	0
  4479  000B72  0101               	movlb	1	; () banked
  4480  000B74  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  4481  000B76  0E00               	movlw	0
  4482  000B78  6F6B               	movwf	sprintf@width& (0+255),b
  4483  000B7A                     l4900:
  4484  000B7A  FFFF               	dw	65535	; assembler added errata NOP
  4485                           
  4486                           ; BSR set to: 1
  4487                           ;doprnt.c: 1387: if(flag & 0x04) {
  4488  000B7C  0101               	movlb	1	; () banked
  4489  000B7E  A573               	btfss	sprintf@flag& (0+255),2,b
  4490  000B80  D02E               	goto	l4916
  4491                           
  4492                           ; BSR set to: 1
  4493                           ;doprnt.c: 1392: if(flag & 0x03)
  4494  000B82  0E03               	movlw	3
  4495  000B84  0101               	movlb	1	; () banked
  4496  000B86  1573               	andwf	sprintf@flag& (0+255),w,b
  4497  000B88  0100               	movlb	0	; () banked
  4498  000B8A  6FAC               	movwf	??_sprintf& (0+255),b
  4499  000B8C  0E00               	movlw	0
  4500  000B8E  0101               	movlb	1	; () banked
  4501  000B90  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  4502  000B92  0100               	movlb	0	; () banked
  4503  000B94  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  4504  000B96  0100               	movlb	0	; () banked
  4505  000B98  51AC               	movf	??_sprintf& (0+255),w,b
  4506  000B9A  0100               	movlb	0	; () banked
  4507  000B9C  11AD               	iorwf	(??_sprintf+1)& (0+255),w,b
  4508  000B9E  B4D8               	btfsc	status,2,c
  4509  000BA0  D009               	goto	l4908
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4513  000BA2  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4514  000BA6  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4515  000BAA  0E2D               	movlw	45
  4516  000BAC  6EDF               	movwf	indf2,c
  4517                           
  4518                           ; BSR set to: 0
  4519  000BAE  0100               	movlb	0	; () banked
  4520  000BB0  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4521  000BB2  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4522  000BB4                     l4908:
  4523  000BB4  FFFF               	dw	65535	; assembler added errata NOP
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;doprnt.c: 1415: if(width)
  4527  000BB6  0101               	movlb	1	; () banked
  4528  000BB8  516B               	movf	sprintf@width& (0+255),w,b
  4529  000BBA  0101               	movlb	1	; () banked
  4530  000BBC  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  4531  000BBE  B4D8               	btfsc	status,2,c
  4532  000BC0  D043               	goto	l4930
  4533                           
  4534                           ; BSR set to: 1
  4535                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4536                           
  4537                           ; BSR set to: 1
  4538                           
  4539                           ;doprnt.c: 1416: do
  4540  000BC2  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4541  000BC6  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4542  000BCA  0E30               	movlw	48
  4543  000BCC  6EDF               	movwf	indf2,c
  4544                           
  4545                           ; BSR set to: 1
  4546  000BCE  0100               	movlb	0	; () banked
  4547  000BD0  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4548  000BD2  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;doprnt.c: 1418: while(--width);
  4552  000BD4  0101               	movlb	1	; () banked
  4553  000BD6  076B               	decf	sprintf@width& (0+255),f,b
  4554  000BD8  A0D8               	btfss	status,0,c
  4555  000BDA  076C               	decf	(sprintf@width+1)& (0+255),f,b
  4556  000BDC  D7EB               	goto	l4908
  4557  000BDE                     l4916:
  4558  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  4559                           
  4560                           ; BSR set to: 1
  4561                           ;doprnt.c: 1422: {
  4562                           ;doprnt.c: 1424: if(width
  4563                           ;doprnt.c: 1428: )
  4564  000BE0  0101               	movlb	1	; () banked
  4565  000BE2  516B               	movf	sprintf@width& (0+255),w,b
  4566  000BE4  0101               	movlb	1	; () banked
  4567  000BE6  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  4568  000BE8  B4D8               	btfsc	status,2,c
  4569  000BEA  D014               	goto	l4924
  4570  000BEC                     l4918:
  4571  000BEC  FFFF               	dw	65535	; assembler added errata NOP
  4572                           
  4573                           ; BSR set to: 1
  4574                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4575  000BEE  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4576  000BF2  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4577  000BF6  0E20               	movlw	32
  4578  000BF8  6EDF               	movwf	indf2,c
  4579                           
  4580                           ; BSR set to: 1
  4581  000BFA  0100               	movlb	0	; () banked
  4582  000BFC  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4583  000BFE  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;doprnt.c: 1431: while(--width);
  4587  000C00  0101               	movlb	1	; () banked
  4588  000C02  076B               	decf	sprintf@width& (0+255),f,b
  4589  000C04  A0D8               	btfss	status,0,c
  4590  000C06  076C               	decf	(sprintf@width+1)& (0+255),f,b
  4591  000C08  0101               	movlb	1	; () banked
  4592  000C0A  516B               	movf	sprintf@width& (0+255),w,b
  4593  000C0C  0101               	movlb	1	; () banked
  4594  000C0E  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  4595  000C10  A4D8               	btfss	status,2,c
  4596  000C12  D7EC               	goto	l4918
  4597  000C14                     l4924:
  4598  000C14  FFFF               	dw	65535	; assembler added errata NOP
  4599                           
  4600                           ; BSR set to: 1
  4601                           ;doprnt.c: 1438: if(flag & 0x03)
  4602  000C16  0E03               	movlw	3
  4603  000C18  0101               	movlb	1	; () banked
  4604  000C1A  1573               	andwf	sprintf@flag& (0+255),w,b
  4605  000C1C  0100               	movlb	0	; () banked
  4606  000C1E  6FAC               	movwf	??_sprintf& (0+255),b
  4607  000C20  0E00               	movlw	0
  4608  000C22  0101               	movlb	1	; () banked
  4609  000C24  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  4610  000C26  0100               	movlb	0	; () banked
  4611  000C28  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  4612  000C2A  0100               	movlb	0	; () banked
  4613  000C2C  51AC               	movf	??_sprintf& (0+255),w,b
  4614  000C2E  0100               	movlb	0	; () banked
  4615  000C30  11AD               	iorwf	(??_sprintf+1)& (0+255),w,b
  4616  000C32  B4D8               	btfsc	status,2,c
  4617  000C34  D009               	goto	l4930
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4621  000C36  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4622  000C3A  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4623  000C3E  0E2D               	movlw	45
  4624  000C40  6EDF               	movwf	indf2,c
  4625                           
  4626                           ; BSR set to: 0
  4627  000C42  0100               	movlb	0	; () banked
  4628  000C44  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4629  000C46  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4630  000C48                     l4930:
  4631  000C48  FFFF               	dw	65535	; assembler added errata NOP
  4632                           
  4633                           ;doprnt.c: 1469: }
  4634                           ;doprnt.c: 1472: prec = c;
  4635  000C4A  0101               	movlb	1	; () banked
  4636  000C4C  5178               	movf	sprintf@c& (0+255),w,b
  4637  000C4E  0101               	movlb	1	; () banked
  4638  000C50  6F65               	movwf	sprintf@prec& (0+255),b
  4639  000C52  6B66               	clrf	(sprintf@prec+1)& (0+255),b
  4640  000C54  BF65               	btfsc	sprintf@prec& (0+255),7,b
  4641  000C56  0766               	decf	(sprintf@prec+1)& (0+255),f,b
  4642                           
  4643                           ;doprnt.c: 1474: while(prec--) {
  4644  000C58  D099               	goto	l4946
  4645  000C5A                     l4932:
  4646  000C5A  FFFF               	dw	65535	; assembler added errata NOP
  4647                           
  4648                           ; BSR set to: 1
  4649                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4650  000C5C  C165  F0AC         	movff	sprintf@prec,??_sprintf
  4651  000C60  C166  F0AD         	movff	sprintf@prec+1,??_sprintf+1
  4652  000C64  0100               	movlb	0	; () banked
  4653  000C66  90D8               	bcf	status,0,c
  4654  000C68  37AC               	rlcf	??_sprintf& (0+255),f,b
  4655  000C6A  37AD               	rlcf	(??_sprintf+1)& (0+255),f,b
  4656  000C6C  0100               	movlb	0	; () banked
  4657  000C6E  90D8               	bcf	status,0,c
  4658  000C70  37AC               	rlcf	??_sprintf& (0+255),f,b
  4659  000C72  37AD               	rlcf	(??_sprintf+1)& (0+255),f,b
  4660  000C74  0E0B               	movlw	low _dpowers
  4661  000C76  0100               	movlb	0	; () banked
  4662  000C78  25AC               	addwf	??_sprintf& (0+255),w,b
  4663  000C7A  6EF6               	movwf	tblptrl,c
  4664  000C7C  0E7E               	movlw	high _dpowers
  4665  000C7E  21AD               	addwfc	(??_sprintf+1)& (0+255),w,b
  4666  000C80  6EF7               	movwf	tblptrh,c
  4667  000C82                     	if	0	;There are less than 3 active tblptr bytes
  4668  000C82                     	endif
  4669  000C82  0009               	tblrd		*+
  4670  000C84  FFFF               	dw	65535	; errata NOP
  4671  000C86  CFF5 F026          	movff	tablat,___lldiv@divisor
  4672  000C8A  0009               	tblrd		*+
  4673  000C8C  FFFF               	dw	65535	; errata NOP
  4674  000C8E  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  4675  000C92  0009               	tblrd		*+
  4676  000C94  FFFF               	dw	65535	; errata NOP
  4677  000C96  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  4678  000C9A  000A               	tblrd		*-
  4679  000C9C  FFFF               	dw	65535	; errata NOP
  4680  000C9E  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  4681  000CA2  C16F  F022         	movff	sprintf@val,___lldiv@dividend
  4682  000CA6  C170  F023         	movff	sprintf@val+1,___lldiv@dividend+1
  4683  000CAA  C171  F024         	movff	sprintf@val+2,___lldiv@dividend+2
  4684  000CAE  C172  F025         	movff	sprintf@val+3,___lldiv@dividend+3
  4685  000CB2  ECE4  F014         	call	___lldiv	;wreg free
  4686  000CB6  C022  F02F         	movff	?___lldiv,___llmod@dividend
  4687  000CBA  C023  F030         	movff	?___lldiv+1,___llmod@dividend+1
  4688  000CBE  C024  F031         	movff	?___lldiv+2,___llmod@dividend+2
  4689  000CC2  C025  F032         	movff	?___lldiv+3,___llmod@dividend+3
  4690  000CC6  0E0A               	movlw	10
  4691  000CC8  6E33               	movwf	___llmod@divisor,c
  4692  000CCA  0E00               	movlw	0
  4693  000CCC  6E34               	movwf	___llmod@divisor+1,c
  4694  000CCE  0E00               	movlw	0
  4695  000CD0  6E35               	movwf	___llmod@divisor+2,c
  4696  000CD2  0E00               	movlw	0
  4697  000CD4  6E36               	movwf	___llmod@divisor+3,c
  4698  000CD6  ECAA  F015         	call	___llmod	;wreg free
  4699  000CDA  502F               	movf	?___llmod,w,c
  4700  000CDC  0F30               	addlw	48
  4701  000CDE  0101               	movlb	1	; () banked
  4702  000CE0  6F78               	movwf	sprintf@c& (0+255),b
  4703                           
  4704                           ;doprnt.c: 1491: break;
  4705  000CE2  D04A               	goto	l4942
  4706  000CE4                     l4934:
  4707  000CE4  FFFF               	dw	65535	; assembler added errata NOP
  4708                           
  4709                           ; BSR set to: 1
  4710                           ;doprnt.c: 1499: {
  4711                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4712  000CE6  C16F  F022         	movff	sprintf@val,___lldiv@dividend
  4713  000CEA  C170  F023         	movff	sprintf@val+1,___lldiv@dividend+1
  4714  000CEE  C171  F024         	movff	sprintf@val+2,___lldiv@dividend+2
  4715  000CF2  C172  F025         	movff	sprintf@val+3,___lldiv@dividend+3
  4716  000CF6  C165  F0AC         	movff	sprintf@prec,??_sprintf
  4717  000CFA  C166  F0AD         	movff	sprintf@prec+1,??_sprintf+1
  4718  000CFE  0100               	movlb	0	; () banked
  4719  000D00  90D8               	bcf	status,0,c
  4720  000D02  37AC               	rlcf	??_sprintf& (0+255),f,b
  4721  000D04  37AD               	rlcf	(??_sprintf+1)& (0+255),f,b
  4722  000D06  0100               	movlb	0	; () banked
  4723  000D08  90D8               	bcf	status,0,c
  4724  000D0A  37AC               	rlcf	??_sprintf& (0+255),f,b
  4725  000D0C  37AD               	rlcf	(??_sprintf+1)& (0+255),f,b
  4726  000D0E  0E81               	movlw	low _hexpowers
  4727  000D10  0100               	movlb	0	; () banked
  4728  000D12  25AC               	addwf	??_sprintf& (0+255),w,b
  4729  000D14  6EF6               	movwf	tblptrl,c
  4730  000D16  0E7E               	movlw	high _hexpowers
  4731  000D18  21AD               	addwfc	(??_sprintf+1)& (0+255),w,b
  4732  000D1A  6EF7               	movwf	tblptrh,c
  4733  000D1C                     	if	0	;There are less than 3 active tblptr bytes
  4734  000D1C                     	endif
  4735  000D1C  0009               	tblrd		*+
  4736  000D1E  FFFF               	dw	65535	; errata NOP
  4737  000D20  CFF5 F026          	movff	tablat,___lldiv@divisor
  4738  000D24  0009               	tblrd		*+
  4739  000D26  FFFF               	dw	65535	; errata NOP
  4740  000D28  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  4741  000D2C  0009               	tblrd		*+
  4742  000D2E  FFFF               	dw	65535	; errata NOP
  4743  000D30  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  4744  000D34  000A               	tblrd		*-
  4745  000D36  FFFF               	dw	65535	; errata NOP
  4746  000D38  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  4747  000D3C  ECE4  F014         	call	___lldiv	;wreg free
  4748  000D40  5022               	movf	?___lldiv,w,c
  4749  000D42  0B0F               	andlw	15
  4750  000D44  0101               	movlb	1	; () banked
  4751  000D46  6F62               	movwf	sprintf@idx& (0+255),b
  4752                           
  4753                           ; BSR set to: 1
  4754                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  4755  000D48  0101               	movlb	1	; () banked
  4756  000D4A  5162               	movf	sprintf@idx& (0+255),w,b
  4757  000D4C  0D01               	mullw	1
  4758  000D4E  0ECB               	movlw	low STR_7
  4759  000D50  24F3               	addwf	prodl,w,c
  4760  000D52  6EF6               	movwf	tblptrl,c
  4761  000D54  0E7F               	movlw	high STR_7
  4762  000D56  20F4               	addwfc	prodh,w,c
  4763  000D58  6EF7               	movwf	tblptrh,c
  4764  000D5A                     	if	0	;There are less than 3 active tblptr bytes
  4765  000D5A                     	endif
  4766  000D5A  0008               	tblrd		*
  4767  000D5C  FFFF               	dw	65535	; errata NOP
  4768  000D5E  CFF5 F178          	movff	tablat,sprintf@c
  4769                           
  4770                           ; BSR set to: 1
  4771                           ;doprnt.c: 1523: }
  4772                           
  4773                           ;doprnt.c: 1508: }
  4774                           ;doprnt.c: 1510: break;
  4775  000D62  D00A               	goto	l4942
  4776  000D64                     l4940:
  4777  000D64  FFFF               	dw	65535	; assembler added errata NOP
  4778                           
  4779                           ; BSR set to: 1
  4780  000D66  0101               	movlb	1	; () banked
  4781  000D68  5173               	movf	sprintf@flag& (0+255),w,b
  4782  000D6A  0B80               	andlw	128
  4783                           
  4784                           ; Switch size 1, requested type "space"
  4785                           ; Number of cases is 2, Range of values is 0 to 128
  4786                           ; switch strategies available:
  4787                           ; Name         Instructions Cycles
  4788                           ; simple_byte            7     4 (average)
  4789                           ;	Chosen strategy is simple_byte
  4790  000D6C  0A00               	xorlw	0	; case 0
  4791  000D6E  B4D8               	btfsc	status,2,c
  4792  000D70  D774               	goto	l4932
  4793  000D72  0A80               	xorlw	128	; case 128
  4794  000D74  B4D8               	btfsc	status,2,c
  4795  000D76  D7B6               	goto	l4934
  4796  000D78                     l4942:
  4797  000D78  FFFF               	dw	65535	; assembler added errata NOP
  4798                           
  4799                           ; BSR set to: 1
  4800                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4801  000D7A  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4802  000D7E  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4803  000D82  C178  FFDF         	movff	sprintf@c,indf2
  4804                           
  4805                           ; BSR set to: 1
  4806  000D86  0100               	movlb	0	; () banked
  4807  000D88  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4808  000D8A  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4809  000D8C                     l4946:
  4810  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  4811  000D8E  0101               	movlb	1	; () banked
  4812  000D90  0765               	decf	sprintf@prec& (0+255),f,b
  4813  000D92  A0D8               	btfss	status,0,c
  4814  000D94  0766               	decf	(sprintf@prec+1)& (0+255),f,b
  4815  000D96  0101               	movlb	1	; () banked
  4816  000D98  2965               	incf	sprintf@prec& (0+255),w,b
  4817  000D9A  E1E4               	bnz	l4940
  4818  000D9C  0101               	movlb	1	; () banked
  4819  000D9E  2966               	incf	(sprintf@prec+1)& (0+255),w,b
  4820  000DA0  A4D8               	btfss	status,2,c
  4821  000DA2  D7E0               	goto	l4940
  4822  000DA4                     l4948:
  4823  000DA4  FFFF               	dw	65535	; assembler added errata NOP
  4824  000DA6  C0A7  FFF6         	movff	sprintf@f,tblptrl
  4825  000DAA  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  4826  000DAE  0100               	movlb	0	; () banked
  4827  000DB0  4BA7               	infsnz	sprintf@f& (0+255),f,b
  4828  000DB2  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  4829  000DB4                     	if	0	;tblptru may be non-zero
  4830  000DB4                     	endif
  4831  000DB4                     	if	0	;tblptru may be non-zero
  4832  000DB4                     	endif
  4833  000DB4  0008               	tblrd		*
  4834  000DB6  FFFF               	dw	65535	; errata NOP
  4835  000DB8  CFF5 F178          	movff	tablat,sprintf@c
  4836  000DBC  0101               	movlb	1	; () banked
  4837  000DBE  5178               	movf	sprintf@c& (0+255),w,b
  4838  000DC0  A4D8               	btfss	status,2,c
  4839  000DC2  EF60  F000         	goto	l4630
  4840  000DC6                     l4950:
  4841  000DC6  FFFF               	dw	65535	; assembler added errata NOP
  4842                           
  4843                           ;doprnt.c: 1538: *sp = 0;
  4844  000DC8  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4845  000DCC  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4846  000DD0  0E00               	movlw	0
  4847  000DD2  6EDF               	movwf	indf2,c
  4848                           
  4849                           ;doprnt.c: 1540: return 0;
  4850                           ;	Return value of _sprintf is never used
  4851  000DD4  0012               	return		;funcret
  4852  000DD6  FFFF               	dw	65535	; errata NOP
  4853  000DD8                     __end_of_sprintf:
  4854                           	opt stack 0
  4855                           tblptru	equ	0xFF8
  4856                           tblptrh	equ	0xFF7
  4857                           tblptrl	equ	0xFF6
  4858                           tablat	equ	0xFF5
  4859                           prodh	equ	0xFF4
  4860                           prodl	equ	0xFF3
  4861                           postinc0	equ	0xFEE
  4862                           wreg	equ	0xFE8
  4863                           postdec1	equ	0xFE5
  4864                           fsr1l	equ	0xFE1
  4865                           indf2	equ	0xFDF
  4866                           postinc2	equ	0xFDE
  4867                           postdec2	equ	0xFDD
  4868                           fsr2h	equ	0xFDA
  4869                           fsr2l	equ	0xFD9
  4870                           status	equ	0xFD8
  4871                           
  4872 ;; *************** function _scale *****************
  4873 ;; Defined at:
  4874 ;;		line 425 in file "/opt/microchip/xc8/v1.38/sources/common/doprnt.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;  scl             1    wreg     char 
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;  scl             1   15[BANK0 ] char 
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  3    9[BANK0 ] char 
  4881 ;; Registers used:
  4882 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4888 ;;      Params:         0       3       0       0       0       0       0
  4889 ;;      Locals:         0       4       0       0       0       0       0
  4890 ;;      Temps:          0       0       0       0       0       0       0
  4891 ;;      Totals:         0       7       0       0       0       0       0
  4892 ;;Total ram usage:        7 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    4
  4895 ;; This function calls:
  4896 ;;		___awdiv
  4897 ;;		___awmod
  4898 ;;		___ftmul
  4899 ;;		___wmul
  4900 ;; This function is called by:
  4901 ;;		_sprintf
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           	psect	text3
  4906  001504                     __ptext3:
  4907                           	opt stack 0
  4908  001504                     _scale:
  4909                           	opt stack 0
  4910  001504  FFFF               	dw	65535	; assembler added errata NOP
  4911                           
  4912                           ;incstack = 0
  4913                           ;scale@scl stored from wreg
  4914  001506  0100               	movlb	0	; () banked
  4915  001508  6F8F               	movwf	scale@scl& (0+255),b
  4916                           
  4917                           ;doprnt.c: 428: if(scl < 0) {
  4918  00150A  0100               	movlb	0	; () banked
  4919  00150C  AF8F               	btfss	scale@scl& (0+255),7,b
  4920  00150E  D110               	goto	l4358
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;doprnt.c: 429: scl = -scl;
  4924  001510  0100               	movlb	0	; () banked
  4925  001512  6D8F               	negf	scale@scl& (0+255),b
  4926                           
  4927                           ;doprnt.c: 430: if(scl>=110)
  4928  001514  0100               	movlb	0	; () banked
  4929  001516  518F               	movf	scale@scl& (0+255),w,b
  4930  001518  0A80               	xorlw	128
  4931  00151A  0F12               	addlw	-238
  4932  00151C  A0D8               	btfss	status,0,c
  4933  00151E  D097               	goto	l4348
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4937  001520  0E00               	movlw	0
  4938  001522  6E33               	movwf	___wmul@multiplicand+1,c
  4939  001524  0E03               	movlw	3
  4940  001526  6E32               	movwf	___wmul@multiplicand,c
  4941  001528  0E00               	movlw	0
  4942  00152A  6E2B               	movwf	___awdiv@divisor+1,c
  4943  00152C  0E0A               	movlw	10
  4944  00152E  6E2A               	movwf	___awdiv@divisor,c
  4945  001530  0E00               	movlw	0
  4946  001532  6E25               	movwf	___awmod@divisor+1,c
  4947  001534  0E64               	movlw	100
  4948  001536  6E24               	movwf	___awmod@divisor,c
  4949  001538  0100               	movlb	0	; () banked
  4950  00153A  518F               	movf	scale@scl& (0+255),w,b
  4951  00153C  6E22               	movwf	___awmod@dividend,c
  4952  00153E  6A23               	clrf	___awmod@dividend+1,c
  4953  001540  BE22               	btfsc	___awmod@dividend,7,c
  4954  001542  0623               	decf	___awmod@dividend+1,f,c
  4955  001544  EC2C  F015         	call	___awmod	;wreg free
  4956  001548  C022  F028         	movff	?___awmod,___awdiv@dividend
  4957  00154C  C023  F029         	movff	?___awmod+1,___awdiv@dividend+1
  4958  001550  EC98  F014         	call	___awdiv	;wreg free
  4959  001554  0E09               	movlw	9
  4960  001556  2428               	addwf	?___awdiv,w,c
  4961  001558  6E30               	movwf	___wmul@multiplier,c
  4962  00155A  0E00               	movlw	0
  4963  00155C  2029               	addwfc	?___awdiv+1,w,c
  4964  00155E  6E31               	movwf	___wmul@multiplier+1,c
  4965  001560  ECF7  F016         	call	___wmul	;wreg free
  4966  001564  0E33               	movlw	low __npowers_
  4967  001566  2430               	addwf	?___wmul,w,c
  4968  001568  6EF6               	movwf	tblptrl,c
  4969  00156A  0E7E               	movlw	high __npowers_
  4970  00156C  2031               	addwfc	?___wmul+1,w,c
  4971  00156E  6EF7               	movwf	tblptrh,c
  4972  001570                     	if	0	;There are less than 3 active tblptr bytes
  4973  001570                     	endif
  4974  001570  0009               	tblrd		*+
  4975  001572  FFFF               	dw	65535	; errata NOP
  4976  001574  CFF5 F039          	movff	tablat,___ftmul@f2
  4977  001578  0009               	tblrd		*+
  4978  00157A  FFFF               	dw	65535	; errata NOP
  4979  00157C  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  4980  001580  000A               	tblrd		*-
  4981  001582  FFFF               	dw	65535	; errata NOP
  4982  001584  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  4983  001588  0E00               	movlw	0
  4984  00158A  6E2B               	movwf	___awdiv@divisor+1,c
  4985  00158C  0E64               	movlw	100
  4986  00158E  6E2A               	movwf	___awdiv@divisor,c
  4987  001590  0100               	movlb	0	; () banked
  4988  001592  518F               	movf	scale@scl& (0+255),w,b
  4989  001594  6E28               	movwf	___awdiv@dividend,c
  4990  001596  6A29               	clrf	___awdiv@dividend+1,c
  4991  001598  BE28               	btfsc	___awdiv@dividend,7,c
  4992  00159A  0629               	decf	___awdiv@dividend+1,f,c
  4993  00159C  EC98  F014         	call	___awdiv	;wreg free
  4994  0015A0  0E12               	movlw	18
  4995  0015A2  2428               	addwf	?___awdiv,w,c
  4996  0015A4  6E30               	movwf	___wmul@multiplier,c
  4997  0015A6  0E00               	movlw	0
  4998  0015A8  2029               	addwfc	?___awdiv+1,w,c
  4999  0015AA  6E31               	movwf	___wmul@multiplier+1,c
  5000  0015AC  0E00               	movlw	0
  5001  0015AE  6E33               	movwf	___wmul@multiplicand+1,c
  5002  0015B0  0E03               	movlw	3
  5003  0015B2  6E32               	movwf	___wmul@multiplicand,c
  5004  0015B4  ECF7  F016         	call	___wmul	;wreg free
  5005  0015B8  0E33               	movlw	low __npowers_
  5006  0015BA  2430               	addwf	?___wmul,w,c
  5007  0015BC  6EF6               	movwf	tblptrl,c
  5008  0015BE  0E7E               	movlw	high __npowers_
  5009  0015C0  2031               	addwfc	?___wmul+1,w,c
  5010  0015C2  6EF7               	movwf	tblptrh,c
  5011  0015C4                     	if	0	;There are less than 3 active tblptr bytes
  5012  0015C4                     	endif
  5013  0015C4  0009               	tblrd		*+
  5014  0015C6  FFFF               	dw	65535	; errata NOP
  5015  0015C8  CFF5 F036          	movff	tablat,___ftmul@f1
  5016  0015CC  0009               	tblrd		*+
  5017  0015CE  FFFF               	dw	65535	; errata NOP
  5018  0015D0  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5019  0015D4  000A               	tblrd		*-
  5020  0015D6  FFFF               	dw	65535	; errata NOP
  5021  0015D8  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5022  0015DC  ECE0  F011         	call	___ftmul	;wreg free
  5023  0015E0  C036  F08C         	movff	?___ftmul,_scale$2072
  5024  0015E4  C037  F08D         	movff	?___ftmul+1,_scale$2072+1
  5025  0015E8  C038  F08E         	movff	?___ftmul+2,_scale$2072+2
  5026                           
  5027                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5028  0015EC  C08C  F036         	movff	_scale$2072,___ftmul@f1
  5029  0015F0  C08D  F037         	movff	_scale$2072+1,___ftmul@f1+1
  5030  0015F4  C08E  F038         	movff	_scale$2072+2,___ftmul@f1+2
  5031  0015F8  0E00               	movlw	0
  5032  0015FA  6E33               	movwf	___wmul@multiplicand+1,c
  5033  0015FC  0E03               	movlw	3
  5034  0015FE  6E32               	movwf	___wmul@multiplicand,c
  5035  001600  0E00               	movlw	0
  5036  001602  6E25               	movwf	___awmod@divisor+1,c
  5037  001604  0E0A               	movlw	10
  5038  001606  6E24               	movwf	___awmod@divisor,c
  5039  001608  0100               	movlb	0	; () banked
  5040  00160A  518F               	movf	scale@scl& (0+255),w,b
  5041  00160C  6E22               	movwf	___awmod@dividend,c
  5042  00160E  6A23               	clrf	___awmod@dividend+1,c
  5043  001610  BE22               	btfsc	___awmod@dividend,7,c
  5044  001612  0623               	decf	___awmod@dividend+1,f,c
  5045  001614  EC2C  F015         	call	___awmod	;wreg free
  5046  001618  C022  F030         	movff	?___awmod,___wmul@multiplier
  5047  00161C  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  5048  001620  ECF7  F016         	call	___wmul	;wreg free
  5049  001624  0E33               	movlw	low __npowers_
  5050  001626  2430               	addwf	?___wmul,w,c
  5051  001628  6EF6               	movwf	tblptrl,c
  5052  00162A  0E7E               	movlw	high __npowers_
  5053  00162C  2031               	addwfc	?___wmul+1,w,c
  5054  00162E  6EF7               	movwf	tblptrh,c
  5055  001630                     	if	0	;There are less than 3 active tblptr bytes
  5056  001630                     	endif
  5057  001630  0009               	tblrd		*+
  5058  001632  FFFF               	dw	65535	; errata NOP
  5059  001634  CFF5 F039          	movff	tablat,___ftmul@f2
  5060  001638  0009               	tblrd		*+
  5061  00163A  FFFF               	dw	65535	; errata NOP
  5062  00163C  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5063  001640  000A               	tblrd		*-
  5064  001642  FFFF               	dw	65535	; errata NOP
  5065  001644  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5066  001648  ECE0  F011         	call	___ftmul	;wreg free
  5067  00164C  D16A               	goto	L7
  5068  00164E                     l4348:
  5069  00164E  FFFF               	dw	65535	; assembler added errata NOP
  5070                           
  5071                           ;doprnt.c: 432: else if(scl > 10)
  5072  001650  0100               	movlb	0	; () banked
  5073  001652  518F               	movf	scale@scl& (0+255),w,b
  5074  001654  0A80               	xorlw	128
  5075  001656  0F75               	addlw	-139
  5076  001658  A0D8               	btfss	status,0,c
  5077  00165A  D055               	goto	l4354
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5081  00165C  0E00               	movlw	0
  5082  00165E  6E2B               	movwf	___awdiv@divisor+1,c
  5083  001660  0E0A               	movlw	10
  5084  001662  6E2A               	movwf	___awdiv@divisor,c
  5085  001664  0100               	movlb	0	; () banked
  5086  001666  518F               	movf	scale@scl& (0+255),w,b
  5087  001668  6E28               	movwf	___awdiv@dividend,c
  5088  00166A  6A29               	clrf	___awdiv@dividend+1,c
  5089  00166C  BE28               	btfsc	___awdiv@dividend,7,c
  5090  00166E  0629               	decf	___awdiv@dividend+1,f,c
  5091  001670  EC98  F014         	call	___awdiv	;wreg free
  5092  001674  0E09               	movlw	9
  5093  001676  2428               	addwf	?___awdiv,w,c
  5094  001678  6E30               	movwf	___wmul@multiplier,c
  5095  00167A  0E00               	movlw	0
  5096  00167C  2029               	addwfc	?___awdiv+1,w,c
  5097  00167E  6E31               	movwf	___wmul@multiplier+1,c
  5098  001680  0E00               	movlw	0
  5099  001682  6E33               	movwf	___wmul@multiplicand+1,c
  5100  001684  0E03               	movlw	3
  5101  001686  6E32               	movwf	___wmul@multiplicand,c
  5102  001688  ECF7  F016         	call	___wmul	;wreg free
  5103  00168C  0E33               	movlw	low __npowers_
  5104  00168E  2430               	addwf	?___wmul,w,c
  5105  001690  6EF6               	movwf	tblptrl,c
  5106  001692  0E7E               	movlw	high __npowers_
  5107  001694  2031               	addwfc	?___wmul+1,w,c
  5108  001696  6EF7               	movwf	tblptrh,c
  5109  001698                     	if	0	;There are less than 3 active tblptr bytes
  5110  001698                     	endif
  5111  001698  0009               	tblrd		*+
  5112  00169A  FFFF               	dw	65535	; errata NOP
  5113  00169C  CFF5 F036          	movff	tablat,___ftmul@f1
  5114  0016A0  0009               	tblrd		*+
  5115  0016A2  FFFF               	dw	65535	; errata NOP
  5116  0016A4  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5117  0016A8  000A               	tblrd		*-
  5118  0016AA  FFFF               	dw	65535	; errata NOP
  5119  0016AC  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5120  0016B0  0E00               	movlw	0
  5121  0016B2  6E33               	movwf	___wmul@multiplicand+1,c
  5122  0016B4  0E03               	movlw	3
  5123  0016B6  6E32               	movwf	___wmul@multiplicand,c
  5124  0016B8  0E00               	movlw	0
  5125  0016BA  6E25               	movwf	___awmod@divisor+1,c
  5126  0016BC  0E0A               	movlw	10
  5127  0016BE  6E24               	movwf	___awmod@divisor,c
  5128  0016C0  0100               	movlb	0	; () banked
  5129  0016C2  518F               	movf	scale@scl& (0+255),w,b
  5130  0016C4  6E22               	movwf	___awmod@dividend,c
  5131  0016C6  6A23               	clrf	___awmod@dividend+1,c
  5132  0016C8  BE22               	btfsc	___awmod@dividend,7,c
  5133  0016CA  0623               	decf	___awmod@dividend+1,f,c
  5134  0016CC  EC2C  F015         	call	___awmod	;wreg free
  5135  0016D0  C022  F030         	movff	?___awmod,___wmul@multiplier
  5136  0016D4  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  5137  0016D8  ECF7  F016         	call	___wmul	;wreg free
  5138  0016DC  0E33               	movlw	low __npowers_
  5139  0016DE  2430               	addwf	?___wmul,w,c
  5140  0016E0  6EF6               	movwf	tblptrl,c
  5141  0016E2  0E7E               	movlw	high __npowers_
  5142  0016E4  2031               	addwfc	?___wmul+1,w,c
  5143  0016E6  6EF7               	movwf	tblptrh,c
  5144  0016E8                     	if	0	;There are less than 3 active tblptr bytes
  5145  0016E8                     	endif
  5146  0016E8  0009               	tblrd		*+
  5147  0016EA  FFFF               	dw	65535	; errata NOP
  5148  0016EC  CFF5 F039          	movff	tablat,___ftmul@f2
  5149  0016F0  0009               	tblrd		*+
  5150  0016F2  FFFF               	dw	65535	; errata NOP
  5151  0016F4  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5152  0016F8  000A               	tblrd		*-
  5153  0016FA  FFFF               	dw	65535	; errata NOP
  5154  0016FC  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5155  001700  ECE0  F011         	call	___ftmul	;wreg free
  5156  001704  D10E               	goto	L7
  5157  001706                     l4354:
  5158  001706  FFFF               	dw	65535	; assembler added errata NOP
  5159                           
  5160                           ;doprnt.c: 434: return _npowers_[scl];
  5161  001708  0100               	movlb	0	; () banked
  5162  00170A  518F               	movf	scale@scl& (0+255),w,b
  5163  00170C  0D03               	mullw	3
  5164  00170E  0E33               	movlw	low __npowers_
  5165  001710  24F3               	addwf	prodl,w,c
  5166  001712  6EF6               	movwf	tblptrl,c
  5167  001714  0E7E               	movlw	high __npowers_
  5168  001716  20F4               	addwfc	prodh,w,c
  5169  001718  6EF7               	movwf	tblptrh,c
  5170  00171A                     	if	0	;There are less than 3 active tblptr bytes
  5171  00171A                     	endif
  5172  00171A  0009               	tblrd		*+
  5173  00171C  FFFF               	dw	65535	; errata NOP
  5174  00171E  CFF5 F089          	movff	tablat,?_scale
  5175  001722  0009               	tblrd		*+
  5176  001724  FFFF               	dw	65535	; errata NOP
  5177  001726  CFF5 F08A          	movff	tablat,?_scale+1
  5178  00172A  000A               	tblrd		*-
  5179  00172C  FFFF               	dw	65535	; errata NOP
  5180  00172E  D115               	goto	L6
  5181  001730                     l4358:
  5182  001730  FFFF               	dw	65535	; assembler added errata NOP
  5183                           
  5184                           ; BSR set to: 0
  5185                           ;doprnt.c: 435: }
  5186                           ;doprnt.c: 436: if(scl>=110)
  5187  001732  0100               	movlb	0	; () banked
  5188  001734  518F               	movf	scale@scl& (0+255),w,b
  5189  001736  0A80               	xorlw	128
  5190  001738  0F12               	addlw	-238
  5191  00173A  A0D8               	btfss	status,0,c
  5192  00173C  D097               	goto	l4366
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5196  00173E  0E00               	movlw	0
  5197  001740  6E33               	movwf	___wmul@multiplicand+1,c
  5198  001742  0E03               	movlw	3
  5199  001744  6E32               	movwf	___wmul@multiplicand,c
  5200  001746  0E00               	movlw	0
  5201  001748  6E2B               	movwf	___awdiv@divisor+1,c
  5202  00174A  0E0A               	movlw	10
  5203  00174C  6E2A               	movwf	___awdiv@divisor,c
  5204  00174E  0E00               	movlw	0
  5205  001750  6E25               	movwf	___awmod@divisor+1,c
  5206  001752  0E64               	movlw	100
  5207  001754  6E24               	movwf	___awmod@divisor,c
  5208  001756  0100               	movlb	0	; () banked
  5209  001758  518F               	movf	scale@scl& (0+255),w,b
  5210  00175A  6E22               	movwf	___awmod@dividend,c
  5211  00175C  6A23               	clrf	___awmod@dividend+1,c
  5212  00175E  BE22               	btfsc	___awmod@dividend,7,c
  5213  001760  0623               	decf	___awmod@dividend+1,f,c
  5214  001762  EC2C  F015         	call	___awmod	;wreg free
  5215  001766  C022  F028         	movff	?___awmod,___awdiv@dividend
  5216  00176A  C023  F029         	movff	?___awmod+1,___awdiv@dividend+1
  5217  00176E  EC98  F014         	call	___awdiv	;wreg free
  5218  001772  0E09               	movlw	9
  5219  001774  2428               	addwf	?___awdiv,w,c
  5220  001776  6E30               	movwf	___wmul@multiplier,c
  5221  001778  0E00               	movlw	0
  5222  00177A  2029               	addwfc	?___awdiv+1,w,c
  5223  00177C  6E31               	movwf	___wmul@multiplier+1,c
  5224  00177E  ECF7  F016         	call	___wmul	;wreg free
  5225  001782  0E5A               	movlw	low __powers_
  5226  001784  2430               	addwf	?___wmul,w,c
  5227  001786  6EF6               	movwf	tblptrl,c
  5228  001788  0E7E               	movlw	high __powers_
  5229  00178A  2031               	addwfc	?___wmul+1,w,c
  5230  00178C  6EF7               	movwf	tblptrh,c
  5231  00178E                     	if	0	;There are less than 3 active tblptr bytes
  5232  00178E                     	endif
  5233  00178E  0009               	tblrd		*+
  5234  001790  FFFF               	dw	65535	; errata NOP
  5235  001792  CFF5 F039          	movff	tablat,___ftmul@f2
  5236  001796  0009               	tblrd		*+
  5237  001798  FFFF               	dw	65535	; errata NOP
  5238  00179A  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5239  00179E  000A               	tblrd		*-
  5240  0017A0  FFFF               	dw	65535	; errata NOP
  5241  0017A2  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5242  0017A6  0E00               	movlw	0
  5243  0017A8  6E2B               	movwf	___awdiv@divisor+1,c
  5244  0017AA  0E64               	movlw	100
  5245  0017AC  6E2A               	movwf	___awdiv@divisor,c
  5246  0017AE  0100               	movlb	0	; () banked
  5247  0017B0  518F               	movf	scale@scl& (0+255),w,b
  5248  0017B2  6E28               	movwf	___awdiv@dividend,c
  5249  0017B4  6A29               	clrf	___awdiv@dividend+1,c
  5250  0017B6  BE28               	btfsc	___awdiv@dividend,7,c
  5251  0017B8  0629               	decf	___awdiv@dividend+1,f,c
  5252  0017BA  EC98  F014         	call	___awdiv	;wreg free
  5253  0017BE  0E12               	movlw	18
  5254  0017C0  2428               	addwf	?___awdiv,w,c
  5255  0017C2  6E30               	movwf	___wmul@multiplier,c
  5256  0017C4  0E00               	movlw	0
  5257  0017C6  2029               	addwfc	?___awdiv+1,w,c
  5258  0017C8  6E31               	movwf	___wmul@multiplier+1,c
  5259  0017CA  0E00               	movlw	0
  5260  0017CC  6E33               	movwf	___wmul@multiplicand+1,c
  5261  0017CE  0E03               	movlw	3
  5262  0017D0  6E32               	movwf	___wmul@multiplicand,c
  5263  0017D2  ECF7  F016         	call	___wmul	;wreg free
  5264  0017D6  0E5A               	movlw	low __powers_
  5265  0017D8  2430               	addwf	?___wmul,w,c
  5266  0017DA  6EF6               	movwf	tblptrl,c
  5267  0017DC  0E7E               	movlw	high __powers_
  5268  0017DE  2031               	addwfc	?___wmul+1,w,c
  5269  0017E0  6EF7               	movwf	tblptrh,c
  5270  0017E2                     	if	0	;There are less than 3 active tblptr bytes
  5271  0017E2                     	endif
  5272  0017E2  0009               	tblrd		*+
  5273  0017E4  FFFF               	dw	65535	; errata NOP
  5274  0017E6  CFF5 F036          	movff	tablat,___ftmul@f1
  5275  0017EA  0009               	tblrd		*+
  5276  0017EC  FFFF               	dw	65535	; errata NOP
  5277  0017EE  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5278  0017F2  000A               	tblrd		*-
  5279  0017F4  FFFF               	dw	65535	; errata NOP
  5280  0017F6  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5281  0017FA  ECE0  F011         	call	___ftmul	;wreg free
  5282  0017FE  C036  F08C         	movff	?___ftmul,_scale$2072
  5283  001802  C037  F08D         	movff	?___ftmul+1,_scale$2072+1
  5284  001806  C038  F08E         	movff	?___ftmul+2,_scale$2072+2
  5285                           
  5286                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5287  00180A  C08C  F036         	movff	_scale$2072,___ftmul@f1
  5288  00180E  C08D  F037         	movff	_scale$2072+1,___ftmul@f1+1
  5289  001812  C08E  F038         	movff	_scale$2072+2,___ftmul@f1+2
  5290  001816  0E00               	movlw	0
  5291  001818  6E33               	movwf	___wmul@multiplicand+1,c
  5292  00181A  0E03               	movlw	3
  5293  00181C  6E32               	movwf	___wmul@multiplicand,c
  5294  00181E  0E00               	movlw	0
  5295  001820  6E25               	movwf	___awmod@divisor+1,c
  5296  001822  0E0A               	movlw	10
  5297  001824  6E24               	movwf	___awmod@divisor,c
  5298  001826  0100               	movlb	0	; () banked
  5299  001828  518F               	movf	scale@scl& (0+255),w,b
  5300  00182A  6E22               	movwf	___awmod@dividend,c
  5301  00182C  6A23               	clrf	___awmod@dividend+1,c
  5302  00182E  BE22               	btfsc	___awmod@dividend,7,c
  5303  001830  0623               	decf	___awmod@dividend+1,f,c
  5304  001832  EC2C  F015         	call	___awmod	;wreg free
  5305  001836  C022  F030         	movff	?___awmod,___wmul@multiplier
  5306  00183A  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  5307  00183E  ECF7  F016         	call	___wmul	;wreg free
  5308  001842  0E5A               	movlw	low __powers_
  5309  001844  2430               	addwf	?___wmul,w,c
  5310  001846  6EF6               	movwf	tblptrl,c
  5311  001848  0E7E               	movlw	high __powers_
  5312  00184A  2031               	addwfc	?___wmul+1,w,c
  5313  00184C  6EF7               	movwf	tblptrh,c
  5314  00184E                     	if	0	;There are less than 3 active tblptr bytes
  5315  00184E                     	endif
  5316  00184E  0009               	tblrd		*+
  5317  001850  FFFF               	dw	65535	; errata NOP
  5318  001852  CFF5 F039          	movff	tablat,___ftmul@f2
  5319  001856  0009               	tblrd		*+
  5320  001858  FFFF               	dw	65535	; errata NOP
  5321  00185A  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5322  00185E  000A               	tblrd		*-
  5323  001860  FFFF               	dw	65535	; errata NOP
  5324  001862  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5325  001866  ECE0  F011         	call	___ftmul	;wreg free
  5326  00186A  D05B               	goto	L7
  5327  00186C                     l4366:
  5328  00186C  FFFF               	dw	65535	; assembler added errata NOP
  5329                           
  5330                           ;doprnt.c: 438: else if(scl > 10)
  5331  00186E  0100               	movlb	0	; () banked
  5332  001870  518F               	movf	scale@scl& (0+255),w,b
  5333  001872  0A80               	xorlw	128
  5334  001874  0F75               	addlw	-139
  5335  001876  A0D8               	btfss	status,0,c
  5336  001878  D05C               	goto	l4372
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5340  00187A  0E00               	movlw	0
  5341  00187C  6E2B               	movwf	___awdiv@divisor+1,c
  5342  00187E  0E0A               	movlw	10
  5343  001880  6E2A               	movwf	___awdiv@divisor,c
  5344  001882  0100               	movlb	0	; () banked
  5345  001884  518F               	movf	scale@scl& (0+255),w,b
  5346  001886  6E28               	movwf	___awdiv@dividend,c
  5347  001888  6A29               	clrf	___awdiv@dividend+1,c
  5348  00188A  BE28               	btfsc	___awdiv@dividend,7,c
  5349  00188C  0629               	decf	___awdiv@dividend+1,f,c
  5350  00188E  EC98  F014         	call	___awdiv	;wreg free
  5351  001892  0E09               	movlw	9
  5352  001894  2428               	addwf	?___awdiv,w,c
  5353  001896  6E30               	movwf	___wmul@multiplier,c
  5354  001898  0E00               	movlw	0
  5355  00189A  2029               	addwfc	?___awdiv+1,w,c
  5356  00189C  6E31               	movwf	___wmul@multiplier+1,c
  5357  00189E  0E00               	movlw	0
  5358  0018A0  6E33               	movwf	___wmul@multiplicand+1,c
  5359  0018A2  0E03               	movlw	3
  5360  0018A4  6E32               	movwf	___wmul@multiplicand,c
  5361  0018A6  ECF7  F016         	call	___wmul	;wreg free
  5362  0018AA  0E5A               	movlw	low __powers_
  5363  0018AC  2430               	addwf	?___wmul,w,c
  5364  0018AE  6EF6               	movwf	tblptrl,c
  5365  0018B0  0E7E               	movlw	high __powers_
  5366  0018B2  2031               	addwfc	?___wmul+1,w,c
  5367  0018B4  6EF7               	movwf	tblptrh,c
  5368  0018B6                     	if	0	;There are less than 3 active tblptr bytes
  5369  0018B6                     	endif
  5370  0018B6  0009               	tblrd		*+
  5371  0018B8  FFFF               	dw	65535	; errata NOP
  5372  0018BA  CFF5 F036          	movff	tablat,___ftmul@f1
  5373  0018BE  0009               	tblrd		*+
  5374  0018C0  FFFF               	dw	65535	; errata NOP
  5375  0018C2  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5376  0018C6  000A               	tblrd		*-
  5377  0018C8  FFFF               	dw	65535	; errata NOP
  5378  0018CA  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5379  0018CE  0E00               	movlw	0
  5380  0018D0  6E33               	movwf	___wmul@multiplicand+1,c
  5381  0018D2  0E03               	movlw	3
  5382  0018D4  6E32               	movwf	___wmul@multiplicand,c
  5383  0018D6  0E00               	movlw	0
  5384  0018D8  6E25               	movwf	___awmod@divisor+1,c
  5385  0018DA  0E0A               	movlw	10
  5386  0018DC  6E24               	movwf	___awmod@divisor,c
  5387  0018DE  0100               	movlb	0	; () banked
  5388  0018E0  518F               	movf	scale@scl& (0+255),w,b
  5389  0018E2  6E22               	movwf	___awmod@dividend,c
  5390  0018E4  6A23               	clrf	___awmod@dividend+1,c
  5391  0018E6  BE22               	btfsc	___awmod@dividend,7,c
  5392  0018E8  0623               	decf	___awmod@dividend+1,f,c
  5393  0018EA  EC2C  F015         	call	___awmod	;wreg free
  5394  0018EE  C022  F030         	movff	?___awmod,___wmul@multiplier
  5395  0018F2  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  5396  0018F6  ECF7  F016         	call	___wmul	;wreg free
  5397  0018FA  0E5A               	movlw	low __powers_
  5398  0018FC  2430               	addwf	?___wmul,w,c
  5399  0018FE  6EF6               	movwf	tblptrl,c
  5400  001900  0E7E               	movlw	high __powers_
  5401  001902  2031               	addwfc	?___wmul+1,w,c
  5402  001904  6EF7               	movwf	tblptrh,c
  5403  001906                     	if	0	;There are less than 3 active tblptr bytes
  5404  001906                     	endif
  5405  001906  0009               	tblrd		*+
  5406  001908  FFFF               	dw	65535	; errata NOP
  5407  00190A  CFF5 F039          	movff	tablat,___ftmul@f2
  5408  00190E  0009               	tblrd		*+
  5409  001910  FFFF               	dw	65535	; errata NOP
  5410  001912  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5411  001916  000A               	tblrd		*-
  5412  001918  FFFF               	dw	65535	; errata NOP
  5413  00191A  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5414  00191E  ECE0  F011         	call	___ftmul	;wreg free
  5415  001922                     L7:
  5416  001922  FFFF               	dw	65535	; assembler added errata NOP
  5417  001924  C036  F089         	movff	?___ftmul,?_scale
  5418  001928  C037  F08A         	movff	?___ftmul+1,?_scale+1
  5419  00192C  C038  F08B         	movff	?___ftmul+2,?_scale+2
  5420  001930  D017               	goto	l399
  5421  001932                     l4372:
  5422  001932  FFFF               	dw	65535	; assembler added errata NOP
  5423                           
  5424                           ;doprnt.c: 440: return _powers_[scl];
  5425  001934  0100               	movlb	0	; () banked
  5426  001936  518F               	movf	scale@scl& (0+255),w,b
  5427  001938  0D03               	mullw	3
  5428  00193A  0E5A               	movlw	low __powers_
  5429  00193C  24F3               	addwf	prodl,w,c
  5430  00193E  6EF6               	movwf	tblptrl,c
  5431  001940  0E7E               	movlw	high __powers_
  5432  001942  20F4               	addwfc	prodh,w,c
  5433  001944  6EF7               	movwf	tblptrh,c
  5434  001946                     	if	0	;There are less than 3 active tblptr bytes
  5435  001946                     	endif
  5436  001946  0009               	tblrd		*+
  5437  001948  FFFF               	dw	65535	; errata NOP
  5438  00194A  CFF5 F089          	movff	tablat,?_scale
  5439  00194E  0009               	tblrd		*+
  5440  001950  FFFF               	dw	65535	; errata NOP
  5441  001952  CFF5 F08A          	movff	tablat,?_scale+1
  5442  001956  000A               	tblrd		*-
  5443  001958  FFFF               	dw	65535	; errata NOP
  5444  00195A                     L6:
  5445  00195A  FFFF               	dw	65535	; assembler added errata NOP
  5446  00195C  CFF5 F08B          	movff	tablat,?_scale+2
  5447  001960                     l399:
  5448  001960  FFFF               	dw	65535	; assembler added errata NOP
  5449  001962  0012               	return		;funcret
  5450  001964  FFFF               	dw	65535	; errata NOP
  5451  001966                     __end_of_scale:
  5452                           	opt stack 0
  5453                           tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           prodh	equ	0xFF4
  5458                           prodl	equ	0xFF3
  5459                           postinc0	equ	0xFEE
  5460                           wreg	equ	0xFE8
  5461                           postdec1	equ	0xFE5
  5462                           fsr1l	equ	0xFE1
  5463                           indf2	equ	0xFDF
  5464                           postinc2	equ	0xFDE
  5465                           postdec2	equ	0xFDD
  5466                           fsr2h	equ	0xFDA
  5467                           fsr2l	equ	0xFD9
  5468                           status	equ	0xFD8
  5469                           
  5470 ;; *************** function _isdigit *****************
  5471 ;; Defined at:
  5472 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/isdigit.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;  c               1    wreg     unsigned char 
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;  c               1   35[COMRAM] unsigned char 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;		None               void
  5479 ;; Registers used:
  5480 ;;		wreg, status,2, status,0
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5486 ;;      Params:         0       0       0       0       0       0       0
  5487 ;;      Locals:         2       0       0       0       0       0       0
  5488 ;;      Temps:          1       0       0       0       0       0       0
  5489 ;;      Totals:         3       0       0       0       0       0       0
  5490 ;;Total ram usage:        3 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    2
  5493 ;; This function calls:
  5494 ;;		Nothing
  5495 ;; This function is called by:
  5496 ;;		_sprintf
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text4
  5501  002E42                     __ptext4:
  5502                           	opt stack 0
  5503  002E42                     _isdigit:
  5504                           	opt stack 0
  5505  002E42  FFFF               	dw	65535	; assembler added errata NOP
  5506                           
  5507                           ;incstack = 0
  5508                           ;isdigit@c stored from wreg
  5509  002E44  6E24               	movwf	isdigit@c,c
  5510  002E46  0E00               	movlw	0
  5511  002E48  6E23               	movwf	_isdigit$1743,c
  5512  002E4A  0E3A               	movlw	58
  5513  002E4C  6024               	cpfslt	isdigit@c,c
  5514  002E4E  D005               	goto	l4384
  5515  002E50  0E2F               	movlw	47
  5516  002E52  6424               	cpfsgt	isdigit@c,c
  5517  002E54  D002               	goto	l4384
  5518  002E56  0E01               	movlw	1
  5519  002E58  6E23               	movwf	_isdigit$1743,c
  5520  002E5A                     l4384:
  5521  002E5A  FFFF               	dw	65535	; assembler added errata NOP
  5522  002E5C  C023  F022         	movff	_isdigit$1743,??_isdigit
  5523  002E60  3022               	rrcf	??_isdigit,w,c
  5524  002E62  0012               	return		;funcret
  5525  002E64  FFFF               	dw	65535	; errata NOP
  5526  002E66                     __end_of_isdigit:
  5527                           	opt stack 0
  5528                           tblptru	equ	0xFF8
  5529                           tblptrh	equ	0xFF7
  5530                           tblptrl	equ	0xFF6
  5531                           tablat	equ	0xFF5
  5532                           prodh	equ	0xFF4
  5533                           prodl	equ	0xFF3
  5534                           postinc0	equ	0xFEE
  5535                           wreg	equ	0xFE8
  5536                           postdec1	equ	0xFE5
  5537                           fsr1l	equ	0xFE1
  5538                           indf2	equ	0xFDF
  5539                           postinc2	equ	0xFDE
  5540                           postdec2	equ	0xFDD
  5541                           fsr2h	equ	0xFDA
  5542                           fsr2l	equ	0xFD9
  5543                           status	equ	0xFD8
  5544                           
  5545 ;; *************** function _fround *****************
  5546 ;; Defined at:
  5547 ;;		line 409 in file "/opt/microchip/xc8/v1.38/sources/common/doprnt.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;  prec            1    wreg     unsigned char 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  prec            1   18[BANK0 ] unsigned char 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  3    9[BANK0 ] unsigned char 
  5554 ;; Registers used:
  5555 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5561 ;;      Params:         0       3       0       0       0       0       0
  5562 ;;      Locals:         0       7       0       0       0       0       0
  5563 ;;      Temps:          0       0       0       0       0       0       0
  5564 ;;      Totals:         0      10       0       0       0       0       0
  5565 ;;Total ram usage:       10 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    4
  5568 ;; This function calls:
  5569 ;;		___awdiv
  5570 ;;		___awmod
  5571 ;;		___ftmul
  5572 ;;		___wmul
  5573 ;; This function is called by:
  5574 ;;		_sprintf
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           	psect	text5
  5579  001BF6                     __ptext5:
  5580                           	opt stack 0
  5581  001BF6                     _fround:
  5582                           	opt stack 0
  5583  001BF6  FFFF               	dw	65535	; assembler added errata NOP
  5584                           
  5585                           ;incstack = 0
  5586                           ;fround@prec stored from wreg
  5587  001BF8  0100               	movlb	0	; () banked
  5588  001BFA  6F92               	movwf	fround@prec& (0+255),b
  5589                           
  5590                           ;doprnt.c: 413: if(prec>=110)
  5591  001BFC  0E6D               	movlw	109
  5592  001BFE  0100               	movlb	0	; () banked
  5593  001C00  6592               	cpfsgt	fround@prec& (0+255),b
  5594  001C02  D0A2               	goto	l4326
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5598  001C04  0E00               	movlw	0
  5599  001C06  6E33               	movwf	___wmul@multiplicand+1,c
  5600  001C08  0E03               	movlw	3
  5601  001C0A  6E32               	movwf	___wmul@multiplicand,c
  5602  001C0C  0E00               	movlw	0
  5603  001C0E  6E2B               	movwf	___awdiv@divisor+1,c
  5604  001C10  0E0A               	movlw	10
  5605  001C12  6E2A               	movwf	___awdiv@divisor,c
  5606  001C14  0E00               	movlw	0
  5607  001C16  6E25               	movwf	___awmod@divisor+1,c
  5608  001C18  0E64               	movlw	100
  5609  001C1A  6E24               	movwf	___awmod@divisor,c
  5610  001C1C  C092  F022         	movff	fround@prec,___awmod@dividend
  5611  001C20  6A23               	clrf	___awmod@dividend+1,c
  5612  001C22  EC2C  F015         	call	___awmod	;wreg free
  5613  001C26  C022  F028         	movff	?___awmod,___awdiv@dividend
  5614  001C2A  C023  F029         	movff	?___awmod+1,___awdiv@dividend+1
  5615  001C2E  EC98  F014         	call	___awdiv	;wreg free
  5616  001C32  0E09               	movlw	9
  5617  001C34  2428               	addwf	?___awdiv,w,c
  5618  001C36  6E30               	movwf	___wmul@multiplier,c
  5619  001C38  0E00               	movlw	0
  5620  001C3A  2029               	addwfc	?___awdiv+1,w,c
  5621  001C3C  6E31               	movwf	___wmul@multiplier+1,c
  5622  001C3E  ECF7  F016         	call	___wmul	;wreg free
  5623  001C42  0E33               	movlw	low __npowers_
  5624  001C44  2430               	addwf	?___wmul,w,c
  5625  001C46  6EF6               	movwf	tblptrl,c
  5626  001C48  0E7E               	movlw	high __npowers_
  5627  001C4A  2031               	addwfc	?___wmul+1,w,c
  5628  001C4C  6EF7               	movwf	tblptrh,c
  5629  001C4E                     	if	0	;There are less than 3 active tblptr bytes
  5630  001C4E                     	endif
  5631  001C4E  0009               	tblrd		*+
  5632  001C50  FFFF               	dw	65535	; errata NOP
  5633  001C52  CFF5 F039          	movff	tablat,___ftmul@f2
  5634  001C56  0009               	tblrd		*+
  5635  001C58  FFFF               	dw	65535	; errata NOP
  5636  001C5A  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5637  001C5E  000A               	tblrd		*-
  5638  001C60  FFFF               	dw	65535	; errata NOP
  5639  001C62  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5640  001C66  0E00               	movlw	0
  5641  001C68  6E2B               	movwf	___awdiv@divisor+1,c
  5642  001C6A  0E64               	movlw	100
  5643  001C6C  6E2A               	movwf	___awdiv@divisor,c
  5644  001C6E  C092  F028         	movff	fround@prec,___awdiv@dividend
  5645  001C72  6A29               	clrf	___awdiv@dividend+1,c
  5646  001C74  EC98  F014         	call	___awdiv	;wreg free
  5647  001C78  0E12               	movlw	18
  5648  001C7A  2428               	addwf	?___awdiv,w,c
  5649  001C7C  6E30               	movwf	___wmul@multiplier,c
  5650  001C7E  0E00               	movlw	0
  5651  001C80  2029               	addwfc	?___awdiv+1,w,c
  5652  001C82  6E31               	movwf	___wmul@multiplier+1,c
  5653  001C84  0E00               	movlw	0
  5654  001C86  6E33               	movwf	___wmul@multiplicand+1,c
  5655  001C88  0E03               	movlw	3
  5656  001C8A  6E32               	movwf	___wmul@multiplicand,c
  5657  001C8C  ECF7  F016         	call	___wmul	;wreg free
  5658  001C90  0E33               	movlw	low __npowers_
  5659  001C92  2430               	addwf	?___wmul,w,c
  5660  001C94  6EF6               	movwf	tblptrl,c
  5661  001C96  0E7E               	movlw	high __npowers_
  5662  001C98  2031               	addwfc	?___wmul+1,w,c
  5663  001C9A  6EF7               	movwf	tblptrh,c
  5664  001C9C                     	if	0	;There are less than 3 active tblptr bytes
  5665  001C9C                     	endif
  5666  001C9C  0009               	tblrd		*+
  5667  001C9E  FFFF               	dw	65535	; errata NOP
  5668  001CA0  CFF5 F036          	movff	tablat,___ftmul@f1
  5669  001CA4  0009               	tblrd		*+
  5670  001CA6  FFFF               	dw	65535	; errata NOP
  5671  001CA8  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5672  001CAC  000A               	tblrd		*-
  5673  001CAE  FFFF               	dw	65535	; errata NOP
  5674  001CB0  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5675  001CB4  ECE0  F011         	call	___ftmul	;wreg free
  5676  001CB8  C036  F08F         	movff	?___ftmul,_fround$2070
  5677  001CBC  C037  F090         	movff	?___ftmul+1,_fround$2070+1
  5678  001CC0  C038  F091         	movff	?___ftmul+2,_fround$2070+2
  5679                           
  5680                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5681  001CC4  0E00               	movlw	0
  5682  001CC6  6E33               	movwf	___wmul@multiplicand+1,c
  5683  001CC8  0E03               	movlw	3
  5684  001CCA  6E32               	movwf	___wmul@multiplicand,c
  5685  001CCC  0E00               	movlw	0
  5686  001CCE  6E25               	movwf	___awmod@divisor+1,c
  5687  001CD0  0E0A               	movlw	10
  5688  001CD2  6E24               	movwf	___awmod@divisor,c
  5689  001CD4  C092  F022         	movff	fround@prec,___awmod@dividend
  5690  001CD8  6A23               	clrf	___awmod@dividend+1,c
  5691  001CDA  EC2C  F015         	call	___awmod	;wreg free
  5692  001CDE  C022  F030         	movff	?___awmod,___wmul@multiplier
  5693  001CE2  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  5694  001CE6  ECF7  F016         	call	___wmul	;wreg free
  5695  001CEA  0E33               	movlw	low __npowers_
  5696  001CEC  2430               	addwf	?___wmul,w,c
  5697  001CEE  6EF6               	movwf	tblptrl,c
  5698  001CF0  0E7E               	movlw	high __npowers_
  5699  001CF2  2031               	addwfc	?___wmul+1,w,c
  5700  001CF4  6EF7               	movwf	tblptrh,c
  5701  001CF6                     	if	0	;There are less than 3 active tblptr bytes
  5702  001CF6                     	endif
  5703  001CF6  0009               	tblrd		*+
  5704  001CF8  FFFF               	dw	65535	; errata NOP
  5705  001CFA  CFF5 F039          	movff	tablat,___ftmul@f2
  5706  001CFE  0009               	tblrd		*+
  5707  001D00  FFFF               	dw	65535	; errata NOP
  5708  001D02  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5709  001D06  000A               	tblrd		*-
  5710  001D08  FFFF               	dw	65535	; errata NOP
  5711  001D0A  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5712  001D0E  C08F  F036         	movff	_fround$2070,___ftmul@f1
  5713  001D12  C090  F037         	movff	_fround$2070+1,___ftmul@f1+1
  5714  001D16  C091  F038         	movff	_fround$2070+2,___ftmul@f1+2
  5715  001D1A  ECE0  F011         	call	___ftmul	;wreg free
  5716  001D1E  C036  F08C         	movff	?___ftmul,_fround$2071
  5717  001D22  C037  F08D         	movff	?___ftmul+1,_fround$2071+1
  5718  001D26  C038  F08E         	movff	?___ftmul+2,_fround$2071+2
  5719                           
  5720                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5721  001D2A  C08C  F036         	movff	_fround$2071,___ftmul@f1
  5722  001D2E  C08D  F037         	movff	_fround$2071+1,___ftmul@f1+1
  5723  001D32  C08E  F038         	movff	_fround$2071+2,___ftmul@f1+2
  5724  001D36  0E00               	movlw	0
  5725  001D38  6E39               	movwf	___ftmul@f2,c
  5726  001D3A  0E00               	movlw	0
  5727  001D3C  6E3A               	movwf	___ftmul@f2+1,c
  5728  001D3E  0E3F               	movlw	63
  5729  001D40  6E3B               	movwf	___ftmul@f2+2,c
  5730  001D42  ECE0  F011         	call	___ftmul	;wreg free
  5731  001D46  D086               	goto	L9
  5732  001D48                     l4326:
  5733  001D48  FFFF               	dw	65535	; assembler added errata NOP
  5734                           
  5735                           ;doprnt.c: 415: else if(prec > 10)
  5736  001D4A  0E0A               	movlw	10
  5737  001D4C  0100               	movlb	0	; () banked
  5738  001D4E  6592               	cpfsgt	fround@prec& (0+255),b
  5739  001D50  D063               	goto	l4334
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5743  001D52  0E00               	movlw	0
  5744  001D54  6E33               	movwf	___wmul@multiplicand+1,c
  5745  001D56  0E03               	movlw	3
  5746  001D58  6E32               	movwf	___wmul@multiplicand,c
  5747  001D5A  0E00               	movlw	0
  5748  001D5C  6E25               	movwf	___awmod@divisor+1,c
  5749  001D5E  0E0A               	movlw	10
  5750  001D60  6E24               	movwf	___awmod@divisor,c
  5751  001D62  C092  F022         	movff	fround@prec,___awmod@dividend
  5752  001D66  6A23               	clrf	___awmod@dividend+1,c
  5753  001D68  EC2C  F015         	call	___awmod	;wreg free
  5754  001D6C  C022  F030         	movff	?___awmod,___wmul@multiplier
  5755  001D70  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  5756  001D74  ECF7  F016         	call	___wmul	;wreg free
  5757  001D78  0E33               	movlw	low __npowers_
  5758  001D7A  2430               	addwf	?___wmul,w,c
  5759  001D7C  6EF6               	movwf	tblptrl,c
  5760  001D7E  0E7E               	movlw	high __npowers_
  5761  001D80  2031               	addwfc	?___wmul+1,w,c
  5762  001D82  6EF7               	movwf	tblptrh,c
  5763  001D84                     	if	0	;There are less than 3 active tblptr bytes
  5764  001D84                     	endif
  5765  001D84  0009               	tblrd		*+
  5766  001D86  FFFF               	dw	65535	; errata NOP
  5767  001D88  CFF5 F039          	movff	tablat,___ftmul@f2
  5768  001D8C  0009               	tblrd		*+
  5769  001D8E  FFFF               	dw	65535	; errata NOP
  5770  001D90  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5771  001D94  000A               	tblrd		*-
  5772  001D96  FFFF               	dw	65535	; errata NOP
  5773  001D98  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5774  001D9C  0E00               	movlw	0
  5775  001D9E  6E2B               	movwf	___awdiv@divisor+1,c
  5776  001DA0  0E0A               	movlw	10
  5777  001DA2  6E2A               	movwf	___awdiv@divisor,c
  5778  001DA4  C092  F028         	movff	fround@prec,___awdiv@dividend
  5779  001DA8  6A29               	clrf	___awdiv@dividend+1,c
  5780  001DAA  EC98  F014         	call	___awdiv	;wreg free
  5781  001DAE  0E09               	movlw	9
  5782  001DB0  2428               	addwf	?___awdiv,w,c
  5783  001DB2  6E30               	movwf	___wmul@multiplier,c
  5784  001DB4  0E00               	movlw	0
  5785  001DB6  2029               	addwfc	?___awdiv+1,w,c
  5786  001DB8  6E31               	movwf	___wmul@multiplier+1,c
  5787  001DBA  0E00               	movlw	0
  5788  001DBC  6E33               	movwf	___wmul@multiplicand+1,c
  5789  001DBE  0E03               	movlw	3
  5790  001DC0  6E32               	movwf	___wmul@multiplicand,c
  5791  001DC2  ECF7  F016         	call	___wmul	;wreg free
  5792  001DC6  0E33               	movlw	low __npowers_
  5793  001DC8  2430               	addwf	?___wmul,w,c
  5794  001DCA  6EF6               	movwf	tblptrl,c
  5795  001DCC  0E7E               	movlw	high __npowers_
  5796  001DCE  2031               	addwfc	?___wmul+1,w,c
  5797  001DD0  6EF7               	movwf	tblptrh,c
  5798  001DD2                     	if	0	;There are less than 3 active tblptr bytes
  5799  001DD2                     	endif
  5800  001DD2  0009               	tblrd		*+
  5801  001DD4  FFFF               	dw	65535	; errata NOP
  5802  001DD6  CFF5 F036          	movff	tablat,___ftmul@f1
  5803  001DDA  0009               	tblrd		*+
  5804  001DDC  FFFF               	dw	65535	; errata NOP
  5805  001DDE  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5806  001DE2  000A               	tblrd		*-
  5807  001DE4  FFFF               	dw	65535	; errata NOP
  5808  001DE6  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5809  001DEA  ECE0  F011         	call	___ftmul	;wreg free
  5810  001DEE  C036  F08F         	movff	?___ftmul,_fround$2070
  5811  001DF2  C037  F090         	movff	?___ftmul+1,_fround$2070+1
  5812  001DF6  C038  F091         	movff	?___ftmul+2,_fround$2070+2
  5813                           
  5814                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5815  001DFA  C08F  F036         	movff	_fround$2070,___ftmul@f1
  5816  001DFE  C090  F037         	movff	_fround$2070+1,___ftmul@f1+1
  5817  001E02  C091  F038         	movff	_fround$2070+2,___ftmul@f1+2
  5818  001E06  0E00               	movlw	0
  5819  001E08  6E39               	movwf	___ftmul@f2,c
  5820  001E0A  0E00               	movlw	0
  5821  001E0C  6E3A               	movwf	___ftmul@f2+1,c
  5822  001E0E  0E3F               	movlw	63
  5823  001E10  6E3B               	movwf	___ftmul@f2+2,c
  5824  001E12  ECE0  F011         	call	___ftmul	;wreg free
  5825  001E16  D01E               	goto	L9
  5826  001E18                     l4334:
  5827  001E18  FFFF               	dw	65535	; assembler added errata NOP
  5828                           
  5829                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5830  001E1A  0100               	movlb	0	; () banked
  5831  001E1C  5192               	movf	fround@prec& (0+255),w,b
  5832  001E1E  0D03               	mullw	3
  5833  001E20  0E33               	movlw	low __npowers_
  5834  001E22  24F3               	addwf	prodl,w,c
  5835  001E24  6EF6               	movwf	tblptrl,c
  5836  001E26  0E7E               	movlw	high __npowers_
  5837  001E28  20F4               	addwfc	prodh,w,c
  5838  001E2A  6EF7               	movwf	tblptrh,c
  5839  001E2C                     	if	0	;There are less than 3 active tblptr bytes
  5840  001E2C                     	endif
  5841  001E2C  0009               	tblrd		*+
  5842  001E2E  FFFF               	dw	65535	; errata NOP
  5843  001E30  CFF5 F036          	movff	tablat,___ftmul@f1
  5844  001E34  0009               	tblrd		*+
  5845  001E36  FFFF               	dw	65535	; errata NOP
  5846  001E38  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5847  001E3C  000A               	tblrd		*-
  5848  001E3E  FFFF               	dw	65535	; errata NOP
  5849  001E40  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5850  001E44  0E00               	movlw	0
  5851  001E46  6E39               	movwf	___ftmul@f2,c
  5852  001E48  0E00               	movlw	0
  5853  001E4A  6E3A               	movwf	___ftmul@f2+1,c
  5854  001E4C  0E3F               	movlw	63
  5855  001E4E  6E3B               	movwf	___ftmul@f2+2,c
  5856  001E50  ECE0  F011         	call	___ftmul	;wreg free
  5857  001E54                     L9:
  5858  001E54  FFFF               	dw	65535	; assembler added errata NOP
  5859  001E56  C036  F089         	movff	?___ftmul,?_fround
  5860  001E5A  C037  F08A         	movff	?___ftmul+1,?_fround+1
  5861  001E5E  C038  F08B         	movff	?___ftmul+2,?_fround+2
  5862  001E62  0012               	return		;funcret
  5863  001E64  FFFF               	dw	65535	; errata NOP
  5864  001E66                     __end_of_fround:
  5865                           	opt stack 0
  5866                           tblptru	equ	0xFF8
  5867                           tblptrh	equ	0xFF7
  5868                           tblptrl	equ	0xFF6
  5869                           tablat	equ	0xFF5
  5870                           prodh	equ	0xFF4
  5871                           prodl	equ	0xFF3
  5872                           postinc0	equ	0xFEE
  5873                           wreg	equ	0xFE8
  5874                           postdec1	equ	0xFE5
  5875                           fsr1l	equ	0xFE1
  5876                           indf2	equ	0xFDF
  5877                           postinc2	equ	0xFDE
  5878                           postdec2	equ	0xFDD
  5879                           fsr2h	equ	0xFDA
  5880                           fsr2l	equ	0xFD9
  5881                           status	equ	0xFD8
  5882                           
  5883 ;; *************** function ___wmul *****************
  5884 ;; Defined at:
  5885 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul16.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  multiplier      2   47[COMRAM] unsigned int 
  5888 ;;  multiplicand    2   49[COMRAM] unsigned int 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  product         2   51[COMRAM] unsigned int 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  2   47[COMRAM] unsigned int 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0, prodl, prodh
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5900 ;;      Params:         4       0       0       0       0       0       0
  5901 ;;      Locals:         2       0       0       0       0       0       0
  5902 ;;      Temps:          0       0       0       0       0       0       0
  5903 ;;      Totals:         6       0       0       0       0       0       0
  5904 ;;Total ram usage:        6 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    2
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_main
  5911 ;;		_fround
  5912 ;;		_scale
  5913 ;;		_sprintf
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           	psect	text6
  5918  002DEE                     __ptext6:
  5919                           	opt stack 0
  5920  002DEE                     ___wmul:
  5921                           	opt stack 0
  5922  002DEE  FFFF               	dw	65535	; assembler added errata NOP
  5923                           
  5924                           ;incstack = 0
  5925  002DF0  5030               	movf	___wmul@multiplier,w,c
  5926  002DF2  0232               	mulwf	___wmul@multiplicand,c
  5927  002DF4  CFF3 F034          	movff	prodl,___wmul@product
  5928  002DF8  CFF4 F035          	movff	prodh,___wmul@product+1
  5929  002DFC  5030               	movf	___wmul@multiplier,w,c
  5930  002DFE  0233               	mulwf	___wmul@multiplicand+1,c
  5931  002E00  50F3               	movf	prodl,w,c
  5932  002E02  2635               	addwf	___wmul@product+1,f,c
  5933  002E04  5031               	movf	___wmul@multiplier+1,w,c
  5934  002E06  0232               	mulwf	___wmul@multiplicand,c
  5935  002E08  50F3               	movf	prodl,w,c
  5936  002E0A  2635               	addwf	___wmul@product+1,f,c
  5937  002E0C  C034  F030         	movff	___wmul@product,?___wmul
  5938  002E10  C035  F031         	movff	___wmul@product+1,?___wmul+1
  5939  002E14  0012               	return		;funcret
  5940  002E16  FFFF               	dw	65535	; errata NOP
  5941  002E18                     __end_of___wmul:
  5942                           	opt stack 0
  5943                           tblptru	equ	0xFF8
  5944                           tblptrh	equ	0xFF7
  5945                           tblptrl	equ	0xFF6
  5946                           tablat	equ	0xFF5
  5947                           prodh	equ	0xFF4
  5948                           prodl	equ	0xFF3
  5949                           postinc0	equ	0xFEE
  5950                           wreg	equ	0xFE8
  5951                           postdec1	equ	0xFE5
  5952                           fsr1l	equ	0xFE1
  5953                           indf2	equ	0xFDF
  5954                           postinc2	equ	0xFDE
  5955                           postdec2	equ	0xFDD
  5956                           fsr2h	equ	0xFDA
  5957                           fsr2l	equ	0xFD9
  5958                           status	equ	0xFD8
  5959                           
  5960 ;; *************** function ___ftmul *****************
  5961 ;; Defined at:
  5962 ;;		line 62 in file "/opt/microchip/xc8/v1.38/sources/common/ftmul.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;  f1              3   53[COMRAM] float 
  5965 ;;  f2              3   56[COMRAM] float 
  5966 ;; Auto vars:     Size  Location     Type
  5967 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
  5968 ;;  sign            1    8[BANK0 ] unsigned char 
  5969 ;;  cntr            1    7[BANK0 ] unsigned char 
  5970 ;;  exp             1    3[BANK0 ] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  3   53[COMRAM] float 
  5973 ;; Registers used:
  5974 ;;		wreg, status,2, status,0, cstack
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5980 ;;      Params:         6       0       0       0       0       0       0
  5981 ;;      Locals:         0       6       0       0       0       0       0
  5982 ;;      Temps:          0       3       0       0       0       0       0
  5983 ;;      Totals:         6       9       0       0       0       0       0
  5984 ;;Total ram usage:       15 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    3
  5987 ;; This function calls:
  5988 ;;		___ftpack
  5989 ;; This function is called by:
  5990 ;;		_main
  5991 ;;		_fround
  5992 ;;		_scale
  5993 ;;		_sprintf
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text7
  5998  0023C0                     __ptext7:
  5999                           	opt stack 0
  6000  0023C0                     ___ftmul:
  6001                           	opt stack 0
  6002  0023C0  FFFF               	dw	65535	; assembler added errata NOP
  6003                           
  6004                           ;incstack = 0
  6005  0023C2  C038  F080         	movff	___ftmul@f1+2,??___ftmul
  6006  0023C6  0100               	movlb	0	; () banked
  6007  0023C8  6B81               	clrf	(??___ftmul+1)& (0+255),b
  6008  0023CA  6B82               	clrf	(??___ftmul+2)& (0+255),b
  6009  0023CC  3437               	rlcf	___ftmul@f1+1,w,c
  6010  0023CE  0100               	movlb	0	; () banked
  6011  0023D0  3780               	rlcf	??___ftmul& (0+255),f,b
  6012  0023D2  E301               	bnc	u4801
  6013  0023D4  8181               	bsf	(??___ftmul+1)& (0+255),0,b
  6014  0023D6                     u4801:
  6015  0023D6  0100               	movlb	0	; () banked
  6016  0023D8  5180               	movf	??___ftmul& (0+255),w,b
  6017  0023DA  0100               	movlb	0	; () banked
  6018  0023DC  6F83               	movwf	___ftmul@exp& (0+255),b
  6019  0023DE  0100               	movlb	0	; () banked
  6020  0023E0  5183               	movf	___ftmul@exp& (0+255),w,b
  6021  0023E2  B4D8               	btfsc	status,2,c
  6022  0023E4  D012               	goto	l4196
  6023                           
  6024                           ; BSR set to: 0
  6025                           
  6026                           ; BSR set to: 0
  6027                           
  6028                           ; BSR set to: 0
  6029                           
  6030                           ; BSR set to: 0
  6031  0023E6  C03B  F080         	movff	___ftmul@f2+2,??___ftmul
  6032  0023EA  0100               	movlb	0	; () banked
  6033  0023EC  6B81               	clrf	(??___ftmul+1)& (0+255),b
  6034  0023EE  6B82               	clrf	(??___ftmul+2)& (0+255),b
  6035  0023F0  343A               	rlcf	___ftmul@f2+1,w,c
  6036  0023F2  0100               	movlb	0	; () banked
  6037  0023F4  3780               	rlcf	??___ftmul& (0+255),f,b
  6038  0023F6  E301               	bnc	u4821
  6039  0023F8  8181               	bsf	(??___ftmul+1)& (0+255),0,b
  6040  0023FA                     u4821:
  6041  0023FA  0100               	movlb	0	; () banked
  6042  0023FC  5180               	movf	??___ftmul& (0+255),w,b
  6043  0023FE  0100               	movlb	0	; () banked
  6044  002400  6F88               	movwf	___ftmul@sign& (0+255),b
  6045  002402  0100               	movlb	0	; () banked
  6046  002404  5188               	movf	___ftmul@sign& (0+255),w,b
  6047  002406  A4D8               	btfss	status,2,c
  6048  002408  D008               	goto	l4200
  6049  00240A                     l4196:
  6050  00240A  FFFF               	dw	65535	; assembler added errata NOP
  6051                           
  6052                           ; BSR set to: 0
  6053  00240C  0E00               	movlw	0
  6054  00240E  6E36               	movwf	?___ftmul,c
  6055  002410  0E00               	movlw	0
  6056  002412  6E37               	movwf	?___ftmul+1,c
  6057  002414  0E00               	movlw	0
  6058  002416  6E38               	movwf	?___ftmul+2,c
  6059                           
  6060                           ; BSR set to: 0
  6061  002418  D068               	goto	l840
  6062  00241A                     l4200:
  6063  00241A  FFFF               	dw	65535	; assembler added errata NOP
  6064                           
  6065                           ; BSR set to: 0
  6066  00241C  0100               	movlb	0	; () banked
  6067  00241E  5188               	movf	___ftmul@sign& (0+255),w,b
  6068  002420  0F7B               	addlw	123
  6069  002422  0100               	movlb	0	; () banked
  6070  002424  2783               	addwf	___ftmul@exp& (0+255),f,b
  6071                           
  6072                           ; BSR set to: 0
  6073  002426  C038  F088         	movff	___ftmul@f1+2,___ftmul@sign
  6074  00242A  503B               	movf	___ftmul@f2+2,w,c
  6075  00242C  0100               	movlb	0	; () banked
  6076  00242E  1B88               	xorwf	___ftmul@sign& (0+255),f,b
  6077  002430  0E80               	movlw	128
  6078  002432  0100               	movlb	0	; () banked
  6079  002434  1788               	andwf	___ftmul@sign& (0+255),f,b
  6080                           
  6081                           ; BSR set to: 0
  6082  002436  8E37               	bsf	___ftmul@f1+1,7,c
  6083                           
  6084                           ; BSR set to: 0
  6085  002438  8E3A               	bsf	___ftmul@f2+1,7,c
  6086                           
  6087                           ; BSR set to: 0
  6088  00243A  0EFF               	movlw	255
  6089  00243C  1639               	andwf	___ftmul@f2,f,c
  6090  00243E  0EFF               	movlw	255
  6091  002440  163A               	andwf	___ftmul@f2+1,f,c
  6092  002442  0E00               	movlw	0
  6093  002444  163B               	andwf	___ftmul@f2+2,f,c
  6094                           
  6095                           ; BSR set to: 0
  6096  002446  0E00               	movlw	0
  6097  002448  0100               	movlb	0	; () banked
  6098  00244A  6F84               	movwf	___ftmul@f3_as_product& (0+255),b
  6099  00244C  0E00               	movlw	0
  6100  00244E  0100               	movlb	0	; () banked
  6101  002450  6F85               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6102  002452  0E00               	movlw	0
  6103  002454  0100               	movlb	0	; () banked
  6104  002456  6F86               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6105                           
  6106                           ; BSR set to: 0
  6107  002458  0E07               	movlw	7
  6108  00245A  0100               	movlb	0	; () banked
  6109  00245C  6F87               	movwf	___ftmul@cntr& (0+255),b
  6110  00245E                     l4214:
  6111  00245E  FFFF               	dw	65535	; assembler added errata NOP
  6112                           
  6113                           ; BSR set to: 0
  6114  002460  A036               	btfss	___ftmul@f1,0,c
  6115  002462  D009               	goto	l4218
  6116                           
  6117                           ; BSR set to: 0
  6118  002464  5039               	movf	___ftmul@f2,w,c
  6119  002466  0100               	movlb	0	; () banked
  6120  002468  2784               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6121  00246A  503A               	movf	___ftmul@f2+1,w,c
  6122  00246C  0100               	movlb	0	; () banked
  6123  00246E  2385               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6124  002470  503B               	movf	___ftmul@f2+2,w,c
  6125  002472  0100               	movlb	0	; () banked
  6126  002474  2386               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6127  002476                     l4218:
  6128  002476  FFFF               	dw	65535	; assembler added errata NOP
  6129                           
  6130                           ; BSR set to: 0
  6131  002478  90D8               	bcf	status,0,c
  6132  00247A  3238               	rrcf	___ftmul@f1+2,f,c
  6133  00247C  3237               	rrcf	___ftmul@f1+1,f,c
  6134  00247E  3236               	rrcf	___ftmul@f1,f,c
  6135  002480  90D8               	bcf	status,0,c
  6136  002482  3639               	rlcf	___ftmul@f2,f,c
  6137  002484  363A               	rlcf	___ftmul@f2+1,f,c
  6138  002486  363B               	rlcf	___ftmul@f2+2,f,c
  6139                           
  6140                           ; BSR set to: 0
  6141  002488  0100               	movlb	0	; () banked
  6142  00248A  2F87               	decfsz	___ftmul@cntr& (0+255),f,b
  6143  00248C  D7E8               	goto	l4214
  6144                           
  6145                           ; BSR set to: 0
  6146                           
  6147                           ; BSR set to: 0
  6148  00248E  0E09               	movlw	9
  6149  002490  0100               	movlb	0	; () banked
  6150  002492  6F87               	movwf	___ftmul@cntr& (0+255),b
  6151  002494                     l4224:
  6152  002494  FFFF               	dw	65535	; assembler added errata NOP
  6153                           
  6154                           ; BSR set to: 0
  6155  002496  A036               	btfss	___ftmul@f1,0,c
  6156  002498  D009               	goto	l4228
  6157                           
  6158                           ; BSR set to: 0
  6159  00249A  5039               	movf	___ftmul@f2,w,c
  6160  00249C  0100               	movlb	0	; () banked
  6161  00249E  2784               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6162  0024A0  503A               	movf	___ftmul@f2+1,w,c
  6163  0024A2  0100               	movlb	0	; () banked
  6164  0024A4  2385               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6165  0024A6  503B               	movf	___ftmul@f2+2,w,c
  6166  0024A8  0100               	movlb	0	; () banked
  6167  0024AA  2386               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6168  0024AC                     l4228:
  6169  0024AC  FFFF               	dw	65535	; assembler added errata NOP
  6170                           
  6171                           ; BSR set to: 0
  6172  0024AE  90D8               	bcf	status,0,c
  6173  0024B0  3238               	rrcf	___ftmul@f1+2,f,c
  6174  0024B2  3237               	rrcf	___ftmul@f1+1,f,c
  6175  0024B4  3236               	rrcf	___ftmul@f1,f,c
  6176  0024B6  0100               	movlb	0	; () banked
  6177  0024B8  90D8               	bcf	status,0,c
  6178  0024BA  3386               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6179  0024BC  3385               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6180  0024BE  3384               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6181                           
  6182                           ; BSR set to: 0
  6183  0024C0  0100               	movlb	0	; () banked
  6184  0024C2  2F87               	decfsz	___ftmul@cntr& (0+255),f,b
  6185  0024C4  D7E7               	goto	l4224
  6186                           
  6187                           ; BSR set to: 0
  6188                           
  6189                           ; BSR set to: 0
  6190  0024C6  C084  F022         	movff	___ftmul@f3_as_product,___ftpack@arg
  6191  0024CA  C085  F023         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6192  0024CE  C086  F024         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6193  0024D2  C083  F025         	movff	___ftmul@exp,___ftpack@exp
  6194  0024D6  C088  F026         	movff	___ftmul@sign,___ftpack@sign
  6195  0024DA  ECE8  F013         	call	___ftpack	;wreg free
  6196  0024DE  C022  F036         	movff	?___ftpack,?___ftmul
  6197  0024E2  C023  F037         	movff	?___ftpack+1,?___ftmul+1
  6198  0024E6  C024  F038         	movff	?___ftpack+2,?___ftmul+2
  6199  0024EA                     l840:
  6200  0024EA  FFFF               	dw	65535	; assembler added errata NOP
  6201  0024EC  0012               	return		;funcret
  6202  0024EE  FFFF               	dw	65535	; errata NOP
  6203  0024F0                     __end_of___ftmul:
  6204                           	opt stack 0
  6205                           tblptru	equ	0xFF8
  6206                           tblptrh	equ	0xFF7
  6207                           tblptrl	equ	0xFF6
  6208                           tablat	equ	0xFF5
  6209                           prodh	equ	0xFF4
  6210                           prodl	equ	0xFF3
  6211                           postinc0	equ	0xFEE
  6212                           wreg	equ	0xFE8
  6213                           postdec1	equ	0xFE5
  6214                           fsr1l	equ	0xFE1
  6215                           indf2	equ	0xFDF
  6216                           postinc2	equ	0xFDE
  6217                           postdec2	equ	0xFDD
  6218                           fsr2h	equ	0xFDA
  6219                           fsr2l	equ	0xFD9
  6220                           status	equ	0xFD8
  6221                           
  6222 ;; *************** function ___awmod *****************
  6223 ;; Defined at:
  6224 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/awmod.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;  dividend        2   33[COMRAM] int 
  6227 ;;  divisor         2   35[COMRAM] int 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  sign            1   38[COMRAM] unsigned char 
  6230 ;;  counter         1   37[COMRAM] unsigned char 
  6231 ;; Return value:  Size  Location     Type
  6232 ;;                  2   33[COMRAM] int 
  6233 ;; Registers used:
  6234 ;;		wreg, status,2, status,0
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6240 ;;      Params:         4       0       0       0       0       0       0
  6241 ;;      Locals:         2       0       0       0       0       0       0
  6242 ;;      Temps:          0       0       0       0       0       0       0
  6243 ;;      Totals:         6       0       0       0       0       0       0
  6244 ;;Total ram usage:        6 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:    2
  6247 ;; This function calls:
  6248 ;;		Nothing
  6249 ;; This function is called by:
  6250 ;;		_fround
  6251 ;;		_scale
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           	psect	text8
  6256  002A58                     __ptext8:
  6257                           	opt stack 0
  6258  002A58                     ___awmod:
  6259                           	opt stack 0
  6260  002A58  FFFF               	dw	65535	; assembler added errata NOP
  6261                           
  6262                           ;incstack = 0
  6263  002A5A  0E00               	movlw	0
  6264  002A5C  6E27               	movwf	___awmod@sign,c
  6265  002A5E  AE23               	btfss	___awmod@dividend+1,7,c
  6266  002A60  D006               	goto	l4288
  6267  002A62  6C22               	negf	___awmod@dividend,c
  6268  002A64  1E23               	comf	___awmod@dividend+1,f,c
  6269  002A66  B0D8               	btfsc	status,0,c
  6270  002A68  2A23               	incf	___awmod@dividend+1,f,c
  6271  002A6A  0E01               	movlw	1
  6272  002A6C  6E27               	movwf	___awmod@sign,c
  6273  002A6E                     l4288:
  6274  002A6E  FFFF               	dw	65535	; assembler added errata NOP
  6275  002A70  AE25               	btfss	___awmod@divisor+1,7,c
  6276  002A72  D004               	goto	l4292
  6277  002A74  6C24               	negf	___awmod@divisor,c
  6278  002A76  1E25               	comf	___awmod@divisor+1,f,c
  6279  002A78  B0D8               	btfsc	status,0,c
  6280  002A7A  2A25               	incf	___awmod@divisor+1,f,c
  6281  002A7C                     l4292:
  6282  002A7C  FFFF               	dw	65535	; assembler added errata NOP
  6283  002A7E  5024               	movf	___awmod@divisor,w,c
  6284  002A80  1025               	iorwf	___awmod@divisor+1,w,c
  6285  002A82  B4D8               	btfsc	status,2,c
  6286  002A84  D01C               	goto	l4308
  6287  002A86  0E01               	movlw	1
  6288  002A88  6E26               	movwf	___awmod@counter,c
  6289  002A8A  D005               	goto	l4298
  6290  002A8C                     l4296:
  6291  002A8C  FFFF               	dw	65535	; assembler added errata NOP
  6292  002A8E  90D8               	bcf	status,0,c
  6293  002A90  3624               	rlcf	___awmod@divisor,f,c
  6294  002A92  3625               	rlcf	___awmod@divisor+1,f,c
  6295  002A94  2A26               	incf	___awmod@counter,f,c
  6296  002A96                     l4298:
  6297  002A96  FFFF               	dw	65535	; assembler added errata NOP
  6298  002A98  AE25               	btfss	___awmod@divisor+1,7,c
  6299  002A9A  D7F8               	goto	l4296
  6300  002A9C                     l4300:
  6301  002A9C  FFFF               	dw	65535	; assembler added errata NOP
  6302  002A9E  5024               	movf	___awmod@divisor,w,c
  6303  002AA0  5C22               	subwf	___awmod@dividend,w,c
  6304  002AA2  5025               	movf	___awmod@divisor+1,w,c
  6305  002AA4  5823               	subwfb	___awmod@dividend+1,w,c
  6306  002AA6  A0D8               	btfss	status,0,c
  6307  002AA8  D004               	goto	l4304
  6308  002AAA  5024               	movf	___awmod@divisor,w,c
  6309  002AAC  5E22               	subwf	___awmod@dividend,f,c
  6310  002AAE  5025               	movf	___awmod@divisor+1,w,c
  6311  002AB0  5A23               	subwfb	___awmod@dividend+1,f,c
  6312  002AB2                     l4304:
  6313  002AB2  FFFF               	dw	65535	; assembler added errata NOP
  6314  002AB4  90D8               	bcf	status,0,c
  6315  002AB6  3225               	rrcf	___awmod@divisor+1,f,c
  6316  002AB8  3224               	rrcf	___awmod@divisor,f,c
  6317  002ABA  2E26               	decfsz	___awmod@counter,f,c
  6318  002ABC  D7EF               	goto	l4300
  6319  002ABE                     l4308:
  6320  002ABE  FFFF               	dw	65535	; assembler added errata NOP
  6321  002AC0  5027               	movf	___awmod@sign,w,c
  6322  002AC2  B4D8               	btfsc	status,2,c
  6323  002AC4  D004               	goto	l4312
  6324  002AC6  6C22               	negf	___awmod@dividend,c
  6325  002AC8  1E23               	comf	___awmod@dividend+1,f,c
  6326  002ACA  B0D8               	btfsc	status,0,c
  6327  002ACC  2A23               	incf	___awmod@dividend+1,f,c
  6328  002ACE                     l4312:
  6329  002ACE  FFFF               	dw	65535	; assembler added errata NOP
  6330  002AD0  C022  F022         	movff	___awmod@dividend,?___awmod
  6331  002AD4  C023  F023         	movff	___awmod@dividend+1,?___awmod+1
  6332  002AD8  0012               	return		;funcret
  6333  002ADA  FFFF               	dw	65535	; errata NOP
  6334  002ADC                     __end_of___awmod:
  6335                           	opt stack 0
  6336                           tblptru	equ	0xFF8
  6337                           tblptrh	equ	0xFF7
  6338                           tblptrl	equ	0xFF6
  6339                           tablat	equ	0xFF5
  6340                           prodh	equ	0xFF4
  6341                           prodl	equ	0xFF3
  6342                           postinc0	equ	0xFEE
  6343                           wreg	equ	0xFE8
  6344                           postdec1	equ	0xFE5
  6345                           fsr1l	equ	0xFE1
  6346                           indf2	equ	0xFDF
  6347                           postinc2	equ	0xFDE
  6348                           postdec2	equ	0xFDD
  6349                           fsr2h	equ	0xFDA
  6350                           fsr2l	equ	0xFD9
  6351                           status	equ	0xFD8
  6352                           
  6353 ;; *************** function __tdiv_to_l_ *****************
  6354 ;; Defined at:
  6355 ;;		line 60 in file "/opt/microchip/xc8/v1.38/sources/common/ftdivl.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;  f1              3   33[COMRAM] float 
  6358 ;;  f2              3   36[COMRAM] float 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;  quot            4   42[COMRAM] unsigned long 
  6361 ;;  exp1            1   47[COMRAM] unsigned char 
  6362 ;;  cntr            1   46[COMRAM] unsigned char 
  6363 ;; Return value:  Size  Location     Type
  6364 ;;                  4   33[COMRAM] unsigned long 
  6365 ;; Registers used:
  6366 ;;		wreg, status,2, status,0
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6372 ;;      Params:         6       0       0       0       0       0       0
  6373 ;;      Locals:         6       0       0       0       0       0       0
  6374 ;;      Temps:          3       0       0       0       0       0       0
  6375 ;;      Totals:        15       0       0       0       0       0       0
  6376 ;;Total ram usage:       15 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    2
  6379 ;; This function calls:
  6380 ;;		Nothing
  6381 ;; This function is called by:
  6382 ;;		_sprintf
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           	psect	text9
  6387  0024F0                     __ptext9:
  6388                           	opt stack 0
  6389  0024F0                     __tdiv_to_l_:
  6390                           	opt stack 0
  6391  0024F0  FFFF               	dw	65535	; assembler added errata NOP
  6392                           
  6393                           ;incstack = 0
  6394  0024F2  C024  F028         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6395  0024F6  6A29               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6396  0024F8  6A2A               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6397  0024FA  3423               	rlcf	__tdiv_to_l_@f1+1,w,c
  6398  0024FC  3628               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6399  0024FE  E301               	bnc	u5071
  6400  002500  8029               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6401  002502                     u5071:
  6402  002502  5028               	movf	??__tdiv_to_l_,w,c
  6403  002504  6E30               	movwf	__tdiv_to_l_@exp1,c
  6404  002506  5030               	movf	__tdiv_to_l_@exp1,w,c
  6405  002508  B4D8               	btfsc	status,2,c
  6406  00250A  D05A               	goto	l4436
  6407  00250C  C027  F028         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6408  002510  6A29               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6409  002512  6A2A               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6410  002514  3426               	rlcf	__tdiv_to_l_@f2+1,w,c
  6411  002516  3628               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6412  002518  E301               	bnc	u5091
  6413  00251A  8029               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6414  00251C                     u5091:
  6415  00251C  5028               	movf	??__tdiv_to_l_,w,c
  6416  00251E  6E2F               	movwf	__tdiv_to_l_@cntr,c
  6417  002520  502F               	movf	__tdiv_to_l_@cntr,w,c
  6418  002522  B4D8               	btfsc	status,2,c
  6419  002524  D04D               	goto	l4436
  6420  002526  8E23               	bsf	__tdiv_to_l_@f1+1,7,c
  6421  002528  0EFF               	movlw	255
  6422  00252A  1622               	andwf	__tdiv_to_l_@f1,f,c
  6423  00252C  0EFF               	movlw	255
  6424  00252E  1623               	andwf	__tdiv_to_l_@f1+1,f,c
  6425  002530  0E00               	movlw	0
  6426  002532  1624               	andwf	__tdiv_to_l_@f1+2,f,c
  6427  002534  8E26               	bsf	__tdiv_to_l_@f2+1,7,c
  6428  002536  0EFF               	movlw	255
  6429  002538  1625               	andwf	__tdiv_to_l_@f2,f,c
  6430  00253A  0EFF               	movlw	255
  6431  00253C  1626               	andwf	__tdiv_to_l_@f2+1,f,c
  6432  00253E  0E00               	movlw	0
  6433  002540  1627               	andwf	__tdiv_to_l_@f2+2,f,c
  6434  002542  0E00               	movlw	0
  6435  002544  6E2B               	movwf	__tdiv_to_l_@quot,c
  6436  002546  0E00               	movlw	0
  6437  002548  6E2C               	movwf	__tdiv_to_l_@quot+1,c
  6438  00254A  0E00               	movlw	0
  6439  00254C  6E2D               	movwf	__tdiv_to_l_@quot+2,c
  6440  00254E  0E00               	movlw	0
  6441  002550  6E2E               	movwf	__tdiv_to_l_@quot+3,c
  6442  002552  0E7F               	movlw	127
  6443  002554  5E30               	subwf	__tdiv_to_l_@exp1,f,c
  6444  002556  502F               	movf	__tdiv_to_l_@cntr,w,c
  6445  002558  0F98               	addlw	152
  6446  00255A  5E30               	subwf	__tdiv_to_l_@exp1,f,c
  6447  00255C  0E18               	movlw	24
  6448  00255E  6E2F               	movwf	__tdiv_to_l_@cntr,c
  6449  002560                     l818:
  6450  002560  FFFF               	dw	65535	; assembler added errata NOP
  6451  002562  90D8               	bcf	status,0,c
  6452  002564  362B               	rlcf	__tdiv_to_l_@quot,f,c
  6453  002566  362C               	rlcf	__tdiv_to_l_@quot+1,f,c
  6454  002568  362D               	rlcf	__tdiv_to_l_@quot+2,f,c
  6455  00256A  362E               	rlcf	__tdiv_to_l_@quot+3,f,c
  6456  00256C  5025               	movf	__tdiv_to_l_@f2,w,c
  6457  00256E  5C22               	subwf	__tdiv_to_l_@f1,w,c
  6458  002570  5026               	movf	__tdiv_to_l_@f2+1,w,c
  6459  002572  5823               	subwfb	__tdiv_to_l_@f1+1,w,c
  6460  002574  5027               	movf	__tdiv_to_l_@f2+2,w,c
  6461  002576  5824               	subwfb	__tdiv_to_l_@f1+2,w,c
  6462  002578  A0D8               	btfss	status,0,c
  6463  00257A  D007               	goto	l819
  6464  00257C  5025               	movf	__tdiv_to_l_@f2,w,c
  6465  00257E  5E22               	subwf	__tdiv_to_l_@f1,f,c
  6466  002580  5026               	movf	__tdiv_to_l_@f2+1,w,c
  6467  002582  5A23               	subwfb	__tdiv_to_l_@f1+1,f,c
  6468  002584  5027               	movf	__tdiv_to_l_@f2+2,w,c
  6469  002586  5A24               	subwfb	__tdiv_to_l_@f1+2,f,c
  6470  002588  802B               	bsf	__tdiv_to_l_@quot,0,c
  6471  00258A                     l819:
  6472  00258A  FFFF               	dw	65535	; assembler added errata NOP
  6473  00258C  90D8               	bcf	status,0,c
  6474  00258E  3622               	rlcf	__tdiv_to_l_@f1,f,c
  6475  002590  3623               	rlcf	__tdiv_to_l_@f1+1,f,c
  6476  002592  3624               	rlcf	__tdiv_to_l_@f1+2,f,c
  6477  002594  2E2F               	decfsz	__tdiv_to_l_@cntr,f,c
  6478  002596  D7E4               	goto	l818
  6479  002598  AE30               	btfss	__tdiv_to_l_@exp1,7,c
  6480  00259A  D00E               	goto	l4434
  6481  00259C  5030               	movf	__tdiv_to_l_@exp1,w,c
  6482  00259E  0A80               	xorlw	128
  6483  0025A0  0F97               	addlw	151
  6484  0025A2  A0D8               	btfss	status,0,c
  6485  0025A4  D00D               	goto	l4436
  6486  0025A6                     l4430:
  6487  0025A6  FFFF               	dw	65535	; assembler added errata NOP
  6488  0025A8  90D8               	bcf	status,0,c
  6489  0025AA  322E               	rrcf	__tdiv_to_l_@quot+3,f,c
  6490  0025AC  322D               	rrcf	__tdiv_to_l_@quot+2,f,c
  6491  0025AE  322C               	rrcf	__tdiv_to_l_@quot+1,f,c
  6492  0025B0  322B               	rrcf	__tdiv_to_l_@quot,f,c
  6493  0025B2  3E30               	incfsz	__tdiv_to_l_@exp1,f,c
  6494  0025B4  D7F8               	goto	l4430
  6495  0025B6  D019               	goto	l825
  6496  0025B8                     l4434:
  6497  0025B8  FFFF               	dw	65535	; assembler added errata NOP
  6498  0025BA  0E17               	movlw	23
  6499  0025BC  6430               	cpfsgt	__tdiv_to_l_@exp1,c
  6500  0025BE  D011               	goto	l4442
  6501  0025C0                     l4436:
  6502  0025C0  FFFF               	dw	65535	; assembler added errata NOP
  6503  0025C2  0E00               	movlw	0
  6504  0025C4  6E22               	movwf	?__tdiv_to_l_,c
  6505  0025C6  0E00               	movlw	0
  6506  0025C8  6E23               	movwf	?__tdiv_to_l_+1,c
  6507  0025CA  0E00               	movlw	0
  6508  0025CC  6E24               	movwf	?__tdiv_to_l_+2,c
  6509  0025CE  0E00               	movlw	0
  6510  0025D0  6E25               	movwf	?__tdiv_to_l_+3,c
  6511  0025D2  D014               	goto	l816
  6512  0025D4                     l4440:
  6513  0025D4  FFFF               	dw	65535	; assembler added errata NOP
  6514  0025D6  90D8               	bcf	status,0,c
  6515  0025D8  362B               	rlcf	__tdiv_to_l_@quot,f,c
  6516  0025DA  362C               	rlcf	__tdiv_to_l_@quot+1,f,c
  6517  0025DC  362D               	rlcf	__tdiv_to_l_@quot+2,f,c
  6518  0025DE  362E               	rlcf	__tdiv_to_l_@quot+3,f,c
  6519  0025E0  0630               	decf	__tdiv_to_l_@exp1,f,c
  6520  0025E2                     l4442:
  6521  0025E2  FFFF               	dw	65535	; assembler added errata NOP
  6522  0025E4  5030               	movf	__tdiv_to_l_@exp1,w,c
  6523  0025E6  A4D8               	btfss	status,2,c
  6524  0025E8  D7F5               	goto	l4440
  6525  0025EA                     l825:
  6526  0025EA  FFFF               	dw	65535	; assembler added errata NOP
  6527  0025EC  C02B  F022         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6528  0025F0  C02C  F023         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6529  0025F4  C02D  F024         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6530  0025F8  C02E  F025         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6531  0025FC                     l816:
  6532  0025FC  FFFF               	dw	65535	; assembler added errata NOP
  6533  0025FE  0012               	return		;funcret
  6534  002600  FFFF               	dw	65535	; errata NOP
  6535  002602                     __end_of__tdiv_to_l_:
  6536                           	opt stack 0
  6537                           tblptru	equ	0xFF8
  6538                           tblptrh	equ	0xFF7
  6539                           tblptrl	equ	0xFF6
  6540                           tablat	equ	0xFF5
  6541                           prodh	equ	0xFF4
  6542                           prodl	equ	0xFF3
  6543                           postinc0	equ	0xFEE
  6544                           wreg	equ	0xFE8
  6545                           postdec1	equ	0xFE5
  6546                           fsr1l	equ	0xFE1
  6547                           indf2	equ	0xFDF
  6548                           postinc2	equ	0xFDE
  6549                           postdec2	equ	0xFDD
  6550                           fsr2h	equ	0xFDA
  6551                           fsr2l	equ	0xFD9
  6552                           status	equ	0xFD8
  6553                           
  6554 ;; *************** function __div_to_l_ *****************
  6555 ;; Defined at:
  6556 ;;		line 60 in file "/opt/microchip/xc8/v1.38/sources/common/fldivl.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;  f1              3   33[COMRAM] unsigned long 
  6559 ;;  f2              3   36[COMRAM] unsigned long 
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;  quot            4   39[COMRAM] unsigned long 
  6562 ;;  exp1            1   44[COMRAM] unsigned char 
  6563 ;;  cntr            1   43[COMRAM] unsigned char 
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  4   33[COMRAM] unsigned long 
  6566 ;; Registers used:
  6567 ;;		wreg, status,2, status,0
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6573 ;;      Params:         6       0       0       0       0       0       0
  6574 ;;      Locals:         6       0       0       0       0       0       0
  6575 ;;      Temps:          0       0       0       0       0       0       0
  6576 ;;      Totals:        12       0       0       0       0       0       0
  6577 ;;Total ram usage:       12 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    2
  6580 ;; This function calls:
  6581 ;;		Nothing
  6582 ;; This function is called by:
  6583 ;;		_sprintf
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           	psect	text10
  6588  002602                     __ptext10:
  6589                           	opt stack 0
  6590  002602                     __div_to_l_:
  6591                           	opt stack 0
  6592  002602  FFFF               	dw	65535	; assembler added errata NOP
  6593                           
  6594                           ;incstack = 0
  6595  002604  3424               	rlcf	__div_to_l_@f1+2,w,c
  6596  002606  3425               	rlcf	__div_to_l_@f1+3,w,c
  6597  002608  6E2D               	movwf	__div_to_l_@exp1,c
  6598  00260A  502D               	movf	__div_to_l_@exp1,w,c
  6599  00260C  B4D8               	btfsc	status,2,c
  6600  00260E  D05C               	goto	l4496
  6601  002610  3427               	rlcf	__div_to_l_@f2+2,w,c
  6602  002612  3428               	rlcf	__div_to_l_@f2+3,w,c
  6603  002614  6E2C               	movwf	__div_to_l_@cntr,c
  6604  002616  502C               	movf	__div_to_l_@cntr,w,c
  6605  002618  B4D8               	btfsc	status,2,c
  6606  00261A  D056               	goto	l4496
  6607  00261C  8E24               	bsf	__div_to_l_@f1+2,7,c
  6608  00261E  0EFF               	movlw	255
  6609  002620  1622               	andwf	__div_to_l_@f1,f,c
  6610  002622  0EFF               	movlw	255
  6611  002624  1623               	andwf	__div_to_l_@f1+1,f,c
  6612  002626  0EFF               	movlw	255
  6613  002628  1624               	andwf	__div_to_l_@f1+2,f,c
  6614  00262A  0E00               	movlw	0
  6615  00262C  1625               	andwf	__div_to_l_@f1+3,f,c
  6616  00262E  8E27               	bsf	__div_to_l_@f2+2,7,c
  6617  002630  0EFF               	movlw	255
  6618  002632  1625               	andwf	__div_to_l_@f2,f,c
  6619  002634  0EFF               	movlw	255
  6620  002636  1626               	andwf	__div_to_l_@f2+1,f,c
  6621  002638  0EFF               	movlw	255
  6622  00263A  1627               	andwf	__div_to_l_@f2+2,f,c
  6623  00263C  0E00               	movlw	0
  6624  00263E  1628               	andwf	__div_to_l_@f2+3,f,c
  6625  002640  0E00               	movlw	0
  6626  002642  6E28               	movwf	__div_to_l_@quot,c
  6627  002644  0E00               	movlw	0
  6628  002646  6E29               	movwf	__div_to_l_@quot+1,c
  6629  002648  0E00               	movlw	0
  6630  00264A  6E2A               	movwf	__div_to_l_@quot+2,c
  6631  00264C  0E00               	movlw	0
  6632  00264E  6E2B               	movwf	__div_to_l_@quot+3,c
  6633  002650  0E7F               	movlw	127
  6634  002652  5E2D               	subwf	__div_to_l_@exp1,f,c
  6635  002654  502C               	movf	__div_to_l_@cntr,w,c
  6636  002656  0FA0               	addlw	160
  6637  002658  5E2D               	subwf	__div_to_l_@exp1,f,c
  6638  00265A  0E20               	movlw	32
  6639  00265C  6E2C               	movwf	__div_to_l_@cntr,c
  6640  00265E                     l4470:
  6641  00265E  FFFF               	dw	65535	; assembler added errata NOP
  6642  002660  90D8               	bcf	status,0,c
  6643  002662  3628               	rlcf	__div_to_l_@quot,f,c
  6644  002664  3629               	rlcf	__div_to_l_@quot+1,f,c
  6645  002666  362A               	rlcf	__div_to_l_@quot+2,f,c
  6646  002668  362B               	rlcf	__div_to_l_@quot+3,f,c
  6647  00266A  5025               	movf	__div_to_l_@f2,w,c
  6648  00266C  5C22               	subwf	__div_to_l_@f1,w,c
  6649  00266E  5026               	movf	__div_to_l_@f2+1,w,c
  6650  002670  5823               	subwfb	__div_to_l_@f1+1,w,c
  6651  002672  5027               	movf	__div_to_l_@f2+2,w,c
  6652  002674  5824               	subwfb	__div_to_l_@f1+2,w,c
  6653  002676  5028               	movf	__div_to_l_@f2+3,w,c
  6654  002678  5825               	subwfb	__div_to_l_@f1+3,w,c
  6655  00267A  A0D8               	btfss	status,0,c
  6656  00267C  D009               	goto	l4478
  6657  00267E  5025               	movf	__div_to_l_@f2,w,c
  6658  002680  5E22               	subwf	__div_to_l_@f1,f,c
  6659  002682  5026               	movf	__div_to_l_@f2+1,w,c
  6660  002684  5A23               	subwfb	__div_to_l_@f1+1,f,c
  6661  002686  5027               	movf	__div_to_l_@f2+2,w,c
  6662  002688  5A24               	subwfb	__div_to_l_@f1+2,f,c
  6663  00268A  5028               	movf	__div_to_l_@f2+3,w,c
  6664  00268C  5A25               	subwfb	__div_to_l_@f1+3,f,c
  6665  00268E  8028               	bsf	__div_to_l_@quot,0,c
  6666  002690                     l4478:
  6667  002690  FFFF               	dw	65535	; assembler added errata NOP
  6668  002692  90D8               	bcf	status,0,c
  6669  002694  3622               	rlcf	__div_to_l_@f1,f,c
  6670  002696  3623               	rlcf	__div_to_l_@f1+1,f,c
  6671  002698  3624               	rlcf	__div_to_l_@f1+2,f,c
  6672  00269A  3625               	rlcf	__div_to_l_@f1+3,f,c
  6673  00269C  2E2C               	decfsz	__div_to_l_@cntr,f,c
  6674  00269E  D7DF               	goto	l4470
  6675  0026A0  AE2D               	btfss	__div_to_l_@exp1,7,c
  6676  0026A2  D00E               	goto	l4494
  6677  0026A4  502D               	movf	__div_to_l_@exp1,w,c
  6678  0026A6  0A80               	xorlw	128
  6679  0026A8  0F9F               	addlw	159
  6680  0026AA  A0D8               	btfss	status,0,c
  6681  0026AC  D00D               	goto	l4496
  6682  0026AE                     l4490:
  6683  0026AE  FFFF               	dw	65535	; assembler added errata NOP
  6684  0026B0  90D8               	bcf	status,0,c
  6685  0026B2  322B               	rrcf	__div_to_l_@quot+3,f,c
  6686  0026B4  322A               	rrcf	__div_to_l_@quot+2,f,c
  6687  0026B6  3229               	rrcf	__div_to_l_@quot+1,f,c
  6688  0026B8  3228               	rrcf	__div_to_l_@quot,f,c
  6689  0026BA  3E2D               	incfsz	__div_to_l_@exp1,f,c
  6690  0026BC  D7F8               	goto	l4490
  6691  0026BE  D019               	goto	l721
  6692  0026C0                     l4494:
  6693  0026C0  FFFF               	dw	65535	; assembler added errata NOP
  6694  0026C2  0E1F               	movlw	31
  6695  0026C4  642D               	cpfsgt	__div_to_l_@exp1,c
  6696  0026C6  D011               	goto	l4502
  6697  0026C8                     l4496:
  6698  0026C8  FFFF               	dw	65535	; assembler added errata NOP
  6699  0026CA  0E00               	movlw	0
  6700  0026CC  6E22               	movwf	?__div_to_l_,c
  6701  0026CE  0E00               	movlw	0
  6702  0026D0  6E23               	movwf	?__div_to_l_+1,c
  6703  0026D2  0E00               	movlw	0
  6704  0026D4  6E24               	movwf	?__div_to_l_+2,c
  6705  0026D6  0E00               	movlw	0
  6706  0026D8  6E25               	movwf	?__div_to_l_+3,c
  6707  0026DA  D014               	goto	l712
  6708  0026DC                     l4500:
  6709  0026DC  FFFF               	dw	65535	; assembler added errata NOP
  6710  0026DE  90D8               	bcf	status,0,c
  6711  0026E0  3628               	rlcf	__div_to_l_@quot,f,c
  6712  0026E2  3629               	rlcf	__div_to_l_@quot+1,f,c
  6713  0026E4  362A               	rlcf	__div_to_l_@quot+2,f,c
  6714  0026E6  362B               	rlcf	__div_to_l_@quot+3,f,c
  6715  0026E8  062D               	decf	__div_to_l_@exp1,f,c
  6716  0026EA                     l4502:
  6717  0026EA  FFFF               	dw	65535	; assembler added errata NOP
  6718  0026EC  502D               	movf	__div_to_l_@exp1,w,c
  6719  0026EE  A4D8               	btfss	status,2,c
  6720  0026F0  D7F5               	goto	l4500
  6721  0026F2                     l721:
  6722  0026F2  FFFF               	dw	65535	; assembler added errata NOP
  6723  0026F4  C028  F022         	movff	__div_to_l_@quot,?__div_to_l_
  6724  0026F8  C029  F023         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6725  0026FC  C02A  F024         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6726  002700  C02B  F025         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6727  002704                     l712:
  6728  002704  FFFF               	dw	65535	; assembler added errata NOP
  6729  002706  0012               	return		;funcret
  6730  002708  FFFF               	dw	65535	; errata NOP
  6731  00270A                     __end_of__div_to_l_:
  6732                           	opt stack 0
  6733                           tblptru	equ	0xFF8
  6734                           tblptrh	equ	0xFF7
  6735                           tblptrl	equ	0xFF6
  6736                           tablat	equ	0xFF5
  6737                           prodh	equ	0xFF4
  6738                           prodl	equ	0xFF3
  6739                           postinc0	equ	0xFEE
  6740                           wreg	equ	0xFE8
  6741                           postdec1	equ	0xFE5
  6742                           fsr1l	equ	0xFE1
  6743                           indf2	equ	0xFDF
  6744                           postinc2	equ	0xFDE
  6745                           postdec2	equ	0xFDD
  6746                           fsr2h	equ	0xFDA
  6747                           fsr2l	equ	0xFD9
  6748                           status	equ	0xFD8
  6749                           
  6750 ;; *************** function ___lltoft *****************
  6751 ;; Defined at:
  6752 ;;		line 35 in file "/opt/microchip/xc8/v1.38/sources/common/lltoft.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;  c               4   41[COMRAM] unsigned long 
  6755 ;; Auto vars:     Size  Location     Type
  6756 ;;  exp             1   49[COMRAM] unsigned char 
  6757 ;; Return value:  Size  Location     Type
  6758 ;;                  3   41[COMRAM] float 
  6759 ;; Registers used:
  6760 ;;		wreg, status,2, status,0, cstack
  6761 ;; Tracked objects:
  6762 ;;		On entry : 0/0
  6763 ;;		On exit  : 0/0
  6764 ;;		Unchanged: 0/0
  6765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6766 ;;      Params:         4       0       0       0       0       0       0
  6767 ;;      Locals:         1       0       0       0       0       0       0
  6768 ;;      Temps:          4       0       0       0       0       0       0
  6769 ;;      Totals:         9       0       0       0       0       0       0
  6770 ;;Total ram usage:        9 bytes
  6771 ;; Hardware stack levels used:    1
  6772 ;; Hardware stack levels required when called:    3
  6773 ;; This function calls:
  6774 ;;		___ftpack
  6775 ;; This function is called by:
  6776 ;;		_sprintf
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           	psect	text11
  6781  002C3A                     __ptext11:
  6782                           	opt stack 0
  6783  002C3A                     ___lltoft:
  6784                           	opt stack 0
  6785  002C3A  FFFF               	dw	65535	; assembler added errata NOP
  6786                           
  6787                           ;incstack = 0
  6788  002C3C  0E8E               	movlw	142
  6789  002C3E  6E32               	movwf	___lltoft@exp,c
  6790  002C40  D007               	goto	l4622
  6791  002C42                     l4620:
  6792  002C42  FFFF               	dw	65535	; assembler added errata NOP
  6793  002C44  90D8               	bcf	status,0,c
  6794  002C46  322D               	rrcf	___lltoft@c+3,f,c
  6795  002C48  322C               	rrcf	___lltoft@c+2,f,c
  6796  002C4A  322B               	rrcf	___lltoft@c+1,f,c
  6797  002C4C  322A               	rrcf	___lltoft@c,f,c
  6798  002C4E  2A32               	incf	___lltoft@exp,f,c
  6799  002C50                     l4622:
  6800  002C50  FFFF               	dw	65535	; assembler added errata NOP
  6801  002C52  0E00               	movlw	0
  6802  002C54  142A               	andwf	___lltoft@c,w,c
  6803  002C56  6E2E               	movwf	??___lltoft& (0+255),c
  6804  002C58  0E00               	movlw	0
  6805  002C5A  142B               	andwf	___lltoft@c+1,w,c
  6806  002C5C  6E2F               	movwf	(??___lltoft+1)& (0+255),c
  6807  002C5E  0E00               	movlw	0
  6808  002C60  142C               	andwf	___lltoft@c+2,w,c
  6809  002C62  6E30               	movwf	(??___lltoft+2)& (0+255),c
  6810  002C64  0EFF               	movlw	255
  6811  002C66  142D               	andwf	___lltoft@c+3,w,c
  6812  002C68  6E31               	movwf	(??___lltoft+3)& (0+255),c
  6813  002C6A  502E               	movf	??___lltoft,w,c
  6814  002C6C  102F               	iorwf	??___lltoft+1,w,c
  6815  002C6E  1030               	iorwf	??___lltoft+2,w,c
  6816  002C70  1031               	iorwf	??___lltoft+3,w,c
  6817  002C72  A4D8               	btfss	status,2,c
  6818  002C74  D7E6               	goto	l4620
  6819  002C76  C02A  F022         	movff	___lltoft@c,___ftpack@arg
  6820  002C7A  C02B  F023         	movff	___lltoft@c+1,___ftpack@arg+1
  6821  002C7E  C02C  F024         	movff	___lltoft@c+2,___ftpack@arg+2
  6822  002C82  C032  F025         	movff	___lltoft@exp,___ftpack@exp
  6823  002C86  0E00               	movlw	0
  6824  002C88  6E26               	movwf	___ftpack@sign,c
  6825  002C8A  ECE8  F013         	call	___ftpack	;wreg free
  6826  002C8E  C022  F02A         	movff	?___ftpack,?___lltoft
  6827  002C92  C023  F02B         	movff	?___ftpack+1,?___lltoft+1
  6828  002C96  C024  F02C         	movff	?___ftpack+2,?___lltoft+2
  6829  002C9A  0012               	return		;funcret
  6830  002C9C  FFFF               	dw	65535	; errata NOP
  6831  002C9E                     __end_of___lltoft:
  6832                           	opt stack 0
  6833                           tblptru	equ	0xFF8
  6834                           tblptrh	equ	0xFF7
  6835                           tblptrl	equ	0xFF6
  6836                           tablat	equ	0xFF5
  6837                           prodh	equ	0xFF4
  6838                           prodl	equ	0xFF3
  6839                           postinc0	equ	0xFEE
  6840                           wreg	equ	0xFE8
  6841                           postdec1	equ	0xFE5
  6842                           fsr1l	equ	0xFE1
  6843                           indf2	equ	0xFDF
  6844                           postinc2	equ	0xFDE
  6845                           postdec2	equ	0xFDD
  6846                           fsr2h	equ	0xFDA
  6847                           fsr2l	equ	0xFD9
  6848                           status	equ	0xFD8
  6849                           
  6850 ;; *************** function ___llmod *****************
  6851 ;; Defined at:
  6852 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/llmod.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;  dividend        4   46[COMRAM] unsigned long 
  6855 ;;  divisor         4   50[COMRAM] unsigned long 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;  counter         1   54[COMRAM] unsigned char 
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  4   46[COMRAM] unsigned long 
  6860 ;; Registers used:
  6861 ;;		wreg, status,2, status,0
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6867 ;;      Params:         8       0       0       0       0       0       0
  6868 ;;      Locals:         1       0       0       0       0       0       0
  6869 ;;      Temps:          0       0       0       0       0       0       0
  6870 ;;      Totals:         9       0       0       0       0       0       0
  6871 ;;Total ram usage:        9 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    2
  6874 ;; This function calls:
  6875 ;;		Nothing
  6876 ;; This function is called by:
  6877 ;;		_sprintf
  6878 ;; This function uses a non-reentrant model
  6879 ;;
  6880                           
  6881                           	psect	text12
  6882  002B54                     __ptext12:
  6883                           	opt stack 0
  6884  002B54                     ___llmod:
  6885                           	opt stack 0
  6886  002B54  FFFF               	dw	65535	; assembler added errata NOP
  6887                           
  6888                           ;incstack = 0
  6889  002B56  5033               	movf	___llmod@divisor,w,c
  6890  002B58  1034               	iorwf	___llmod@divisor+1,w,c
  6891  002B5A  1035               	iorwf	___llmod@divisor+2,w,c
  6892  002B5C  1036               	iorwf	___llmod@divisor+3,w,c
  6893  002B5E  B4D8               	btfsc	status,2,c
  6894  002B60  D028               	goto	l910
  6895  002B62  0E01               	movlw	1
  6896  002B64  6E37               	movwf	___llmod@counter,c
  6897  002B66  D007               	goto	l4608
  6898  002B68                     l4606:
  6899  002B68  FFFF               	dw	65535	; assembler added errata NOP
  6900  002B6A  90D8               	bcf	status,0,c
  6901  002B6C  3633               	rlcf	___llmod@divisor,f,c
  6902  002B6E  3634               	rlcf	___llmod@divisor+1,f,c
  6903  002B70  3635               	rlcf	___llmod@divisor+2,f,c
  6904  002B72  3636               	rlcf	___llmod@divisor+3,f,c
  6905  002B74  2A37               	incf	___llmod@counter,f,c
  6906  002B76                     l4608:
  6907  002B76  FFFF               	dw	65535	; assembler added errata NOP
  6908  002B78  AE36               	btfss	___llmod@divisor+3,7,c
  6909  002B7A  D7F6               	goto	l4606
  6910  002B7C                     l4610:
  6911  002B7C  FFFF               	dw	65535	; assembler added errata NOP
  6912  002B7E  5033               	movf	___llmod@divisor,w,c
  6913  002B80  5C2F               	subwf	___llmod@dividend,w,c
  6914  002B82  5034               	movf	___llmod@divisor+1,w,c
  6915  002B84  5830               	subwfb	___llmod@dividend+1,w,c
  6916  002B86  5035               	movf	___llmod@divisor+2,w,c
  6917  002B88  5831               	subwfb	___llmod@dividend+2,w,c
  6918  002B8A  5036               	movf	___llmod@divisor+3,w,c
  6919  002B8C  5832               	subwfb	___llmod@dividend+3,w,c
  6920  002B8E  A0D8               	btfss	status,0,c
  6921  002B90  D008               	goto	l4614
  6922  002B92  5033               	movf	___llmod@divisor,w,c
  6923  002B94  5E2F               	subwf	___llmod@dividend,f,c
  6924  002B96  5034               	movf	___llmod@divisor+1,w,c
  6925  002B98  5A30               	subwfb	___llmod@dividend+1,f,c
  6926  002B9A  5035               	movf	___llmod@divisor+2,w,c
  6927  002B9C  5A31               	subwfb	___llmod@dividend+2,f,c
  6928  002B9E  5036               	movf	___llmod@divisor+3,w,c
  6929  002BA0  5A32               	subwfb	___llmod@dividend+3,f,c
  6930  002BA2                     l4614:
  6931  002BA2  FFFF               	dw	65535	; assembler added errata NOP
  6932  002BA4  90D8               	bcf	status,0,c
  6933  002BA6  3236               	rrcf	___llmod@divisor+3,f,c
  6934  002BA8  3235               	rrcf	___llmod@divisor+2,f,c
  6935  002BAA  3234               	rrcf	___llmod@divisor+1,f,c
  6936  002BAC  3233               	rrcf	___llmod@divisor,f,c
  6937  002BAE  2E37               	decfsz	___llmod@counter,f,c
  6938  002BB0  D7E5               	goto	l4610
  6939  002BB2                     l910:
  6940  002BB2  FFFF               	dw	65535	; assembler added errata NOP
  6941  002BB4  C02F  F02F         	movff	___llmod@dividend,?___llmod
  6942  002BB8  C030  F030         	movff	___llmod@dividend+1,?___llmod+1
  6943  002BBC  C031  F031         	movff	___llmod@dividend+2,?___llmod+2
  6944  002BC0  C032  F032         	movff	___llmod@dividend+3,?___llmod+3
  6945  002BC4  0012               	return		;funcret
  6946  002BC6  FFFF               	dw	65535	; errata NOP
  6947  002BC8                     __end_of___llmod:
  6948                           	opt stack 0
  6949                           tblptru	equ	0xFF8
  6950                           tblptrh	equ	0xFF7
  6951                           tblptrl	equ	0xFF6
  6952                           tablat	equ	0xFF5
  6953                           prodh	equ	0xFF4
  6954                           prodl	equ	0xFF3
  6955                           postinc0	equ	0xFEE
  6956                           wreg	equ	0xFE8
  6957                           postdec1	equ	0xFE5
  6958                           fsr1l	equ	0xFE1
  6959                           indf2	equ	0xFDF
  6960                           postinc2	equ	0xFDE
  6961                           postdec2	equ	0xFDD
  6962                           fsr2h	equ	0xFDA
  6963                           fsr2l	equ	0xFD9
  6964                           status	equ	0xFD8
  6965                           
  6966 ;; *************** function ___lldiv *****************
  6967 ;; Defined at:
  6968 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/lldiv.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;  dividend        4   33[COMRAM] unsigned long 
  6971 ;;  divisor         4   37[COMRAM] unsigned long 
  6972 ;; Auto vars:     Size  Location     Type
  6973 ;;  quotient        4   41[COMRAM] unsigned long 
  6974 ;;  counter         1   45[COMRAM] unsigned char 
  6975 ;; Return value:  Size  Location     Type
  6976 ;;                  4   33[COMRAM] unsigned long 
  6977 ;; Registers used:
  6978 ;;		wreg, status,2, status,0
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6984 ;;      Params:         8       0       0       0       0       0       0
  6985 ;;      Locals:         5       0       0       0       0       0       0
  6986 ;;      Temps:          0       0       0       0       0       0       0
  6987 ;;      Totals:        13       0       0       0       0       0       0
  6988 ;;Total ram usage:       13 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; Hardware stack levels required when called:    2
  6991 ;; This function calls:
  6992 ;;		Nothing
  6993 ;; This function is called by:
  6994 ;;		_sprintf
  6995 ;; This function uses a non-reentrant model
  6996 ;;
  6997                           
  6998                           	psect	text13
  6999  0029C8                     __ptext13:
  7000                           	opt stack 0
  7001  0029C8                     ___lldiv:
  7002                           	opt stack 0
  7003  0029C8  FFFF               	dw	65535	; assembler added errata NOP
  7004                           
  7005                           ;incstack = 0
  7006  0029CA  0E00               	movlw	0
  7007  0029CC  6E2A               	movwf	___lldiv@quotient,c
  7008  0029CE  0E00               	movlw	0
  7009  0029D0  6E2B               	movwf	___lldiv@quotient+1,c
  7010  0029D2  0E00               	movlw	0
  7011  0029D4  6E2C               	movwf	___lldiv@quotient+2,c
  7012  0029D6  0E00               	movlw	0
  7013  0029D8  6E2D               	movwf	___lldiv@quotient+3,c
  7014  0029DA  5026               	movf	___lldiv@divisor,w,c
  7015  0029DC  1027               	iorwf	___lldiv@divisor+1,w,c
  7016  0029DE  1028               	iorwf	___lldiv@divisor+2,w,c
  7017  0029E0  1029               	iorwf	___lldiv@divisor+3,w,c
  7018  0029E2  B4D8               	btfsc	status,2,c
  7019  0029E4  D02E               	goto	l900
  7020  0029E6  0E01               	movlw	1
  7021  0029E8  6E2E               	movwf	___lldiv@counter,c
  7022  0029EA  D007               	goto	l4588
  7023  0029EC                     l4586:
  7024  0029EC  FFFF               	dw	65535	; assembler added errata NOP
  7025  0029EE  90D8               	bcf	status,0,c
  7026  0029F0  3626               	rlcf	___lldiv@divisor,f,c
  7027  0029F2  3627               	rlcf	___lldiv@divisor+1,f,c
  7028  0029F4  3628               	rlcf	___lldiv@divisor+2,f,c
  7029  0029F6  3629               	rlcf	___lldiv@divisor+3,f,c
  7030  0029F8  2A2E               	incf	___lldiv@counter,f,c
  7031  0029FA                     l4588:
  7032  0029FA  FFFF               	dw	65535	; assembler added errata NOP
  7033  0029FC  AE29               	btfss	___lldiv@divisor+3,7,c
  7034  0029FE  D7F6               	goto	l4586
  7035  002A00                     l4590:
  7036  002A00  FFFF               	dw	65535	; assembler added errata NOP
  7037  002A02  90D8               	bcf	status,0,c
  7038  002A04  362A               	rlcf	___lldiv@quotient,f,c
  7039  002A06  362B               	rlcf	___lldiv@quotient+1,f,c
  7040  002A08  362C               	rlcf	___lldiv@quotient+2,f,c
  7041  002A0A  362D               	rlcf	___lldiv@quotient+3,f,c
  7042  002A0C  5026               	movf	___lldiv@divisor,w,c
  7043  002A0E  5C22               	subwf	___lldiv@dividend,w,c
  7044  002A10  5027               	movf	___lldiv@divisor+1,w,c
  7045  002A12  5823               	subwfb	___lldiv@dividend+1,w,c
  7046  002A14  5028               	movf	___lldiv@divisor+2,w,c
  7047  002A16  5824               	subwfb	___lldiv@dividend+2,w,c
  7048  002A18  5029               	movf	___lldiv@divisor+3,w,c
  7049  002A1A  5825               	subwfb	___lldiv@dividend+3,w,c
  7050  002A1C  A0D8               	btfss	status,0,c
  7051  002A1E  D009               	goto	l4598
  7052  002A20  5026               	movf	___lldiv@divisor,w,c
  7053  002A22  5E22               	subwf	___lldiv@dividend,f,c
  7054  002A24  5027               	movf	___lldiv@divisor+1,w,c
  7055  002A26  5A23               	subwfb	___lldiv@dividend+1,f,c
  7056  002A28  5028               	movf	___lldiv@divisor+2,w,c
  7057  002A2A  5A24               	subwfb	___lldiv@dividend+2,f,c
  7058  002A2C  5029               	movf	___lldiv@divisor+3,w,c
  7059  002A2E  5A25               	subwfb	___lldiv@dividend+3,f,c
  7060  002A30  802A               	bsf	___lldiv@quotient,0,c
  7061  002A32                     l4598:
  7062  002A32  FFFF               	dw	65535	; assembler added errata NOP
  7063  002A34  90D8               	bcf	status,0,c
  7064  002A36  3229               	rrcf	___lldiv@divisor+3,f,c
  7065  002A38  3228               	rrcf	___lldiv@divisor+2,f,c
  7066  002A3A  3227               	rrcf	___lldiv@divisor+1,f,c
  7067  002A3C  3226               	rrcf	___lldiv@divisor,f,c
  7068  002A3E  2E2E               	decfsz	___lldiv@counter,f,c
  7069  002A40  D7DF               	goto	l4590
  7070  002A42                     l900:
  7071  002A42  FFFF               	dw	65535	; assembler added errata NOP
  7072  002A44  C02A  F022         	movff	___lldiv@quotient,?___lldiv
  7073  002A48  C02B  F023         	movff	___lldiv@quotient+1,?___lldiv+1
  7074  002A4C  C02C  F024         	movff	___lldiv@quotient+2,?___lldiv+2
  7075  002A50  C02D  F025         	movff	___lldiv@quotient+3,?___lldiv+3
  7076  002A54  0012               	return		;funcret
  7077  002A56  FFFF               	dw	65535	; errata NOP
  7078  002A58                     __end_of___lldiv:
  7079                           	opt stack 0
  7080                           tblptru	equ	0xFF8
  7081                           tblptrh	equ	0xFF7
  7082                           tblptrl	equ	0xFF6
  7083                           tablat	equ	0xFF5
  7084                           prodh	equ	0xFF4
  7085                           prodl	equ	0xFF3
  7086                           postinc0	equ	0xFEE
  7087                           wreg	equ	0xFE8
  7088                           postdec1	equ	0xFE5
  7089                           fsr1l	equ	0xFE1
  7090                           indf2	equ	0xFDF
  7091                           postinc2	equ	0xFDE
  7092                           postdec2	equ	0xFDD
  7093                           fsr2h	equ	0xFDA
  7094                           fsr2l	equ	0xFD9
  7095                           status	equ	0xFD8
  7096                           
  7097 ;; *************** function ___fttol *****************
  7098 ;; Defined at:
  7099 ;;		line 44 in file "/opt/microchip/xc8/v1.38/sources/common/fttol.c"
  7100 ;; Parameters:    Size  Location     Type
  7101 ;;  f1              3   16[BANK0 ] float 
  7102 ;; Auto vars:     Size  Location     Type
  7103 ;;  lval            4   26[BANK0 ] unsigned long 
  7104 ;;  exp1            1   30[BANK0 ] unsigned char 
  7105 ;;  sign1           1   25[BANK0 ] unsigned char 
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  4   16[BANK0 ] long 
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7115 ;;      Params:         0       4       0       0       0       0       0
  7116 ;;      Locals:         0       6       0       0       0       0       0
  7117 ;;      Temps:          0       5       0       0       0       0       0
  7118 ;;      Totals:         0      15       0       0       0       0       0
  7119 ;;Total ram usage:       15 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    2
  7122 ;; This function calls:
  7123 ;;		Nothing
  7124 ;; This function is called by:
  7125 ;;		_sprintf
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           	psect	text14
  7130  002158                     __ptext14:
  7131                           	opt stack 0
  7132  002158                     ___fttol:
  7133                           	opt stack 0
  7134  002158  FFFF               	dw	65535	; assembler added errata NOP
  7135                           
  7136                           ;incstack = 0
  7137  00215A  C092  F094         	movff	___fttol@f1+2,??___fttol
  7138  00215E  0100               	movlb	0	; () banked
  7139  002160  6B95               	clrf	(??___fttol+1)& (0+255),b
  7140  002162  6B96               	clrf	(??___fttol+2)& (0+255),b
  7141  002164  0100               	movlb	0	; () banked
  7142  002166  3591               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7143  002168  0100               	movlb	0	; () banked
  7144  00216A  3794               	rlcf	??___fttol& (0+255),f,b
  7145  00216C  E301               	bnc	u5281
  7146  00216E  8195               	bsf	(??___fttol+1)& (0+255),0,b
  7147  002170                     u5281:
  7148  002170  0100               	movlb	0	; () banked
  7149  002172  5194               	movf	??___fttol& (0+255),w,b
  7150  002174  0100               	movlb	0	; () banked
  7151  002176  6F9E               	movwf	___fttol@exp1& (0+255),b
  7152  002178  0100               	movlb	0	; () banked
  7153  00217A  519E               	movf	___fttol@exp1& (0+255),w,b
  7154  00217C  B4D8               	btfsc	status,2,c
  7155  00217E  D051               	goto	l4564
  7156                           
  7157                           ; BSR set to: 0
  7158                           
  7159                           ; BSR set to: 0
  7160                           
  7161                           ; BSR set to: 0
  7162                           
  7163                           ; BSR set to: 0
  7164  002180  0E17               	movlw	23
  7165  002182  0100               	movlb	0	; () banked
  7166  002184  6F94               	movwf	??___fttol& (0+255),b
  7167  002186  C090  F095         	movff	___fttol@f1,??___fttol+1
  7168  00218A  C091  F096         	movff	___fttol@f1+1,??___fttol+2
  7169  00218E  C092  F097         	movff	___fttol@f1+2,??___fttol+3
  7170  002192  0100               	movlb	0	; () banked
  7171  002194  2994               	incf	??___fttol& (0+255),w,b
  7172  002196  0100               	movlb	0	; () banked
  7173  002198  6F98               	movwf	(??___fttol+4)& (0+255),b
  7174  00219A  D006               	goto	u5300
  7175  00219C                     u5305:
  7176  00219C  FFFF               	dw	65535	; assembler added errata NOP
  7177  00219E  0100               	movlb	0	; () banked
  7178  0021A0  90D8               	bcf	status,0,c
  7179  0021A2  3397               	rrcf	(??___fttol+3)& (0+255),f,b
  7180  0021A4  3396               	rrcf	(??___fttol+2)& (0+255),f,b
  7181  0021A6  3395               	rrcf	(??___fttol+1)& (0+255),f,b
  7182  0021A8                     u5300:
  7183  0021A8  FFFF               	dw	65535	; assembler added errata NOP
  7184  0021AA  0100               	movlb	0	; () banked
  7185  0021AC  2F98               	decfsz	(??___fttol+4)& (0+255),f,b
  7186  0021AE  D7F6               	goto	u5305
  7187  0021B0  0100               	movlb	0	; () banked
  7188  0021B2  5195               	movf	(??___fttol+1)& (0+255),w,b
  7189  0021B4  0100               	movlb	0	; () banked
  7190  0021B6  6F99               	movwf	___fttol@sign1& (0+255),b
  7191                           
  7192                           ; BSR set to: 0
  7193  0021B8  0100               	movlb	0	; () banked
  7194  0021BA  8F91               	bsf	(___fttol@f1+1)& (0+255),7,b
  7195                           
  7196                           ; BSR set to: 0
  7197  0021BC  0EFF               	movlw	255
  7198  0021BE  0100               	movlb	0	; () banked
  7199  0021C0  1790               	andwf	___fttol@f1& (0+255),f,b
  7200  0021C2  0EFF               	movlw	255
  7201  0021C4  0100               	movlb	0	; () banked
  7202  0021C6  1791               	andwf	(___fttol@f1+1)& (0+255),f,b
  7203  0021C8  0E00               	movlw	0
  7204  0021CA  0100               	movlb	0	; () banked
  7205  0021CC  1792               	andwf	(___fttol@f1+2)& (0+255),f,b
  7206                           
  7207                           ; BSR set to: 0
  7208  0021CE  0100               	movlb	0	; () banked
  7209  0021D0  5190               	movf	___fttol@f1& (0+255),w,b
  7210  0021D2  0100               	movlb	0	; () banked
  7211  0021D4  6F9A               	movwf	___fttol@lval& (0+255),b
  7212  0021D6  0100               	movlb	0	; () banked
  7213  0021D8  5191               	movf	(___fttol@f1+1)& (0+255),w,b
  7214  0021DA  0100               	movlb	0	; () banked
  7215  0021DC  6F9B               	movwf	(___fttol@lval+1)& (0+255),b
  7216  0021DE  0100               	movlb	0	; () banked
  7217  0021E0  5192               	movf	(___fttol@f1+2)& (0+255),w,b
  7218  0021E2  0100               	movlb	0	; () banked
  7219  0021E4  6F9C               	movwf	(___fttol@lval+2)& (0+255),b
  7220  0021E6  0100               	movlb	0	; () banked
  7221  0021E8  6B9D               	clrf	(___fttol@lval+3)& (0+255),b
  7222                           
  7223                           ; BSR set to: 0
  7224  0021EA  0E8E               	movlw	142
  7225  0021EC  0100               	movlb	0	; () banked
  7226  0021EE  5F9E               	subwf	___fttol@exp1& (0+255),f,b
  7227                           
  7228                           ; BSR set to: 0
  7229  0021F0  0100               	movlb	0	; () banked
  7230  0021F2  AF9E               	btfss	___fttol@exp1& (0+255),7,b
  7231  0021F4  D011               	goto	l4562
  7232                           
  7233                           ; BSR set to: 0
  7234  0021F6  0100               	movlb	0	; () banked
  7235  0021F8  519E               	movf	___fttol@exp1& (0+255),w,b
  7236  0021FA  0A80               	xorlw	128
  7237  0021FC  0F8F               	addlw	143
  7238  0021FE  A0D8               	btfss	status,0,c
  7239  002200  D010               	goto	l4564
  7240  002202                     l4558:
  7241  002202  FFFF               	dw	65535	; assembler added errata NOP
  7242                           
  7243                           ; BSR set to: 0
  7244  002204  0100               	movlb	0	; () banked
  7245  002206  90D8               	bcf	status,0,c
  7246  002208  339D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7247  00220A  339C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7248  00220C  339B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7249  00220E  339A               	rrcf	___fttol@lval& (0+255),f,b
  7250                           
  7251                           ; BSR set to: 0
  7252  002210  0100               	movlb	0	; () banked
  7253  002212  3F9E               	incfsz	___fttol@exp1& (0+255),f,b
  7254  002214  D7F6               	goto	l4558
  7255                           
  7256                           ; BSR set to: 0
  7257  002216  D01F               	goto	l4572
  7258  002218                     l4562:
  7259  002218  FFFF               	dw	65535	; assembler added errata NOP
  7260                           
  7261                           ; BSR set to: 0
  7262  00221A  0E17               	movlw	23
  7263  00221C  0100               	movlb	0	; () banked
  7264  00221E  659E               	cpfsgt	___fttol@exp1& (0+255),b
  7265  002220  D014               	goto	l4570
  7266  002222                     l4564:
  7267  002222  FFFF               	dw	65535	; assembler added errata NOP
  7268                           
  7269                           ; BSR set to: 0
  7270  002224  0E00               	movlw	0
  7271  002226  0100               	movlb	0	; () banked
  7272  002228  6F90               	movwf	?___fttol& (0+255),b
  7273  00222A  0E00               	movlw	0
  7274  00222C  6F91               	movwf	(?___fttol+1)& (0+255),b
  7275  00222E  0E00               	movlw	0
  7276  002230  6F92               	movwf	(?___fttol+2)& (0+255),b
  7277  002232  0E00               	movlw	0
  7278  002234  6F93               	movwf	(?___fttol+3)& (0+255),b
  7279                           
  7280                           ; BSR set to: 0
  7281  002236  D027               	goto	l861
  7282  002238                     l4568:
  7283  002238  FFFF               	dw	65535	; assembler added errata NOP
  7284                           
  7285                           ; BSR set to: 0
  7286  00223A  0100               	movlb	0	; () banked
  7287  00223C  90D8               	bcf	status,0,c
  7288  00223E  379A               	rlcf	___fttol@lval& (0+255),f,b
  7289  002240  379B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7290  002242  379C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7291  002244  379D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7292  002246  0100               	movlb	0	; () banked
  7293  002248  079E               	decf	___fttol@exp1& (0+255),f,b
  7294  00224A                     l4570:
  7295  00224A  FFFF               	dw	65535	; assembler added errata NOP
  7296                           
  7297                           ; BSR set to: 0
  7298  00224C  0100               	movlb	0	; () banked
  7299  00224E  519E               	movf	___fttol@exp1& (0+255),w,b
  7300  002250  0100               	movlb	0	; () banked
  7301  002252  A4D8               	btfss	status,2,c
  7302  002254  D7F1               	goto	l4568
  7303  002256                     l4572:
  7304  002256  FFFF               	dw	65535	; assembler added errata NOP
  7305                           
  7306                           ; BSR set to: 0
  7307  002258  0100               	movlb	0	; () banked
  7308  00225A  5199               	movf	___fttol@sign1& (0+255),w,b
  7309  00225C  0100               	movlb	0	; () banked
  7310  00225E  B4D8               	btfsc	status,2,c
  7311  002260  D009               	goto	l4576
  7312                           
  7313                           ; BSR set to: 0
  7314  002262  0100               	movlb	0	; () banked
  7315  002264  1F9D               	comf	(___fttol@lval+3)& (0+255),f,b
  7316  002266  1F9C               	comf	(___fttol@lval+2)& (0+255),f,b
  7317  002268  1F9B               	comf	(___fttol@lval+1)& (0+255),f,b
  7318  00226A  6D9A               	negf	___fttol@lval& (0+255),b
  7319  00226C  0E00               	movlw	0
  7320  00226E  239B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7321  002270  239C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7322  002272  239D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7323  002274                     l4576:
  7324  002274  FFFF               	dw	65535	; assembler added errata NOP
  7325                           
  7326                           ; BSR set to: 0
  7327  002276  C09A  F090         	movff	___fttol@lval,?___fttol
  7328  00227A  C09B  F091         	movff	___fttol@lval+1,?___fttol+1
  7329  00227E  C09C  F092         	movff	___fttol@lval+2,?___fttol+2
  7330  002282  C09D  F093         	movff	___fttol@lval+3,?___fttol+3
  7331  002286                     l861:
  7332  002286  FFFF               	dw	65535	; assembler added errata NOP
  7333                           
  7334                           ; BSR set to: 0
  7335  002288  0012               	return		;funcret
  7336  00228A  FFFF               	dw	65535	; errata NOP
  7337  00228C                     __end_of___fttol:
  7338                           	opt stack 0
  7339                           tblptru	equ	0xFF8
  7340                           tblptrh	equ	0xFF7
  7341                           tblptrl	equ	0xFF6
  7342                           tablat	equ	0xFF5
  7343                           prodh	equ	0xFF4
  7344                           prodl	equ	0xFF3
  7345                           postinc0	equ	0xFEE
  7346                           wreg	equ	0xFE8
  7347                           postdec1	equ	0xFE5
  7348                           fsr1l	equ	0xFE1
  7349                           indf2	equ	0xFDF
  7350                           postinc2	equ	0xFDE
  7351                           postdec2	equ	0xFDD
  7352                           fsr2h	equ	0xFDA
  7353                           fsr2l	equ	0xFD9
  7354                           status	equ	0xFD8
  7355                           
  7356 ;; *************** function ___ftsub *****************
  7357 ;; Defined at:
  7358 ;;		line 20 in file "/opt/microchip/xc8/v1.38/sources/common/ftsub.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;  f1              3   31[BANK0 ] float 
  7361 ;;  f2              3   34[BANK0 ] float 
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;		None
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  3   31[BANK0 ] float 
  7366 ;; Registers used:
  7367 ;;		wreg, status,2, status,0, cstack
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7373 ;;      Params:         0       6       0       0       0       0       0
  7374 ;;      Locals:         0       0       0       0       0       0       0
  7375 ;;      Temps:          0       0       0       0       0       0       0
  7376 ;;      Totals:         0       6       0       0       0       0       0
  7377 ;;Total ram usage:        6 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; Hardware stack levels required when called:    4
  7380 ;; This function calls:
  7381 ;;		___ftadd
  7382 ;; This function is called by:
  7383 ;;		_sprintf
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           	psect	text15
  7388  002CF2                     __ptext15:
  7389                           	opt stack 0
  7390  002CF2                     ___ftsub:
  7391                           	opt stack 0
  7392  002CF2  FFFF               	dw	65535	; assembler added errata NOP
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;incstack = 0
  7396  002CF4  0100               	movlb	0	; () banked
  7397  002CF6  51A2               	movf	___ftsub@f2& (0+255),w,b
  7398  002CF8  0100               	movlb	0	; () banked
  7399  002CFA  11A3               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7400  002CFC  0100               	movlb	0	; () banked
  7401  002CFE  11A4               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7402  002D00  B4D8               	btfsc	status,2,c
  7403  002D02  D009               	goto	l4508
  7404                           
  7405                           ; BSR set to: 0
  7406  002D04  0E00               	movlw	0
  7407  002D06  0100               	movlb	0	; () banked
  7408  002D08  1BA2               	xorwf	___ftsub@f2& (0+255),f,b
  7409  002D0A  0E00               	movlw	0
  7410  002D0C  0100               	movlb	0	; () banked
  7411  002D0E  1BA3               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7412  002D10  0E80               	movlw	128
  7413  002D12  0100               	movlb	0	; () banked
  7414  002D14  1BA4               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7415  002D16                     l4508:
  7416  002D16  FFFF               	dw	65535	; assembler added errata NOP
  7417                           
  7418                           ; BSR set to: 0
  7419  002D18  C09F  F093         	movff	___ftsub@f1,___ftadd@f1
  7420  002D1C  C0A0  F094         	movff	___ftsub@f1+1,___ftadd@f1+1
  7421  002D20  C0A1  F095         	movff	___ftsub@f1+2,___ftadd@f1+2
  7422  002D24  C0A2  F096         	movff	___ftsub@f2,___ftadd@f2
  7423  002D28  C0A3  F097         	movff	___ftsub@f2+1,___ftadd@f2+1
  7424  002D2C  C0A4  F098         	movff	___ftsub@f2+2,___ftadd@f2+2
  7425  002D30  ECB3  F00C         	call	___ftadd	;wreg free
  7426  002D34  C093  F09F         	movff	?___ftadd,?___ftsub
  7427  002D38  C094  F0A0         	movff	?___ftadd+1,?___ftsub+1
  7428  002D3C  C095  F0A1         	movff	?___ftadd+2,?___ftsub+2
  7429  002D40  0012               	return		;funcret
  7430  002D42  FFFF               	dw	65535	; errata NOP
  7431  002D44                     __end_of___ftsub:
  7432                           	opt stack 0
  7433                           tblptru	equ	0xFF8
  7434                           tblptrh	equ	0xFF7
  7435                           tblptrl	equ	0xFF6
  7436                           tablat	equ	0xFF5
  7437                           prodh	equ	0xFF4
  7438                           prodl	equ	0xFF3
  7439                           postinc0	equ	0xFEE
  7440                           wreg	equ	0xFE8
  7441                           postdec1	equ	0xFE5
  7442                           fsr1l	equ	0xFE1
  7443                           indf2	equ	0xFDF
  7444                           postinc2	equ	0xFDE
  7445                           postdec2	equ	0xFDD
  7446                           fsr2h	equ	0xFDA
  7447                           fsr2l	equ	0xFD9
  7448                           status	equ	0xFD8
  7449                           
  7450 ;; *************** function ___ftadd *****************
  7451 ;; Defined at:
  7452 ;;		line 86 in file "/opt/microchip/xc8/v1.38/sources/common/ftadd.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  f1              3   19[BANK0 ] float 
  7455 ;;  f2              3   22[BANK0 ] float 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;  exp1            1   30[BANK0 ] unsigned char 
  7458 ;;  exp2            1   29[BANK0 ] unsigned char 
  7459 ;;  sign            1   28[BANK0 ] unsigned char 
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  3   19[BANK0 ] float 
  7462 ;; Registers used:
  7463 ;;		wreg, status,2, status,0, cstack
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7469 ;;      Params:         0       6       0       0       0       0       0
  7470 ;;      Locals:         0       3       0       0       0       0       0
  7471 ;;      Temps:          0       3       0       0       0       0       0
  7472 ;;      Totals:         0      12       0       0       0       0       0
  7473 ;;Total ram usage:       12 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    3
  7476 ;; This function calls:
  7477 ;;		___ftpack
  7478 ;; This function is called by:
  7479 ;;		_sprintf
  7480 ;;		___ftsub
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484                           	psect	text16
  7485  001966                     __ptext16:
  7486                           	opt stack 0
  7487  001966                     ___ftadd:
  7488                           	opt stack 0
  7489  001966  FFFF               	dw	65535	; assembler added errata NOP
  7490                           
  7491                           ;incstack = 0
  7492  001968  C095  F099         	movff	___ftadd@f1+2,??___ftadd
  7493  00196C  0100               	movlb	0	; () banked
  7494  00196E  6B9A               	clrf	(??___ftadd+1)& (0+255),b
  7495  001970  6B9B               	clrf	(??___ftadd+2)& (0+255),b
  7496  001972  0100               	movlb	0	; () banked
  7497  001974  3594               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7498  001976  0100               	movlb	0	; () banked
  7499  001978  3799               	rlcf	??___ftadd& (0+255),f,b
  7500  00197A  E301               	bnc	u4591
  7501  00197C  819A               	bsf	(??___ftadd+1)& (0+255),0,b
  7502  00197E                     u4591:
  7503  00197E  0100               	movlb	0	; () banked
  7504  001980  5199               	movf	??___ftadd& (0+255),w,b
  7505  001982  0100               	movlb	0	; () banked
  7506  001984  6F9E               	movwf	___ftadd@exp1& (0+255),b
  7507  001986  C098  F099         	movff	___ftadd@f2+2,??___ftadd
  7508  00198A  0100               	movlb	0	; () banked
  7509  00198C  6B9A               	clrf	(??___ftadd+1)& (0+255),b
  7510  00198E  6B9B               	clrf	(??___ftadd+2)& (0+255),b
  7511  001990  0100               	movlb	0	; () banked
  7512  001992  3597               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7513  001994  0100               	movlb	0	; () banked
  7514  001996  3799               	rlcf	??___ftadd& (0+255),f,b
  7515  001998  E301               	bnc	u4601
  7516  00199A  819A               	bsf	(??___ftadd+1)& (0+255),0,b
  7517  00199C                     u4601:
  7518  00199C  0100               	movlb	0	; () banked
  7519  00199E  5199               	movf	??___ftadd& (0+255),w,b
  7520  0019A0  0100               	movlb	0	; () banked
  7521  0019A2  6F9D               	movwf	___ftadd@exp2& (0+255),b
  7522                           
  7523                           ; BSR set to: 0
  7524  0019A4  0100               	movlb	0	; () banked
  7525  0019A6  519E               	movf	___ftadd@exp1& (0+255),w,b
  7526  0019A8  0100               	movlb	0	; () banked
  7527  0019AA  B4D8               	btfsc	status,2,c
  7528  0019AC  D011               	goto	l776
  7529                           
  7530                           ; BSR set to: 0
  7531  0019AE  0100               	movlb	0	; () banked
  7532  0019B0  519D               	movf	___ftadd@exp2& (0+255),w,b
  7533  0019B2  0100               	movlb	0	; () banked
  7534  0019B4  5D9E               	subwf	___ftadd@exp1& (0+255),w,b
  7535  0019B6  B0D8               	btfsc	status,0,c
  7536  0019B8  D013               	goto	l4126
  7537                           
  7538                           ; BSR set to: 0
  7539  0019BA  0100               	movlb	0	; () banked
  7540  0019BC  519E               	movf	___ftadd@exp1& (0+255),w,b
  7541  0019BE  0800               	sublw	0
  7542  0019C0  0100               	movlb	0	; () banked
  7543  0019C2  259D               	addwf	___ftadd@exp2& (0+255),w,b
  7544  0019C4  0100               	movlb	0	; () banked
  7545  0019C6  6F99               	movwf	??___ftadd& (0+255),b
  7546  0019C8  0E18               	movlw	24
  7547  0019CA  0100               	movlb	0	; () banked
  7548  0019CC  6599               	cpfsgt	??___ftadd& (0+255),b
  7549  0019CE  D008               	goto	l4126
  7550  0019D0                     l776:
  7551  0019D0  FFFF               	dw	65535	; assembler added errata NOP
  7552                           
  7553                           ; BSR set to: 0
  7554  0019D2  C096  F093         	movff	___ftadd@f2,?___ftadd
  7555  0019D6  C097  F094         	movff	___ftadd@f2+1,?___ftadd+1
  7556  0019DA  C098  F095         	movff	___ftadd@f2+2,?___ftadd+2
  7557  0019DE  D108               	goto	l777
  7558  0019E0                     l4126:
  7559  0019E0  FFFF               	dw	65535	; assembler added errata NOP
  7560                           
  7561                           ; BSR set to: 0
  7562  0019E2  0100               	movlb	0	; () banked
  7563  0019E4  519D               	movf	___ftadd@exp2& (0+255),w,b
  7564  0019E6  0100               	movlb	0	; () banked
  7565  0019E8  B4D8               	btfsc	status,2,c
  7566  0019EA  D011               	goto	l780
  7567                           
  7568                           ; BSR set to: 0
  7569  0019EC  0100               	movlb	0	; () banked
  7570  0019EE  519E               	movf	___ftadd@exp1& (0+255),w,b
  7571  0019F0  0100               	movlb	0	; () banked
  7572  0019F2  5D9D               	subwf	___ftadd@exp2& (0+255),w,b
  7573  0019F4  B0D8               	btfsc	status,0,c
  7574  0019F6  D013               	goto	l4132
  7575                           
  7576                           ; BSR set to: 0
  7577  0019F8  0100               	movlb	0	; () banked
  7578  0019FA  519D               	movf	___ftadd@exp2& (0+255),w,b
  7579  0019FC  0800               	sublw	0
  7580  0019FE  0100               	movlb	0	; () banked
  7581  001A00  259E               	addwf	___ftadd@exp1& (0+255),w,b
  7582  001A02  0100               	movlb	0	; () banked
  7583  001A04  6F99               	movwf	??___ftadd& (0+255),b
  7584  001A06  0E18               	movlw	24
  7585  001A08  0100               	movlb	0	; () banked
  7586  001A0A  6599               	cpfsgt	??___ftadd& (0+255),b
  7587  001A0C  D008               	goto	l4132
  7588  001A0E                     l780:
  7589  001A0E  FFFF               	dw	65535	; assembler added errata NOP
  7590                           
  7591                           ; BSR set to: 0
  7592  001A10  C093  F093         	movff	___ftadd@f1,?___ftadd
  7593  001A14  C094  F094         	movff	___ftadd@f1+1,?___ftadd+1
  7594  001A18  C095  F095         	movff	___ftadd@f1+2,?___ftadd+2
  7595  001A1C  D0E9               	goto	l777
  7596  001A1E                     l4132:
  7597  001A1E  FFFF               	dw	65535	; assembler added errata NOP
  7598                           
  7599                           ; BSR set to: 0
  7600  001A20  0E06               	movlw	6
  7601  001A22  0100               	movlb	0	; () banked
  7602  001A24  6F9C               	movwf	___ftadd@sign& (0+255),b
  7603                           
  7604                           ; BSR set to: 0
  7605  001A26  0100               	movlb	0	; () banked
  7606  001A28  AF95               	btfss	(___ftadd@f1+2)& (0+255),7,b
  7607  001A2A  D002               	goto	l4138
  7608                           
  7609                           ; BSR set to: 0
  7610  001A2C  0100               	movlb	0	; () banked
  7611  001A2E  8F9C               	bsf	___ftadd@sign& (0+255),7,b
  7612  001A30                     l4138:
  7613  001A30  FFFF               	dw	65535	; assembler added errata NOP
  7614                           
  7615                           ; BSR set to: 0
  7616  001A32  0100               	movlb	0	; () banked
  7617  001A34  AF98               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7618  001A36  D002               	goto	l782
  7619                           
  7620                           ; BSR set to: 0
  7621  001A38  0100               	movlb	0	; () banked
  7622  001A3A  8D9C               	bsf	___ftadd@sign& (0+255),6,b
  7623  001A3C                     l782:
  7624  001A3C  FFFF               	dw	65535	; assembler added errata NOP
  7625                           
  7626                           ; BSR set to: 0
  7627  001A3E  0100               	movlb	0	; () banked
  7628  001A40  8F94               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7629                           
  7630                           ; BSR set to: 0
  7631  001A42  0EFF               	movlw	255
  7632  001A44  0100               	movlb	0	; () banked
  7633  001A46  1793               	andwf	___ftadd@f1& (0+255),f,b
  7634  001A48  0EFF               	movlw	255
  7635  001A4A  0100               	movlb	0	; () banked
  7636  001A4C  1794               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7637  001A4E  0E00               	movlw	0
  7638  001A50  0100               	movlb	0	; () banked
  7639  001A52  1795               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7640  001A54  0100               	movlb	0	; () banked
  7641  001A56  8F97               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7642                           
  7643                           ; BSR set to: 0
  7644  001A58  0EFF               	movlw	255
  7645  001A5A  0100               	movlb	0	; () banked
  7646  001A5C  1796               	andwf	___ftadd@f2& (0+255),f,b
  7647  001A5E  0EFF               	movlw	255
  7648  001A60  0100               	movlb	0	; () banked
  7649  001A62  1797               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7650  001A64  0E00               	movlw	0
  7651  001A66  0100               	movlb	0	; () banked
  7652  001A68  1798               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7653                           
  7654                           ; BSR set to: 0
  7655  001A6A  0100               	movlb	0	; () banked
  7656  001A6C  519D               	movf	___ftadd@exp2& (0+255),w,b
  7657  001A6E  0100               	movlb	0	; () banked
  7658  001A70  5D9E               	subwf	___ftadd@exp1& (0+255),w,b
  7659  001A72  B0D8               	btfsc	status,0,c
  7660  001A74  D028               	goto	l4158
  7661  001A76                     l4148:
  7662  001A76  FFFF               	dw	65535	; assembler added errata NOP
  7663                           
  7664                           ; BSR set to: 0
  7665  001A78  0100               	movlb	0	; () banked
  7666  001A7A  90D8               	bcf	status,0,c
  7667  001A7C  3796               	rlcf	___ftadd@f2& (0+255),f,b
  7668  001A7E  3797               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  7669  001A80  3798               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  7670  001A82  0100               	movlb	0	; () banked
  7671  001A84  079D               	decf	___ftadd@exp2& (0+255),f,b
  7672                           
  7673                           ; BSR set to: 0
  7674  001A86  0100               	movlb	0	; () banked
  7675  001A88  519E               	movf	___ftadd@exp1& (0+255),w,b
  7676  001A8A  0100               	movlb	0	; () banked
  7677  001A8C  199D               	xorwf	___ftadd@exp2& (0+255),w,b
  7678  001A8E  B4D8               	btfsc	status,2,c
  7679  001A90  D012               	goto	l4156
  7680                           
  7681                           ; BSR set to: 0
  7682  001A92  0100               	movlb	0	; () banked
  7683  001A94  079C               	decf	___ftadd@sign& (0+255),f,b
  7684  001A96  C09C  F099         	movff	___ftadd@sign,??___ftadd
  7685  001A9A  0E07               	movlw	7
  7686  001A9C  0100               	movlb	0	; () banked
  7687  001A9E  1799               	andwf	??___ftadd& (0+255),f,b
  7688  001AA0  B4D8               	btfsc	status,2,c
  7689  001AA2  D009               	goto	l4156
  7690  001AA4  D7E8               	goto	l4148
  7691  001AA6                     l4154:
  7692  001AA6  FFFF               	dw	65535	; assembler added errata NOP
  7693                           
  7694                           ; BSR set to: 0
  7695  001AA8  0100               	movlb	0	; () banked
  7696  001AAA  90D8               	bcf	status,0,c
  7697  001AAC  3395               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  7698  001AAE  3394               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  7699  001AB0  3393               	rrcf	___ftadd@f1& (0+255),f,b
  7700  001AB2  0100               	movlb	0	; () banked
  7701  001AB4  2B9E               	incf	___ftadd@exp1& (0+255),f,b
  7702  001AB6                     l4156:
  7703  001AB6  FFFF               	dw	65535	; assembler added errata NOP
  7704                           
  7705                           ; BSR set to: 0
  7706  001AB8  0100               	movlb	0	; () banked
  7707  001ABA  519D               	movf	___ftadd@exp2& (0+255),w,b
  7708  001ABC  0100               	movlb	0	; () banked
  7709  001ABE  199E               	xorwf	___ftadd@exp1& (0+255),w,b
  7710  001AC0  B4D8               	btfsc	status,2,c
  7711  001AC2  D02F               	goto	l791
  7712  001AC4  D7F0               	goto	l4154
  7713  001AC6                     l4158:
  7714  001AC6  FFFF               	dw	65535	; assembler added errata NOP
  7715                           
  7716                           ; BSR set to: 0
  7717  001AC8  0100               	movlb	0	; () banked
  7718  001ACA  519E               	movf	___ftadd@exp1& (0+255),w,b
  7719  001ACC  0100               	movlb	0	; () banked
  7720  001ACE  5D9D               	subwf	___ftadd@exp2& (0+255),w,b
  7721  001AD0  B0D8               	btfsc	status,0,c
  7722  001AD2  D027               	goto	l791
  7723  001AD4                     l4160:
  7724  001AD4  FFFF               	dw	65535	; assembler added errata NOP
  7725                           
  7726                           ; BSR set to: 0
  7727  001AD6  0100               	movlb	0	; () banked
  7728  001AD8  90D8               	bcf	status,0,c
  7729  001ADA  3793               	rlcf	___ftadd@f1& (0+255),f,b
  7730  001ADC  3794               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  7731  001ADE  3795               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  7732  001AE0  0100               	movlb	0	; () banked
  7733  001AE2  079E               	decf	___ftadd@exp1& (0+255),f,b
  7734                           
  7735                           ; BSR set to: 0
  7736  001AE4  0100               	movlb	0	; () banked
  7737  001AE6  519E               	movf	___ftadd@exp1& (0+255),w,b
  7738  001AE8  0100               	movlb	0	; () banked
  7739  001AEA  199D               	xorwf	___ftadd@exp2& (0+255),w,b
  7740  001AEC  B4D8               	btfsc	status,2,c
  7741  001AEE  D012               	goto	l4168
  7742                           
  7743                           ; BSR set to: 0
  7744  001AF0  0100               	movlb	0	; () banked
  7745  001AF2  079C               	decf	___ftadd@sign& (0+255),f,b
  7746  001AF4  C09C  F099         	movff	___ftadd@sign,??___ftadd
  7747  001AF8  0E07               	movlw	7
  7748  001AFA  0100               	movlb	0	; () banked
  7749  001AFC  1799               	andwf	??___ftadd& (0+255),f,b
  7750  001AFE  B4D8               	btfsc	status,2,c
  7751  001B00  D009               	goto	l4168
  7752  001B02  D7E8               	goto	l4160
  7753  001B04                     l4166:
  7754  001B04  FFFF               	dw	65535	; assembler added errata NOP
  7755                           
  7756                           ; BSR set to: 0
  7757  001B06  0100               	movlb	0	; () banked
  7758  001B08  90D8               	bcf	status,0,c
  7759  001B0A  3398               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  7760  001B0C  3397               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  7761  001B0E  3396               	rrcf	___ftadd@f2& (0+255),f,b
  7762  001B10  0100               	movlb	0	; () banked
  7763  001B12  2B9D               	incf	___ftadd@exp2& (0+255),f,b
  7764  001B14                     l4168:
  7765  001B14  FFFF               	dw	65535	; assembler added errata NOP
  7766                           
  7767                           ; BSR set to: 0
  7768  001B16  0100               	movlb	0	; () banked
  7769  001B18  519D               	movf	___ftadd@exp2& (0+255),w,b
  7770  001B1A  0100               	movlb	0	; () banked
  7771  001B1C  199E               	xorwf	___ftadd@exp1& (0+255),w,b
  7772  001B1E  A4D8               	btfss	status,2,c
  7773  001B20  D7F1               	goto	l4166
  7774  001B22                     l791:
  7775  001B22  FFFF               	dw	65535	; assembler added errata NOP
  7776                           
  7777                           ; BSR set to: 0
  7778  001B24  0100               	movlb	0	; () banked
  7779  001B26  AF9C               	btfss	___ftadd@sign& (0+255),7,b
  7780  001B28  D012               	goto	l800
  7781                           
  7782                           ; BSR set to: 0
  7783  001B2A  0EFF               	movlw	255
  7784  001B2C  0100               	movlb	0	; () banked
  7785  001B2E  1B93               	xorwf	___ftadd@f1& (0+255),f,b
  7786  001B30  0EFF               	movlw	255
  7787  001B32  0100               	movlb	0	; () banked
  7788  001B34  1B94               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7789  001B36  0EFF               	movlw	255
  7790  001B38  0100               	movlb	0	; () banked
  7791  001B3A  1B95               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7792  001B3C  0E01               	movlw	1
  7793  001B3E  0100               	movlb	0	; () banked
  7794  001B40  2793               	addwf	___ftadd@f1& (0+255),f,b
  7795  001B42  0E00               	movlw	0
  7796  001B44  0100               	movlb	0	; () banked
  7797  001B46  2394               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7798  001B48  0E00               	movlw	0
  7799  001B4A  0100               	movlb	0	; () banked
  7800  001B4C  2395               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7801  001B4E                     l800:
  7802  001B4E  FFFF               	dw	65535	; assembler added errata NOP
  7803                           
  7804                           ; BSR set to: 0
  7805  001B50  0100               	movlb	0	; () banked
  7806  001B52  AD9C               	btfss	___ftadd@sign& (0+255),6,b
  7807  001B54  D012               	goto	l4174
  7808                           
  7809                           ; BSR set to: 0
  7810  001B56  0EFF               	movlw	255
  7811  001B58  0100               	movlb	0	; () banked
  7812  001B5A  1B96               	xorwf	___ftadd@f2& (0+255),f,b
  7813  001B5C  0EFF               	movlw	255
  7814  001B5E  0100               	movlb	0	; () banked
  7815  001B60  1B97               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7816  001B62  0EFF               	movlw	255
  7817  001B64  0100               	movlb	0	; () banked
  7818  001B66  1B98               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7819  001B68  0E01               	movlw	1
  7820  001B6A  0100               	movlb	0	; () banked
  7821  001B6C  2796               	addwf	___ftadd@f2& (0+255),f,b
  7822  001B6E  0E00               	movlw	0
  7823  001B70  0100               	movlb	0	; () banked
  7824  001B72  2397               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7825  001B74  0E00               	movlw	0
  7826  001B76  0100               	movlb	0	; () banked
  7827  001B78  2398               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7828  001B7A                     l4174:
  7829  001B7A  FFFF               	dw	65535	; assembler added errata NOP
  7830                           
  7831                           ; BSR set to: 0
  7832  001B7C  0E00               	movlw	0
  7833  001B7E  0100               	movlb	0	; () banked
  7834  001B80  6F9C               	movwf	___ftadd@sign& (0+255),b
  7835                           
  7836                           ; BSR set to: 0
  7837  001B82  0100               	movlb	0	; () banked
  7838  001B84  5193               	movf	___ftadd@f1& (0+255),w,b
  7839  001B86  0100               	movlb	0	; () banked
  7840  001B88  2796               	addwf	___ftadd@f2& (0+255),f,b
  7841  001B8A  0100               	movlb	0	; () banked
  7842  001B8C  5194               	movf	(___ftadd@f1+1)& (0+255),w,b
  7843  001B8E  0100               	movlb	0	; () banked
  7844  001B90  2397               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7845  001B92  0100               	movlb	0	; () banked
  7846  001B94  5195               	movf	(___ftadd@f1+2)& (0+255),w,b
  7847  001B96  0100               	movlb	0	; () banked
  7848  001B98  2398               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7849                           
  7850                           ; BSR set to: 0
  7851  001B9A  0100               	movlb	0	; () banked
  7852  001B9C  AF98               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7853  001B9E  D015               	goto	l4184
  7854                           
  7855                           ; BSR set to: 0
  7856  001BA0  0EFF               	movlw	255
  7857  001BA2  0100               	movlb	0	; () banked
  7858  001BA4  1B96               	xorwf	___ftadd@f2& (0+255),f,b
  7859  001BA6  0EFF               	movlw	255
  7860  001BA8  0100               	movlb	0	; () banked
  7861  001BAA  1B97               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7862  001BAC  0EFF               	movlw	255
  7863  001BAE  0100               	movlb	0	; () banked
  7864  001BB0  1B98               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7865  001BB2  0E01               	movlw	1
  7866  001BB4  0100               	movlb	0	; () banked
  7867  001BB6  2796               	addwf	___ftadd@f2& (0+255),f,b
  7868  001BB8  0E00               	movlw	0
  7869  001BBA  0100               	movlb	0	; () banked
  7870  001BBC  2397               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7871  001BBE  0E00               	movlw	0
  7872  001BC0  0100               	movlb	0	; () banked
  7873  001BC2  2398               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7874                           
  7875                           ; BSR set to: 0
  7876  001BC4  0E01               	movlw	1
  7877  001BC6  0100               	movlb	0	; () banked
  7878  001BC8  6F9C               	movwf	___ftadd@sign& (0+255),b
  7879  001BCA                     l4184:
  7880  001BCA  FFFF               	dw	65535	; assembler added errata NOP
  7881                           
  7882                           ; BSR set to: 0
  7883  001BCC  C096  F022         	movff	___ftadd@f2,___ftpack@arg
  7884  001BD0  C097  F023         	movff	___ftadd@f2+1,___ftpack@arg+1
  7885  001BD4  C098  F024         	movff	___ftadd@f2+2,___ftpack@arg+2
  7886  001BD8  C09E  F025         	movff	___ftadd@exp1,___ftpack@exp
  7887  001BDC  C09C  F026         	movff	___ftadd@sign,___ftpack@sign
  7888  001BE0  ECE8  F013         	call	___ftpack	;wreg free
  7889  001BE4  C022  F093         	movff	?___ftpack,?___ftadd
  7890  001BE8  C023  F094         	movff	?___ftpack+1,?___ftadd+1
  7891  001BEC  C024  F095         	movff	?___ftpack+2,?___ftadd+2
  7892  001BF0                     l777:
  7893  001BF0  FFFF               	dw	65535	; assembler added errata NOP
  7894  001BF2  0012               	return		;funcret
  7895  001BF4  FFFF               	dw	65535	; errata NOP
  7896  001BF6                     __end_of___ftadd:
  7897                           	opt stack 0
  7898                           tblptru	equ	0xFF8
  7899                           tblptrh	equ	0xFF7
  7900                           tblptrl	equ	0xFF6
  7901                           tablat	equ	0xFF5
  7902                           prodh	equ	0xFF4
  7903                           prodl	equ	0xFF3
  7904                           postinc0	equ	0xFEE
  7905                           wreg	equ	0xFE8
  7906                           postdec1	equ	0xFE5
  7907                           fsr1l	equ	0xFE1
  7908                           indf2	equ	0xFDF
  7909                           postinc2	equ	0xFDE
  7910                           postdec2	equ	0xFDD
  7911                           fsr2h	equ	0xFDA
  7912                           fsr2l	equ	0xFD9
  7913                           status	equ	0xFD8
  7914                           
  7915 ;; *************** function ___ftneg *****************
  7916 ;; Defined at:
  7917 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/ftneg.c"
  7918 ;; Parameters:    Size  Location     Type
  7919 ;;  f1              3   33[COMRAM] float 
  7920 ;; Auto vars:     Size  Location     Type
  7921 ;;		None
  7922 ;; Return value:  Size  Location     Type
  7923 ;;                  3   33[COMRAM] float 
  7924 ;; Registers used:
  7925 ;;		wreg, status,2, status,0
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7931 ;;      Params:         3       0       0       0       0       0       0
  7932 ;;      Locals:         0       0       0       0       0       0       0
  7933 ;;      Temps:          0       0       0       0       0       0       0
  7934 ;;      Totals:         3       0       0       0       0       0       0
  7935 ;;Total ram usage:        3 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; Hardware stack levels required when called:    2
  7938 ;; This function calls:
  7939 ;;		Nothing
  7940 ;; This function is called by:
  7941 ;;		_sprintf
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           	psect	text17
  7946  002E18                     __ptext17:
  7947                           	opt stack 0
  7948  002E18                     ___ftneg:
  7949                           	opt stack 0
  7950  002E18  FFFF               	dw	65535	; assembler added errata NOP
  7951                           
  7952                           ;incstack = 0
  7953  002E1A  5022               	movf	___ftneg@f1,w,c
  7954  002E1C  1023               	iorwf	___ftneg@f1+1,w,c
  7955  002E1E  1024               	iorwf	___ftneg@f1+2,w,c
  7956  002E20  B4D8               	btfsc	status,2,c
  7957  002E22  D006               	goto	l850
  7958  002E24  0E00               	movlw	0
  7959  002E26  1A22               	xorwf	___ftneg@f1,f,c
  7960  002E28  0E00               	movlw	0
  7961  002E2A  1A23               	xorwf	___ftneg@f1+1,f,c
  7962  002E2C  0E80               	movlw	128
  7963  002E2E  1A24               	xorwf	___ftneg@f1+2,f,c
  7964  002E30                     l850:
  7965  002E30  FFFF               	dw	65535	; assembler added errata NOP
  7966  002E32  C022  F022         	movff	___ftneg@f1,?___ftneg
  7967  002E36  C023  F023         	movff	___ftneg@f1+1,?___ftneg+1
  7968  002E3A  C024  F024         	movff	___ftneg@f1+2,?___ftneg+2
  7969  002E3E  0012               	return		;funcret
  7970  002E40  FFFF               	dw	65535	; errata NOP
  7971  002E42                     __end_of___ftneg:
  7972                           	opt stack 0
  7973                           tblptru	equ	0xFF8
  7974                           tblptrh	equ	0xFF7
  7975                           tblptrl	equ	0xFF6
  7976                           tablat	equ	0xFF5
  7977                           prodh	equ	0xFF4
  7978                           prodl	equ	0xFF3
  7979                           postinc0	equ	0xFEE
  7980                           wreg	equ	0xFE8
  7981                           postdec1	equ	0xFE5
  7982                           fsr1l	equ	0xFE1
  7983                           indf2	equ	0xFDF
  7984                           postinc2	equ	0xFDE
  7985                           postdec2	equ	0xFDD
  7986                           fsr2h	equ	0xFDA
  7987                           fsr2l	equ	0xFD9
  7988                           status	equ	0xFD8
  7989                           
  7990 ;; *************** function ___ftge *****************
  7991 ;; Defined at:
  7992 ;;		line 4 in file "/opt/microchip/xc8/v1.38/sources/common/ftge.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;  ff1             3   33[COMRAM] float 
  7995 ;;  ff2             3   36[COMRAM] float 
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;		None
  7998 ;; Return value:  Size  Location     Type
  7999 ;;		None               void
  8000 ;; Registers used:
  8001 ;;		wreg, status,2, status,0
  8002 ;; Tracked objects:
  8003 ;;		On entry : 0/0
  8004 ;;		On exit  : 0/0
  8005 ;;		Unchanged: 0/0
  8006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8007 ;;      Params:         6       0       0       0       0       0       0
  8008 ;;      Locals:         0       0       0       0       0       0       0
  8009 ;;      Temps:          3       0       0       0       0       0       0
  8010 ;;      Totals:         9       0       0       0       0       0       0
  8011 ;;Total ram usage:        9 bytes
  8012 ;; Hardware stack levels used:    1
  8013 ;; Hardware stack levels required when called:    2
  8014 ;; This function calls:
  8015 ;;		Nothing
  8016 ;; This function is called by:
  8017 ;;		_sprintf
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           	psect	text18
  8022  002894                     __ptext18:
  8023                           	opt stack 0
  8024  002894                     ___ftge:
  8025                           	opt stack 0
  8026  002894  FFFF               	dw	65535	; assembler added errata NOP
  8027                           
  8028                           ;incstack = 0
  8029  002896  AE24               	btfss	___ftge@ff1+2,7,c
  8030  002898  D016               	goto	l4516
  8031  00289A  C022  F028         	movff	___ftge@ff1,??___ftge
  8032  00289E  C023  F029         	movff	___ftge@ff1+1,??___ftge+1
  8033  0028A2  C024  F02A         	movff	___ftge@ff1+2,??___ftge+2
  8034  0028A6  1E28               	comf	??___ftge,f,c
  8035  0028A8  1E29               	comf	??___ftge+1,f,c
  8036  0028AA  1E2A               	comf	??___ftge+2,f,c
  8037  0028AC  2A28               	incf	??___ftge,f,c
  8038  0028AE  0E00               	movlw	0
  8039  0028B0  2229               	addwfc	??___ftge+1,f,c
  8040  0028B2  222A               	addwfc	??___ftge+2,f,c
  8041  0028B4  0E00               	movlw	0
  8042  0028B6  2428               	addwf	??___ftge,w,c
  8043  0028B8  6E22               	movwf	___ftge@ff1,c
  8044  0028BA  0E00               	movlw	0
  8045  0028BC  2029               	addwfc	??___ftge+1,w,c
  8046  0028BE  6E23               	movwf	___ftge@ff1+1,c
  8047  0028C0  0E80               	movlw	128
  8048  0028C2  202A               	addwfc	??___ftge+2,w,c
  8049  0028C4  6E24               	movwf	___ftge@ff1+2,c
  8050  0028C6                     l4516:
  8051  0028C6  FFFF               	dw	65535	; assembler added errata NOP
  8052  0028C8  AE27               	btfss	___ftge@ff2+2,7,c
  8053  0028CA  D016               	goto	l4520
  8054  0028CC  C025  F028         	movff	___ftge@ff2,??___ftge
  8055  0028D0  C026  F029         	movff	___ftge@ff2+1,??___ftge+1
  8056  0028D4  C027  F02A         	movff	___ftge@ff2+2,??___ftge+2
  8057  0028D8  1E28               	comf	??___ftge,f,c
  8058  0028DA  1E29               	comf	??___ftge+1,f,c
  8059  0028DC  1E2A               	comf	??___ftge+2,f,c
  8060  0028DE  2A28               	incf	??___ftge,f,c
  8061  0028E0  0E00               	movlw	0
  8062  0028E2  2229               	addwfc	??___ftge+1,f,c
  8063  0028E4  222A               	addwfc	??___ftge+2,f,c
  8064  0028E6  0E00               	movlw	0
  8065  0028E8  2428               	addwf	??___ftge,w,c
  8066  0028EA  6E25               	movwf	___ftge@ff2,c
  8067  0028EC  0E00               	movlw	0
  8068  0028EE  2029               	addwfc	??___ftge+1,w,c
  8069  0028F0  6E26               	movwf	___ftge@ff2+1,c
  8070  0028F2  0E80               	movlw	128
  8071  0028F4  202A               	addwfc	??___ftge+2,w,c
  8072  0028F6  6E27               	movwf	___ftge@ff2+2,c
  8073  0028F8                     l4520:
  8074  0028F8  FFFF               	dw	65535	; assembler added errata NOP
  8075  0028FA  0E00               	movlw	0
  8076  0028FC  1A22               	xorwf	___ftge@ff1,f,c
  8077  0028FE  0E00               	movlw	0
  8078  002900  1A23               	xorwf	___ftge@ff1+1,f,c
  8079  002902  0E80               	movlw	128
  8080  002904  1A24               	xorwf	___ftge@ff1+2,f,c
  8081  002906  0E00               	movlw	0
  8082  002908  1A25               	xorwf	___ftge@ff2,f,c
  8083  00290A  0E00               	movlw	0
  8084  00290C  1A26               	xorwf	___ftge@ff2+1,f,c
  8085  00290E  0E80               	movlw	128
  8086  002910  1A27               	xorwf	___ftge@ff2+2,f,c
  8087  002912  5025               	movf	___ftge@ff2,w,c
  8088  002914  5C22               	subwf	___ftge@ff1,w,c
  8089  002916  5026               	movf	___ftge@ff2+1,w,c
  8090  002918  5823               	subwfb	___ftge@ff1+1,w,c
  8091  00291A  5027               	movf	___ftge@ff2+2,w,c
  8092  00291C  5824               	subwfb	___ftge@ff1+2,w,c
  8093  00291E  B0D8               	btfsc	status,0,c
  8094  002920  D002               	goto	l4526
  8095  002922  90D8               	bcf	status,0,c
  8096  002924  D002               	goto	l834
  8097  002926                     l4526:
  8098  002926  FFFF               	dw	65535	; assembler added errata NOP
  8099  002928  80D8               	bsf	status,0,c
  8100  00292A                     l834:
  8101  00292A  FFFF               	dw	65535	; assembler added errata NOP
  8102  00292C  0012               	return		;funcret
  8103  00292E  FFFF               	dw	65535	; errata NOP
  8104  002930                     __end_of___ftge:
  8105                           	opt stack 0
  8106                           tblptru	equ	0xFF8
  8107                           tblptrh	equ	0xFF7
  8108                           tblptrl	equ	0xFF6
  8109                           tablat	equ	0xFF5
  8110                           prodh	equ	0xFF4
  8111                           prodl	equ	0xFF3
  8112                           postinc0	equ	0xFEE
  8113                           wreg	equ	0xFE8
  8114                           postdec1	equ	0xFE5
  8115                           fsr1l	equ	0xFE1
  8116                           indf2	equ	0xFDF
  8117                           postinc2	equ	0xFDE
  8118                           postdec2	equ	0xFDD
  8119                           fsr2h	equ	0xFDA
  8120                           fsr2l	equ	0xFD9
  8121                           status	equ	0xFD8
  8122                           
  8123 ;; *************** function _ledestado *****************
  8124 ;; Defined at:
  8125 ;;		line 266 in file "main.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;  tiempoled       2   33[COMRAM] int 
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;		None
  8130 ;; Return value:  Size  Location     Type
  8131 ;;                  1    wreg      void 
  8132 ;; Registers used:
  8133 ;;		wreg, status,2, status,0
  8134 ;; Tracked objects:
  8135 ;;		On entry : 0/0
  8136 ;;		On exit  : 0/0
  8137 ;;		Unchanged: 0/0
  8138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8139 ;;      Params:         2       0       0       0       0       0       0
  8140 ;;      Locals:         0       0       0       0       0       0       0
  8141 ;;      Temps:          1       0       0       0       0       0       0
  8142 ;;      Totals:         3       0       0       0       0       0       0
  8143 ;;Total ram usage:        3 bytes
  8144 ;; Hardware stack levels used:    1
  8145 ;; Hardware stack levels required when called:    2
  8146 ;; This function calls:
  8147 ;;		Nothing
  8148 ;; This function is called by:
  8149 ;;		_main
  8150 ;; This function uses a non-reentrant model
  8151 ;;
  8152                           
  8153                           	psect	text19
  8154  002D82                     __ptext19:
  8155                           	opt stack 0
  8156  002D82                     _ledestado:
  8157                           	opt stack 0
  8158  002D82  FFFF               	dw	65535	; assembler added errata NOP
  8159                           
  8160                           ;main.c: 267: d++;
  8161                           
  8162                           ;incstack = 0
  8163  002D84  0100               	movlb	0	; () banked
  8164  002D86  4BC6               	infsnz	_d& (0+255),f,b
  8165  002D88  2BC7               	incf	(_d+1)& (0+255),f,b
  8166                           
  8167                           ; BSR set to: 0
  8168                           ;main.c: 268: if (d >= tiempoled) {
  8169  002D8A  5022               	movf	ledestado@tiempoled,w,c
  8170  002D8C  0100               	movlb	0	; () banked
  8171  002D8E  5DC6               	subwf	_d& (0+255),w,b
  8172  002D90  0100               	movlb	0	; () banked
  8173  002D92  51C7               	movf	(_d+1)& (0+255),w,b
  8174  002D94  0A80               	xorlw	128
  8175  002D96  6E24               	movwf	??_ledestado& (0+255),c
  8176  002D98  5023               	movf	ledestado@tiempoled+1,w,c
  8177  002D9A  0A80               	xorlw	128
  8178  002D9C  5824               	subwfb	??_ledestado& (0+255),w,c
  8179  002D9E  A0D8               	btfss	status,0,c
  8180  002DA0  D006               	goto	l264
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;main.c: 269: __nop();
  8184  002DA2  F000               	nop	
  8185                           
  8186                           ;main.c: 271: d = 0;
  8187  002DA4  0E00               	movlw	0
  8188  002DA6  0100               	movlb	0	; () banked
  8189  002DA8  6FC7               	movwf	(_d+1)& (0+255),b
  8190  002DAA  0E00               	movlw	0
  8191  002DAC  6FC6               	movwf	_d& (0+255),b
  8192  002DAE                     l264:
  8193  002DAE  FFFF               	dw	65535	; assembler added errata NOP
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;main.c: 272: }
  8197                           ;main.c: 273: led = 0;
  8198  002DB0  0E00               	movlw	0
  8199  002DB2  6E45               	movwf	_led+1,c
  8200  002DB4  0E00               	movlw	0
  8201  002DB6  6E44               	movwf	_led,c
  8202                           
  8203                           ; BSR set to: 0
  8204  002DB8  0012               	return		;funcret
  8205  002DBA  FFFF               	dw	65535	; errata NOP
  8206  002DBC                     __end_of_ledestado:
  8207                           	opt stack 0
  8208                           tblptru	equ	0xFF8
  8209                           tblptrh	equ	0xFF7
  8210                           tblptrl	equ	0xFF6
  8211                           tablat	equ	0xFF5
  8212                           prodh	equ	0xFF4
  8213                           prodl	equ	0xFF3
  8214                           postinc0	equ	0xFEE
  8215                           wreg	equ	0xFE8
  8216                           postdec1	equ	0xFE5
  8217                           fsr1l	equ	0xFE1
  8218                           indf2	equ	0xFDF
  8219                           postinc2	equ	0xFDE
  8220                           postdec2	equ	0xFDD
  8221                           fsr2h	equ	0xFDA
  8222                           fsr2l	equ	0xFD9
  8223                           status	equ	0xFD8
  8224                           
  8225 ;; *************** function _enviarTramaSE *****************
  8226 ;; Defined at:
  8227 ;;		line 298 in file "main.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;  datos           2   33[COMRAM] PTR unsigned char 
  8230 ;;		 -> salida(30), 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;		None
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  1    wreg      void 
  8235 ;; Registers used:
  8236 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8242 ;;      Params:         2       0       0       0       0       0       0
  8243 ;;      Locals:         0       0       0       0       0       0       0
  8244 ;;      Temps:          0       0       0       0       0       0       0
  8245 ;;      Totals:         2       0       0       0       0       0       0
  8246 ;;Total ram usage:        2 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    2
  8249 ;; This function calls:
  8250 ;;		Nothing
  8251 ;; This function is called by:
  8252 ;;		_main
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           	psect	text20
  8257  002DBC                     __ptext20:
  8258                           	opt stack 0
  8259  002DBC                     _enviarTramaSE:
  8260                           	opt stack 0
  8261  002DBC  FFFF               	dw	65535	; assembler added errata NOP
  8262                           
  8263                           ;main.c: 302: while (*datos != 0) {
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;incstack = 0
  8267  002DBE  D00C               	goto	l3730
  8268  002DC0                     l3726:
  8269  002DC0  FFFF               	dw	65535	; assembler added errata NOP
  8270                           
  8271                           ;main.c: 303: TXREG = *datos;
  8272  002DC2  C022  FFD9         	movff	enviarTramaSE@datos,fsr2l
  8273  002DC6  C023  FFDA         	movff	enviarTramaSE@datos+1,fsr2h
  8274  002DCA  50DF               	movf	indf2,w,c
  8275  002DCC  6EAD               	movwf	4013,c	;volatile
  8276  002DCE                     l285:
  8277  002DCE  FFFF               	dw	65535	; assembler added errata NOP
  8278  002DD0  A2AC               	btfss	4012,1,c	;volatile
  8279  002DD2  D7FD               	goto	l285
  8280                           
  8281                           ;main.c: 305: *datos++;
  8282  002DD4  4A22               	infsnz	enviarTramaSE@datos,f,c
  8283  002DD6  2A23               	incf	enviarTramaSE@datos+1,f,c
  8284  002DD8                     l3730:
  8285  002DD8  FFFF               	dw	65535	; assembler added errata NOP
  8286  002DDA  C022  FFD9         	movff	enviarTramaSE@datos,fsr2l
  8287  002DDE  C023  FFDA         	movff	enviarTramaSE@datos+1,fsr2h
  8288  002DE2  50DF               	movf	indf2,w,c
  8289  002DE4  B4D8               	btfsc	status,2,c
  8290  002DE6  0012               	return		;funcret
  8291  002DE8  FFFF               	dw	65535	; assembler added errata NOP
  8292  002DEA  D7EA               	goto	l3726
  8293  002DEC  FFFF               	dw	65535	; errata NOP
  8294  002DEE                     __end_of_enviarTramaSE:
  8295                           	opt stack 0
  8296                           tblptru	equ	0xFF8
  8297                           tblptrh	equ	0xFF7
  8298                           tblptrl	equ	0xFF6
  8299                           tablat	equ	0xFF5
  8300                           prodh	equ	0xFF4
  8301                           prodl	equ	0xFF3
  8302                           postinc0	equ	0xFEE
  8303                           wreg	equ	0xFE8
  8304                           postdec1	equ	0xFE5
  8305                           fsr1l	equ	0xFE1
  8306                           indf2	equ	0xFDF
  8307                           postinc2	equ	0xFDE
  8308                           postdec2	equ	0xFDD
  8309                           fsr2h	equ	0xFDA
  8310                           fsr2l	equ	0xFD9
  8311                           status	equ	0xFD8
  8312                           
  8313 ;; *************** function _enviarTrama *****************
  8314 ;; Defined at:
  8315 ;;		line 280 in file "main.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;  datos           2   33[COMRAM] PTR unsigned char 
  8318 ;;		 -> visualizacionnoaplica(24), muestreonoaplica(19), estadoactualrapido(24), estadoactualnormal(24), 
  8319 ;;		 -> salida(30), noreconocido(22), saludo(31), comando(25), 
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;		None
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  1    wreg      void 
  8324 ;; Registers used:
  8325 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  8326 ;; Tracked objects:
  8327 ;;		On entry : 0/0
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8331 ;;      Params:         2       0       0       0       0       0       0
  8332 ;;      Locals:         0       0       0       0       0       0       0
  8333 ;;      Temps:          0       0       0       0       0       0       0
  8334 ;;      Totals:         2       0       0       0       0       0       0
  8335 ;;Total ram usage:        2 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; Hardware stack levels required when called:    2
  8338 ;; This function calls:
  8339 ;;		Nothing
  8340 ;; This function is called by:
  8341 ;;		_main
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           	psect	text21
  8346  002ADC                     __ptext21:
  8347                           	opt stack 0
  8348  002ADC                     _enviarTrama:
  8349                           	opt stack 0
  8350  002ADC  FFFF               	dw	65535	; assembler added errata NOP
  8351                           
  8352                           ;main.c: 284: while (*datos != 0) {
  8353                           
  8354                           ;incstack = 0
  8355  002ADE  D018               	goto	l3286
  8356  002AE0                     l3282:
  8357  002AE0  FFFF               	dw	65535	; assembler added errata NOP
  8358                           
  8359                           ;main.c: 285: TXREG = *datos;
  8360  002AE2  C022  FFF6         	movff	enviarTrama@datos,tblptrl
  8361  002AE6  C023  FFF7         	movff	enviarTrama@datos+1,tblptrh
  8362  002AEA  6AF8               	clrf	tblptru,c
  8363  002AEC  0E05               	movlw	(high __ramtop+-1)
  8364  002AEE  64F7               	cpfsgt	tblptrh,c
  8365  002AF0  D004               	bra	u3207
  8366  002AF2  0008               	tblrd		*
  8367  002AF4  FFFF               	dw	65535	; errata NOP
  8368  002AF6  50F5               	movf	tablat,w,c
  8369  002AF8  D005               	bra	u3200
  8370  002AFA                     u3207:
  8371  002AFA  CFF6 FFE9          	movff	tblptrl,fsr0l
  8372  002AFE  CFF7 FFEA          	movff	tblptrh,fsr0h
  8373  002B02  50EF               	movf	indf0,w,c
  8374  002B04                     u3200:
  8375  002B04  6EAD               	movwf	4013,c	;volatile
  8376  002B06                     l270:
  8377  002B06  FFFF               	dw	65535	; assembler added errata NOP
  8378  002B08  A2AC               	btfss	4012,1,c	;volatile
  8379  002B0A  D7FD               	goto	l270
  8380                           
  8381                           ;main.c: 287: *datos++;
  8382  002B0C  4A22               	infsnz	enviarTrama@datos,f,c
  8383  002B0E  2A23               	incf	enviarTrama@datos+1,f,c
  8384  002B10                     l3286:
  8385  002B10  FFFF               	dw	65535	; assembler added errata NOP
  8386  002B12  C022  FFF6         	movff	enviarTrama@datos,tblptrl
  8387  002B16  C023  FFF7         	movff	enviarTrama@datos+1,tblptrh
  8388  002B1A  6AF8               	clrf	tblptru,c
  8389  002B1C  0E05               	movlw	(high __ramtop+-1)
  8390  002B1E  64F7               	cpfsgt	tblptrh,c
  8391  002B20  D004               	bra	u3227
  8392  002B22  0008               	tblrd		*
  8393  002B24  FFFF               	dw	65535	; errata NOP
  8394  002B26  50F5               	movf	tablat,w,c
  8395  002B28  D005               	bra	u3220
  8396  002B2A                     u3227:
  8397  002B2A  CFF6 FFE9          	movff	tblptrl,fsr0l
  8398  002B2E  CFF7 FFEA          	movff	tblptrh,fsr0h
  8399  002B32  50EF               	movf	indf0,w,c
  8400  002B34                     u3220:
  8401  002B34  0900               	iorlw	0
  8402  002B36  A4D8               	btfss	status,2,c
  8403  002B38  D7D3               	goto	l3282
  8404                           
  8405                           ;main.c: 288: }
  8406                           ;main.c: 290: TXREG = 0x0A;
  8407  002B3A  0E0A               	movlw	10
  8408  002B3C  6EAD               	movwf	4013,c	;volatile
  8409  002B3E                     l274:
  8410  002B3E  FFFF               	dw	65535	; assembler added errata NOP
  8411  002B40  A2AC               	btfss	4012,1,c	;volatile
  8412  002B42  D7FD               	goto	l274
  8413                           
  8414                           ;main.c: 292: TXREG = 0x0D;
  8415  002B44  0E0D               	movlw	13
  8416  002B46  6EAD               	movwf	4013,c	;volatile
  8417  002B48                     l277:
  8418  002B48  FFFF               	dw	65535	; assembler added errata NOP
  8419  002B4A  B2AC               	btfsc	4012,1,c	;volatile
  8420  002B4C  0012               	return		;funcret
  8421  002B4E  FFFF               	dw	65535	; assembler added errata NOP
  8422  002B50  D7FB               	goto	l277
  8423  002B52  FFFF               	dw	65535	; errata NOP
  8424  002B54                     __end_of_enviarTrama:
  8425                           	opt stack 0
  8426                           tblptru	equ	0xFF8
  8427                           tblptrh	equ	0xFF7
  8428                           tblptrl	equ	0xFF6
  8429                           tablat	equ	0xFF5
  8430                           prodh	equ	0xFF4
  8431                           prodl	equ	0xFF3
  8432                           indf0	equ	0xFEF
  8433                           postinc0	equ	0xFEE
  8434                           fsr0h	equ	0xFEA
  8435                           fsr0l	equ	0xFE9
  8436                           wreg	equ	0xFE8
  8437                           postdec1	equ	0xFE5
  8438                           fsr1l	equ	0xFE1
  8439                           indf2	equ	0xFDF
  8440                           postinc2	equ	0xFDE
  8441                           postdec2	equ	0xFDD
  8442                           fsr2h	equ	0xFDA
  8443                           fsr2l	equ	0xFD9
  8444                           status	equ	0xFD8
  8445                           
  8446 ;; *************** function _conversionADMues *****************
  8447 ;; Defined at:
  8448 ;;		line 314 in file "main.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  canal           2   47[COMRAM] int 
  8451 ;; Auto vars:     Size  Location     Type
  8452 ;;  i               2   53[COMRAM] int 
  8453 ;;  i               2   51[COMRAM] int 
  8454 ;;  i               2   49[COMRAM] int 
  8455 ;; Return value:  Size  Location     Type
  8456 ;;                  2   47[COMRAM] int 
  8457 ;; Registers used:
  8458 ;;		wreg, status,2, status,0, cstack
  8459 ;; Tracked objects:
  8460 ;;		On entry : 0/0
  8461 ;;		On exit  : 0/0
  8462 ;;		Unchanged: 0/0
  8463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8464 ;;      Params:         2       0       0       0       0       0       0
  8465 ;;      Locals:         6       0       0       0       0       0       0
  8466 ;;      Temps:          0       0       0       0       0       0       0
  8467 ;;      Totals:         8       0       0       0       0       0       0
  8468 ;;Total ram usage:        8 bytes
  8469 ;; Hardware stack levels used:    1
  8470 ;; Hardware stack levels required when called:    3
  8471 ;; This function calls:
  8472 ;;		___awdiv
  8473 ;; This function is called by:
  8474 ;;		_main
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text22
  8479  001E66                     __ptext22:
  8480                           	opt stack 0
  8481  001E66                     _conversionADMues:
  8482                           	opt stack 0
  8483  001E66  FFFF               	dw	65535	; assembler added errata NOP
  8484                           
  8485                           ;main.c: 315: if (canal == 0) {
  8486                           
  8487                           ;incstack = 0
  8488  001E68  5030               	movf	conversionADMues@canal,w,c
  8489  001E6A  1031               	iorwf	conversionADMues@canal+1,w,c
  8490  001E6C  A4D8               	btfss	status,2,c
  8491  001E6E  D041               	goto	l4984
  8492                           
  8493                           ;main.c: 316: ADCON0bits.CHS = 0b000;
  8494  001E70  96C2               	bcf	4034,3,c	;volatile
  8495  001E72  98C2               	bcf	4034,4,c	;volatile
  8496  001E74  9AC2               	bcf	4034,5,c	;volatile
  8497                           
  8498                           ;main.c: 317: for (int i = 0; i < 20; i++) {
  8499  001E76  0E00               	movlw	0
  8500  001E78  6E33               	movwf	conversionADMues@i+1,c
  8501  001E7A  0E00               	movlw	0
  8502  001E7C  6E32               	movwf	conversionADMues@i,c
  8503  001E7E  BE33               	btfsc	conversionADMues@i+1,7,c
  8504  001E80  D007               	goto	l293
  8505  001E82  5033               	movf	conversionADMues@i+1,w,c
  8506  001E84  E10E               	bnz	l294
  8507  001E86  FFFF               	dw	65535	; assembler added errata NOP
  8508  001E88  0E14               	movlw	20
  8509  001E8A  5C32               	subwf	conversionADMues@i,w,c
  8510  001E8C  B0D8               	btfsc	status,0,c
  8511  001E8E  D009               	goto	l294
  8512  001E90                     l293:
  8513  001E90  FFFF               	dw	65535	; assembler added errata NOP
  8514                           
  8515                           ;main.c: 318: __nop();
  8516  001E92  F000               	nop	
  8517  001E94  4A32               	infsnz	conversionADMues@i,f,c
  8518  001E96  2A33               	incf	conversionADMues@i+1,f,c
  8519  001E98  BE33               	btfsc	conversionADMues@i+1,7,c
  8520  001E9A  D7FA               	goto	l293
  8521  001E9C  5033               	movf	conversionADMues@i+1,w,c
  8522  001E9E  E101               	bnz	u5970
  8523  001EA0  D7F2               	goto	L10
  8524  001EA2                     u5970:
  8525  001EA2                     l294:
  8526  001EA2  FFFF               	dw	65535	; assembler added errata NOP
  8527                           
  8528                           ;main.c: 319: }
  8529                           ;main.c: 320: ADCON0bits.GODONE = 1;
  8530  001EA4  84C2               	bsf	4034,2,c	;volatile
  8531                           
  8532                           ;main.c: 321: while (conversionadc == 0) {
  8533  001EA6  D002               	goto	l4968
  8534  001EA8                     l296:
  8535  001EA8  FFFF               	dw	65535	; assembler added errata NOP
  8536                           
  8537                           ;main.c: 322: __nop();
  8538  001EAA  F000               	nop	
  8539  001EAC                     l4968:
  8540  001EAC  FFFF               	dw	65535	; assembler added errata NOP
  8541  001EAE  503E               	movf	_conversionadc,w,c
  8542  001EB0  103F               	iorwf	_conversionadc+1,w,c
  8543  001EB2  B4D8               	btfsc	status,2,c
  8544  001EB4  D7F9               	goto	l296
  8545                           
  8546                           ;main.c: 323: }
  8547                           ;main.c: 324: h0++;
  8548  001EB6  0100               	movlb	0	; () banked
  8549  001EB8  4BCC               	infsnz	_h0& (0+255),f,b
  8550  001EBA  2BCD               	incf	(_h0+1)& (0+255),f,b
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;main.c: 325: suma0 = suma0 + resultadoadc;
  8554  001EBC  504C               	movf	_resultadoadc,w,c
  8555  001EBE  244E               	addwf	_suma0,w,c
  8556  001EC0  6E4E               	movwf	_suma0,c
  8557  001EC2  504D               	movf	_resultadoadc+1,w,c
  8558  001EC4  204F               	addwfc	_suma0+1,w,c
  8559  001EC6  6E4F               	movwf	_suma0+1,c
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;main.c: 326: resultadoadc = 0;
  8563  001EC8  0E00               	movlw	0
  8564  001ECA  6E4D               	movwf	_resultadoadc+1,c
  8565  001ECC  0E00               	movlw	0
  8566  001ECE  6E4C               	movwf	_resultadoadc,c
  8567                           
  8568                           ; BSR set to: 0
  8569                           ;main.c: 327: promedio = suma0 / h0;
  8570  001ED0  C04E  F028         	movff	_suma0,___awdiv@dividend
  8571  001ED4  C04F  F029         	movff	_suma0+1,___awdiv@dividend+1
  8572  001ED8  C0CC  F02A         	movff	_h0,___awdiv@divisor
  8573  001EDC  C0CD  F02B         	movff	_h0+1,___awdiv@divisor+1
  8574  001EE0  EC98  F014         	call	___awdiv	;wreg free
  8575  001EE4  D088               	goto	L14
  8576  001EE6                     l4978:
  8577  001EE6  FFFF               	dw	65535	; assembler added errata NOP
  8578                           
  8579                           ;main.c: 328: conversionadc = 0;
  8580  001EE8  0E00               	movlw	0
  8581  001EEA  6E3F               	movwf	_conversionadc+1,c
  8582  001EEC  0E00               	movlw	0
  8583  001EEE  6E3E               	movwf	_conversionadc,c
  8584  001EF0  D088               	goto	L15
  8585  001EF2                     l4984:
  8586  001EF2  FFFF               	dw	65535	; assembler added errata NOP
  8587                           
  8588                           ;main.c: 331: }
  8589                           ;main.c: 332: if (canal == 1) {
  8590  001EF4  0430               	decf	conversionADMues@canal,w,c
  8591  001EF6  1031               	iorwf	conversionADMues@canal+1,w,c
  8592  001EF8  A4D8               	btfss	status,2,c
  8593  001EFA  D03C               	goto	l5012
  8594                           
  8595                           ;main.c: 333: ADCON0bits.CHS = 0b001;
  8596  001EFC  50C2               	movf	4034,w,c	;volatile
  8597  001EFE  0BC7               	andlw	-57
  8598  001F00  0908               	iorlw	8
  8599  001F02  6EC2               	movwf	4034,c	;volatile
  8600                           
  8601                           ;main.c: 334: for (int i = 0; i < 20; i++) {
  8602  001F04  0E00               	movlw	0
  8603  001F06  6E35               	movwf	conversionADMues@i_608+1,c
  8604  001F08  0E00               	movlw	0
  8605  001F0A  6E34               	movwf	conversionADMues@i_608,c
  8606  001F0C  BE35               	btfsc	conversionADMues@i_608+1,7,c
  8607  001F0E  D007               	goto	l300
  8608  001F10  5035               	movf	conversionADMues@i_608+1,w,c
  8609  001F12  E10E               	bnz	l301
  8610  001F14  FFFF               	dw	65535	; assembler added errata NOP
  8611  001F16  0E14               	movlw	20
  8612  001F18  5C34               	subwf	conversionADMues@i_608,w,c
  8613  001F1A  B0D8               	btfsc	status,0,c
  8614  001F1C  D009               	goto	l301
  8615  001F1E                     l300:
  8616  001F1E  FFFF               	dw	65535	; assembler added errata NOP
  8617                           
  8618                           ;main.c: 335: __nop();
  8619  001F20  F000               	nop	
  8620  001F22  4A34               	infsnz	conversionADMues@i_608,f,c
  8621  001F24  2A35               	incf	conversionADMues@i_608+1,f,c
  8622  001F26  BE35               	btfsc	conversionADMues@i_608+1,7,c
  8623  001F28  D7FA               	goto	l300
  8624  001F2A  5035               	movf	conversionADMues@i_608+1,w,c
  8625  001F2C  E101               	bnz	u6010
  8626  001F2E  D7F2               	goto	L12
  8627  001F30                     u6010:
  8628  001F30                     l301:
  8629  001F30  FFFF               	dw	65535	; assembler added errata NOP
  8630                           
  8631                           ;main.c: 336: }
  8632                           ;main.c: 337: ADCON0bits.GODONE = 1;
  8633  001F32  84C2               	bsf	4034,2,c	;volatile
  8634                           
  8635                           ;main.c: 338: while (conversionadc == 0) {
  8636  001F34  D002               	goto	l4996
  8637  001F36                     l303:
  8638  001F36  FFFF               	dw	65535	; assembler added errata NOP
  8639                           
  8640                           ;main.c: 339: __nop();
  8641  001F38  F000               	nop	
  8642  001F3A                     l4996:
  8643  001F3A  FFFF               	dw	65535	; assembler added errata NOP
  8644  001F3C  503E               	movf	_conversionadc,w,c
  8645  001F3E  103F               	iorwf	_conversionadc+1,w,c
  8646  001F40  B4D8               	btfsc	status,2,c
  8647  001F42  D7F9               	goto	l303
  8648                           
  8649                           ;main.c: 340: }
  8650                           ;main.c: 341: h1++;
  8651  001F44  0100               	movlb	0	; () banked
  8652  001F46  4BCE               	infsnz	_h1& (0+255),f,b
  8653  001F48  2BCF               	incf	(_h1+1)& (0+255),f,b
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;main.c: 342: suma1 = suma1 + resultadoadc;
  8657  001F4A  504C               	movf	_resultadoadc,w,c
  8658  001F4C  2450               	addwf	_suma1,w,c
  8659  001F4E  6E50               	movwf	_suma1,c
  8660  001F50  504D               	movf	_resultadoadc+1,w,c
  8661  001F52  2051               	addwfc	_suma1+1,w,c
  8662  001F54  6E51               	movwf	_suma1+1,c
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;main.c: 343: resultadoadc = 0;
  8666  001F56  0E00               	movlw	0
  8667  001F58  6E4D               	movwf	_resultadoadc+1,c
  8668  001F5A  0E00               	movlw	0
  8669  001F5C  6E4C               	movwf	_resultadoadc,c
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;main.c: 344: promedio = suma1 / h1;
  8673  001F5E  C050  F028         	movff	_suma1,___awdiv@dividend
  8674  001F62  C051  F029         	movff	_suma1+1,___awdiv@dividend+1
  8675  001F66  C0CE  F02A         	movff	_h1,___awdiv@divisor
  8676  001F6A  C0CF  F02B         	movff	_h1+1,___awdiv@divisor+1
  8677  001F6E  EC98  F014         	call	___awdiv	;wreg free
  8678  001F72  D041               	goto	L14
  8679  001F74                     l5012:
  8680  001F74  FFFF               	dw	65535	; assembler added errata NOP
  8681                           
  8682                           ;main.c: 348: }
  8683                           ;main.c: 349: if (canal == 2) {
  8684  001F76  0E02               	movlw	2
  8685  001F78  1830               	xorwf	conversionADMues@canal,w,c
  8686  001F7A  1031               	iorwf	conversionADMues@canal+1,w,c
  8687  001F7C  A4D8               	btfss	status,2,c
  8688  001F7E  D046               	goto	l298
  8689                           
  8690                           ;main.c: 350: ADCON0bits.CHS = 0b010;
  8691  001F80  50C2               	movf	4034,w,c	;volatile
  8692  001F82  0BC7               	andlw	-57
  8693  001F84  0910               	iorlw	16
  8694  001F86  6EC2               	movwf	4034,c	;volatile
  8695                           
  8696                           ;main.c: 351: for (int i = 0; i < 20; i++) {
  8697  001F88  0E00               	movlw	0
  8698  001F8A  6E37               	movwf	conversionADMues@i_609+1,c
  8699  001F8C  0E00               	movlw	0
  8700  001F8E  6E36               	movwf	conversionADMues@i_609,c
  8701  001F90  BE37               	btfsc	conversionADMues@i_609+1,7,c
  8702  001F92  D007               	goto	l306
  8703  001F94  5037               	movf	conversionADMues@i_609+1,w,c
  8704  001F96  E10E               	bnz	l307
  8705  001F98  FFFF               	dw	65535	; assembler added errata NOP
  8706  001F9A  0E14               	movlw	20
  8707  001F9C  5C36               	subwf	conversionADMues@i_609,w,c
  8708  001F9E  B0D8               	btfsc	status,0,c
  8709  001FA0  D009               	goto	l307
  8710  001FA2                     l306:
  8711  001FA2  FFFF               	dw	65535	; assembler added errata NOP
  8712                           
  8713                           ;main.c: 352: __nop();
  8714  001FA4  F000               	nop	
  8715  001FA6  4A36               	infsnz	conversionADMues@i_609,f,c
  8716  001FA8  2A37               	incf	conversionADMues@i_609+1,f,c
  8717  001FAA  BE37               	btfsc	conversionADMues@i_609+1,7,c
  8718  001FAC  D7FA               	goto	l306
  8719  001FAE  5037               	movf	conversionADMues@i_609+1,w,c
  8720  001FB0  E101               	bnz	u6050
  8721  001FB2  D7F2               	goto	L13
  8722  001FB4                     u6050:
  8723  001FB4                     l307:
  8724  001FB4  FFFF               	dw	65535	; assembler added errata NOP
  8725                           
  8726                           ;main.c: 353: }
  8727                           ;main.c: 354: ADCON0bits.GODONE = 1;
  8728  001FB6  84C2               	bsf	4034,2,c	;volatile
  8729                           
  8730                           ;main.c: 355: while (conversionadc == 0) {
  8731  001FB8  D002               	goto	l5024
  8732  001FBA                     l309:
  8733  001FBA  FFFF               	dw	65535	; assembler added errata NOP
  8734                           
  8735                           ;main.c: 356: __nop();
  8736  001FBC  F000               	nop	
  8737  001FBE                     l5024:
  8738  001FBE  FFFF               	dw	65535	; assembler added errata NOP
  8739  001FC0  503E               	movf	_conversionadc,w,c
  8740  001FC2  103F               	iorwf	_conversionadc+1,w,c
  8741  001FC4  B4D8               	btfsc	status,2,c
  8742  001FC6  D7F9               	goto	l309
  8743                           
  8744                           ;main.c: 357: }
  8745                           ;main.c: 358: h2++;
  8746  001FC8  0100               	movlb	0	; () banked
  8747  001FCA  4BD0               	infsnz	_h2& (0+255),f,b
  8748  001FCC  2BD1               	incf	(_h2+1)& (0+255),f,b
  8749                           
  8750                           ; BSR set to: 0
  8751                           ;main.c: 359: suma2 = suma2 + resultadoadc;
  8752  001FCE  504C               	movf	_resultadoadc,w,c
  8753  001FD0  2452               	addwf	_suma2,w,c
  8754  001FD2  6E52               	movwf	_suma2,c
  8755  001FD4  504D               	movf	_resultadoadc+1,w,c
  8756  001FD6  2053               	addwfc	_suma2+1,w,c
  8757  001FD8  6E53               	movwf	_suma2+1,c
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;main.c: 360: resultadoadc = 0;
  8761  001FDA  0E00               	movlw	0
  8762  001FDC  6E4D               	movwf	_resultadoadc+1,c
  8763  001FDE  0E00               	movlw	0
  8764  001FE0  6E4C               	movwf	_resultadoadc,c
  8765                           
  8766                           ; BSR set to: 0
  8767                           ;main.c: 361: promedio = suma2 / h2;
  8768  001FE2  C052  F028         	movff	_suma2,___awdiv@dividend
  8769  001FE6  C053  F029         	movff	_suma2+1,___awdiv@dividend+1
  8770  001FEA  C0D0  F02A         	movff	_h2,___awdiv@divisor
  8771  001FEE  C0D1  F02B         	movff	_h2+1,___awdiv@divisor+1
  8772  001FF2  EC98  F014         	call	___awdiv	;wreg free
  8773  001FF6                     L14:
  8774  001FF6  FFFF               	dw	65535	; assembler added errata NOP
  8775  001FF8  C028  F04A         	movff	?___awdiv,_promedio
  8776  001FFC  C029  F04B         	movff	?___awdiv+1,_promedio+1
  8777  002000  D772               	goto	l4978
  8778  002002                     L15:
  8779  002002  FFFF               	dw	65535	; assembler added errata NOP
  8780                           
  8781                           ;main.c: 364: return promedio;
  8782                           
  8783                           ;main.c: 362: conversionadc = 0;
  8784  002004  C04A  F030         	movff	_promedio,?_conversionADMues
  8785  002008  C04B  F031         	movff	_promedio+1,?_conversionADMues+1
  8786  00200C                     l298:
  8787  00200C  FFFF               	dw	65535	; assembler added errata NOP
  8788  00200E  0012               	return		;funcret
  8789  002010  FFFF               	dw	65535	; errata NOP
  8790  002012                     __end_of_conversionADMues:
  8791                           	opt stack 0
  8792                           tblptru	equ	0xFF8
  8793                           tblptrh	equ	0xFF7
  8794                           tblptrl	equ	0xFF6
  8795                           tablat	equ	0xFF5
  8796                           prodh	equ	0xFF4
  8797                           prodl	equ	0xFF3
  8798                           indf0	equ	0xFEF
  8799                           postinc0	equ	0xFEE
  8800                           fsr0h	equ	0xFEA
  8801                           fsr0l	equ	0xFE9
  8802                           wreg	equ	0xFE8
  8803                           postdec1	equ	0xFE5
  8804                           fsr1l	equ	0xFE1
  8805                           indf2	equ	0xFDF
  8806                           postinc2	equ	0xFDE
  8807                           postdec2	equ	0xFDD
  8808                           fsr2h	equ	0xFDA
  8809                           fsr2l	equ	0xFD9
  8810                           status	equ	0xFD8
  8811                           
  8812 ;; *************** function ___awdiv *****************
  8813 ;; Defined at:
  8814 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/awdiv.c"
  8815 ;; Parameters:    Size  Location     Type
  8816 ;;  dividend        2   39[COMRAM] int 
  8817 ;;  divisor         2   41[COMRAM] int 
  8818 ;; Auto vars:     Size  Location     Type
  8819 ;;  quotient        2   45[COMRAM] int 
  8820 ;;  sign            1   44[COMRAM] unsigned char 
  8821 ;;  counter         1   43[COMRAM] unsigned char 
  8822 ;; Return value:  Size  Location     Type
  8823 ;;                  2   39[COMRAM] int 
  8824 ;; Registers used:
  8825 ;;		wreg, status,2, status,0
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8831 ;;      Params:         4       0       0       0       0       0       0
  8832 ;;      Locals:         4       0       0       0       0       0       0
  8833 ;;      Temps:          0       0       0       0       0       0       0
  8834 ;;      Totals:         8       0       0       0       0       0       0
  8835 ;;Total ram usage:        8 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    2
  8838 ;; This function calls:
  8839 ;;		Nothing
  8840 ;; This function is called by:
  8841 ;;		_conversionADMues
  8842 ;;		_fround
  8843 ;;		_scale
  8844 ;;		_sprintf
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           	psect	text23
  8849  002930                     __ptext23:
  8850                           	opt stack 0
  8851  002930                     ___awdiv:
  8852                           	opt stack 0
  8853  002930  FFFF               	dw	65535	; assembler added errata NOP
  8854                           
  8855                           ;incstack = 0
  8856  002932  0E00               	movlw	0
  8857  002934  6E2D               	movwf	___awdiv@sign,c
  8858  002936  AE2B               	btfss	___awdiv@divisor+1,7,c
  8859  002938  D006               	goto	l4244
  8860  00293A  6C2A               	negf	___awdiv@divisor,c
  8861  00293C  1E2B               	comf	___awdiv@divisor+1,f,c
  8862  00293E  B0D8               	btfsc	status,0,c
  8863  002940  2A2B               	incf	___awdiv@divisor+1,f,c
  8864  002942  0E01               	movlw	1
  8865  002944  6E2D               	movwf	___awdiv@sign,c
  8866  002946                     l4244:
  8867  002946  FFFF               	dw	65535	; assembler added errata NOP
  8868  002948  AE29               	btfss	___awdiv@dividend+1,7,c
  8869  00294A  D006               	goto	l4250
  8870  00294C  6C28               	negf	___awdiv@dividend,c
  8871  00294E  1E29               	comf	___awdiv@dividend+1,f,c
  8872  002950  B0D8               	btfsc	status,0,c
  8873  002952  2A29               	incf	___awdiv@dividend+1,f,c
  8874  002954  0E01               	movlw	1
  8875  002956  1A2D               	xorwf	___awdiv@sign,f,c
  8876  002958                     l4250:
  8877  002958  FFFF               	dw	65535	; assembler added errata NOP
  8878  00295A  0E00               	movlw	0
  8879  00295C  6E2F               	movwf	___awdiv@quotient+1,c
  8880  00295E  0E00               	movlw	0
  8881  002960  6E2E               	movwf	___awdiv@quotient,c
  8882  002962  502A               	movf	___awdiv@divisor,w,c
  8883  002964  102B               	iorwf	___awdiv@divisor+1,w,c
  8884  002966  B4D8               	btfsc	status,2,c
  8885  002968  D020               	goto	l4272
  8886  00296A  0E01               	movlw	1
  8887  00296C  6E2C               	movwf	___awdiv@counter,c
  8888  00296E  D005               	goto	l4258
  8889  002970                     l4256:
  8890  002970  FFFF               	dw	65535	; assembler added errata NOP
  8891  002972  90D8               	bcf	status,0,c
  8892  002974  362A               	rlcf	___awdiv@divisor,f,c
  8893  002976  362B               	rlcf	___awdiv@divisor+1,f,c
  8894  002978  2A2C               	incf	___awdiv@counter,f,c
  8895  00297A                     l4258:
  8896  00297A  FFFF               	dw	65535	; assembler added errata NOP
  8897  00297C  AE2B               	btfss	___awdiv@divisor+1,7,c
  8898  00297E  D7F8               	goto	l4256
  8899  002980                     l4260:
  8900  002980  FFFF               	dw	65535	; assembler added errata NOP
  8901  002982  90D8               	bcf	status,0,c
  8902  002984  362E               	rlcf	___awdiv@quotient,f,c
  8903  002986  362F               	rlcf	___awdiv@quotient+1,f,c
  8904  002988  502A               	movf	___awdiv@divisor,w,c
  8905  00298A  5C28               	subwf	___awdiv@dividend,w,c
  8906  00298C  502B               	movf	___awdiv@divisor+1,w,c
  8907  00298E  5829               	subwfb	___awdiv@dividend+1,w,c
  8908  002990  A0D8               	btfss	status,0,c
  8909  002992  D005               	goto	l4268
  8910  002994  502A               	movf	___awdiv@divisor,w,c
  8911  002996  5E28               	subwf	___awdiv@dividend,f,c
  8912  002998  502B               	movf	___awdiv@divisor+1,w,c
  8913  00299A  5A29               	subwfb	___awdiv@dividend+1,f,c
  8914  00299C  802E               	bsf	___awdiv@quotient,0,c
  8915  00299E                     l4268:
  8916  00299E  FFFF               	dw	65535	; assembler added errata NOP
  8917  0029A0  90D8               	bcf	status,0,c
  8918  0029A2  322B               	rrcf	___awdiv@divisor+1,f,c
  8919  0029A4  322A               	rrcf	___awdiv@divisor,f,c
  8920  0029A6  2E2C               	decfsz	___awdiv@counter,f,c
  8921  0029A8  D7EB               	goto	l4260
  8922  0029AA                     l4272:
  8923  0029AA  FFFF               	dw	65535	; assembler added errata NOP
  8924  0029AC  502D               	movf	___awdiv@sign,w,c
  8925  0029AE  B4D8               	btfsc	status,2,c
  8926  0029B0  D004               	goto	l4276
  8927  0029B2  6C2E               	negf	___awdiv@quotient,c
  8928  0029B4  1E2F               	comf	___awdiv@quotient+1,f,c
  8929  0029B6  B0D8               	btfsc	status,0,c
  8930  0029B8  2A2F               	incf	___awdiv@quotient+1,f,c
  8931  0029BA                     l4276:
  8932  0029BA  FFFF               	dw	65535	; assembler added errata NOP
  8933  0029BC  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  8934  0029C0  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  8935  0029C4  0012               	return		;funcret
  8936  0029C6  FFFF               	dw	65535	; errata NOP
  8937  0029C8                     __end_of___awdiv:
  8938                           	opt stack 0
  8939                           tblptru	equ	0xFF8
  8940                           tblptrh	equ	0xFF7
  8941                           tblptrl	equ	0xFF6
  8942                           tablat	equ	0xFF5
  8943                           prodh	equ	0xFF4
  8944                           prodl	equ	0xFF3
  8945                           indf0	equ	0xFEF
  8946                           postinc0	equ	0xFEE
  8947                           fsr0h	equ	0xFEA
  8948                           fsr0l	equ	0xFE9
  8949                           wreg	equ	0xFE8
  8950                           postdec1	equ	0xFE5
  8951                           fsr1l	equ	0xFE1
  8952                           indf2	equ	0xFDF
  8953                           postinc2	equ	0xFDE
  8954                           postdec2	equ	0xFDD
  8955                           fsr2h	equ	0xFDA
  8956                           fsr2l	equ	0xFD9
  8957                           status	equ	0xFD8
  8958                           
  8959 ;; *************** function ___ftdiv *****************
  8960 ;; Defined at:
  8961 ;;		line 54 in file "/opt/microchip/xc8/v1.38/sources/common/ftdiv.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;  f1              3    9[BANK0 ] float 
  8964 ;;  f2              3   12[BANK0 ] float 
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;  f3              3   19[BANK0 ] float 
  8967 ;;  sign            1   23[BANK0 ] unsigned char 
  8968 ;;  exp             1   22[BANK0 ] unsigned char 
  8969 ;;  cntr            1   18[BANK0 ] unsigned char 
  8970 ;; Return value:  Size  Location     Type
  8971 ;;                  3    9[BANK0 ] float 
  8972 ;; Registers used:
  8973 ;;		wreg, status,2, status,0, cstack
  8974 ;; Tracked objects:
  8975 ;;		On entry : 0/0
  8976 ;;		On exit  : 0/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8979 ;;      Params:         0       6       0       0       0       0       0
  8980 ;;      Locals:         0       6       0       0       0       0       0
  8981 ;;      Temps:          0       3       0       0       0       0       0
  8982 ;;      Totals:         0      15       0       0       0       0       0
  8983 ;;Total ram usage:       15 bytes
  8984 ;; Hardware stack levels used:    1
  8985 ;; Hardware stack levels required when called:    3
  8986 ;; This function calls:
  8987 ;;		___ftpack
  8988 ;; This function is called by:
  8989 ;;		_main
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           	psect	text24
  8994  002012                     __ptext24:
  8995                           	opt stack 0
  8996  002012                     ___ftdiv:
  8997                           	opt stack 0
  8998  002012  FFFF               	dw	65535	; assembler added errata NOP
  8999                           
  9000                           ;incstack = 0
  9001  002014  C08B  F08F         	movff	___ftdiv@f1+2,??___ftdiv
  9002  002018  0100               	movlb	0	; () banked
  9003  00201A  6B90               	clrf	(??___ftdiv+1)& (0+255),b
  9004  00201C  6B91               	clrf	(??___ftdiv+2)& (0+255),b
  9005  00201E  0100               	movlb	0	; () banked
  9006  002020  358A               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  9007  002022  0100               	movlb	0	; () banked
  9008  002024  378F               	rlcf	??___ftdiv& (0+255),f,b
  9009  002026  E301               	bnc	u6071
  9010  002028  8190               	bsf	(??___ftdiv+1)& (0+255),0,b
  9011  00202A                     u6071:
  9012  00202A  0100               	movlb	0	; () banked
  9013  00202C  518F               	movf	??___ftdiv& (0+255),w,b
  9014  00202E  0100               	movlb	0	; () banked
  9015  002030  6F96               	movwf	___ftdiv@exp& (0+255),b
  9016  002032  0100               	movlb	0	; () banked
  9017  002034  5196               	movf	___ftdiv@exp& (0+255),w,b
  9018  002036  B4D8               	btfsc	status,2,c
  9019  002038  D013               	goto	l5048
  9020                           
  9021                           ; BSR set to: 0
  9022                           
  9023                           ; BSR set to: 0
  9024                           
  9025                           ; BSR set to: 0
  9026                           
  9027                           ; BSR set to: 0
  9028  00203A  C08E  F08F         	movff	___ftdiv@f2+2,??___ftdiv
  9029  00203E  0100               	movlb	0	; () banked
  9030  002040  6B90               	clrf	(??___ftdiv+1)& (0+255),b
  9031  002042  6B91               	clrf	(??___ftdiv+2)& (0+255),b
  9032  002044  0100               	movlb	0	; () banked
  9033  002046  358D               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  9034  002048  0100               	movlb	0	; () banked
  9035  00204A  378F               	rlcf	??___ftdiv& (0+255),f,b
  9036  00204C  E301               	bnc	u6091
  9037  00204E  8190               	bsf	(??___ftdiv+1)& (0+255),0,b
  9038  002050                     u6091:
  9039  002050  0100               	movlb	0	; () banked
  9040  002052  518F               	movf	??___ftdiv& (0+255),w,b
  9041  002054  0100               	movlb	0	; () banked
  9042  002056  6F97               	movwf	___ftdiv@sign& (0+255),b
  9043  002058  0100               	movlb	0	; () banked
  9044  00205A  5197               	movf	___ftdiv@sign& (0+255),w,b
  9045  00205C  A4D8               	btfss	status,2,c
  9046  00205E  D00B               	goto	l5052
  9047  002060                     l5048:
  9048  002060  FFFF               	dw	65535	; assembler added errata NOP
  9049                           
  9050                           ; BSR set to: 0
  9051  002062  0E00               	movlw	0
  9052  002064  0100               	movlb	0	; () banked
  9053  002066  6F89               	movwf	?___ftdiv& (0+255),b
  9054  002068  0E00               	movlw	0
  9055  00206A  0100               	movlb	0	; () banked
  9056  00206C  6F8A               	movwf	(?___ftdiv+1)& (0+255),b
  9057  00206E  0E00               	movlw	0
  9058  002070  0100               	movlb	0	; () banked
  9059  002072  6F8B               	movwf	(?___ftdiv+2)& (0+255),b
  9060                           
  9061                           ; BSR set to: 0
  9062  002074  D06E               	goto	l808
  9063  002076                     l5052:
  9064  002076  FFFF               	dw	65535	; assembler added errata NOP
  9065                           
  9066                           ; BSR set to: 0
  9067  002078  0E00               	movlw	0
  9068  00207A  0100               	movlb	0	; () banked
  9069  00207C  6F93               	movwf	___ftdiv@f3& (0+255),b
  9070  00207E  0E00               	movlw	0
  9071  002080  0100               	movlb	0	; () banked
  9072  002082  6F94               	movwf	(___ftdiv@f3+1)& (0+255),b
  9073  002084  0E00               	movlw	0
  9074  002086  0100               	movlb	0	; () banked
  9075  002088  6F95               	movwf	(___ftdiv@f3+2)& (0+255),b
  9076                           
  9077                           ; BSR set to: 0
  9078  00208A  0100               	movlb	0	; () banked
  9079  00208C  5197               	movf	___ftdiv@sign& (0+255),w,b
  9080  00208E  0F89               	addlw	137
  9081  002090  0100               	movlb	0	; () banked
  9082  002092  5F96               	subwf	___ftdiv@exp& (0+255),f,b
  9083                           
  9084                           ; BSR set to: 0
  9085  002094  C08B  F097         	movff	___ftdiv@f1+2,___ftdiv@sign
  9086                           
  9087                           ; BSR set to: 0
  9088  002098  0100               	movlb	0	; () banked
  9089  00209A  518E               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9090  00209C  0100               	movlb	0	; () banked
  9091  00209E  1B97               	xorwf	___ftdiv@sign& (0+255),f,b
  9092                           
  9093                           ; BSR set to: 0
  9094  0020A0  0E80               	movlw	128
  9095  0020A2  0100               	movlb	0	; () banked
  9096  0020A4  1797               	andwf	___ftdiv@sign& (0+255),f,b
  9097                           
  9098                           ; BSR set to: 0
  9099  0020A6  0100               	movlb	0	; () banked
  9100  0020A8  8F8A               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  9101                           
  9102                           ; BSR set to: 0
  9103  0020AA  0EFF               	movlw	255
  9104  0020AC  0100               	movlb	0	; () banked
  9105  0020AE  1789               	andwf	___ftdiv@f1& (0+255),f,b
  9106  0020B0  0EFF               	movlw	255
  9107  0020B2  0100               	movlb	0	; () banked
  9108  0020B4  178A               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  9109  0020B6  0E00               	movlw	0
  9110  0020B8  0100               	movlb	0	; () banked
  9111  0020BA  178B               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  9112                           
  9113                           ; BSR set to: 0
  9114  0020BC  0100               	movlb	0	; () banked
  9115  0020BE  8F8D               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  9116                           
  9117                           ; BSR set to: 0
  9118  0020C0  0EFF               	movlw	255
  9119  0020C2  0100               	movlb	0	; () banked
  9120  0020C4  178C               	andwf	___ftdiv@f2& (0+255),f,b
  9121  0020C6  0EFF               	movlw	255
  9122  0020C8  0100               	movlb	0	; () banked
  9123  0020CA  178D               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  9124  0020CC  0E00               	movlw	0
  9125  0020CE  0100               	movlb	0	; () banked
  9126  0020D0  178E               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  9127                           
  9128                           ; BSR set to: 0
  9129  0020D2  0E18               	movlw	24
  9130  0020D4  0100               	movlb	0	; () banked
  9131  0020D6  6F92               	movwf	___ftdiv@cntr& (0+255),b
  9132  0020D8                     l5072:
  9133  0020D8  FFFF               	dw	65535	; assembler added errata NOP
  9134                           
  9135                           ; BSR set to: 0
  9136  0020DA  0100               	movlb	0	; () banked
  9137  0020DC  90D8               	bcf	status,0,c
  9138  0020DE  3793               	rlcf	___ftdiv@f3& (0+255),f,b
  9139  0020E0  3794               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  9140  0020E2  3795               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  9141                           
  9142                           ; BSR set to: 0
  9143  0020E4  0100               	movlb	0	; () banked
  9144  0020E6  518C               	movf	___ftdiv@f2& (0+255),w,b
  9145  0020E8  0100               	movlb	0	; () banked
  9146  0020EA  5D89               	subwf	___ftdiv@f1& (0+255),w,b
  9147  0020EC  0100               	movlb	0	; () banked
  9148  0020EE  518D               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9149  0020F0  0100               	movlb	0	; () banked
  9150  0020F2  598A               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  9151  0020F4  0100               	movlb	0	; () banked
  9152  0020F6  518E               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9153  0020F8  0100               	movlb	0	; () banked
  9154  0020FA  598B               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  9155  0020FC  A0D8               	btfss	status,0,c
  9156  0020FE  D00E               	goto	l811
  9157                           
  9158                           ; BSR set to: 0
  9159  002100  0100               	movlb	0	; () banked
  9160  002102  518C               	movf	___ftdiv@f2& (0+255),w,b
  9161  002104  0100               	movlb	0	; () banked
  9162  002106  5F89               	subwf	___ftdiv@f1& (0+255),f,b
  9163  002108  0100               	movlb	0	; () banked
  9164  00210A  518D               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9165  00210C  0100               	movlb	0	; () banked
  9166  00210E  5B8A               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  9167  002110  0100               	movlb	0	; () banked
  9168  002112  518E               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9169  002114  0100               	movlb	0	; () banked
  9170  002116  5B8B               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  9171                           
  9172                           ; BSR set to: 0
  9173  002118  0100               	movlb	0	; () banked
  9174  00211A  8193               	bsf	___ftdiv@f3& (0+255),0,b
  9175  00211C                     l811:
  9176  00211C  FFFF               	dw	65535	; assembler added errata NOP
  9177                           
  9178                           ; BSR set to: 0
  9179  00211E  0100               	movlb	0	; () banked
  9180  002120  90D8               	bcf	status,0,c
  9181  002122  3789               	rlcf	___ftdiv@f1& (0+255),f,b
  9182  002124  378A               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  9183  002126  378B               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  9184                           
  9185                           ; BSR set to: 0
  9186  002128  0100               	movlb	0	; () banked
  9187  00212A  2F92               	decfsz	___ftdiv@cntr& (0+255),f,b
  9188  00212C  D7D5               	goto	l5072
  9189                           
  9190                           ; BSR set to: 0
  9191                           
  9192                           ; BSR set to: 0
  9193  00212E  C093  F022         	movff	___ftdiv@f3,___ftpack@arg
  9194  002132  C094  F023         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9195  002136  C095  F024         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9196  00213A  C096  F025         	movff	___ftdiv@exp,___ftpack@exp
  9197  00213E  C097  F026         	movff	___ftdiv@sign,___ftpack@sign
  9198  002142  ECE8  F013         	call	___ftpack	;wreg free
  9199  002146  C022  F089         	movff	?___ftpack,?___ftdiv
  9200  00214A  C023  F08A         	movff	?___ftpack+1,?___ftdiv+1
  9201  00214E  C024  F08B         	movff	?___ftpack+2,?___ftdiv+2
  9202  002152                     l808:
  9203  002152  FFFF               	dw	65535	; assembler added errata NOP
  9204  002154  0012               	return		;funcret
  9205  002156  FFFF               	dw	65535	; errata NOP
  9206  002158                     __end_of___ftdiv:
  9207                           	opt stack 0
  9208                           tblptru	equ	0xFF8
  9209                           tblptrh	equ	0xFF7
  9210                           tblptrl	equ	0xFF6
  9211                           tablat	equ	0xFF5
  9212                           prodh	equ	0xFF4
  9213                           prodl	equ	0xFF3
  9214                           indf0	equ	0xFEF
  9215                           postinc0	equ	0xFEE
  9216                           fsr0h	equ	0xFEA
  9217                           fsr0l	equ	0xFE9
  9218                           wreg	equ	0xFE8
  9219                           postdec1	equ	0xFE5
  9220                           fsr1l	equ	0xFE1
  9221                           indf2	equ	0xFDF
  9222                           postinc2	equ	0xFDE
  9223                           postdec2	equ	0xFDD
  9224                           fsr2h	equ	0xFDA
  9225                           fsr2l	equ	0xFD9
  9226                           status	equ	0xFD8
  9227                           
  9228 ;; *************** function ___awtoft *****************
  9229 ;; Defined at:
  9230 ;;		line 32 in file "/opt/microchip/xc8/v1.38/sources/common/awtoft.c"
  9231 ;; Parameters:    Size  Location     Type
  9232 ;;  c               2   41[COMRAM] int 
  9233 ;; Auto vars:     Size  Location     Type
  9234 ;;  sign            1   44[COMRAM] unsigned char 
  9235 ;; Return value:  Size  Location     Type
  9236 ;;                  3   41[COMRAM] float 
  9237 ;; Registers used:
  9238 ;;		wreg, status,2, status,0, cstack
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : 0/0
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9244 ;;      Params:         3       0       0       0       0       0       0
  9245 ;;      Locals:         1       0       0       0       0       0       0
  9246 ;;      Temps:          0       0       0       0       0       0       0
  9247 ;;      Totals:         4       0       0       0       0       0       0
  9248 ;;Total ram usage:        4 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    3
  9251 ;; This function calls:
  9252 ;;		___ftpack
  9253 ;; This function is called by:
  9254 ;;		_main
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           	psect	text25
  9259  002D44                     __ptext25:
  9260                           	opt stack 0
  9261  002D44                     ___awtoft:
  9262                           	opt stack 0
  9263  002D44  FFFF               	dw	65535	; assembler added errata NOP
  9264                           
  9265                           ;incstack = 0
  9266  002D46  0E00               	movlw	0
  9267  002D48  6E2D               	movwf	___awtoft@sign,c
  9268  002D4A  AE2B               	btfss	___awtoft@c+1,7,c
  9269  002D4C  D006               	goto	l5094
  9270  002D4E  6C2A               	negf	___awtoft@c,c
  9271  002D50  1E2B               	comf	___awtoft@c+1,f,c
  9272  002D52  B0D8               	btfsc	status,0,c
  9273  002D54  2A2B               	incf	___awtoft@c+1,f,c
  9274  002D56  0E01               	movlw	1
  9275  002D58  6E2D               	movwf	___awtoft@sign,c
  9276  002D5A                     l5094:
  9277  002D5A  FFFF               	dw	65535	; assembler added errata NOP
  9278  002D5C  C02A  F022         	movff	___awtoft@c,___ftpack@arg
  9279  002D60  C02B  F023         	movff	___awtoft@c+1,___ftpack@arg+1
  9280  002D64  6A24               	clrf	___ftpack@arg+2,c
  9281  002D66  0E8E               	movlw	142
  9282  002D68  6E25               	movwf	___ftpack@exp,c
  9283  002D6A  C02D  F026         	movff	___awtoft@sign,___ftpack@sign
  9284  002D6E  ECE8  F013         	call	___ftpack	;wreg free
  9285  002D72  C022  F02A         	movff	?___ftpack,?___awtoft
  9286  002D76  C023  F02B         	movff	?___ftpack+1,?___awtoft+1
  9287  002D7A  C024  F02C         	movff	?___ftpack+2,?___awtoft+2
  9288  002D7E  0012               	return		;funcret
  9289  002D80  FFFF               	dw	65535	; errata NOP
  9290  002D82                     __end_of___awtoft:
  9291                           	opt stack 0
  9292                           tblptru	equ	0xFF8
  9293                           tblptrh	equ	0xFF7
  9294                           tblptrl	equ	0xFF6
  9295                           tablat	equ	0xFF5
  9296                           prodh	equ	0xFF4
  9297                           prodl	equ	0xFF3
  9298                           indf0	equ	0xFEF
  9299                           postinc0	equ	0xFEE
  9300                           fsr0h	equ	0xFEA
  9301                           fsr0l	equ	0xFE9
  9302                           wreg	equ	0xFE8
  9303                           postdec1	equ	0xFE5
  9304                           fsr1l	equ	0xFE1
  9305                           indf2	equ	0xFDF
  9306                           postinc2	equ	0xFDE
  9307                           postdec2	equ	0xFDD
  9308                           fsr2h	equ	0xFDA
  9309                           fsr2l	equ	0xFD9
  9310                           status	equ	0xFD8
  9311                           
  9312 ;; *************** function ___ftpack *****************
  9313 ;; Defined at:
  9314 ;;		line 62 in file "/opt/microchip/xc8/v1.38/sources/common/float.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;  arg             3   33[COMRAM] unsigned um
  9317 ;;  exp             1   36[COMRAM] unsigned char 
  9318 ;;  sign            1   37[COMRAM] unsigned char 
  9319 ;; Auto vars:     Size  Location     Type
  9320 ;;		None
  9321 ;; Return value:  Size  Location     Type
  9322 ;;                  3   33[COMRAM] float 
  9323 ;; Registers used:
  9324 ;;		wreg, status,2, status,0
  9325 ;; Tracked objects:
  9326 ;;		On entry : 0/0
  9327 ;;		On exit  : 0/0
  9328 ;;		Unchanged: 0/0
  9329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9330 ;;      Params:         5       0       0       0       0       0       0
  9331 ;;      Locals:         0       0       0       0       0       0       0
  9332 ;;      Temps:          3       0       0       0       0       0       0
  9333 ;;      Totals:         8       0       0       0       0       0       0
  9334 ;;Total ram usage:        8 bytes
  9335 ;; Hardware stack levels used:    1
  9336 ;; Hardware stack levels required when called:    2
  9337 ;; This function calls:
  9338 ;;		Nothing
  9339 ;; This function is called by:
  9340 ;;		___awtoft
  9341 ;;		___ftadd
  9342 ;;		___ftdiv
  9343 ;;		___ftmul
  9344 ;;		___lltoft
  9345 ;; This function uses a non-reentrant model
  9346 ;;
  9347                           
  9348                           	psect	text26
  9349  0027D0                     __ptext26:
  9350                           	opt stack 0
  9351  0027D0                     ___ftpack:
  9352                           	opt stack 0
  9353  0027D0  FFFF               	dw	65535	; assembler added errata NOP
  9354                           
  9355                           ;incstack = 0
  9356  0027D2  5025               	movf	___ftpack@exp,w,c
  9357  0027D4  B4D8               	btfsc	status,2,c
  9358  0027D6  D005               	goto	l4080
  9359  0027D8  5022               	movf	___ftpack@arg,w,c
  9360  0027DA  1023               	iorwf	___ftpack@arg+1,w,c
  9361  0027DC  1024               	iorwf	___ftpack@arg+2,w,c
  9362  0027DE  A4D8               	btfss	status,2,c
  9363  0027E0  D00E               	goto	l4086
  9364  0027E2                     l4080:
  9365  0027E2  FFFF               	dw	65535	; assembler added errata NOP
  9366  0027E4  0E00               	movlw	0
  9367  0027E6  6E22               	movwf	?___ftpack,c
  9368  0027E8  0E00               	movlw	0
  9369  0027EA  6E23               	movwf	?___ftpack+1,c
  9370  0027EC  0E00               	movlw	0
  9371  0027EE  6E24               	movwf	?___ftpack+2,c
  9372  0027F0  D04E               	goto	l742
  9373  0027F2                     l4084:
  9374  0027F2  FFFF               	dw	65535	; assembler added errata NOP
  9375  0027F4  2A25               	incf	___ftpack@exp,f,c
  9376  0027F6  90D8               	bcf	status,0,c
  9377  0027F8  3224               	rrcf	___ftpack@arg+2,f,c
  9378  0027FA  3223               	rrcf	___ftpack@arg+1,f,c
  9379  0027FC  3222               	rrcf	___ftpack@arg,f,c
  9380  0027FE                     l4086:
  9381  0027FE  FFFF               	dw	65535	; assembler added errata NOP
  9382  002800  0E00               	movlw	0
  9383  002802  1422               	andwf	___ftpack@arg,w,c
  9384  002804  6E27               	movwf	??___ftpack& (0+255),c
  9385  002806  0E00               	movlw	0
  9386  002808  1423               	andwf	___ftpack@arg+1,w,c
  9387  00280A  6E28               	movwf	(??___ftpack+1)& (0+255),c
  9388  00280C  0EFE               	movlw	254
  9389  00280E  1424               	andwf	___ftpack@arg+2,w,c
  9390  002810  6E29               	movwf	(??___ftpack+2)& (0+255),c
  9391  002812  5027               	movf	??___ftpack,w,c
  9392  002814  1028               	iorwf	??___ftpack+1,w,c
  9393  002816  1029               	iorwf	??___ftpack+2,w,c
  9394  002818  B4D8               	btfsc	status,2,c
  9395  00281A  D00D               	goto	l4092
  9396  00281C  D7EA               	goto	l4084
  9397  00281E                     l4088:
  9398  00281E  FFFF               	dw	65535	; assembler added errata NOP
  9399  002820  2A25               	incf	___ftpack@exp,f,c
  9400  002822  0E01               	movlw	1
  9401  002824  2622               	addwf	___ftpack@arg,f,c
  9402  002826  0E00               	movlw	0
  9403  002828  2223               	addwfc	___ftpack@arg+1,f,c
  9404  00282A  0E00               	movlw	0
  9405  00282C  2224               	addwfc	___ftpack@arg+2,f,c
  9406  00282E  90D8               	bcf	status,0,c
  9407  002830  3224               	rrcf	___ftpack@arg+2,f,c
  9408  002832  3223               	rrcf	___ftpack@arg+1,f,c
  9409  002834  3222               	rrcf	___ftpack@arg,f,c
  9410  002836                     l4092:
  9411  002836  FFFF               	dw	65535	; assembler added errata NOP
  9412  002838  0E00               	movlw	0
  9413  00283A  1422               	andwf	___ftpack@arg,w,c
  9414  00283C  6E27               	movwf	??___ftpack& (0+255),c
  9415  00283E  0E00               	movlw	0
  9416  002840  1423               	andwf	___ftpack@arg+1,w,c
  9417  002842  6E28               	movwf	(??___ftpack+1)& (0+255),c
  9418  002844  0EFF               	movlw	255
  9419  002846  1424               	andwf	___ftpack@arg+2,w,c
  9420  002848  6E29               	movwf	(??___ftpack+2)& (0+255),c
  9421  00284A  5027               	movf	??___ftpack,w,c
  9422  00284C  1028               	iorwf	??___ftpack+1,w,c
  9423  00284E  1029               	iorwf	??___ftpack+2,w,c
  9424  002850  B4D8               	btfsc	status,2,c
  9425  002852  D007               	goto	l4096
  9426  002854  D7E4               	goto	l4088
  9427  002856                     l4094:
  9428  002856  FFFF               	dw	65535	; assembler added errata NOP
  9429  002858  0625               	decf	___ftpack@exp,f,c
  9430  00285A  90D8               	bcf	status,0,c
  9431  00285C  3622               	rlcf	___ftpack@arg,f,c
  9432  00285E  3623               	rlcf	___ftpack@arg+1,f,c
  9433  002860  3624               	rlcf	___ftpack@arg+2,f,c
  9434  002862                     l4096:
  9435  002862  FFFF               	dw	65535	; assembler added errata NOP
  9436  002864  BE23               	btfsc	___ftpack@arg+1,7,c
  9437  002866  D003               	goto	l753
  9438  002868  0E02               	movlw	2
  9439  00286A  6025               	cpfslt	___ftpack@exp,c
  9440  00286C  D7F4               	goto	l4094
  9441  00286E                     l753:
  9442  00286E  FFFF               	dw	65535	; assembler added errata NOP
  9443  002870  A025               	btfss	___ftpack@exp,0,c
  9444  002872  9E23               	bcf	___ftpack@arg+1,7,c
  9445  002874  90D8               	bcf	status,0,c
  9446  002876  3225               	rrcf	___ftpack@exp,f,c
  9447  002878  5025               	movf	___ftpack@exp,w,c
  9448  00287A  1224               	iorwf	___ftpack@arg+2,f,c
  9449  00287C  5026               	movf	___ftpack@sign,w,c
  9450  00287E  A4D8               	btfss	status,2,c
  9451  002880  8E24               	bsf	___ftpack@arg+2,7,c
  9452  002882  C022  F022         	movff	___ftpack@arg,?___ftpack
  9453  002886  C023  F023         	movff	___ftpack@arg+1,?___ftpack+1
  9454  00288A  C024  F024         	movff	___ftpack@arg+2,?___ftpack+2
  9455  00288E                     l742:
  9456  00288E  FFFF               	dw	65535	; assembler added errata NOP
  9457  002890  0012               	return		;funcret
  9458  002892  FFFF               	dw	65535	; errata NOP
  9459  002894                     __end_of___ftpack:
  9460                           	opt stack 0
  9461                           tblptru	equ	0xFF8
  9462                           tblptrh	equ	0xFF7
  9463                           tblptrl	equ	0xFF6
  9464                           tablat	equ	0xFF5
  9465                           prodh	equ	0xFF4
  9466                           prodl	equ	0xFF3
  9467                           indf0	equ	0xFEF
  9468                           postinc0	equ	0xFEE
  9469                           fsr0h	equ	0xFEA
  9470                           fsr0l	equ	0xFE9
  9471                           wreg	equ	0xFE8
  9472                           postdec1	equ	0xFE5
  9473                           fsr1l	equ	0xFE1
  9474                           indf2	equ	0xFDF
  9475                           postinc2	equ	0xFDE
  9476                           postdec2	equ	0xFDD
  9477                           fsr2h	equ	0xFDA
  9478                           fsr2l	equ	0xFD9
  9479                           status	equ	0xFD8
  9480                           
  9481 ;; *************** function _InitApp *****************
  9482 ;; Defined at:
  9483 ;;		line 29 in file "user.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;		None
  9486 ;; Auto vars:     Size  Location     Type
  9487 ;;  i               2   33[COMRAM] int 
  9488 ;; Return value:  Size  Location     Type
  9489 ;;                  1    wreg      void 
  9490 ;; Registers used:
  9491 ;;		wreg, status,2, status,0
  9492 ;; Tracked objects:
  9493 ;;		On entry : 0/0
  9494 ;;		On exit  : 0/0
  9495 ;;		Unchanged: 0/0
  9496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9497 ;;      Params:         0       0       0       0       0       0       0
  9498 ;;      Locals:         2       0       0       0       0       0       0
  9499 ;;      Temps:          0       0       0       0       0       0       0
  9500 ;;      Totals:         2       0       0       0       0       0       0
  9501 ;;Total ram usage:        2 bytes
  9502 ;; Hardware stack levels used:    1
  9503 ;; Hardware stack levels required when called:    2
  9504 ;; This function calls:
  9505 ;;		Nothing
  9506 ;; This function is called by:
  9507 ;;		_main
  9508 ;; This function uses a non-reentrant model
  9509 ;;
  9510                           
  9511                           	psect	text27
  9512  00270A                     __ptext27:
  9513                           	opt stack 0
  9514  00270A                     _InitApp:
  9515                           	opt stack 0
  9516  00270A  FFFF               	dw	65535	; assembler added errata NOP
  9517                           
  9518                           ;user.c: 31: PORTA = 0b00;
  9519                           
  9520                           ;incstack = 0
  9521  00270C  0E00               	movlw	0
  9522  00270E  6E80               	movwf	3968,c	;volatile
  9523                           
  9524                           ;user.c: 32: PORTB = 0b00;
  9525  002710  0E00               	movlw	0
  9526  002712  6E81               	movwf	3969,c	;volatile
  9527                           
  9528                           ;user.c: 33: PORTC = 0b00;
  9529  002714  0E00               	movlw	0
  9530  002716  6E82               	movwf	3970,c	;volatile
  9531                           
  9532                           ;user.c: 34: TRISAbits.RA0 = 1 ;
  9533  002718  8092               	bsf	3986,0,c	;volatile
  9534                           
  9535                           ;user.c: 35: TRISAbits.RA1 = 1 ;
  9536  00271A  8292               	bsf	3986,1,c	;volatile
  9537                           
  9538                           ;user.c: 36: TRISAbits.RA2 = 1 ;
  9539  00271C  8492               	bsf	3986,2,c	;volatile
  9540                           
  9541                           ;user.c: 37: TRISAbits.RA3 = 1 ;
  9542  00271E  8692               	bsf	3986,3,c	;volatile
  9543                           
  9544                           ;user.c: 38: TRISBbits.RB7 = 0;
  9545  002720  9E93               	bcf	3987,7,c	;volatile
  9546                           
  9547                           ;user.c: 39: TRISCbits.RC7 = 1;
  9548  002722  8E94               	bsf	3988,7,c	;volatile
  9549                           
  9550                           ;user.c: 40: TRISCbits.RC6 = 0;
  9551  002724  9C94               	bcf	3988,6,c	;volatile
  9552                           
  9553                           ;user.c: 41: SPBRG = 10;
  9554  002726  0E0A               	movlw	10
  9555  002728  6EAF               	movwf	4015,c	;volatile
  9556                           
  9557                           ;user.c: 42: RCSTAbits.SPEN = 1;
  9558  00272A  8EAB               	bsf	4011,7,c	;volatile
  9559                           
  9560                           ;user.c: 43: TXSTAbits.SYNC = 0;
  9561  00272C  98AC               	bcf	4012,4,c	;volatile
  9562                           
  9563                           ;user.c: 44: TXSTAbits.BRGH = 1;
  9564  00272E  84AC               	bsf	4012,2,c	;volatile
  9565                           
  9566                           ;user.c: 45: TXSTAbits.TXEN = 1;
  9567  002730  8AAC               	bsf	4012,5,c	;volatile
  9568                           
  9569                           ;user.c: 46: RCSTAbits.CREN = 1;
  9570  002732  88AB               	bsf	4011,4,c	;volatile
  9571                           
  9572                           ;user.c: 47: PIE1bits.RCIE = 1;
  9573  002734  8A9D               	bsf	3997,5,c	;volatile
  9574                           
  9575                           ;user.c: 48: IPR1bits.RCIP = 1;
  9576  002736  8A9F               	bsf	3999,5,c	;volatile
  9577                           
  9578                           ;user.c: 51: T0CONbits.T08BIT = 0;
  9579  002738  9CD5               	bcf	4053,6,c	;volatile
  9580                           
  9581                           ;user.c: 52: T0CONbits.T0CS = 0;
  9582  00273A  9AD5               	bcf	4053,5,c	;volatile
  9583                           
  9584                           ;user.c: 53: T0CONbits.T0SE = 0;
  9585  00273C  98D5               	bcf	4053,4,c	;volatile
  9586                           
  9587                           ;user.c: 54: T0CONbits.PSA = 0;
  9588  00273E  96D5               	bcf	4053,3,c	;volatile
  9589                           
  9590                           ;user.c: 55: T0CONbits.T0PS = 0b101;
  9591  002740  50D5               	movf	4053,w,c	;volatile
  9592  002742  0BF8               	andlw	-8
  9593  002744  0905               	iorlw	5
  9594  002746  6ED5               	movwf	4053,c	;volatile
  9595                           
  9596                           ;user.c: 57: INTCON2bits.TMR0IP = 1;
  9597  002748  84F1               	bsf	intcon2,2,c	;volatile
  9598                           
  9599                           ;user.c: 58: INTCONbits.TMR0IE = 1;
  9600  00274A  8AF2               	bsf	intcon,5,c	;volatile
  9601                           
  9602                           ;user.c: 59: T0CONbits.TMR0ON = 1;
  9603  00274C  8ED5               	bsf	4053,7,c	;volatile
  9604                           
  9605                           ;user.c: 60: TMR0 = 65458;
  9606  00274E  0EFF               	movlw	255
  9607  002750  6ED7               	movwf	4055,c	;volatile
  9608  002752  0EB2               	movlw	178
  9609  002754  6ED6               	movwf	4054,c	;volatile
  9610                           
  9611                           ;user.c: 62: T1CONbits.RD16 = 1;
  9612  002756  8ECD               	bsf	4045,7,c	;volatile
  9613                           
  9614                           ;user.c: 63: T1CONbits.T1CKPS = 0b11;
  9615  002758  0E30               	movlw	48
  9616  00275A  12CD               	iorwf	4045,f,c	;volatile
  9617                           
  9618                           ;user.c: 64: T1CONbits.TMR1CS = 0;
  9619  00275C  92CD               	bcf	4045,1,c	;volatile
  9620                           
  9621                           ;user.c: 65: T1CONbits.T1SYNC = 1;
  9622  00275E  84CD               	bsf	4045,2,c	;volatile
  9623                           
  9624                           ;user.c: 66: T1CONbits.TMR1ON = 1;
  9625  002760  80CD               	bsf	4045,0,c	;volatile
  9626                           
  9627                           ;user.c: 67: PIE1bits.TMR1IE = 1;
  9628  002762  809D               	bsf	3997,0,c	;volatile
  9629                           
  9630                           ;user.c: 68: IPR1bits.TMR1IP = 1;
  9631  002764  809F               	bsf	3999,0,c	;volatile
  9632                           
  9633                           ;user.c: 69: TMR1 = 3036;
  9634  002766  0E0B               	movlw	11
  9635  002768  6ECF               	movwf	4047,c	;volatile
  9636  00276A  0EDC               	movlw	220
  9637  00276C  6ECE               	movwf	4046,c	;volatile
  9638                           
  9639                           ;user.c: 71: IPR2bits.TMR3IP = 1;
  9640  00276E  82A2               	bsf	4002,1,c	;volatile
  9641                           
  9642                           ;user.c: 72: PIE2bits.TMR3IE = 1;
  9643  002770  82A0               	bsf	4000,1,c	;volatile
  9644                           
  9645                           ;user.c: 73: T3CONbits.RD16 = 1;
  9646  002772  8EB1               	bsf	4017,7,c	;volatile
  9647                           
  9648                           ;user.c: 74: T3CONbits.TMR3CS = 0;
  9649  002774  92B1               	bcf	4017,1,c	;volatile
  9650                           
  9651                           ;user.c: 75: T3CONbits.T3CKPS1 = 1;
  9652  002776  8AB1               	bsf	4017,5,c	;volatile
  9653                           
  9654                           ;user.c: 76: T3CONbits.T3CKPS0 = 1;
  9655  002778  88B1               	bsf	4017,4,c	;volatile
  9656                           
  9657                           ;user.c: 77: T3CONbits.TMR3ON = 1;
  9658  00277A  80B1               	bsf	4017,0,c	;volatile
  9659                           
  9660                           ;user.c: 78: TMR3 = 64911;
  9661  00277C  0EFD               	movlw	253
  9662  00277E  6EB3               	movwf	4019,c	;volatile
  9663  002780  0E8F               	movlw	143
  9664  002782  6EB2               	movwf	4018,c	;volatile
  9665                           
  9666                           ;user.c: 82: ADCON1bits.ADFM = 1;
  9667  002784  8EC1               	bsf	4033,7,c	;volatile
  9668                           
  9669                           ;user.c: 83: ADCON1bits.ADCS2 = 0 ;
  9670  002786  9CC1               	bcf	4033,6,c	;volatile
  9671                           
  9672                           ;user.c: 84: ADCON0bits.ADCS = 0b10;
  9673  002788  50C2               	movf	4034,w,c	;volatile
  9674  00278A  0B3F               	andlw	-193
  9675  00278C  0980               	iorlw	128
  9676  00278E  6EC2               	movwf	4034,c	;volatile
  9677                           
  9678                           ;user.c: 85: ADCON0bits.ADON = 1;
  9679  002790  80C2               	bsf	4034,0,c	;volatile
  9680                           
  9681                           ;user.c: 86: RCONbits.IPEN = 1;
  9682  002792  8ED0               	bsf	4048,7,c	;volatile
  9683                           
  9684                           ;user.c: 87: INTCONbits.GIE = 1;
  9685  002794  8EF2               	bsf	intcon,7,c	;volatile
  9686                           
  9687                           ;user.c: 88: INTCONbits.PEIE = 1;
  9688  002796  8CF2               	bsf	intcon,6,c	;volatile
  9689                           
  9690                           ;user.c: 89: PIR1bits.ADIF = 0;
  9691  002798  9C9E               	bcf	3998,6,c	;volatile
  9692                           
  9693                           ;user.c: 90: IPR1bits.ADIP = 1;
  9694  00279A  8C9F               	bsf	3999,6,c	;volatile
  9695                           
  9696                           ;user.c: 91: PIE1bits.ADIE = 1;
  9697  00279C  8C9D               	bsf	3997,6,c	;volatile
  9698                           
  9699                           ;user.c: 92: ADCON1bits.PCFG = 0b0010 ;
  9700  00279E  50C1               	movf	4033,w,c	;volatile
  9701  0027A0  0BF0               	andlw	-16
  9702  0027A2  0902               	iorlw	2
  9703  0027A4  6EC1               	movwf	4033,c	;volatile
  9704                           
  9705                           ;user.c: 93: for (int i = 0; i < 20; i++) {
  9706  0027A6  0E00               	movlw	0
  9707  0027A8  6E23               	movwf	InitApp@i+1,c
  9708  0027AA  0E00               	movlw	0
  9709  0027AC  6E22               	movwf	InitApp@i,c
  9710  0027AE                     l3272:
  9711  0027AE  FFFF               	dw	65535	; assembler added errata NOP
  9712  0027B0  BE23               	btfsc	InitApp@i+1,7,c
  9713  0027B2  D006               	goto	l368
  9714  0027B4  5023               	movf	InitApp@i+1,w,c
  9715  0027B6  E109               	bnz	l370
  9716  0027B8  0E14               	movlw	20
  9717  0027BA  5C22               	subwf	InitApp@i,w,c
  9718  0027BC  B0D8               	btfsc	status,0,c
  9719  0027BE  D005               	goto	l370
  9720  0027C0                     l368:
  9721  0027C0  FFFF               	dw	65535	; assembler added errata NOP
  9722                           
  9723                           ;user.c: 94: __nop();
  9724  0027C2  F000               	nop	
  9725  0027C4  4A22               	infsnz	InitApp@i,f,c
  9726  0027C6  2A23               	incf	InitApp@i+1,f,c
  9727  0027C8  D7F2               	goto	l3272
  9728  0027CA                     l370:
  9729  0027CA  FFFF               	dw	65535	; assembler added errata NOP
  9730  0027CC  0012               	return		;funcret
  9731  0027CE  FFFF               	dw	65535	; errata NOP
  9732  0027D0                     __end_of_InitApp:
  9733                           	opt stack 0
  9734                           tblptru	equ	0xFF8
  9735                           tblptrh	equ	0xFF7
  9736                           tblptrl	equ	0xFF6
  9737                           tablat	equ	0xFF5
  9738                           prodh	equ	0xFF4
  9739                           prodl	equ	0xFF3
  9740                           intcon	equ	0xFF2
  9741                           intcon2	equ	0xFF1
  9742                           indf0	equ	0xFEF
  9743                           postinc0	equ	0xFEE
  9744                           fsr0h	equ	0xFEA
  9745                           fsr0l	equ	0xFE9
  9746                           wreg	equ	0xFE8
  9747                           postdec1	equ	0xFE5
  9748                           fsr1l	equ	0xFE1
  9749                           indf2	equ	0xFDF
  9750                           postinc2	equ	0xFDE
  9751                           postdec2	equ	0xFDD
  9752                           fsr2h	equ	0xFDA
  9753                           fsr2l	equ	0xFD9
  9754                           status	equ	0xFD8
  9755                           
  9756 ;; *************** function _ConfigureOscillator *****************
  9757 ;; Defined at:
  9758 ;;		line 24 in file "system.c"
  9759 ;; Parameters:    Size  Location     Type
  9760 ;;		None
  9761 ;; Auto vars:     Size  Location     Type
  9762 ;;		None
  9763 ;; Return value:  Size  Location     Type
  9764 ;;                  1    wreg      void 
  9765 ;; Registers used:
  9766 ;;		None
  9767 ;; Tracked objects:
  9768 ;;		On entry : 0/0
  9769 ;;		On exit  : 0/0
  9770 ;;		Unchanged: 0/0
  9771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9772 ;;      Params:         0       0       0       0       0       0       0
  9773 ;;      Locals:         0       0       0       0       0       0       0
  9774 ;;      Temps:          0       0       0       0       0       0       0
  9775 ;;      Totals:         0       0       0       0       0       0       0
  9776 ;;Total ram usage:        0 bytes
  9777 ;; Hardware stack levels used:    1
  9778 ;; Hardware stack levels required when called:    2
  9779 ;; This function calls:
  9780 ;;		Nothing
  9781 ;; This function is called by:
  9782 ;;		_main
  9783 ;; This function uses a non-reentrant model
  9784 ;;
  9785                           
  9786                           	psect	text28
  9787  002E7C                     __ptext28:
  9788                           	opt stack 0
  9789  002E7C                     _ConfigureOscillator:
  9790                           	opt stack 0
  9791  002E7C  FFFF               	dw	65535	; assembler added errata NOP
  9792                           
  9793                           ;incstack = 0
  9794  002E7E  0012               	return		;funcret
  9795  002E80  FFFF               	dw	65535	; errata NOP
  9796  002E82                     __end_of_ConfigureOscillator:
  9797                           	opt stack 0
  9798                           tblptru	equ	0xFF8
  9799                           tblptrh	equ	0xFF7
  9800                           tblptrl	equ	0xFF6
  9801                           tablat	equ	0xFF5
  9802                           prodh	equ	0xFF4
  9803                           prodl	equ	0xFF3
  9804                           intcon	equ	0xFF2
  9805                           intcon2	equ	0xFF1
  9806                           indf0	equ	0xFEF
  9807                           postinc0	equ	0xFEE
  9808                           fsr0h	equ	0xFEA
  9809                           fsr0l	equ	0xFE9
  9810                           wreg	equ	0xFE8
  9811                           postdec1	equ	0xFE5
  9812                           fsr1l	equ	0xFE1
  9813                           indf2	equ	0xFDF
  9814                           postinc2	equ	0xFDE
  9815                           postdec2	equ	0xFDD
  9816                           fsr2h	equ	0xFDA
  9817                           fsr2l	equ	0xFD9
  9818                           status	equ	0xFD8
  9819                           
  9820 ;; *************** function _low_isr *****************
  9821 ;; Defined at:
  9822 ;;		line 94 in file "interrupts.c"
  9823 ;; Parameters:    Size  Location     Type
  9824 ;;		None
  9825 ;; Auto vars:     Size  Location     Type
  9826 ;;		None
  9827 ;; Return value:  Size  Location     Type
  9828 ;;                  1    wreg      void 
  9829 ;; Registers used:
  9830 ;;		None
  9831 ;; Tracked objects:
  9832 ;;		On entry : 0/0
  9833 ;;		On exit  : 0/0
  9834 ;;		Unchanged: 0/0
  9835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9836 ;;      Params:         0       0       0       0       0       0       0
  9837 ;;      Locals:         0       0       0       0       0       0       0
  9838 ;;      Temps:         17       0       0       0       0       0       0
  9839 ;;      Totals:        17       0       0       0       0       0       0
  9840 ;;Total ram usage:       17 bytes
  9841 ;; Hardware stack levels used:    1
  9842 ;; Hardware stack levels required when called:    1
  9843 ;; This function calls:
  9844 ;;		Nothing
  9845 ;; This function is called by:
  9846 ;;		Interrupt level 1
  9847 ;; This function uses a non-reentrant model
  9848 ;;
  9849                           
  9850                           	psect	intcodelo
  9851  000018                     __pintcodelo:
  9852                           	opt stack 0
  9853  000018                     _low_isr:
  9854                           	opt stack 0
  9855  000018  FFFF               	dw	65535	; assembler added errata NOP
  9856                           
  9857                           ;incstack = 0
  9858  00001A  805D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  9859  00001C  CFD8 F011          	movff	status,??_low_isr
  9860  000020  CFE8 F012          	movff	wreg,??_low_isr+1
  9861  000024  CFE0 F013          	movff	bsr,??_low_isr+2
  9862  000028  CFFA F014          	movff	pclath,??_low_isr+3
  9863  00002C  CFFB F015          	movff	pclatu,??_low_isr+4
  9864  000030  CFE9 F016          	movff	fsr0l,??_low_isr+5
  9865  000034  CFEA F017          	movff	fsr0h,??_low_isr+6
  9866  000038  CFE1 F018          	movff	fsr1l,??_low_isr+7
  9867  00003C  CFE2 F019          	movff	fsr1h,??_low_isr+8
  9868  000040  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  9869  000044  CFDA F01B          	movff	fsr2h,??_low_isr+10
  9870  000048  CFF3 F01C          	movff	prodl,??_low_isr+11
  9871  00004C  CFF4 F01D          	movff	prodh,??_low_isr+12
  9872  000050  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  9873  000054  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  9874  000058  CFF8 F020          	movff	tblptru,??_low_isr+15
  9875  00005C  CFF5 F021          	movff	tablat,??_low_isr+16
  9876  000060  C021  FFF5         	movff	??_low_isr+16,tablat
  9877  000064  C020  FFF8         	movff	??_low_isr+15,tblptru
  9878  000068  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  9879  00006C  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  9880  000070  C01D  FFF4         	movff	??_low_isr+12,prodh
  9881  000074  C01C  FFF3         	movff	??_low_isr+11,prodl
  9882  000078  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  9883  00007C  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  9884  000080  C019  FFE2         	movff	??_low_isr+8,fsr1h
  9885  000084  C018  FFE1         	movff	??_low_isr+7,fsr1l
  9886  000088  C017  FFEA         	movff	??_low_isr+6,fsr0h
  9887  00008C  C016  FFE9         	movff	??_low_isr+5,fsr0l
  9888  000090  C015  FFFB         	movff	??_low_isr+4,pclatu
  9889  000094  C014  FFFA         	movff	??_low_isr+3,pclath
  9890  000098  C013  FFE0         	movff	??_low_isr+2,bsr
  9891  00009C  C012  FFE8         	movff	??_low_isr+1,wreg
  9892  0000A0  C011  FFD8         	movff	??_low_isr,status
  9893  0000A4  905D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9894  0000A6  0010               	retfie	
  9895  0000A8  FFFF               	dw	65535	; errata NOP
  9896  0000AA                     __end_of_low_isr:
  9897                           	opt stack 0
  9898                           pclatu	equ	0xFFB
  9899                           pclath	equ	0xFFA
  9900                           tblptru	equ	0xFF8
  9901                           tblptrh	equ	0xFF7
  9902                           tblptrl	equ	0xFF6
  9903                           tablat	equ	0xFF5
  9904                           prodh	equ	0xFF4
  9905                           prodl	equ	0xFF3
  9906                           intcon	equ	0xFF2
  9907                           intcon2	equ	0xFF1
  9908                           indf0	equ	0xFEF
  9909                           postinc0	equ	0xFEE
  9910                           fsr0h	equ	0xFEA
  9911                           fsr0l	equ	0xFE9
  9912                           wreg	equ	0xFE8
  9913                           postdec1	equ	0xFE5
  9914                           fsr1h	equ	0xFE2
  9915                           fsr1l	equ	0xFE1
  9916                           bsr	equ	0xFE0
  9917                           indf2	equ	0xFDF
  9918                           postinc2	equ	0xFDE
  9919                           postdec2	equ	0xFDD
  9920                           fsr2h	equ	0xFDA
  9921                           fsr2l	equ	0xFD9
  9922                           status	equ	0xFD8
  9923                           
  9924 ;; *************** function _high_isr *****************
  9925 ;; Defined at:
  9926 ;;		line 39 in file "interrupts.c"
  9927 ;; Parameters:    Size  Location     Type
  9928 ;;		None
  9929 ;; Auto vars:     Size  Location     Type
  9930 ;;		None
  9931 ;; Return value:  Size  Location     Type
  9932 ;;                  1    wreg      void 
  9933 ;; Registers used:
  9934 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9935 ;; Tracked objects:
  9936 ;;		On entry : 0/0
  9937 ;;		On exit  : 0/0
  9938 ;;		Unchanged: 0/0
  9939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9940 ;;      Params:         0       0       0       0       0       0       0
  9941 ;;      Locals:         0       0       0       0       0       0       0
  9942 ;;      Temps:         16       0       0       0       0       0       0
  9943 ;;      Totals:        16       0       0       0       0       0       0
  9944 ;;Total ram usage:       16 bytes
  9945 ;; Hardware stack levels used:    1
  9946 ;; This function calls:
  9947 ;;		Nothing
  9948 ;; This function is called by:
  9949 ;;		Interrupt level 2
  9950 ;; This function uses a non-reentrant model
  9951 ;;
  9952                           
  9953                           	psect	intcode
  9954  000008                     __pintcode:
  9955                           	opt stack 0
  9956  000008                     _high_isr:
  9957                           	opt stack 0
  9958  000008  FFFF               	dw	65535	; assembler added errata NOP
  9959                           
  9960                           ;incstack = 0
  9961  00000A  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9962  00000C  CFFA F003          	movff	pclath,??_high_isr+2
  9963  000010  CFFB F004          	movff	pclatu,??_high_isr+3
  9964  000014  EF46  F011         	goto	int_func
  9965                           pclatu	equ	0xFFB
  9966                           pclath	equ	0xFFA
  9967                           tblptru	equ	0xFF8
  9968                           tblptrh	equ	0xFF7
  9969                           tblptrl	equ	0xFF6
  9970                           tablat	equ	0xFF5
  9971                           prodh	equ	0xFF4
  9972                           prodl	equ	0xFF3
  9973                           intcon	equ	0xFF2
  9974                           intcon2	equ	0xFF1
  9975                           indf0	equ	0xFEF
  9976                           postinc0	equ	0xFEE
  9977                           fsr0h	equ	0xFEA
  9978                           fsr0l	equ	0xFE9
  9979                           wreg	equ	0xFE8
  9980                           postdec1	equ	0xFE5
  9981                           fsr1h	equ	0xFE2
  9982                           fsr1l	equ	0xFE1
  9983                           bsr	equ	0xFE0
  9984                           indf2	equ	0xFDF
  9985                           postinc2	equ	0xFDE
  9986                           postdec2	equ	0xFDD
  9987                           fsr2h	equ	0xFDA
  9988                           fsr2l	equ	0xFD9
  9989                           status	equ	0xFD8
  9990                           
  9991                           	psect	intcode_body
  9992  00228C                     __pintcode_body:
  9993                           	opt stack 25
  9994  00228C                     int_func:
  9995                           	opt stack 25
  9996  00228C  FFFF               	dw	65535	; errata NOP
  9997  00228E  CFE9 F005          	movff	fsr0l,??_high_isr+4
  9998  002292  CFEA F006          	movff	fsr0h,??_high_isr+5
  9999  002296  CFE1 F007          	movff	fsr1l,??_high_isr+6
 10000  00229A  CFE2 F008          	movff	fsr1h,??_high_isr+7
 10001  00229E  CFD9 F009          	movff	fsr2l,??_high_isr+8
 10002  0022A2  CFDA F00A          	movff	fsr2h,??_high_isr+9
 10003  0022A6  CFF3 F00B          	movff	prodl,??_high_isr+10
 10004  0022AA  CFF4 F00C          	movff	prodh,??_high_isr+11
 10005  0022AE  CFF6 F00D          	movff	tblptrl,??_high_isr+12
 10006  0022B2  CFF7 F00E          	movff	tblptrh,??_high_isr+13
 10007  0022B6  CFF8 F00F          	movff	tblptru,??_high_isr+14
 10008  0022BA  CFF5 F010          	movff	tablat,??_high_isr+15
 10009                           
 10010                           ;interrupts.c: 49: if (PIR1bits.ADIF == 1) {
 10011  0022BE  AC9E               	btfss	3998,6,c	;volatile
 10012  0022C0  D00F               	goto	i2l3800
 10013                           
 10014                           ;interrupts.c: 51: __nop();
 10015  0022C2  F000               	nop	
 10016                           
 10017                           ;interrupts.c: 52: resultadoadc = (ADRESH << 8) + ADRESL;
 10018  0022C4  50C4               	movf	4036,w,c	;volatile
 10019  0022C6  6E02               	movwf	(??_high_isr+1)& (0+255),c
 10020  0022C8  6A01               	clrf	??_high_isr& (0+255),c
 10021  0022CA  50C3               	movf	4035,w,c	;volatile
 10022  0022CC  2401               	addwf	??_high_isr,w,c
 10023  0022CE  6E4C               	movwf	_resultadoadc,c
 10024  0022D0  0E00               	movlw	0
 10025  0022D2  2002               	addwfc	??_high_isr+1,w,c
 10026  0022D4  6E4D               	movwf	_resultadoadc+1,c
 10027                           
 10028                           ;interrupts.c: 53: conversionadc = 1;
 10029  0022D6  0E00               	movlw	0
 10030  0022D8  6E3F               	movwf	_conversionadc+1,c
 10031  0022DA  0E01               	movlw	1
 10032  0022DC  6E3E               	movwf	_conversionadc,c
 10033                           
 10034                           ;interrupts.c: 54: PIR1bits.ADIF = 0;
 10035  0022DE  9C9E               	bcf	3998,6,c	;volatile
 10036  0022E0                     i2l3800:
 10037  0022E0  FFFF               	dw	65535	; assembler added errata NOP
 10038                           
 10039                           ;interrupts.c: 55: }
 10040                           ;interrupts.c: 57: if (PIR1bits.RCIF == 1) {
 10041  0022E2  AA9E               	btfss	3998,5,c	;volatile
 10042  0022E4  D026               	goto	i2l3818
 10043                           
 10044                           ;interrupts.c: 58: dato = RCREG;
 10045  0022E6  CFAE F056          	movff	4014,_dato	;volatile
 10046                           
 10047                           ;interrupts.c: 59: if (dato != '\r') {
 10048  0022EA  0E0D               	movlw	13
 10049  0022EC  1856               	xorwf	_dato,w,c
 10050  0022EE  B4D8               	btfsc	status,2,c
 10051  0022F0  D010               	goto	i2l3812
 10052                           
 10053                           ;interrupts.c: 60: comando[n] = dato;
 10054  0022F2  0E46               	movlw	low _comando
 10055  0022F4  0100               	movlb	0	; () banked
 10056  0022F6  25D4               	addwf	_n& (0+255),w,b
 10057  0022F8  6ED9               	movwf	fsr2l,c
 10058  0022FA  0E01               	movlw	high _comando
 10059  0022FC  0100               	movlb	0	; () banked
 10060  0022FE  21D5               	addwfc	(_n+1)& (0+255),w,b
 10061  002300  6EDA               	movwf	fsr2h,c
 10062  002302  C056  FFDF         	movff	_dato,indf2
 10063                           
 10064                           ; BSR set to: 0
 10065                           ;interrupts.c: 61: n++;
 10066  002306  0100               	movlb	0	; () banked
 10067  002308  4BD4               	infsnz	_n& (0+255),f,b
 10068  00230A  2BD5               	incf	(_n+1)& (0+255),f,b
 10069                           
 10070                           ; BSR set to: 0
 10071                           ;interrupts.c: 62: tama++;
 10072  00230C  4A54               	infsnz	_tama,f,c
 10073  00230E  2A55               	incf	_tama+1,f,c
 10074                           
 10075                           ;interrupts.c: 63: } else if (dato == '\r') {
 10076  002310  D00E               	goto	i2l3816
 10077  002312                     i2l3812:
 10078  002312  FFFF               	dw	65535	; assembler added errata NOP
 10079  002314  0E0D               	movlw	13
 10080  002316  1856               	xorwf	_dato,w,c
 10081  002318  A4D8               	btfss	status,2,c
 10082  00231A  D009               	goto	i2l3816
 10083                           
 10084                           ;interrupts.c: 64: n = 0;
 10085  00231C  0E00               	movlw	0
 10086  00231E  0100               	movlb	0	; () banked
 10087  002320  6FD5               	movwf	(_n+1)& (0+255),b
 10088  002322  0E00               	movlw	0
 10089  002324  6FD4               	movwf	_n& (0+255),b
 10090                           
 10091                           ;interrupts.c: 65: enter = 1;
 10092  002326  0E00               	movlw	0
 10093  002328  6E41               	movwf	_enter+1,c
 10094  00232A  0E01               	movlw	1
 10095  00232C  6E40               	movwf	_enter,c
 10096  00232E                     i2l3816:
 10097  00232E  FFFF               	dw	65535	; assembler added errata NOP
 10098                           
 10099                           ;interrupts.c: 66: }
 10100                           ;interrupts.c: 68: PIR1bits.RCIF = 0;
 10101  002330  9A9E               	bcf	3998,5,c	;volatile
 10102  002332                     i2l3818:
 10103  002332  FFFF               	dw	65535	; assembler added errata NOP
 10104                           
 10105                           ;interrupts.c: 69: }
 10106                           ;interrupts.c: 70: if (PIR2bits.TMR3IF == 1) {
 10107  002334  A2A1               	btfss	4001,1,c	;volatile
 10108  002336  D009               	goto	i2l3824
 10109                           
 10110                           ;interrupts.c: 71: led = 1;
 10111  002338  0E00               	movlw	0
 10112  00233A  6E45               	movwf	_led+1,c
 10113  00233C  0E01               	movlw	1
 10114  00233E  6E44               	movwf	_led,c
 10115                           
 10116                           ;interrupts.c: 72: TMR3 = 3036;
 10117  002340  0E0B               	movlw	11
 10118  002342  6EB3               	movwf	4019,c	;volatile
 10119  002344  0EDC               	movlw	220
 10120  002346  6EB2               	movwf	4018,c	;volatile
 10121                           
 10122                           ;interrupts.c: 73: PIR2bits.TMR3IF = 0;
 10123  002348  92A1               	bcf	4001,1,c	;volatile
 10124  00234A                     i2l3824:
 10125  00234A  FFFF               	dw	65535	; assembler added errata NOP
 10126                           
 10127                           ;interrupts.c: 74: }
 10128                           ;interrupts.c: 75: if (PIR1bits.TMR1IF == 1) {
 10129  00234C  A09E               	btfss	3998,0,c	;volatile
 10130  00234E  D00B               	goto	i2l3830
 10131                           
 10132                           ;interrupts.c: 76: PIR1bits.TMR1IF = 0;
 10133  002350  909E               	bcf	3998,0,c	;volatile
 10134                           
 10135                           ;interrupts.c: 77: __nop();
 10136  002352  F000               	nop	
 10137                           
 10138                           ;interrupts.c: 78: visualizacion = 1;
 10139  002354  0E00               	movlw	0
 10140  002356  0100               	movlb	0	; () banked
 10141  002358  6FE5               	movwf	(_visualizacion+1)& (0+255),b
 10142  00235A  0E01               	movlw	1
 10143  00235C  6FE4               	movwf	_visualizacion& (0+255),b
 10144                           
 10145                           ;interrupts.c: 79: TMR1 = 3036;
 10146  00235E  0E0B               	movlw	11
 10147  002360  6ECF               	movwf	4047,c	;volatile
 10148  002362  0EDC               	movlw	220
 10149  002364  6ECE               	movwf	4046,c	;volatile
 10150  002366                     i2l3830:
 10151  002366  FFFF               	dw	65535	; assembler added errata NOP
 10152                           
 10153                           ;interrupts.c: 81: }
 10154                           ;interrupts.c: 82: if (INTCONbits.TMR0IF == 1) {
 10155  002368  A4F2               	btfss	intcon,2,c	;volatile
 10156  00236A  D00A               	goto	i2l55
 10157                           
 10158                           ;interrupts.c: 83: INTCONbits.TMR0IF = 0;
 10159  00236C  94F2               	bcf	intcon,2,c	;volatile
 10160                           
 10161                           ;interrupts.c: 84: muestreo = 1;
 10162  00236E  0E00               	movlw	0
 10163  002370  6E49               	movwf	_muestreo+1,c
 10164  002372  0E01               	movlw	1
 10165  002374  6E48               	movwf	_muestreo,c
 10166                           
 10167                           ;interrupts.c: 85: __nop();
 10168  002376  F000               	nop	
 10169                           
 10170                           ;interrupts.c: 86: TMR0 = 65458;
 10171  002378  0EFF               	movlw	255
 10172  00237A  6ED7               	movwf	4055,c	;volatile
 10173  00237C  0EB2               	movlw	178
 10174  00237E  6ED6               	movwf	4054,c	;volatile
 10175  002380                     i2l55:
 10176  002380  FFFF               	dw	65535	; assembler added errata NOP
 10177  002382  C010  FFF5         	movff	??_high_isr+15,tablat
 10178  002386  C00F  FFF8         	movff	??_high_isr+14,tblptru
 10179  00238A  C00E  FFF7         	movff	??_high_isr+13,tblptrh
 10180  00238E  C00D  FFF6         	movff	??_high_isr+12,tblptrl
 10181  002392  C00C  FFF4         	movff	??_high_isr+11,prodh
 10182  002396  C00B  FFF3         	movff	??_high_isr+10,prodl
 10183  00239A  C00A  FFDA         	movff	??_high_isr+9,fsr2h
 10184  00239E  C009  FFD9         	movff	??_high_isr+8,fsr2l
 10185  0023A2  C008  FFE2         	movff	??_high_isr+7,fsr1h
 10186  0023A6  C007  FFE1         	movff	??_high_isr+6,fsr1l
 10187  0023AA  C006  FFEA         	movff	??_high_isr+5,fsr0h
 10188  0023AE  C005  FFE9         	movff	??_high_isr+4,fsr0l
 10189  0023B2  C004  FFFB         	movff	??_high_isr+3,pclatu
 10190  0023B6  C003  FFFA         	movff	??_high_isr+2,pclath
 10191  0023BA  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10192  0023BC  0011               	retfie		f
 10193  0023BE  FFFF               	dw	65535	; errata NOP
 10194  0023C0                     __end_of_high_isr:
 10195                           	opt stack 0
 10196                           pclatu	equ	0xFFB
 10197                           pclath	equ	0xFFA
 10198                           tblptru	equ	0xFF8
 10199                           tblptrh	equ	0xFF7
 10200                           tblptrl	equ	0xFF6
 10201                           tablat	equ	0xFF5
 10202                           prodh	equ	0xFF4
 10203                           prodl	equ	0xFF3
 10204                           intcon	equ	0xFF2
 10205                           intcon2	equ	0xFF1
 10206                           indf0	equ	0xFEF
 10207                           postinc0	equ	0xFEE
 10208                           fsr0h	equ	0xFEA
 10209                           fsr0l	equ	0xFE9
 10210                           wreg	equ	0xFE8
 10211                           postdec1	equ	0xFE5
 10212                           fsr1h	equ	0xFE2
 10213                           fsr1l	equ	0xFE1
 10214                           bsr	equ	0xFE0
 10215                           indf2	equ	0xFDF
 10216                           postinc2	equ	0xFDE
 10217                           postdec2	equ	0xFDD
 10218                           fsr2h	equ	0xFDA
 10219                           fsr2l	equ	0xFD9
 10220                           status	equ	0xFD8
 10221                           pclatu	equ	0xFFB
 10222                           pclath	equ	0xFFA
 10223                           tblptru	equ	0xFF8
 10224                           tblptrh	equ	0xFF7
 10225                           tblptrl	equ	0xFF6
 10226                           tablat	equ	0xFF5
 10227                           prodh	equ	0xFF4
 10228                           prodl	equ	0xFF3
 10229                           intcon	equ	0xFF2
 10230                           intcon2	equ	0xFF1
 10231                           indf0	equ	0xFEF
 10232                           postinc0	equ	0xFEE
 10233                           fsr0h	equ	0xFEA
 10234                           fsr0l	equ	0xFE9
 10235                           wreg	equ	0xFE8
 10236                           postdec1	equ	0xFE5
 10237                           fsr1h	equ	0xFE2
 10238                           fsr1l	equ	0xFE1
 10239                           bsr	equ	0xFE0
 10240                           indf2	equ	0xFDF
 10241                           postinc2	equ	0xFDE
 10242                           postdec2	equ	0xFDD
 10243                           fsr2h	equ	0xFDA
 10244                           fsr2l	equ	0xFD9
 10245                           status	equ	0xFD8
 10246                           
 10247                           	psect	rparam
 10248  0000                     pclatu	equ	0xFFB
 10249                           pclath	equ	0xFFA
 10250                           tblptru	equ	0xFF8
 10251                           tblptrh	equ	0xFF7
 10252                           tblptrl	equ	0xFF6
 10253                           tablat	equ	0xFF5
 10254                           prodh	equ	0xFF4
 10255                           prodl	equ	0xFF3
 10256                           intcon	equ	0xFF2
 10257                           intcon2	equ	0xFF1
 10258                           indf0	equ	0xFEF
 10259                           postinc0	equ	0xFEE
 10260                           fsr0h	equ	0xFEA
 10261                           fsr0l	equ	0xFE9
 10262                           wreg	equ	0xFE8
 10263                           postdec1	equ	0xFE5
 10264                           fsr1h	equ	0xFE2
 10265                           fsr1l	equ	0xFE1
 10266                           bsr	equ	0xFE0
 10267                           indf2	equ	0xFDF
 10268                           postinc2	equ	0xFDE
 10269                           postdec2	equ	0xFDD
 10270                           fsr2h	equ	0xFDA
 10271                           fsr2l	equ	0xFD9
 10272                           status	equ	0xFD8
 10273                           
 10274                           	psect	temp
 10275  00005D                     btemp:
 10276                           	opt stack 0
 10277  00005D                     	ds	1
 10278  0000                     int$flags	set	btemp
 10279                           pclatu	equ	0xFFB
 10280                           pclath	equ	0xFFA
 10281                           tblptru	equ	0xFF8
 10282                           tblptrh	equ	0xFF7
 10283                           tblptrl	equ	0xFF6
 10284                           tablat	equ	0xFF5
 10285                           prodh	equ	0xFF4
 10286                           prodl	equ	0xFF3
 10287                           intcon	equ	0xFF2
 10288                           intcon2	equ	0xFF1
 10289                           indf0	equ	0xFEF
 10290                           postinc0	equ	0xFEE
 10291                           fsr0h	equ	0xFEA
 10292                           fsr0l	equ	0xFE9
 10293                           wreg	equ	0xFE8
 10294                           postdec1	equ	0xFE5
 10295                           fsr1h	equ	0xFE2
 10296                           fsr1l	equ	0xFE1
 10297                           bsr	equ	0xFE0
 10298                           indf2	equ	0xFDF
 10299                           postinc2	equ	0xFDE
 10300                           postdec2	equ	0xFDD
 10301                           fsr2h	equ	0xFDA
 10302                           fsr2l	equ	0xFD9
 10303                           status	equ	0xFD8


Data Sizes:
    Strings     94
    Constant    406
    Data        22
    BSS         171
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     59      92
    BANK0           128     53     118
    BANK1           256     26     121
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> INFO(CODE[5]), VISUALIZACION3(CODE[15]), VISUALIZACION2(CODE[15]), VISUALIZACION1(CODE[15]), 
		 -> MUESTREO3(CODE[10]), MUESTREO2(CODE[10]), MUESTREO1(CODE[10]), MODORAPIDO(CODE[11]), 
		 -> MODONORMAL(CODE[11]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 25
		 -> comando(BANK1[25]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_6(CODE[3]), STR_5(CODE[21]), STR_4(CODE[16]), STR_3(CODE[21]), 
		 -> STR_2(CODE[16]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 30
		 -> salida(BANK1[30]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    enviarTramaSE@datos	PTR unsigned char  size(2) Largest target is 30
		 -> salida(BANK1[30]), 

    enviarTrama@datos	PTR unsigned char  size(2) Largest target is 31
		 -> visualizacionnoaplica(CODE[24]), muestreonoaplica(CODE[19]), estadoactualrapido(CODE[24]), estadoactualnormal(CODE[24]), 
		 -> salida(BANK1[30]), noreconocido(CODE[22]), saludo(CODE[31]), comando(BANK1[25]), 


Critical Paths under _main in COMRAM

    _main->___ftmul
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _conversionADMues->___awdiv
    ___awdiv->___awmod
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___ftmul

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   78321
                                             50 BANK0      3     3      0
                _ConfigureOscillator
                            _InitApp
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                   _conversionADMues
                        _enviarTrama
                      _enviarTramaSE
                          _ledestado
                            _sprintf
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4    1243
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             45    38      7   58535
                                             37 BANK0     13     6      7
                                              0 BANK1     26    26      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   13403
                                              9 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   13124
                                              9 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3004
                                             47 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5436
                                             53 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1819
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     608
                                             33 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     827
                                             33 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2703
                                             41 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     848
                                             46 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     857
                                             33 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     602
                                             16 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4535
                                             31 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4171
                                             19 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                             33 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     660
                                             33 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _ledestado                                            3     1      2     150
                                             33 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _enviarTramaSE                                        2     0      2     173
                                             33 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _enviarTrama                                          2     0      2     813
                                             33 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _conversionADMues                                     8     6      2    2975
                                             47 COMRAM     8     6      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2447
                                             39 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3212
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2734
                                             41 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                             33 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              2     2      0      46
                                             33 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _conversionADMues
     ___awdiv
       ___awmod (ARG)
   _enviarTrama
   _enviarTramaSE
   _ledestado
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _strcmp

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1A      79       7       47.3%
BITBANK0            80      0       0       4        0.0%
BANK0               80     35      76       5       92.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3B      5C       1       73.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14B      15        0.0%
DATA                 0      0     14B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Oct 13 14:32:46 2017

                                                                        _a 00C2  
                                                                        _b 00C4  
                                                                        _d 00C6  
                                                                        _e 00C8  
                                                                        _g 00CA  
                                                                        _i 0042  
                                                                        _n 00D4  
                                                                       _h0 00CC  
                                                                       _h1 00CE  
                                                                       _h2 00D0  
                                                             ___awdiv@sign 002D  
                                                                       bsr 000FE0  
                                                      ___wmul@multiplicand 0032  
                                                             __CFG_CP0$OFF 000000  
                                                             __CFG_CP1$OFF 000000  
                                                             __CFG_CP2$OFF 000000  
                                                             __CFG_CP3$OFF 000000  
                                                              __CFG_OSC$HS 000000  
                                                             ___ftadd@exp1 009E  
                                                             ___ftadd@exp2 009D  
                                                             ___ftadd@sign 009C  
                                                                      l300 1F1E  
                                                                      l301 1F30  
                                                                      l303 1F36  
                                                                      l306 1FA2  
                                                                      l307 1FB4  
                                                                      l244 1376  
                                                                      l309 1FBA  
                                                                      l229 1066  
                                                                      l270 2B06  
                                                                      l264 2DAE  
                                                                      l249 13B0  
                                                                      l370 27CA  
                                                                      l274 2B3E  
                                                                      l293 1E90  
                                                                      l277 2B48  
                                                                      l285 2DCE  
                                                                      l429 09C0  
                                                                      l294 1EA2  
                                                                      l368 27C0  
                                                                      l296 1EA8  
                                                                      l800 1B4E  
                                                                      l712 2704  
                                                                      l721 26F2  
                                                                      l298 200C  
                                                                      l811 211C  
                                                                      l900 2A42  
                                                                      l468 0800  
                                                                      l742 288E  
                                                                      l910 2BB2  
                                                                      l399 1960  
                                                                      l808 2152  
                                                                      l816 25FC  
                                                                      l840 24EA  
                                                                      l753 286E  
                                                                      l825 25EA  
                                                                      l834 292A  
                                                                      l850 2E30  
                                                                      l818 2560  
                                                                      l819 258A  
                                                                      l780 1A0E  
                                                                      l861 2286  
                                                                      l782 1A3C  
                                                                      l791 1B22  
                                                                      l776 19D0  
                                                                      l777 1BF0  
                                                             __CFG_CPB$OFF 000000  
                                                             __CFG_CPD$OFF 000000  
                                                             __CFG_BOR$OFF 000000  
                                                                      _bin 00B5  
                                                                      _led 0044  
                                                                      _tam 0100  
                                                             __CFG_BORV$20 000000  
                                                             ___awmod@sign 0027  
                                                                      wreg 000FE8  
                                                             __CFG_LVP$OFF 000000  
                                                             ___ftdiv@cntr 0092  
                                                             ___ftdiv@sign 0097  
                                                             __CFG_WDT$OFF 000000  
                                                                     l3302 2CA2  
                                                                     l4200 241A  
                                                                     l3304 2CAC  
                                                                     l5012 1F74  
                                                                     l4132 1A1E  
                                                                     l4300 2A9C  
                                                                     l3308 2CE2  
                                                                     l4126 19E0  
                                                                     l4214 245E  
                                                                     l5110 0E0C  
                                                                     l3272 27AE  
                                                                     l4080 27E2  
                                                                     l5024 1FBE  
                                                                     l4160 1AD4  
                                                                     l4312 2ACE  
                                                                     l4304 2AB2  
                                                                     l4224 2494  
                                                                     l5104 0DEE  
                                                                     l4250 2958  
                                                                     l3282 2AE0  
                                                                     l4154 1AA6  
                                                                     l4138 1A30  
                                                                     l4218 2476  
                                                                     l5210 1176  
                                                                     l4092 2836  
                                                                     l4084 27F2  
                                                                     l5052 2076  
                                                                     l4260 2980  
                                                                     l4244 2946  
                                                                     l4156 1AB6  
                                                                     l4148 1A76  
                                                                     l4500 26DC  
                                                                     l4308 2ABE  
                                                                     l4228 24AC  
                                                                     l5212 1182  
                                                                     l5132 0F48  
                                                                     l5124 0E84  
                                                                     l5116 0E2A  
                                                                     l4094 2856  
                                                                     l4086 27FE  
                                                                     l3286 2B10  
                                                                     l4174 1B7A  
                                                                     l4166 1B04  
                                                                     l4158 1AC6  
                                                                     l4502 26EA  
                                                                     l4430 25A6  
                                                                     l4334 1E18  
                                                                     l4326 1D48  
                                                                     l5206 1148  
                                                                     l5150 0FB8  
                                                                     l4096 2862  
                                                                     l4088 281E  
                                                                     l5072 20D8  
                                                                     l5048 2060  
                                                                     l4256 2970  
                                                                     l4272 29AA  
                                                                     l4520 28F8  
                                                                     l4184 1BCA  
                                                                     l4168 1B14  
                                                                     l4440 25D4  
                                                                     l5320 1492  
                                                                     l5312 146E  
                                                                     l5160 0FE2  
                                                                     l5136 0F72  
                                                                     l5128 0EE6  
                                                                     l4258 297A  
                                                                     l3730 2DD8  
                                                                     l4610 2B7C  
                                                                     l4442 25E2  
                                                                     l4434 25B8  
                                                                     l4354 1706  
                                                                     l5250 132A  
                                                                     l5242 12BC  
                                                                     l5226 11FA  
                                                                     l5154 0FCA  
                                                                     l5138 0F80  
                                                                     l4276 29BA  
                                                                     l4268 299E  
                                                                     l4516 28C6  
                                                                     l4508 2D16  
                                                                     l4620 2C42  
                                                                     l4436 25C0  
                                                                     l4292 2A7C  
                                                                     l4196 240A  
                                                                     l4372 1932  
                                                                     l4348 164E  
                                                                     l5228 1204  
                                                                     l5180 1050  
                                                                     l5172 1024  
                                                                     l5164 0FF8  
                                                                     l5148 0FAE  
                                                                     l5094 2D5A  
                                                                     l3726 2DC0  
                                                                     l4526 2926  
                                                                     l4614 2BA2  
                                                                     l4606 2B68  
                                                                     l4622 2C50  
                                                                     l4470 265E  
                                                                     l4366 186C  
                                                                     l4358 1730  
                                                                     l4710 03FA  
                                                                     l4702 0388  
                                                                     l4630 00C0  
                                                                     l5270 138C  
                                                                     l5262 1360  
                                                                     l5246 12CE  
                                                                     l4608 2B76  
                                                                     l4296 2A8C  
                                                                     l4288 2A6E  
                                                                     l4384 2E5A  
                                                                     l4712 0412  
                                                                     l5280 13BC  
                                                                     l5256 1344  
                                                                     l5176 103A  
                                                                     l5168 100E  
                                                                     l5184 1078  
                                                                     l4570 224A  
                                                                     l4562 2218  
                                                                     l4490 26AE  
                                                                     l4298 2A96  
                                                                     l4810 0806  
                                                                     l4722 0486  
                                                                     l4706 03B0  
                                                                     l4642 0106  
                                                                     l5282 13C6  
                                                                     l5274 139E  
                                                                     l5258 134E  
                                                                     l4564 2222  
                                                                     l4572 2256  
                                                                     l4900 0B7A  
                                                                     l4804 07CA  
                                                                     l4732 04E8  
                                                                     l4708 03C8  
                                                                     l4636 00E2  
                                                                     l5292 13F0  
                                                                     l5268 1382  
                                                                     l4558 2202  
                                                                     l4590 2A00  
                                                                     l4494 26C0  
                                                                     l4478 2690  
                                                                     l4822 088C  
                                                                     l4806 07E0  
                                                                     l4750 05A8  
                                                                     l4718 045E  
                                                                     l4662 01C8  
                                                                     l4638 00FA  
                                                                     l5286 13D8  
                                                                     l4576 2274  
                                                                     l4568 2238  
                                                                     l4496 26C8  
                                                                     l4840 09B0  
                                                                     l4832 0984  
                                                                     l4736 0550  
                                                                     l4664 020E  
                                                                     l4656 01B8  
                                                                     l4648 013C  
                                                                     l4586 29EC  
                                                                     l4930 0C48  
                                                                     l4834 0994  
                                                                     l4818 0838  
                                                                     l4754 05FA  
                                                                     l4738 0558  
                                                                     l4658 01C0  
                                                                     l5298 142C  
                                                                     l4588 29FA  
                                                                     l4932 0C5A  
                                                                     l4940 0D64  
                                                                     l4924 0C14  
                                                                     l4908 0BB4  
                                                                     l4916 0BDE  
                                                                     l4852 0A0E  
                                                                     l4772 067C  
                                                                     l4780 06B0  
                                                                     l4598 2A32  
                                                                     l4934 0CE4  
                                                                     l4942 0D78  
                                                                     l4918 0BEC  
                                                                     l4870 0A92  
                                                                     l4782 06C6  
                                                                     l4774 0694  
                                                                     l4766 0660  
                                                                     l4758 0624  
                                                                     l4694 031E  
                                                                     l4678 026A  
                                                                     l4950 0DC6  
                                                                     l4872 0A9A  
                                                                     l4856 0A3A  
                                                                     l4946 0D8C  
                                                                     l4858 0A42  
                                                                     l4786 06F4  
                                                                     l4788 06FE  
                                                                     l4796 079E  
                                                                     l4948 0DA4  
                                                                     l4894 0B34  
                                                                     l4886 0AEA  
                                                                     l4798 07AE  
                                                                     l4968 1EAC  
                                                                     l4984 1EF2  
                                                                     l4888 0AFE  
                                                                     l4978 1EE6  
                                                                     l4898 0B6E  
                                                                     l4996 1F3A  
                                                                     STR_1 7FFC  
                                                                     STR_2 7FEC  
                                                                     STR_3 7FB6  
                                                                     STR_4 7FDC  
                                                                     STR_5 7FA1  
                                                                     STR_6 7FFC  
                                                                     STR_7 7FCB  
                                                                     u3200 2B04  
                                                                     u3220 2B34  
                                                                     u3207 2AFA  
                                                                     u3227 2B2A  
                                                                     _INFO 7F9C  
                                                                     u6010 1F30  
                                                                     u5300 21A8  
                                                                     u5071 2502  
                                                                     u4601 199C  
                                                                     u5305 219C  
                                                                     u6050 1FB4  
                                                                     u5091 251C  
                                                                     u6071 202A  
                                                                     u5281 2170  
                                                                     u4801 23D6  
                                                                     u6091 2050  
                                                                     u4821 23FA  
                                                                     u5710 07F8  
                                                                     u6414 12F6  
                                                                     u4591 197E  
                                                                     u6415 12EC  
                                                                     u5490 02B4  
                                                                     u6550 14E4  
                                                                     i2l55 2380  
                                                                     u5495 02A6  
                                                                     u6391 1228  
                                                                     u6556 14E8  
                                                                     u5970 1EA2  
                                                                     _TMR0 000FD6  
                                                                     _TMR1 000FCE  
                                                                     _TMR3 000FB2  
                                                                     _dato 0056  
                                                                     _main 0DD8  
                                                                     _info 00E8  
                                                             ___ftpack@arg 0022  
                                                                     _modo 00D2  
                                                                     _tama 0054  
                                                             ___ftpack@exp 0025  
                                                                     fsr0h 000FEA  
                                                                     fsr1h 000FE2  
                                                                     indf0 000FEF  
                                                                     fsr0l 000FE9  
                                                                     fsr2h 000FDA  
                                                                     fsr1l 000FE1  
                                                                     indf2 000FDF  
                                                                     fsr2l 000FD9  
                                                                     btemp 005D  
                                                                     _tvis 005B  
                                                                     pclat 000FFA  
                                                             ?_enviarTrama 0022  
                                                                     prodh 000FF4  
                                                                     prodl 000FF3  
                                                                     start 00AA  
                                                             _sprintf$2073 015F  
                                                       ledestado@tiempoled 0022  
                                                             ___ftmul@cntr 0087  
                                                   __size_of_enviarTramaSE 0032  
                                                             ___param_bank 000010  
                                                             ___ftmul@sign 0088  
                                                          __end_of_InitApp 27D0  
                                                             ___fttol@exp1 009E  
                                                             ___fttol@lval 009A  
                                                            __CFG_OSCS$OFF 000000  
                                                        conversionADMues@i 0032  
                                                                    ?_main 0001  
                                                          __end_of___awdiv 29C8  
                                                          __end_of___ftadd 1BF6  
                                                          __end_of___awmod 2ADC  
                                                          __end_of___ftdiv 2158  
                                                          __end_of___ftneg 2E42  
                                                          __end_of___lldiv 2A58  
                                                          __end_of___ftmul 24F0  
                                                          ___awdiv@divisor 002A  
                                                          __end_of___llmod 2BC8  
                                                          __end_of___ftsub 2D44  
                                                          __end_of___fttol 228C  
                                                            _conversionadc 003E  
                                                          ___awdiv@counter 002C  
                                                                    _RCREG 000FAE  
                                                                    _SPBRG 000FAF  
                                                                    _PORTA 000F80  
                                                                    _PORTB 000F81  
                                                                    _PORTC 000F82  
                                                                    _TXREG 000FAD  
                                                      _ConfigureOscillator 2E7C  
                                                            __CFG_PWRT$OFF 000000  
                                                            __CFG_WRT0$OFF 000000  
                                                            __CFG_WRT1$OFF 000000  
                                                            __CFG_WRT2$OFF 000000  
                                                            __CFG_WRT3$OFF 000000  
                                                             ___lltoft@exp 0032  
                                                           __CFG_EBTR0$OFF 000000  
                                                           __CFG_EBTR1$OFF 000000  
                                                           __CFG_EBTR2$OFF 000000  
                                                           __CFG_EBTR3$OFF 000000  
                                                            __CFG_STVR$OFF 000000  
                                                            __CFG_WRTB$OFF 000000  
                                                            __CFG_WRTC$OFF 000000  
                                                            __CFG_WRTD$OFF 000000  
                                                           __CFG_EBTRB$OFF 000000  
                                                            ___awtoft@sign 002D  
                                                          __end_of_dpowers 7E33  
                                                                    _enter 0040  
                                                                    _scale 1504  
                                                          __end_of_isdigit 2E66  
                                                            ___ftpack@sign 0026  
                                                                    _suma0 004E  
                                                                    _suma1 0050  
                                                                    _suma2 0052  
                                                                    _tmues 0059  
                                                          __end_of_low_isr 00AA  
                                                                    tablat 000FF5  
                                                                    status 000FD8  
                                                          __end_of_sprintf 0DD8  
                                                     ?_ConfigureOscillator 0001  
                                                             __end_of_INFO 7FA1  
                                                          __initialization 2BC8  
                                                             __end_of_main 1504  
                                                       _estadoactualrapido 7EE2  
                                                       _estadoactualnormal 7ECA  
                                                                   ??_main 00B2  
                                                            ___fttol@sign1 0099  
                                                            __activetblptr 000002  
                                                     __size_of__tdiv_to_l_ 0112  
                                                            _enviarTramaSE 2DBC  
                                                         ___llmod@dividend 002F  
                                                                   ?_scale 0089  
                                                                   _ADRESH 000FC4  
                                                                   _ADRESL 000FC3  
                                                         ___awdiv@dividend 0028  
                                                         __end_of___awtoft 2D82  
                                                         __end_of___ftpack 2894  
                                                         __end_of___lltoft 2C9E  
                                                                   i2l3800 22E0  
                                                                   i2l3812 2312  
                                                                   i2l3830 2366  
                                                                   i2l3824 234A  
                                                                   i2l3816 232E  
                                                                   i2l3818 2332  
                                                                   _RAPIDO 0057  
                                                                   _NORMAL 003C  
                                                           __CFG_WDTPS$128 000000  
                                                        __end_of_MUESTREO1 7F88  
                                                        __end_of_MUESTREO2 7F92  
                                                        __end_of_MUESTREO3 7F9C  
                                                                ??_InitApp 0022  
                                                    ??_ConfigureOscillator 0022  
                                                        ?_conversionADMues 0030  
                                                         __end_of__powers_ 7E81  
                                                         __end_of_high_isr 23C0  
                                                       ??_conversionADMues 0032  
                                                                   ___ftge 2894  
                                                                   _canal2 7EA1  
                                                                   ___wmul 2DEE  
                                                                ??___awdiv 002C  
                                                                ??___ftadd 0099  
                                                                ??___awmod 0026  
                                                                ??___ftdiv 008F  
                                                                ??___ftneg 0025  
                                                                ??___lldiv 002A  
                                                                ??___ftmul 0080  
                                                                ??___llmod 0037  
                                                                ??___ftsub 003C  
                                                                ??___fttol 0094  
                                                                   _binnum 00E6  
                                                            _visualizacion 00E4  
                                                                   _fround 1BF6  
                                                                   clear_0 2C0E  
                                                                   clear_1 2C1A  
                                                                   clear_2 2C26  
                                                                   _salida 0128  
                                                         ___awdiv@quotient 002E  
                                                                   _saludo 7EAB  
                                                          ___awmod@divisor 0024  
                                                          ___awmod@counter 0026  
                                                                   _strcmp 2C9E  
                                                    ___ftmul@f3_as_product 0084  
                                                             __pdataCOMRAM 0057  
                                                                ??_isdigit 0022  
                                                           ?_enviarTramaSE 0022  
                                                             __mediumconst 7E0A  
                                                                ??_low_isr 0011  
                                                                   tblptrh 000FF7  
                                                                   tblptrl 000FF6  
                                                                   tblptru 000FF8  
                                                                ??_sprintf 00AC  
                                                               __accesstop 0080  
                                                  __end_of__initialization 2C2C  
                                                               ___ftadd@f1 0093  
                                                               ___ftadd@f2 0096  
                                                               ___ftge@ff1 0022  
                                                               ___ftge@ff2 0025  
                                                            ___rparam_used 000001  
                                                               ___ftdiv@f1 0089  
                                                               ___ftdiv@f2 008C  
                                                               ___ftdiv@f3 0093  
                                                               ___ftneg@f1 0022  
                                                               ___awtoft@c 002A  
                                                               ___ftmul@f1 0036  
                                                               ___ftmul@f2 0039  
                                                     __size_of_enviarTrama 0078  
                                                               ___ftsub@f1 009F  
                                                               ___ftsub@f2 00A2  
                                                               ___fttol@f1 0090  
                                                           __pcstackCOMRAM 0001  
                                                             __pidataBANK0 2E66  
                                                               ___lltoft@c 002A  
                                                            __end_of_scale 1966  
                                                               __div_to_l_ 2602  
                                                       enviarTramaSE@datos 0022  
                                                          __div_to_l_@exp1 002D  
                                                          __div_to_l_@cntr 002C  
                                                                  ??_scale 003C  
                                                          __div_to_l_@quot 0028  
                                                             sprintf@width 016B  
                                                       __size_of_ledestado 003A  
                                                               __pbssBANK0 00B5  
                                                               __pbssBANK1 0100  
                                                            __div_to_l_@f1 0022  
                                                            __div_to_l_@f2 0025  
                                                    conversionADMues@i_608 0034  
                                                    conversionADMues@i_609 0036  
                                                                  ?___ftge 0022  
                                                         __CFG_CCP2MUX$OFF 000000  
                                                                  ?___wmul 0030  
                                                    conversionADMues@canal 0030  
                                                       __end_of_MODORAPIDO 7F7E  
                                                       __end_of_MODONORMAL 7F73  
                                                                  ?_fround 0089  
                                                                ?___awtoft 002A  
                                                                ?___ftpack 0022  
                                                                ?___lltoft 002A  
                                                                  ?_strcmp 0022  
                                                          ??_enviarTramaSE 0024  
                                                                ?_high_isr 0001  
                                                                  _InitApp 270A  
                                                        __end_of__npowers_ 7E5A  
                                                                  __Hparam 0000  
                                                               _scale$2072 008C  
                                                                  __Lparam 0000  
                                                          __size_of___ftge 009C  
                                                                  ___awdiv 2930  
                                                                  ___ftadd 1966  
                                                                  ___awmod 2A58  
                                                                  ___ftdiv 2012  
                                                                  ___ftneg 2E18  
                                                                  ___lldiv 29C8  
                                                          __size_of___wmul 002A  
                                                                  ___ftmul 23C0  
                                                                  ___llmod 2B54  
                                                                  ___ftsub 2CF2  
                                                                  ___fttol 2158  
                                                        __end_of_ledestado 2DBC  
                                                                  __pcinit 2BC8  
                                                               ??___awtoft 002D  
                                                               ??___ftpack 0027  
                                                          __size_of_fround 0270  
                                                                  __ramtop 0600  
                                                               ??___lltoft 002E  
                                                                  __ptext0 0DD8  
                                                                  __ptext1 2C9E  
                                                                  __ptext2 00AE  
                                                                  __ptext3 1504  
                                                                  __ptext4 2E42  
                                                                  __ptext5 1BF6  
                                                                  __ptext6 2DEE  
                                                                  __ptext7 23C0  
                                                                  __ptext8 2A58  
                                                                  __ptext9 24F0  
                                                                  _comando 0146  
                                                                _T0CONbits 000FD5  
                                                          __size_of_strcmp 0054  
                                                        __end_of_hexpowers 7EA1  
                                                                _T1CONbits 000FCD  
                                                              ?__div_to_l_ 0022  
                                                                  _dpowers 7E0B  
                                                           _visualizacion1 00F0  
                                                           _visualizacion2 00F2  
                                                                  _isdigit 2E42  
                                                           _visualizacion3 00F4  
                                                                _T3CONbits 000FB1  
                                                         ___awmod@dividend 0022  
                                                                  _low_isr 0018  
                                                                  _sprintf 00AE  
                                                               ??_high_isr 0001  
                                                               _modoestado 0046  
                                                           __pintcode_body 228C  
                                                     end_of_initialization 2C2C  
                                                            __Lmediumconst 7E0A  
                                                                  int_func 228C  
                                                          ___lldiv@divisor 0026  
                                                          ___lldiv@counter 002E  
                                                                _MUESTREO1 7F7E  
                                                                _MUESTREO2 7F88  
                                                                _MUESTREO3 7F92  
                                                                _RCSTAbits 000FAB  
                                            __end_of_visualizacionnoaplica 7F12  
                                                                  postdec1 000FE5  
                                                                  postdec2 000FDD  
                                                                  postinc0 000FEE  
                                                                  postinc2 000FDE  
                                                           __tdiv_to_l_@f1 0022  
                                                           __tdiv_to_l_@f2 0025  
                                                                  strcmp@r 0027  
                                                            ??__tdiv_to_l_ 0028  
                                                                _PORTBbits 000F81  
                                                __size_of_conversionADMues 01AC  
                                                                _TRISAbits 000F92  
                                                                _TRISBbits 000F93  
                                                                _TRISCbits 000F94  
                                              __end_of_ConfigureOscillator 2E82  
                                                              ___ftdiv@exp 0096  
                                                                _TXSTAbits 000FAC  
                                                      __size_of__div_to_l_ 0108  
                                                              ___ftmul@exp 0083  
                                                           __end_of___ftge 2930  
                                                           __end_of_canal2 7EAB  
                                                           __end_of___wmul 2E18  
                                                            __pidataCOMRAM 2E76  
                                                           __end_of_fround 1E66  
                                                           __end_of_saludo 7ECA  
                                                           __end_of_strcmp 2CF2  
                                                      start_initialization 2BC8  
                                                      __end_of__tdiv_to_l_ 2602  
                                                          ___llmod@divisor 0033  
                                                            ??_enviarTrama 0024  
                                                          ___llmod@counter 0037  
                                                                 ??___ftge 0028  
                                                                 ??___wmul 0034  
                                                              __pdataBANK0 00E6  
                                                                 ??_fround 003C  
                                                            sprintf@tmpval 0167  
                                                                 ??_strcmp 0026  
                                                               fround@prec 0092  
                                                        __size_of___awtoft 003E  
                                                        __size_of___ftpack 00C4  
                                                        __size_of___lltoft 0064  
                                                              __pbssCOMRAM 003C  
                                                            __pcstackBANK0 0080  
                                                            __pcstackBANK1 015F  
                                                     __end_of_noreconocido 7F28  
                                                             _isdigit$1743 0023  
                                                        __size_of_high_isr 23B8  
                                                              sprintf@flag 0173  
                                                              sprintf@fval 0175  
                                                              sprintf@prec 0165  
                                                                 ?_InitApp 0001  
                                                                __pintcode 0008  
                                                            __pmediumconst 7E0A  
                                                                 ?___awdiv 0028  
                                                                 ?___ftadd 0093  
                                                                 ?___awmod 0022  
                                                      __end_of_enviarTrama 2B54  
                                                                 ?___ftdiv 0089  
                                                                 ?___ftneg 0022  
                                                                 ?___lldiv 0022  
                                                                 ?___ftmul 0036  
                                                                 ?___llmod 002F  
                                                                 ?___ftsub 009F  
                                                                __npowers_ 7E33  
                                                                 ?___fttol 0090  
                                                              __pintcodelo 0018  
                                                              __tdiv_to_l_ 24F0  
                                                             ??__div_to_l_ 0028  
                                                         _conversionADMues 1E66  
                                                                _ledestado 2D82  
                                                                 ?_isdigit 0001  
                                                    __end_of_enviarTramaSE 2DEE  
                                                                 ?_low_isr 0001  
                                                                _hexpowers 7E81  
                                                                 ?_sprintf 00A5  
                                                           __size_of_scale 0462  
                                                           ___wmul@product 0034  
                                                                 _LATBbits 000F8A  
                                                                 _IPR1bits 000F9F  
                                                                 _IPR2bits 000FA2  
                                                                 _PIE1bits 000F9D  
                                                                 _PIE2bits 000FA0  
                                                                _unSegundo 00E2  
                                                                 _PIR1bits 000F9E  
                                                       __end_of__div_to_l_ 270A  
                                                                 _PIR2bits 000FA1  
                                                                 _RCONbits 000FD0  
                                                                _muestreo1 00EA  
                                                                _muestreo2 00EC  
                                                                _muestreo3 00EE  
                                                                _promedio1 00D6  
                                                                _promedio2 00D8  
                                                                _promedio3 00DA  
                                                               _ADCON0bits 000FC2  
                                                               _ADCON1bits 000FC1  
                                                        ___wmul@multiplier 0030  
                                                         _muestreonoaplica 7F28  
                                                                 InitApp@i 0022  
                                                               ?_ledestado 0022  
                                                           _VISUALIZACION1 7F3B  
                                                           _VISUALIZACION2 7F4A  
                                                           _VISUALIZACION3 7F59  
                                                              _INTCON2bits 000FF1  
                                                                copy_data0 2BDC  
                                                                copy_data1 2BFC  
                                                           _tvisualizacion 00E0  
                                                              _enviarTrama 2ADC  
                                                         __size_of_InitApp 00C6  
                                                                 __Hrparam 0000  
                                                                 __Lrparam 0000  
                                                         __size_of___awdiv 0098  
                                                         __size_of___ftadd 0290  
                                                         __size_of___awmod 0084  
                                                         __size_of___ftdiv 0146  
                                                         __size_of___ftneg 002A  
                                                         __size_of___lldiv 0090  
                                                         __size_of___ftmul 0130  
                                                    _visualizacionnoaplica 7EFA  
                                                         __size_of___llmod 0074  
                                                         __size_of___ftsub 0052  
                                                         __size_of___fttol 0134  
                                                                 ___awtoft 2D44  
                                                                 ___ftpack 27D0  
                                                              _fround$2070 008F  
                                                              _fround$2071 008C  
                                                                 ___lltoft 2C3A  
                                                   __end_of_VISUALIZACION1 7F4A  
                                                   __end_of_VISUALIZACION2 7F59  
                                                   __end_of_VISUALIZACION3 7F68  
                                                               sprintf@idx 0162  
                                                               sprintf@exp 016D  
                                                               sprintf@val 016F  
                                                         enviarTrama@datos 0022  
                                                         __size_of_isdigit 0024  
                                                         __size_of_low_isr 0092  
                                                                 __ptext10 2602  
                                                                 __ptext11 2C3A  
                                                                 __ptext20 2DBC  
                                                                 __ptext12 2B54  
                                                                 __ptext21 2ADC  
                                                                 __ptext13 29C8  
                                                                 __ptext22 1E66  
                                                                 __ptext14 2158  
                                                                 __ptext23 2930  
                                                                 __ptext15 2CF2  
                                                                 __ptext24 2012  
                                                                 __ptext16 1966  
                                                                 __ptext25 2D44  
                                                                 __ptext17 2E18  
                                                                 __ptext26 27D0  
                                                                 __ptext18 2894  
                                                                 __ptext27 270A  
                                                                 __ptext19 2D82  
                                                                 __ptext28 2E7C  
                                                                 __powers_ 7E5A  
                                                                 _high_isr 0008  
                                                         __size_of_sprintf 0D2A  
                                               __end_of_estadoactualrapido 7EFA  
                                               __end_of_estadoactualnormal 7EE2  
                                                            __size_of_main 072C  
                                             __size_of_ConfigureOscillator 0006  
                                                             _noreconocido 7F12  
                                                                 _muestreo 0048  
                                                                 int$flags 005D  
                                                                 _promedio 004A  
                                                              ??_ledestado 0024  
                                                               _INTCONbits 000FF2  
                                                               _MODORAPIDO 7F73  
                                                                 isdigit@c 0024  
                                                               _MODONORMAL 7F68  
                                                                 scale@scl 008F  
                                                                 intlevel1 2E82  
                                                                 intlevel2 2E82  
                                                                sprintf@ap 0163  
                                                         __tdiv_to_l_@exp1 0030  
                                                         __tdiv_to_l_@cntr 002F  
                                                                sprintf@sp 00A5  
                                                         __tdiv_to_l_@quot 002B  
                                                         ___lldiv@dividend 0022  
                                                 __end_of_conversionADMues 2012  
                                                             _resultadoadc 004C  
                                                             ?__tdiv_to_l_ 0022  
                                                                 sprintf@c 0178  
                                                                 sprintf@f 00A7  
                                                                 strcmp@s1 0022  
                                                                 strcmp@s2 0024  
                                                         ___lldiv@quotient 002A  
                                                            _promediovolt1 00BF  
                                                            _promediovolt2 00DC  
                                                            _promediovolt3 00DE  
                                                 __end_of_muestreonoaplica 7F3B  
