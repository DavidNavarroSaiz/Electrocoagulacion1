

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Oct 01 21:34:45 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    34  0000                     
    35                           ; Version 1.42
    36                           ; Generated 13/04/2017 GMT
    37                           ; 
    38                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F252 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     
    70                           	psect	idataCOMRAM
    71  002462                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _ret
    75  002462  03E8               	dw	1000
    76                           
    77                           	psect	smallconst
    78  000600                     __psmallconst:
    79                           	opt stack 0
    80  000600  00                 	db	0
    81  000601                     _dpowers:
    82                           	opt stack 0
    83  000601  0001               	dw	1
    84  000603  000A               	dw	10
    85  000605  0064               	dw	100
    86  000607  03E8               	dw	1000
    87  000609  2710               	dw	10000
    88  00060B                     __end_of_dpowers:
    89                           	opt stack 0
    90  0000                     _TMR1	set	4046
    91  0000                     _TMR3	set	4018
    92  0000                     _TMR0	set	4054
    93  0000                     _T3CONbits	set	4017
    94  0000                     _PIE2bits	set	4000
    95  0000                     _IPR2bits	set	4002
    96  0000                     _T1CONbits	set	4045
    97  0000                     _T0CONbits	set	4053
    98  0000                     _IPR1bits	set	3999
    99  0000                     _PIE1bits	set	3997
   100  0000                     _RCONbits	set	4048
   101  0000                     _RCSTAbits	set	4011
   102  0000                     _SPBRG	set	4015
   103  0000                     _TRISCbits	set	3988
   104  0000                     _INTCON2bits	set	4081
   105  0000                     _TRISBbits	set	3987
   106  0000                     _TRISA	set	3986
   107  0000                     _TRISC	set	3988
   108  0000                     _PORTC	set	3970
   109  0000                     _PORTB	set	3969
   110  0000                     _PORTA	set	3968
   111  0000                     _ADCON1bits	set	4033
   112  0000                     _LATBbits	set	3978
   113  0000                     _PORTBbits	set	3969
   114  0000                     _TXSTAbits	set	4012
   115  0000                     _TXREG	set	4013
   116  0000                     _PIR2bits	set	4001
   117  0000                     _RCREG	set	4014
   118  0000                     _PIR1bits	set	3998
   119  0000                     _INTCONbits	set	4082
   120  00060B                     STR_4:
   121  00060B  43                 	db	67	;'C'
   122  00060C  6F                 	db	111	;'o'
   123  00060D  6D                 	db	109	;'m'
   124  00060E  61                 	db	97	;'a'
   125  00060F  6E                 	db	110	;'n'
   126  000610  64                 	db	100	;'d'
   127  000611  6F                 	db	111	;'o'
   128  000612  20                 	db	32
   129  000613  6E                 	db	110	;'n'
   130  000614  6F                 	db	111	;'o'
   131  000615  20                 	db	32
   132  000616  72                 	db	114	;'r'
   133  000617  65                 	db	101	;'e'
   134  000618  63                 	db	99	;'c'
   135  000619  6F                 	db	111	;'o'
   136  00061A  6E                 	db	110	;'n'
   137  00061B  6F                 	db	111	;'o'
   138  00061C  63                 	db	99	;'c'
   139  00061D  69                 	db	105	;'i'
   140  00061E  64                 	db	100	;'d'
   141  00061F  6F                 	db	111	;'o'
   142  000620  0A                 	db	10
   143  000621  0D                 	db	13
   144  000622  00                 	db	0
   145  000623                     STR_2:
   146  000623  55                 	db	85	;'U'
   147  000624  4D                 	db	77	;'M'
   148  000625  42                 	db	66	;'B'
   149  000626  52                 	db	82	;'R'
   150  000627  41                 	db	65	;'A'
   151  000628  4C                 	db	76	;'L'
   152  000629  46                 	db	70	;'F'
   153  00062A  52                 	db	82	;'R'
   154  00062B  45                 	db	69	;'E'
   155  00062C  43                 	db	67	;'C'
   156  00062D  55                 	db	85	;'U'
   157  00062E  45                 	db	69	;'E'
   158  00062F  4E                 	db	78	;'N'
   159  000630  43                 	db	67	;'C'
   160  000631  49                 	db	73	;'I'
   161  000632  41                 	db	65	;'A'
   162  000633  00                 	db	0
   163  000634                     STR_3:
   164  000634  50                 	db	80	;'P'
   165  000635  55                 	db	85	;'U'
   166  000636  4C                 	db	76	;'L'
   167  000637  53                 	db	83	;'S'
   168  000638  4F                 	db	79	;'O'
   169  000639  53                 	db	83	;'S'
   170  00063A  00                 	db	0
   171  00063B                     STR_5:
   172  00063B  25                 	db	37
   173  00063C  64                 	db	100	;'d'
   174  00063D  0A                 	db	10
   175  00063E  0D                 	db	13
   176  00063F  00                 	db	0
   177  0000                     
   178                           ; #config settings
   179  000640  00                 	db	0	; dummy byte at the end
   180  0000                     
   181                           	psect	cinit
   182  002314                     __pcinit:
   183                           	opt stack 0
   184  002314                     start_initialization:
   185                           	opt stack 0
   186  002314                     __initialization:
   187                           	opt stack 0
   188                           
   189                           ; Initialize objects allocated to COMRAM (2 bytes)
   190                           ; load TBLPTR registers with __pidataCOMRAM
   191  002314  0E62               	movlw	low __pidataCOMRAM
   192  002316  6EF6               	movwf	tblptrl,c
   193  002318  0E24               	movlw	high __pidataCOMRAM
   194  00231A  6EF7               	movwf	tblptrh,c
   195  00231C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   196  00231E  6EF8               	movwf	tblptru,c
   197  002320  0009               	tblrd		*+	;fetch initializer
   198  002322  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   199  002326  0009               	tblrd		*+	;fetch initializer
   200  002328  CFF5 F05F          	movff	tablat,__pdataCOMRAM+1
   201                           
   202                           ; Clear objects allocated to BANK0 (94 bytes)
   203  00232C  EE00  F080         	lfsr	0,__pbssBANK0
   204  002330  0E5E               	movlw	94
   205  002332                     clear_0:
   206  002332  6AEE               	clrf	postinc0,c
   207  002334  06E8               	decf	wreg,f,c
   208  002336  E1FD               	bnz	clear_0
   209                           
   210                           ; Clear objects allocated to COMRAM (58 bytes)
   211  002338  EE00  F001         	lfsr	0,__pbssCOMRAM
   212  00233C  0E3A               	movlw	58
   213  00233E                     clear_1:
   214  00233E  6AEE               	clrf	postinc0,c
   215  002340  06E8               	decf	wreg,f,c
   216  002342  E1FD               	bnz	clear_1
   217  002344                     end_of_initialization:
   218                           	opt stack 0
   219  002344                     __end_of__initialization:
   220                           	opt stack 0
   221  002344  9060               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   222  002346  9260               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   223  002348  0E00               	movlw	low (__Lmediumconst shr (0+16))
   224  00234A  6EF8               	movwf	tblptru,c
   225  00234C  0100               	movlb	0
   226  00234E  EF21  F003         	goto	_main	;jump to C main() function
   227                           tblptru	equ	0xFF8
   228                           tblptrh	equ	0xFF7
   229                           tblptrl	equ	0xFF6
   230                           tablat	equ	0xFF5
   231                           postinc0	equ	0xFEE
   232                           wreg	equ	0xFE8
   233                           
   234                           	psect	bssCOMRAM
   235  000001                     __pbssCOMRAM:
   236                           	opt stack 0
   237  000001                     _frecuenciaMedida:
   238                           	opt stack 0
   239  000001                     	ds	4
   240  000005                     _h:
   241                           	opt stack 0
   242  000005                     	ds	2
   243  000007                     _g:
   244                           	opt stack 0
   245  000007                     	ds	2
   246  000009                     _c:
   247                           	opt stack 0
   248  000009                     	ds	2
   249  00000B                     _a:
   250                           	opt stack 0
   251  00000B                     	ds	2
   252  00000D                     _retp:
   253                           	opt stack 0
   254  00000D                     	ds	2
   255  00000F                     _retu:
   256                           	opt stack 0
   257  00000F                     	ds	2
   258  000011                     _retf:
   259                           	opt stack 0
   260  000011                     	ds	2
   261  000013                     _posicion10:
   262                           	opt stack 0
   263  000013                     	ds	2
   264  000015                     _fm:
   265                           	opt stack 0
   266  000015                     	ds	2
   267  000017                     _segundos:
   268                           	opt stack 0
   269  000017                     	ds	2
   270  000019                     _i:
   271                           	opt stack 0
   272  000019                     	ds	2
   273  00001B                     _comparacion:
   274                           	opt stack 0
   275  00001B                     	ds	2
   276  00001D                     _cont1:
   277                           	opt stack 0
   278  00001D                     	ds	2
   279  00001F                     _cont:
   280                           	opt stack 0
   281  00001F                     	ds	2
   282  000021                     _unSegundo:
   283                           	opt stack 0
   284  000021                     	ds	2
   285  000023                     _u:
   286                           	opt stack 0
   287  000023                     	ds	2
   288  000025                     _n:
   289                           	opt stack 0
   290  000025                     	ds	2
   291  000027                     _b:
   292                           	opt stack 0
   293  000027                     	ds	2
   294  000029                     _enter:
   295                           	opt stack 0
   296  000029                     	ds	2
   297  00002B                     _mode:
   298                           	opt stack 0
   299  00002B                     	ds	1
   300  00002C                     _led_mode:
   301                           	opt stack 0
   302  00002C                     	ds	1
   303  00002D                     _salida:
   304                           	opt stack 0
   305  00002D                     	ds	12
   306  000039                     _ptr:
   307                           	opt stack 0
   308  000039                     	ds	2
   309                           tblptru	equ	0xFF8
   310                           tblptrh	equ	0xFF7
   311                           tblptrl	equ	0xFF6
   312                           tablat	equ	0xFF5
   313                           postinc0	equ	0xFEE
   314                           wreg	equ	0xFE8
   315                           
   316                           	psect	dataCOMRAM
   317  00005E                     __pdataCOMRAM:
   318                           	opt stack 0
   319  00005E                     _ret:
   320                           	opt stack 0
   321  00005E                     	ds	2
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           
   329                           	psect	bssBANK0
   330  000080                     __pbssBANK0:
   331                           	opt stack 0
   332  000080                     _e:
   333                           	opt stack 0
   334  000080                     	ds	4
   335  000084                     _d:
   336                           	opt stack 0
   337  000084                     	ds	4
   338  000088                     _str4:
   339                           	opt stack 0
   340  000088                     	ds	22
   341  00009E                     _comando:
   342                           	opt stack 0
   343  00009E                     	ds	21
   344  0000B3                     _str2:
   345                           	opt stack 0
   346  0000B3                     	ds	16
   347  0000C3                     _umbral:
   348                           	opt stack 0
   349  0000C3                     	ds	12
   350  0000CF                     _str1:
   351                           	opt stack 0
   352  0000CF                     	ds	10
   353  0000D9                     _str3:
   354                           	opt stack 0
   355  0000D9                     	ds	5
   356                           tblptru	equ	0xFF8
   357                           tblptrh	equ	0xFF7
   358                           tblptrl	equ	0xFF6
   359                           tablat	equ	0xFF5
   360                           postinc0	equ	0xFEE
   361                           wreg	equ	0xFE8
   362                           
   363                           	psect	cstackBANK0
   364  0000DE                     __pcstackBANK0:
   365                           	opt stack 0
   366  0000DE                     ??_strcmp:
   367  0000DE                     ?___lmul:
   368                           	opt stack 0
   369  0000DE                     ___lwdiv@counter:
   370                           	opt stack 0
   371  0000DE                     _isalpha$1607:
   372                           	opt stack 0
   373  0000DE                     strcpy@cp:
   374                           	opt stack 0
   375  0000DE                     ___lmul@multiplier:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x0
   379  0000DE                     	ds	1
   380  0000DF                     strcmp@r:
   381                           	opt stack 0
   382  0000DF                     isalpha@c:
   383                           	opt stack 0
   384  0000DF                     ___lwdiv@quotient:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x1
   388  0000DF                     	ds	2
   389  0000E1                     ?___lwmod:
   390                           	opt stack 0
   391  0000E1                     ___lwmod@dividend:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x3
   395  0000E1                     	ds	1
   396  0000E2                     ___lmul@multiplicand:
   397                           	opt stack 0
   398                           
   399                           ; 4 bytes @ 0x4
   400  0000E2                     	ds	1
   401  0000E3                     ___lwmod@divisor:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x5
   405  0000E3                     	ds	2
   406  0000E5                     ___lwmod@counter:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x7
   410  0000E5                     	ds	1
   411  0000E6                     ?_sprintf:
   412                           	opt stack 0
   413  0000E6                     ?_strtol:
   414                           	opt stack 0
   415  0000E6                     sprintf@sp:
   416                           	opt stack 0
   417  0000E6                     strtol@s:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x8
   421  0000E6                     	ds	2
   422  0000E8                     sprintf@f:
   423                           	opt stack 0
   424  0000E8                     strtol@endptr:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0xA
   428  0000E8                     	ds	2
   429  0000EA                     strtol@base:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0xC
   433  0000EA                     	ds	2
   434  0000EC                     ??_strtol:
   435                           
   436                           ; 1 bytes @ 0xE
   437  0000EC                     	ds	2
   438  0000EE                     ??_sprintf:
   439                           
   440                           ; 1 bytes @ 0x10
   441  0000EE                     	ds	1
   442  0000EF                     sprintf@ap:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x11
   446  0000EF                     	ds	1
   447  0000F0                     strtol@sign:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x12
   451  0000F0                     	ds	1
   452  0000F1                     sprintf@flag:
   453                           	opt stack 0
   454  0000F1                     strtol@a:
   455                           	opt stack 0
   456                           
   457                           ; 4 bytes @ 0x13
   458  0000F1                     	ds	1
   459  0000F2                     sprintf@prec:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x14
   463  0000F2                     	ds	1
   464  0000F3                     sprintf@val:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x15
   468  0000F3                     	ds	2
   469  0000F5                     sprintf@c:
   470                           	opt stack 0
   471  0000F5                     strtol@c:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x17
   475  0000F5                     	ds	1
   476  0000F6                     ??_main:
   477                           
   478                           ; 1 bytes @ 0x18
   479  0000F6                     	ds	5
   480                           tblptru	equ	0xFF8
   481                           tblptrh	equ	0xFF7
   482                           tblptrl	equ	0xFF6
   483                           tablat	equ	0xFF5
   484                           postinc0	equ	0xFEE
   485                           wreg	equ	0xFE8
   486                           
   487                           	psect	cstackCOMRAM
   488  00003B                     __pcstackCOMRAM:
   489                           	opt stack 0
   490  00003B                     ??_high_isr:
   491  00003B                     
   492                           ; 1 bytes @ 0x0
   493  00003B                     	ds	14
   494  000049                     ??_low_isr:
   495                           
   496                           ; 1 bytes @ 0xE
   497  000049                     	ds	17
   498  00005A                     ??_isspace:
   499  00005A                     ??_isdigit:
   500  00005A                     ??_isupper:
   501  00005A                     ?_strcmp:
   502                           	opt stack 0
   503  00005A                     ?___lwdiv:
   504                           	opt stack 0
   505  00005A                     toupper@c:
   506                           	opt stack 0
   507  00005A                     ___lwdiv@dividend:
   508                           	opt stack 0
   509  00005A                     strcmp@s1:
   510                           	opt stack 0
   511  00005A                     strcpy@to:
   512                           	opt stack 0
   513  00005A                     ___lmul@product:
   514                           	opt stack 0
   515                           
   516                           ; 4 bytes @ 0x1F
   517  00005A                     	ds	1
   518  00005B                     _isdigit$1610:
   519                           	opt stack 0
   520  00005B                     _isspace$1613:
   521                           	opt stack 0
   522  00005B                     _isupper$1616:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x20
   526  00005B                     	ds	1
   527  00005C                     isdigit@c:
   528                           	opt stack 0
   529  00005C                     isspace@c:
   530                           	opt stack 0
   531  00005C                     isupper@c:
   532                           	opt stack 0
   533  00005C                     ___lwdiv@divisor:
   534                           	opt stack 0
   535  00005C                     strcmp@s2:
   536                           	opt stack 0
   537  00005C                     strcpy@from:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x21
   541  00005C                     	ds	1
   542  00005D                     ??_isalpha:
   543                           
   544                           ; 1 bytes @ 0x22
   545  00005D                     	ds	1
   546  00005E                     tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           
   553                           ; 1 bytes @ 0x23
   554 ;;
   555 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   556 ;;
   557 ;; *************** function _main *****************
   558 ;; Defined at:
   559 ;;		line 69 in file "main.c"
   560 ;; Parameters:    Size  Location     Type
   561 ;;		None
   562 ;; Auto vars:     Size  Location     Type
   563 ;;		None
   564 ;; Return value:  Size  Location     Type
   565 ;;                  1    wreg      void 
   566 ;; Registers used:
   567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   568 ;; Tracked objects:
   569 ;;		On entry : 0/0
   570 ;;		On exit  : 0/0
   571 ;;		Unchanged: 0/0
   572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   573 ;;      Params:         0       0       0       0       0       0       0
   574 ;;      Locals:         0       0       0       0       0       0       0
   575 ;;      Temps:          0       5       0       0       0       0       0
   576 ;;      Totals:         0       5       0       0       0       0       0
   577 ;;Total ram usage:        5 bytes
   578 ;; Hardware stack levels required when called:    5
   579 ;; This function calls:
   580 ;;		_ConfigureOscillator
   581 ;;		_InitApp
   582 ;;		___lwdiv
   583 ;;		_sprintf
   584 ;;		_strcmp
   585 ;;		_strcpy
   586 ;;		_strtol
   587 ;; This function is called by:
   588 ;;		Startup code after reset
   589 ;; This function uses a non-reentrant model
   590 ;;
   591                           
   592                           	psect	text0
   593  000642                     __ptext0:
   594                           	opt stack 0
   595  000642                     _main:
   596                           	opt stack 0
   597  000642  FFFF               	dw	65535	; assembler added errata NOP
   598                           
   599                           ;main.c: 71: ConfigureOscillator();
   600                           
   601                           ;incstack = 0
   602  000644  EC2E  F012         	call	_ConfigureOscillator	;wreg free
   603                           
   604                           ;main.c: 74: InitApp();
   605  000648  EC69  F010         	call	_InitApp	;wreg free
   606  00064C                     l3571:
   607  00064C  FFFF               	dw	65535	; assembler added errata NOP
   608                           
   609                           ;main.c: 80: strcpy(str1, "FRECUENCIA");
   610  00064E  0ECF               	movlw	low _str1
   611  000650  6E5A               	movwf	strcpy@to,c
   612  000652  0E00               	movlw	high _str1
   613  000654  6E5B               	movwf	strcpy@to+1,c
   614  000656  0E29               	movlw	low (STR_2+6)
   615  000658  6E5C               	movwf	strcpy@from,c
   616  00065A  0E06               	movlw	high (STR_2+6)
   617  00065C  6E5D               	movwf	strcpy@from+1,c
   618  00065E  ECA9  F011         	call	_strcpy	;wreg free
   619                           
   620                           ;main.c: 81: strcpy(str2, "UMBRALFRECUENCIA");
   621  000662  0EB3               	movlw	low _str2
   622  000664  6E5A               	movwf	strcpy@to,c
   623  000666  0E00               	movlw	high _str2
   624  000668  6E5B               	movwf	strcpy@to+1,c
   625  00066A  0E23               	movlw	low STR_2
   626  00066C  6E5C               	movwf	strcpy@from,c
   627  00066E  0E06               	movlw	high STR_2
   628  000670  6E5D               	movwf	strcpy@from+1,c
   629  000672  ECA9  F011         	call	_strcpy	;wreg free
   630                           
   631                           ;main.c: 82: strcpy(str3, "PULSOS");
   632  000676  0ED9               	movlw	low _str3
   633  000678  6E5A               	movwf	strcpy@to,c
   634  00067A  0E00               	movlw	high _str3
   635  00067C  6E5B               	movwf	strcpy@to+1,c
   636  00067E  0E34               	movlw	low STR_3
   637  000680  6E5C               	movwf	strcpy@from,c
   638  000682  0E06               	movlw	high STR_3
   639  000684  6E5D               	movwf	strcpy@from+1,c
   640  000686  ECA9  F011         	call	_strcpy	;wreg free
   641                           
   642                           ;main.c: 83: strcpy(str4, "Comando no reconocido\n\r");
   643  00068A  0E88               	movlw	low _str4
   644  00068C  6E5A               	movwf	strcpy@to,c
   645  00068E  0E00               	movlw	high _str4
   646  000690  6E5B               	movwf	strcpy@to+1,c
   647  000692  0E0B               	movlw	low STR_4
   648  000694  6E5C               	movwf	strcpy@from,c
   649  000696  0E06               	movlw	high STR_4
   650  000698  6E5D               	movwf	strcpy@from+1,c
   651  00069A  ECA9  F011         	call	_strcpy	;wreg free
   652                           
   653                           ;main.c: 84: retf = strcmp(comando, str1);
   654  00069E  0E9E               	movlw	low _comando
   655  0006A0  6E5A               	movwf	strcmp@s1,c
   656  0006A2  0E00               	movlw	high _comando
   657  0006A4  6E5B               	movwf	strcmp@s1+1,c
   658  0006A6  0ECF               	movlw	low _str1
   659  0006A8  6E5C               	movwf	strcmp@s2,c
   660  0006AA  0E00               	movlw	high _str1
   661  0006AC  6E5D               	movwf	strcmp@s2+1,c
   662  0006AE  EC5D  F011         	call	_strcmp	;wreg free
   663  0006B2  C05A  F011         	movff	?_strcmp,_retf
   664  0006B6  C05B  F012         	movff	?_strcmp+1,_retf+1
   665                           
   666                           ;main.c: 85: retu = strcmp(comando, str2);
   667  0006BA  0E9E               	movlw	low _comando
   668  0006BC  6E5A               	movwf	strcmp@s1,c
   669  0006BE  0E00               	movlw	high _comando
   670  0006C0  6E5B               	movwf	strcmp@s1+1,c
   671  0006C2  0EB3               	movlw	low _str2
   672  0006C4  6E5C               	movwf	strcmp@s2,c
   673  0006C6  0E00               	movlw	high _str2
   674  0006C8  6E5D               	movwf	strcmp@s2+1,c
   675  0006CA  EC5D  F011         	call	_strcmp	;wreg free
   676  0006CE  C05A  F00F         	movff	?_strcmp,_retu
   677  0006D2  C05B  F010         	movff	?_strcmp+1,_retu+1
   678                           
   679                           ;main.c: 86: retp = strcmp(comando, str3);
   680  0006D6  0E9E               	movlw	low _comando
   681  0006D8  6E5A               	movwf	strcmp@s1,c
   682  0006DA  0E00               	movlw	high _comando
   683  0006DC  6E5B               	movwf	strcmp@s1+1,c
   684  0006DE  0ED9               	movlw	low _str3
   685  0006E0  6E5C               	movwf	strcmp@s2,c
   686  0006E2  0E00               	movlw	high _str3
   687  0006E4  6E5D               	movwf	strcmp@s2+1,c
   688  0006E6  EC5D  F011         	call	_strcmp	;wreg free
   689  0006EA  C05A  F00D         	movff	?_strcmp,_retp
   690  0006EE  C05B  F00E         	movff	?_strcmp+1,_retp+1
   691                           
   692                           ;main.c: 88: if (retf != 0 && retu != 0 && retp != 0 && enter == 1) {
   693  0006F2  5011               	movf	_retf,w,c
   694  0006F4  1012               	iorwf	_retf+1,w,c
   695  0006F6  B4D8               	btfsc	status,2,c
   696  0006F8  D029               	goto	l3607
   697  0006FA  500F               	movf	_retu,w,c
   698  0006FC  1010               	iorwf	_retu+1,w,c
   699  0006FE  B4D8               	btfsc	status,2,c
   700  000700  D025               	goto	l3607
   701  000702  500D               	movf	_retp,w,c
   702  000704  100E               	iorwf	_retp+1,w,c
   703  000706  B4D8               	btfsc	status,2,c
   704  000708  D021               	goto	l3607
   705  00070A  0429               	decf	_enter,w,c
   706  00070C  102A               	iorwf	_enter+1,w,c
   707  00070E  A4D8               	btfss	status,2,c
   708  000710  D01D               	goto	l3607
   709                           
   710                           ;main.c: 89: for (i = 0; i < 22; i++) {
   711  000712  0E00               	movlw	0
   712  000714  6E1A               	movwf	_i+1,c
   713  000716  0E00               	movlw	0
   714  000718  6E19               	movwf	_i,c
   715  00071A                     l3595:
   716  00071A  FFFF               	dw	65535	; assembler added errata NOP
   717  00071C  BE1A               	btfsc	_i+1,7,c
   718  00071E  D006               	goto	l3599
   719  000720  501A               	movf	_i+1,w,c
   720  000722  E114               	bnz	l3607
   721  000724  0E16               	movlw	22
   722  000726  5C19               	subwf	_i,w,c
   723  000728  B0D8               	btfsc	status,0,c
   724  00072A  D010               	goto	l3607
   725  00072C                     l3599:
   726  00072C  FFFF               	dw	65535	; assembler added errata NOP
   727                           
   728                           ;main.c: 90: TXREG = str4[i];
   729  00072E  0E88               	movlw	low _str4
   730  000730  2419               	addwf	_i,w,c
   731  000732  6ED9               	movwf	fsr2l,c
   732  000734  0E00               	movlw	high _str4
   733  000736  201A               	addwfc	_i+1,w,c
   734  000738  6EDA               	movwf	fsr2h,c
   735  00073A  50DF               	movf	indf2,w,c
   736  00073C  6EAD               	movwf	4013,c	;volatile
   737                           
   738                           ;main.c: 91: __nop();
   739  00073E  F000               	nop	
   740  000740                     l137:
   741  000740  FFFF               	dw	65535	; assembler added errata NOP
   742  000742  A2AC               	btfss	4012,1,c	;volatile
   743  000744  D7FD               	goto	l137
   744  000746  4A19               	infsnz	_i,f,c
   745  000748  2A1A               	incf	_i+1,f,c
   746  00074A  D7E7               	goto	l3595
   747  00074C                     l3607:
   748  00074C  FFFF               	dw	65535	; assembler added errata NOP
   749                           
   750                           ;main.c: 93: }
   751                           ;main.c: 94: }
   752                           ;main.c: 97: if (retf == 0) {
   753  00074E  5011               	movf	_retf,w,c
   754  000750  1012               	iorwf	_retf+1,w,c
   755  000752  A4D8               	btfss	status,2,c
   756  000754  D002               	goto	l3611
   757                           
   758                           ;main.c: 98: mode = 1;
   759  000756  0E01               	movlw	1
   760  000758  D00D               	goto	L2
   761  00075A                     l3611:
   762  00075A  FFFF               	dw	65535	; assembler added errata NOP
   763  00075C  500F               	movf	_retu,w,c
   764  00075E  1010               	iorwf	_retu+1,w,c
   765  000760  A4D8               	btfss	status,2,c
   766  000762  D002               	goto	l3615
   767                           
   768                           ;main.c: 100: mode = 2;
   769  000764  0E02               	movlw	2
   770  000766  D006               	goto	L2
   771  000768                     l3615:
   772  000768  FFFF               	dw	65535	; assembler added errata NOP
   773  00076A  500D               	movf	_retp,w,c
   774  00076C  100E               	iorwf	_retp+1,w,c
   775  00076E  A4D8               	btfss	status,2,c
   776  000770  D003               	goto	l3619
   777                           
   778                           ;main.c: 102: mode = 3;
   779  000772  0E03               	movlw	3
   780  000774                     L2:
   781  000774  FFFF               	dw	65535	; assembler added errata NOP
   782  000776  6E2B               	movwf	_mode,c
   783  000778                     l3619:
   784  000778  FFFF               	dw	65535	; assembler added errata NOP
   785                           
   786                           ;main.c: 103: }
   787                           ;main.c: 104: __nop();
   788  00077A  F000               	nop	
   789                           
   790                           ;main.c: 106: if (b == 1 && c == 0) {
   791  00077C  0427               	decf	_b,w,c
   792  00077E  1028               	iorwf	_b+1,w,c
   793  000780  A4D8               	btfss	status,2,c
   794  000782  D043               	goto	l3639
   795  000784  5009               	movf	_c,w,c
   796  000786  100A               	iorwf	_c+1,w,c
   797  000788  A4D8               	btfss	status,2,c
   798  00078A  D03F               	goto	l3639
   799                           
   800                           ;main.c: 107: d++;
   801  00078C  0E01               	movlw	1
   802  00078E  0100               	movlb	0	; () banked
   803  000790  2784               	addwf	_d& (0+255),f,b
   804  000792  0E00               	movlw	0
   805  000794  2385               	addwfc	(_d+1)& (0+255),f,b
   806  000796  2386               	addwfc	(_d+2)& (0+255),f,b
   807  000798  2387               	addwfc	(_d+3)& (0+255),f,b
   808                           
   809                           ;main.c: 109: if (d == 2500) {
   810  00079A  0EC4               	movlw	196
   811  00079C  0100               	movlb	0	; () banked
   812  00079E  1984               	xorwf	_d& (0+255),w,b
   813  0007A0  E12F               	bnz	l3637
   814  0007A2  0E09               	movlw	9
   815  0007A4  0100               	movlb	0	; () banked
   816  0007A6  1985               	xorwf	(_d+1)& (0+255),w,b
   817  0007A8  0100               	movlb	0	; () banked
   818  0007AA  1186               	iorwf	(_d+2)& (0+255),w,b
   819  0007AC  0100               	movlb	0	; () banked
   820  0007AE  1187               	iorwf	(_d+3)& (0+255),w,b
   821  0007B0  A4D8               	btfss	status,2,c
   822  0007B2  D026               	goto	l3637
   823                           
   824                           ; BSR set to: 0
   825                           ;main.c: 110: __nop();
   826  0007B4  F000               	nop	
   827                           
   828                           ;main.c: 111: h = PORTBbits.RB7;
   829  0007B6  AE81               	btfss	3969,7,c	;volatile
   830  0007B8  D004               	goto	u4860
   831  0007BA  0100               	movlb	0	; () banked
   832  0007BC  6BF6               	clrf	??_main& (0+255),b
   833  0007BE  2BF6               	incf	??_main& (0+255),f,b
   834  0007C0  D003               	goto	u4868
   835  0007C2                     u4860:
   836  0007C2  FFFF               	dw	65535	; assembler added errata NOP
   837  0007C4  0100               	movlb	0	; () banked
   838  0007C6  6BF6               	clrf	??_main& (0+255),b
   839  0007C8                     u4868:
   840  0007C8  FFFF               	dw	65535	; assembler added errata NOP
   841  0007CA  0100               	movlb	0	; () banked
   842  0007CC  51F6               	movf	??_main& (0+255),w,b
   843  0007CE  6E05               	movwf	_h,c
   844  0007D0  6A06               	clrf	_h+1,c
   845                           
   846                           ; BSR set to: 0
   847                           ;main.c: 112: LATBbits.LB7 = ~h;
   848  0007D2  5005               	movf	_h,w,c
   849  0007D4  0AFF               	xorlw	255
   850  0007D6  0100               	movlb	0	; () banked
   851  0007D8  6FF6               	movwf	??_main& (0+255),b
   852  0007DA  0100               	movlb	0	; () banked
   853  0007DC  33F6               	rrcf	??_main& (0+255),f,b
   854  0007DE  33F6               	rrcf	??_main& (0+255),f,b
   855  0007E0  508A               	movf	3978,w,c	;volatile
   856  0007E2  0100               	movlb	0	; () banked
   857  0007E4  19F6               	xorwf	??_main& (0+255),w,b
   858  0007E6  0B7F               	andlw	-129
   859  0007E8  19F6               	xorwf	??_main& (0+255),w,b
   860  0007EA  6E8A               	movwf	3978,c	;volatile
   861                           
   862                           ; BSR set to: 0
   863                           ;main.c: 113: d = 0;
   864  0007EC  0E00               	movlw	0
   865  0007EE  0100               	movlb	0	; () banked
   866  0007F0  6F84               	movwf	_d& (0+255),b
   867  0007F2  0E00               	movlw	0
   868  0007F4  6F85               	movwf	(_d+1)& (0+255),b
   869  0007F6  0E00               	movlw	0
   870  0007F8  6F86               	movwf	(_d+2)& (0+255),b
   871  0007FA  0E00               	movlw	0
   872  0007FC  6F87               	movwf	(_d+3)& (0+255),b
   873                           
   874                           ; BSR set to: 0
   875                           ;main.c: 114: __nop();
   876  0007FE  F000               	nop	
   877  000800                     l3637:
   878  000800  FFFF               	dw	65535	; assembler added errata NOP
   879                           
   880                           ;main.c: 115: }
   881                           ;main.c: 117: b = 0;
   882  000802  0E00               	movlw	0
   883  000804  6E28               	movwf	_b+1,c
   884  000806  0E00               	movlw	0
   885  000808  6E27               	movwf	_b,c
   886  00080A                     l3639:
   887  00080A  FFFF               	dw	65535	; assembler added errata NOP
   888                           
   889                           ;main.c: 118: }
   890                           ;main.c: 119: if (b == 1 && c == 1) {
   891  00080C  0427               	decf	_b,w,c
   892  00080E  1028               	iorwf	_b+1,w,c
   893  000810  A4D8               	btfss	status,2,c
   894  000812  D039               	goto	l147
   895  000814  0409               	decf	_c,w,c
   896  000816  100A               	iorwf	_c+1,w,c
   897  000818  A4D8               	btfss	status,2,c
   898  00081A  D035               	goto	l147
   899                           
   900                           ;main.c: 120: e++;
   901  00081C  0E01               	movlw	1
   902  00081E  0100               	movlb	0	; () banked
   903  000820  2780               	addwf	_e& (0+255),f,b
   904  000822  0E00               	movlw	0
   905  000824  2381               	addwfc	(_e+1)& (0+255),f,b
   906  000826  2382               	addwfc	(_e+2)& (0+255),f,b
   907  000828  2383               	addwfc	(_e+3)& (0+255),f,b
   908                           
   909                           ;main.c: 121: if (e == 1000) {
   910  00082A  0EE8               	movlw	232
   911  00082C  0100               	movlb	0	; () banked
   912  00082E  1980               	xorwf	_e& (0+255),w,b
   913  000830  E125               	bnz	l3649
   914  000832  0E03               	movlw	3
   915  000834  0100               	movlb	0	; () banked
   916  000836  1981               	xorwf	(_e+1)& (0+255),w,b
   917  000838  0100               	movlb	0	; () banked
   918  00083A  1182               	iorwf	(_e+2)& (0+255),w,b
   919  00083C  0100               	movlb	0	; () banked
   920  00083E  1183               	iorwf	(_e+3)& (0+255),w,b
   921  000840  A4D8               	btfss	status,2,c
   922  000842  D01C               	goto	l3649
   923                           
   924                           ; BSR set to: 0
   925                           ;main.c: 122: LATBbits.LB7 = ~PORTBbits.RB7;
   926  000844  AE81               	btfss	3969,7,c	;volatile
   927  000846  D002               	goto	u4900
   928  000848  0E01               	movlw	1
   929  00084A  D002               	goto	u4906
   930  00084C                     u4900:
   931  00084C  FFFF               	dw	65535	; assembler added errata NOP
   932  00084E  0E00               	movlw	0
   933  000850                     u4906:
   934  000850  FFFF               	dw	65535	; assembler added errata NOP
   935  000852  0AFF               	xorlw	255
   936  000854  0100               	movlb	0	; () banked
   937  000856  6FF6               	movwf	??_main& (0+255),b
   938  000858  0100               	movlb	0	; () banked
   939  00085A  33F6               	rrcf	??_main& (0+255),f,b
   940  00085C  33F6               	rrcf	??_main& (0+255),f,b
   941  00085E  508A               	movf	3978,w,c	;volatile
   942  000860  0100               	movlb	0	; () banked
   943  000862  19F6               	xorwf	??_main& (0+255),w,b
   944  000864  0B7F               	andlw	-129
   945  000866  19F6               	xorwf	??_main& (0+255),w,b
   946  000868  6E8A               	movwf	3978,c	;volatile
   947                           
   948                           ; BSR set to: 0
   949                           ;main.c: 123: e = 0;
   950  00086A  0E00               	movlw	0
   951  00086C  0100               	movlb	0	; () banked
   952  00086E  6F80               	movwf	_e& (0+255),b
   953  000870  0E00               	movlw	0
   954  000872  6F81               	movwf	(_e+1)& (0+255),b
   955  000874  0E00               	movlw	0
   956  000876  6F82               	movwf	(_e+2)& (0+255),b
   957  000878  0E00               	movlw	0
   958  00087A  6F83               	movwf	(_e+3)& (0+255),b
   959  00087C                     l3649:
   960  00087C  FFFF               	dw	65535	; assembler added errata NOP
   961                           
   962                           ; BSR set to: 0
   963                           ;main.c: 124: }
   964                           ;main.c: 125: b = 0;
   965  00087E  0E00               	movlw	0
   966  000880  6E28               	movwf	_b+1,c
   967  000882  0E00               	movlw	0
   968  000884  6E27               	movwf	_b,c
   969  000886                     l147:
   970  000886  FFFF               	dw	65535	; assembler added errata NOP
   971                           
   972                           ;main.c: 126: }
   973                           ;main.c: 127: if (g != 1 && unSegundo == 1) {
   974  000888  0407               	decf	_g,w,c
   975  00088A  1008               	iorwf	_g+1,w,c
   976  00088C  B4D8               	btfsc	status,2,c
   977  00088E  D07A               	goto	l3683
   978  000890  0421               	decf	_unSegundo,w,c
   979  000892  1022               	iorwf	_unSegundo+1,w,c
   980  000894  A4D8               	btfss	status,2,c
   981  000896  D076               	goto	l3683
   982                           
   983                           ;main.c: 128: segundos++;
   984  000898  4A17               	infsnz	_segundos,f,c
   985  00089A  2A18               	incf	_segundos+1,f,c
   986                           
   987                           ;main.c: 129: __nop();
   988  00089C  F000               	nop	
   989                           
   990                           ;main.c: 130: if (segundos == 1) {
   991  00089E  0417               	decf	_segundos,w,c
   992  0008A0  1018               	iorwf	_segundos+1,w,c
   993  0008A2  A4D8               	btfss	status,2,c
   994  0008A4  D06A               	goto	l150
   995                           
   996                           ;main.c: 131: __nop();
   997  0008A6  F000               	nop	
   998                           
   999                           ;main.c: 132: frecuenciaMedida = TMR1 / segundos;
  1000  0008A8  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  1001  0008AC  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  1002  0008B0  C017  F05C         	movff	_segundos,___lwdiv@divisor
  1003  0008B4  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  1004  0008B8  EC27  F011         	call	___lwdiv	;wreg free
  1005  0008BC  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  1006  0008C0  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  1007  0008C4  6A03               	clrf	_frecuenciaMedida+2,c
  1008  0008C6  6A04               	clrf	_frecuenciaMedida+3,c
  1009                           
  1010                           ;main.c: 133: if (frecuenciaMedida < ret) {
  1011  0008C8  C05E  F0F6         	movff	_ret,??_main
  1012  0008CC  C05F  F0F7         	movff	_ret+1,??_main+1
  1013  0008D0  0E00               	movlw	0
  1014  0008D2  0100               	movlb	0	; () banked
  1015  0008D4  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  1016  0008D6  0EFF               	movlw	255
  1017  0008D8  6FF8               	movwf	(??_main+2)& (0+255),b
  1018  0008DA  6FF9               	movwf	(??_main+3)& (0+255),b
  1019  0008DC  0100               	movlb	0	; () banked
  1020  0008DE  51F6               	movf	??_main& (0+255),w,b
  1021  0008E0  5C01               	subwf	_frecuenciaMedida,w,c
  1022  0008E2  0100               	movlb	0	; () banked
  1023  0008E4  51F7               	movf	(??_main+1)& (0+255),w,b
  1024  0008E6  5802               	subwfb	_frecuenciaMedida+1,w,c
  1025  0008E8  0100               	movlb	0	; () banked
  1026  0008EA  51F8               	movf	(??_main+2)& (0+255),w,b
  1027  0008EC  5803               	subwfb	_frecuenciaMedida+2,w,c
  1028  0008EE  5004               	movf	_frecuenciaMedida+3,w,c
  1029  0008F0  0A80               	xorlw	128
  1030  0008F2  0100               	movlb	0	; () banked
  1031  0008F4  6FFA               	movwf	(??_main+4)& (0+255),b
  1032  0008F6  0100               	movlb	0	; () banked
  1033  0008F8  51F9               	movf	(??_main+3)& (0+255),w,b
  1034  0008FA  0A80               	xorlw	128
  1035  0008FC  0100               	movlb	0	; () banked
  1036  0008FE  59FA               	subwfb	(??_main+4)& (0+255),w,b
  1037  000900  B0D8               	btfsc	status,0,c
  1038  000902  D03B               	goto	l150
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;main.c: 134: __nop();
  1042  000904  F000               	nop	
  1043                           
  1044                           ;main.c: 135: sprintf(salida, "%d\n\r", frecuenciaMedida);
  1045  000906  0E2D               	movlw	low _salida
  1046  000908  0100               	movlb	0	; () banked
  1047  00090A  6FE6               	movwf	sprintf@sp& (0+255),b
  1048  00090C  0E00               	movlw	high _salida
  1049  00090E  0100               	movlb	0	; () banked
  1050  000910  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  1051  000912  0E3B               	movlw	low STR_5
  1052  000914  0100               	movlb	0	; () banked
  1053  000916  6FE8               	movwf	sprintf@f& (0+255),b
  1054  000918  0E06               	movlw	high STR_5
  1055  00091A  0100               	movlb	0	; () banked
  1056  00091C  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  1057  00091E  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  1058  000922  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  1059  000926  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  1060  00092A  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  1061  00092E  EC1C  F00F         	call	_sprintf	;wreg free
  1062                           
  1063                           ;main.c: 137: for (i = 0; i < 8; i++) {
  1064  000932  0E00               	movlw	0
  1065  000934  6E1A               	movwf	_i+1,c
  1066  000936  0E00               	movlw	0
  1067  000938  6E19               	movwf	_i,c
  1068  00093A                     l3671:
  1069  00093A  FFFF               	dw	65535	; assembler added errata NOP
  1070  00093C  BE1A               	btfsc	_i+1,7,c
  1071  00093E  D006               	goto	l3675
  1072  000940  501A               	movf	_i+1,w,c
  1073  000942  E116               	bnz	l3681
  1074  000944  0E08               	movlw	8
  1075  000946  5C19               	subwf	_i,w,c
  1076  000948  B0D8               	btfsc	status,0,c
  1077  00094A  D012               	goto	l3681
  1078  00094C                     l3675:
  1079  00094C  FFFF               	dw	65535	; assembler added errata NOP
  1080                           
  1081                           ;main.c: 138: TXREG = salida[i];
  1082  00094E  90D8               	bcf	status,0,c
  1083  000950  3419               	rlcf	_i,w,c
  1084  000952  6ED9               	movwf	fsr2l,c
  1085  000954  341A               	rlcf	_i+1,w,c
  1086  000956  6EDA               	movwf	fsr2h,c
  1087  000958  0E2D               	movlw	low _salida
  1088  00095A  26D9               	addwf	fsr2l,f,c
  1089  00095C  0E00               	movlw	high _salida
  1090  00095E  22DA               	addwfc	fsr2h,f,c
  1091  000960  50DF               	movf	indf2,w,c
  1092  000962  6EAD               	movwf	4013,c	;volatile
  1093  000964                     l154:
  1094  000964  FFFF               	dw	65535	; assembler added errata NOP
  1095  000966  A2AC               	btfss	4012,1,c	;volatile
  1096  000968  D7FD               	goto	l154
  1097  00096A  4A19               	infsnz	_i,f,c
  1098  00096C  2A1A               	incf	_i+1,f,c
  1099  00096E  D7E5               	goto	l3671
  1100  000970                     l3681:
  1101  000970  FFFF               	dw	65535	; assembler added errata NOP
  1102                           
  1103                           ;main.c: 141: }
  1104                           ;main.c: 142: unSegundo = 0;
  1105  000972  0E00               	movlw	0
  1106  000974  6E22               	movwf	_unSegundo+1,c
  1107  000976  0E00               	movlw	0
  1108  000978  6E21               	movwf	_unSegundo,c
  1109  00097A                     l150:
  1110  00097A  FFFF               	dw	65535	; assembler added errata NOP
  1111                           
  1112                           ;main.c: 143: }
  1113                           ;main.c: 144: }
  1114                           ;main.c: 145: segundos = 0;
  1115  00097C  0E00               	movlw	0
  1116  00097E  6E18               	movwf	_segundos+1,c
  1117  000980  0E00               	movlw	0
  1118  000982  6E17               	movwf	_segundos,c
  1119  000984                     l3683:
  1120  000984  FFFF               	dw	65535	; assembler added errata NOP
  1121                           
  1122                           ;main.c: 146: }
  1123                           ;main.c: 148: if (enter == 1) {
  1124  000986  0429               	decf	_enter,w,c
  1125  000988  102A               	iorwf	_enter+1,w,c
  1126  00098A  A4D8               	btfss	status,2,c
  1127  00098C  D65F               	goto	l3571
  1128                           
  1129                           ;main.c: 149: retf = strcmp(comando, str1);
  1130  00098E  0E9E               	movlw	low _comando
  1131  000990  6E5A               	movwf	strcmp@s1,c
  1132  000992  0E00               	movlw	high _comando
  1133  000994  6E5B               	movwf	strcmp@s1+1,c
  1134  000996  0ECF               	movlw	low _str1
  1135  000998  6E5C               	movwf	strcmp@s2,c
  1136  00099A  0E00               	movlw	high _str1
  1137  00099C  6E5D               	movwf	strcmp@s2+1,c
  1138  00099E  EC5D  F011         	call	_strcmp	;wreg free
  1139  0009A2  C05A  F011         	movff	?_strcmp,_retf
  1140  0009A6  C05B  F012         	movff	?_strcmp+1,_retf+1
  1141                           
  1142                           ;main.c: 150: retu = strcmp(comando, str2);
  1143  0009AA  0E9E               	movlw	low _comando
  1144  0009AC  6E5A               	movwf	strcmp@s1,c
  1145  0009AE  0E00               	movlw	high _comando
  1146  0009B0  6E5B               	movwf	strcmp@s1+1,c
  1147  0009B2  0EB3               	movlw	low _str2
  1148  0009B4  6E5C               	movwf	strcmp@s2,c
  1149  0009B6  0E00               	movlw	high _str2
  1150  0009B8  6E5D               	movwf	strcmp@s2+1,c
  1151  0009BA  EC5D  F011         	call	_strcmp	;wreg free
  1152  0009BE  C05A  F00F         	movff	?_strcmp,_retu
  1153  0009C2  C05B  F010         	movff	?_strcmp+1,_retu+1
  1154                           
  1155                           ;main.c: 151: retp = strcmp(comando, str3);
  1156  0009C6  0E9E               	movlw	low _comando
  1157  0009C8  6E5A               	movwf	strcmp@s1,c
  1158  0009CA  0E00               	movlw	high _comando
  1159  0009CC  6E5B               	movwf	strcmp@s1+1,c
  1160  0009CE  0ED9               	movlw	low _str3
  1161  0009D0  6E5C               	movwf	strcmp@s2,c
  1162  0009D2  0E00               	movlw	high _str3
  1163  0009D4  6E5D               	movwf	strcmp@s2+1,c
  1164  0009D6  EC5D  F011         	call	_strcmp	;wreg free
  1165  0009DA  C05A  F00D         	movff	?_strcmp,_retp
  1166  0009DE  C05B  F00E         	movff	?_strcmp+1,_retp+1
  1167                           
  1168                           ;main.c: 152: if (retf == 0) {
  1169  0009E2  5011               	movf	_retf,w,c
  1170  0009E4  1012               	iorwf	_retf+1,w,c
  1171  0009E6  A4D8               	btfss	status,2,c
  1172  0009E8  D002               	goto	l3691
  1173                           
  1174                           ;main.c: 153: mode = 1;
  1175  0009EA  0E01               	movlw	1
  1176  0009EC  D00D               	goto	L4
  1177  0009EE                     l3691:
  1178  0009EE  FFFF               	dw	65535	; assembler added errata NOP
  1179  0009F0  500F               	movf	_retu,w,c
  1180  0009F2  1010               	iorwf	_retu+1,w,c
  1181  0009F4  A4D8               	btfss	status,2,c
  1182  0009F6  D002               	goto	l3695
  1183                           
  1184                           ;main.c: 155: mode = 2;
  1185  0009F8  0E02               	movlw	2
  1186  0009FA  D006               	goto	L4
  1187  0009FC                     l3695:
  1188  0009FC  FFFF               	dw	65535	; assembler added errata NOP
  1189  0009FE  500D               	movf	_retp,w,c
  1190  000A00  100E               	iorwf	_retp+1,w,c
  1191  000A02  A4D8               	btfss	status,2,c
  1192  000A04  D003               	goto	l3699
  1193                           
  1194                           ;main.c: 157: mode = 3;
  1195  000A06  0E03               	movlw	3
  1196  000A08                     L4:
  1197  000A08  FFFF               	dw	65535	; assembler added errata NOP
  1198  000A0A  6E2B               	movwf	_mode,c
  1199  000A0C                     l3699:
  1200  000A0C  FFFF               	dw	65535	; assembler added errata NOP
  1201                           
  1202                           ;main.c: 158: }
  1203                           ;main.c: 159: if (mode == 1) {
  1204  000A0E  042B               	decf	_mode,w,c
  1205  000A10  A4D8               	btfss	status,2,c
  1206  000A12  EF55  F000         	goto	start
  1207                           
  1208                           ;main.c: 160: c = 0;
  1209  000A16  0E00               	movlw	0
  1210  000A18  6E0A               	movwf	_c+1,c
  1211  000A1A  0E00               	movlw	0
  1212  000A1C  6E09               	movwf	_c,c
  1213                           
  1214                           ;main.c: 161: g = 1;
  1215  000A1E  0E00               	movlw	0
  1216  000A20  6E08               	movwf	_g+1,c
  1217  000A22  0E01               	movlw	1
  1218  000A24  6E07               	movwf	_g,c
  1219                           
  1220                           ;main.c: 162: __nop();
  1221  000A26  F000               	nop	
  1222                           
  1223                           ;main.c: 163: if (comando[10] == '1' && unSegundo == 1) {
  1224  000A28  0E31               	movlw	49
  1225  000A2A  0100               	movlb	0	; () banked
  1226  000A2C  19A8               	xorwf	(_comando+10)& (0+255),w,b
  1227  000A2E  A4D8               	btfss	status,2,c
  1228  000A30  D079               	goto	l3737
  1229                           
  1230                           ; BSR set to: 0
  1231  000A32  0421               	decf	_unSegundo,w,c
  1232  000A34  1022               	iorwf	_unSegundo+1,w,c
  1233  000A36  A4D8               	btfss	status,2,c
  1234  000A38  D075               	goto	l3737
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;main.c: 166: segundos++;
  1238  000A3A  4A17               	infsnz	_segundos,f,c
  1239  000A3C  2A18               	incf	_segundos+1,f,c
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;main.c: 167: __nop();
  1243  000A3E  F000               	nop	
  1244                           
  1245                           ;main.c: 168: if (segundos == 1) {
  1246  000A40  0417               	decf	_segundos,w,c
  1247  000A42  1018               	iorwf	_segundos+1,w,c
  1248  000A44  A4D8               	btfss	status,2,c
  1249  000A46  D069               	goto	l165
  1250                           
  1251                           ;main.c: 169: __nop();
  1252  000A48  F000               	nop	
  1253                           
  1254                           ;main.c: 170: frecuenciaMedida = TMR1 / segundos;
  1255  000A4A  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  1256  000A4E  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  1257  000A52  C017  F05C         	movff	_segundos,___lwdiv@divisor
  1258  000A56  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  1259  000A5A  EC27  F011         	call	___lwdiv	;wreg free
  1260  000A5E  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  1261  000A62  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  1262  000A66  6A03               	clrf	_frecuenciaMedida+2,c
  1263  000A68  6A04               	clrf	_frecuenciaMedida+3,c
  1264                           
  1265                           ;main.c: 171: if (frecuenciaMedida < ret) {
  1266  000A6A  C05E  F0F6         	movff	_ret,??_main
  1267  000A6E  C05F  F0F7         	movff	_ret+1,??_main+1
  1268  000A72  0E00               	movlw	0
  1269  000A74  0100               	movlb	0	; () banked
  1270  000A76  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  1271  000A78  0EFF               	movlw	255
  1272  000A7A  6FF8               	movwf	(??_main+2)& (0+255),b
  1273  000A7C  6FF9               	movwf	(??_main+3)& (0+255),b
  1274  000A7E  0100               	movlb	0	; () banked
  1275  000A80  51F6               	movf	??_main& (0+255),w,b
  1276  000A82  5C01               	subwf	_frecuenciaMedida,w,c
  1277  000A84  0100               	movlb	0	; () banked
  1278  000A86  51F7               	movf	(??_main+1)& (0+255),w,b
  1279  000A88  5802               	subwfb	_frecuenciaMedida+1,w,c
  1280  000A8A  0100               	movlb	0	; () banked
  1281  000A8C  51F8               	movf	(??_main+2)& (0+255),w,b
  1282  000A8E  5803               	subwfb	_frecuenciaMedida+2,w,c
  1283  000A90  5004               	movf	_frecuenciaMedida+3,w,c
  1284  000A92  0A80               	xorlw	128
  1285  000A94  0100               	movlb	0	; () banked
  1286  000A96  6FFA               	movwf	(??_main+4)& (0+255),b
  1287  000A98  0100               	movlb	0	; () banked
  1288  000A9A  51F9               	movf	(??_main+3)& (0+255),w,b
  1289  000A9C  0A80               	xorlw	128
  1290  000A9E  0100               	movlb	0	; () banked
  1291  000AA0  59FA               	subwfb	(??_main+4)& (0+255),w,b
  1292  000AA2  B0D8               	btfsc	status,0,c
  1293  000AA4  D03A               	goto	l165
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;main.c: 173: sprintf(salida, "%d\n\r", frecuenciaMedida);
  1297  000AA6  0E2D               	movlw	low _salida
  1298  000AA8  0100               	movlb	0	; () banked
  1299  000AAA  6FE6               	movwf	sprintf@sp& (0+255),b
  1300  000AAC  0E00               	movlw	high _salida
  1301  000AAE  0100               	movlb	0	; () banked
  1302  000AB0  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  1303  000AB2  0E3B               	movlw	low STR_5
  1304  000AB4  0100               	movlb	0	; () banked
  1305  000AB6  6FE8               	movwf	sprintf@f& (0+255),b
  1306  000AB8  0E06               	movlw	high STR_5
  1307  000ABA  0100               	movlb	0	; () banked
  1308  000ABC  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  1309  000ABE  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  1310  000AC2  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  1311  000AC6  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  1312  000ACA  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  1313  000ACE  EC1C  F00F         	call	_sprintf	;wreg free
  1314                           
  1315                           ;main.c: 175: for (i = 0; i < 8; i++) {
  1316  000AD2  0E00               	movlw	0
  1317  000AD4  6E1A               	movwf	_i+1,c
  1318  000AD6  0E00               	movlw	0
  1319  000AD8  6E19               	movwf	_i,c
  1320  000ADA                     l3725:
  1321  000ADA  FFFF               	dw	65535	; assembler added errata NOP
  1322  000ADC  BE1A               	btfsc	_i+1,7,c
  1323  000ADE  D006               	goto	l3729
  1324  000AE0  501A               	movf	_i+1,w,c
  1325  000AE2  E116               	bnz	l3735
  1326  000AE4  0E08               	movlw	8
  1327  000AE6  5C19               	subwf	_i,w,c
  1328  000AE8  B0D8               	btfsc	status,0,c
  1329  000AEA  D012               	goto	l3735
  1330  000AEC                     l3729:
  1331  000AEC  FFFF               	dw	65535	; assembler added errata NOP
  1332                           
  1333                           ;main.c: 176: TXREG = salida[i];
  1334  000AEE  90D8               	bcf	status,0,c
  1335  000AF0  3419               	rlcf	_i,w,c
  1336  000AF2  6ED9               	movwf	fsr2l,c
  1337  000AF4  341A               	rlcf	_i+1,w,c
  1338  000AF6  6EDA               	movwf	fsr2h,c
  1339  000AF8  0E2D               	movlw	low _salida
  1340  000AFA  26D9               	addwf	fsr2l,f,c
  1341  000AFC  0E00               	movlw	high _salida
  1342  000AFE  22DA               	addwfc	fsr2h,f,c
  1343  000B00  50DF               	movf	indf2,w,c
  1344  000B02  6EAD               	movwf	4013,c	;volatile
  1345  000B04                     l169:
  1346  000B04  FFFF               	dw	65535	; assembler added errata NOP
  1347  000B06  A2AC               	btfss	4012,1,c	;volatile
  1348  000B08  D7FD               	goto	l169
  1349  000B0A  4A19               	infsnz	_i,f,c
  1350  000B0C  2A1A               	incf	_i+1,f,c
  1351  000B0E  D7E5               	goto	l3725
  1352  000B10                     l3735:
  1353  000B10  FFFF               	dw	65535	; assembler added errata NOP
  1354                           
  1355                           ;main.c: 179: }
  1356                           ;main.c: 180: unSegundo = 0;
  1357  000B12  0E00               	movlw	0
  1358  000B14  6E22               	movwf	_unSegundo+1,c
  1359  000B16  0E00               	movlw	0
  1360  000B18  6E21               	movwf	_unSegundo,c
  1361  000B1A                     l165:
  1362  000B1A  FFFF               	dw	65535	; assembler added errata NOP
  1363                           
  1364                           ;main.c: 181: }
  1365                           ;main.c: 182: }
  1366                           ;main.c: 183: segundos = 0;
  1367  000B1C  0E00               	movlw	0
  1368  000B1E  6E18               	movwf	_segundos+1,c
  1369  000B20  0E00               	movlw	0
  1370  000B22  6E17               	movwf	_segundos,c
  1371  000B24                     l3737:
  1372  000B24  FFFF               	dw	65535	; assembler added errata NOP
  1373                           
  1374                           ;main.c: 184: }
  1375                           ;main.c: 186: if (comando[10] == '2' && unSegundo == 1) {
  1376  000B26  0E32               	movlw	50
  1377  000B28  0100               	movlb	0	; () banked
  1378  000B2A  19A8               	xorwf	(_comando+10)& (0+255),w,b
  1379  000B2C  A4D8               	btfss	status,2,c
  1380  000B2E  D078               	goto	l3765
  1381                           
  1382                           ; BSR set to: 0
  1383  000B30  0421               	decf	_unSegundo,w,c
  1384  000B32  1022               	iorwf	_unSegundo+1,w,c
  1385  000B34  A4D8               	btfss	status,2,c
  1386  000B36  D074               	goto	l3765
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;main.c: 187: segundos++;
  1390  000B38  4A17               	infsnz	_segundos,f,c
  1391  000B3A  2A18               	incf	_segundos+1,f,c
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;main.c: 188: if (segundos == 2) {
  1395  000B3C  0E02               	movlw	2
  1396  000B3E  1817               	xorwf	_segundos,w,c
  1397  000B40  1018               	iorwf	_segundos+1,w,c
  1398  000B42  A4D8               	btfss	status,2,c
  1399  000B44  D068               	goto	l173
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 189: frecuenciaMedida = TMR1 / segundos;
  1403  000B46  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  1404  000B4A  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  1405  000B4E  C017  F05C         	movff	_segundos,___lwdiv@divisor
  1406  000B52  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  1407  000B56  EC27  F011         	call	___lwdiv	;wreg free
  1408  000B5A  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  1409  000B5E  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  1410  000B62  6A03               	clrf	_frecuenciaMedida+2,c
  1411  000B64  6A04               	clrf	_frecuenciaMedida+3,c
  1412                           
  1413                           ;main.c: 190: if (frecuenciaMedida < ret) {
  1414  000B66  C05E  F0F6         	movff	_ret,??_main
  1415  000B6A  C05F  F0F7         	movff	_ret+1,??_main+1
  1416  000B6E  0E00               	movlw	0
  1417  000B70  0100               	movlb	0	; () banked
  1418  000B72  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  1419  000B74  0EFF               	movlw	255
  1420  000B76  6FF8               	movwf	(??_main+2)& (0+255),b
  1421  000B78  6FF9               	movwf	(??_main+3)& (0+255),b
  1422  000B7A  0100               	movlb	0	; () banked
  1423  000B7C  51F6               	movf	??_main& (0+255),w,b
  1424  000B7E  5C01               	subwf	_frecuenciaMedida,w,c
  1425  000B80  0100               	movlb	0	; () banked
  1426  000B82  51F7               	movf	(??_main+1)& (0+255),w,b
  1427  000B84  5802               	subwfb	_frecuenciaMedida+1,w,c
  1428  000B86  0100               	movlb	0	; () banked
  1429  000B88  51F8               	movf	(??_main+2)& (0+255),w,b
  1430  000B8A  5803               	subwfb	_frecuenciaMedida+2,w,c
  1431  000B8C  5004               	movf	_frecuenciaMedida+3,w,c
  1432  000B8E  0A80               	xorlw	128
  1433  000B90  0100               	movlb	0	; () banked
  1434  000B92  6FFA               	movwf	(??_main+4)& (0+255),b
  1435  000B94  0100               	movlb	0	; () banked
  1436  000B96  51F9               	movf	(??_main+3)& (0+255),w,b
  1437  000B98  0A80               	xorlw	128
  1438  000B9A  0100               	movlb	0	; () banked
  1439  000B9C  59FA               	subwfb	(??_main+4)& (0+255),w,b
  1440  000B9E  B0D8               	btfsc	status,0,c
  1441  000BA0  D03A               	goto	l173
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;main.c: 191: sprintf(salida, "%d\n\r", frecuenciaMedida);
  1445  000BA2  0E2D               	movlw	low _salida
  1446  000BA4  0100               	movlb	0	; () banked
  1447  000BA6  6FE6               	movwf	sprintf@sp& (0+255),b
  1448  000BA8  0E00               	movlw	high _salida
  1449  000BAA  0100               	movlb	0	; () banked
  1450  000BAC  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  1451  000BAE  0E3B               	movlw	low STR_5
  1452  000BB0  0100               	movlb	0	; () banked
  1453  000BB2  6FE8               	movwf	sprintf@f& (0+255),b
  1454  000BB4  0E06               	movlw	high STR_5
  1455  000BB6  0100               	movlb	0	; () banked
  1456  000BB8  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  1457  000BBA  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  1458  000BBE  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  1459  000BC2  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  1460  000BC6  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  1461  000BCA  EC1C  F00F         	call	_sprintf	;wreg free
  1462                           
  1463                           ;main.c: 193: for (i = 0; i < 8; i++) {
  1464  000BCE  0E00               	movlw	0
  1465  000BD0  6E1A               	movwf	_i+1,c
  1466  000BD2  0E00               	movlw	0
  1467  000BD4  6E19               	movwf	_i,c
  1468  000BD6                     l3753:
  1469  000BD6  FFFF               	dw	65535	; assembler added errata NOP
  1470  000BD8  BE1A               	btfsc	_i+1,7,c
  1471  000BDA  D006               	goto	l3757
  1472  000BDC  501A               	movf	_i+1,w,c
  1473  000BDE  E116               	bnz	l3763
  1474  000BE0  0E08               	movlw	8
  1475  000BE2  5C19               	subwf	_i,w,c
  1476  000BE4  B0D8               	btfsc	status,0,c
  1477  000BE6  D012               	goto	l3763
  1478  000BE8                     l3757:
  1479  000BE8  FFFF               	dw	65535	; assembler added errata NOP
  1480                           
  1481                           ;main.c: 194: TXREG = salida[i];
  1482  000BEA  90D8               	bcf	status,0,c
  1483  000BEC  3419               	rlcf	_i,w,c
  1484  000BEE  6ED9               	movwf	fsr2l,c
  1485  000BF0  341A               	rlcf	_i+1,w,c
  1486  000BF2  6EDA               	movwf	fsr2h,c
  1487  000BF4  0E2D               	movlw	low _salida
  1488  000BF6  26D9               	addwf	fsr2l,f,c
  1489  000BF8  0E00               	movlw	high _salida
  1490  000BFA  22DA               	addwfc	fsr2h,f,c
  1491  000BFC  50DF               	movf	indf2,w,c
  1492  000BFE  6EAD               	movwf	4013,c	;volatile
  1493  000C00                     l177:
  1494  000C00  FFFF               	dw	65535	; assembler added errata NOP
  1495  000C02  A2AC               	btfss	4012,1,c	;volatile
  1496  000C04  D7FD               	goto	l177
  1497  000C06  4A19               	infsnz	_i,f,c
  1498  000C08  2A1A               	incf	_i+1,f,c
  1499  000C0A  D7E5               	goto	l3753
  1500  000C0C                     l3763:
  1501  000C0C  FFFF               	dw	65535	; assembler added errata NOP
  1502                           
  1503                           ;main.c: 197: }
  1504                           ;main.c: 198: unSegundo = 0;
  1505  000C0E  0E00               	movlw	0
  1506  000C10  6E22               	movwf	_unSegundo+1,c
  1507  000C12  0E00               	movlw	0
  1508  000C14  6E21               	movwf	_unSegundo,c
  1509  000C16                     l173:
  1510  000C16  FFFF               	dw	65535	; assembler added errata NOP
  1511                           
  1512                           ;main.c: 199: }
  1513                           ;main.c: 200: }
  1514                           ;main.c: 201: segundos = 0;
  1515  000C18  0E00               	movlw	0
  1516  000C1A  6E18               	movwf	_segundos+1,c
  1517  000C1C  0E00               	movlw	0
  1518  000C1E  6E17               	movwf	_segundos,c
  1519  000C20                     l3765:
  1520  000C20  FFFF               	dw	65535	; assembler added errata NOP
  1521                           
  1522                           ;main.c: 202: }
  1523                           ;main.c: 203: if (comando[10] == '3' && unSegundo == 1) {
  1524  000C22  0E33               	movlw	51
  1525  000C24  0100               	movlb	0	; () banked
  1526  000C26  19A8               	xorwf	(_comando+10)& (0+255),w,b
  1527  000C28  A4D8               	btfss	status,2,c
  1528  000C2A  D078               	goto	l3793
  1529                           
  1530                           ; BSR set to: 0
  1531  000C2C  0421               	decf	_unSegundo,w,c
  1532  000C2E  1022               	iorwf	_unSegundo+1,w,c
  1533  000C30  A4D8               	btfss	status,2,c
  1534  000C32  D074               	goto	l3793
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;main.c: 204: segundos++;
  1538  000C34  4A17               	infsnz	_segundos,f,c
  1539  000C36  2A18               	incf	_segundos+1,f,c
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;main.c: 205: if (segundos == 3) {
  1543  000C38  0E03               	movlw	3
  1544  000C3A  1817               	xorwf	_segundos,w,c
  1545  000C3C  1018               	iorwf	_segundos+1,w,c
  1546  000C3E  A4D8               	btfss	status,2,c
  1547  000C40  D068               	goto	l181
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;main.c: 206: frecuenciaMedida = TMR1 / segundos;
  1551  000C42  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  1552  000C46  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  1553  000C4A  C017  F05C         	movff	_segundos,___lwdiv@divisor
  1554  000C4E  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  1555  000C52  EC27  F011         	call	___lwdiv	;wreg free
  1556  000C56  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  1557  000C5A  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  1558  000C5E  6A03               	clrf	_frecuenciaMedida+2,c
  1559  000C60  6A04               	clrf	_frecuenciaMedida+3,c
  1560                           
  1561                           ;main.c: 207: if (frecuenciaMedida < ret) {
  1562  000C62  C05E  F0F6         	movff	_ret,??_main
  1563  000C66  C05F  F0F7         	movff	_ret+1,??_main+1
  1564  000C6A  0E00               	movlw	0
  1565  000C6C  0100               	movlb	0	; () banked
  1566  000C6E  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  1567  000C70  0EFF               	movlw	255
  1568  000C72  6FF8               	movwf	(??_main+2)& (0+255),b
  1569  000C74  6FF9               	movwf	(??_main+3)& (0+255),b
  1570  000C76  0100               	movlb	0	; () banked
  1571  000C78  51F6               	movf	??_main& (0+255),w,b
  1572  000C7A  5C01               	subwf	_frecuenciaMedida,w,c
  1573  000C7C  0100               	movlb	0	; () banked
  1574  000C7E  51F7               	movf	(??_main+1)& (0+255),w,b
  1575  000C80  5802               	subwfb	_frecuenciaMedida+1,w,c
  1576  000C82  0100               	movlb	0	; () banked
  1577  000C84  51F8               	movf	(??_main+2)& (0+255),w,b
  1578  000C86  5803               	subwfb	_frecuenciaMedida+2,w,c
  1579  000C88  5004               	movf	_frecuenciaMedida+3,w,c
  1580  000C8A  0A80               	xorlw	128
  1581  000C8C  0100               	movlb	0	; () banked
  1582  000C8E  6FFA               	movwf	(??_main+4)& (0+255),b
  1583  000C90  0100               	movlb	0	; () banked
  1584  000C92  51F9               	movf	(??_main+3)& (0+255),w,b
  1585  000C94  0A80               	xorlw	128
  1586  000C96  0100               	movlb	0	; () banked
  1587  000C98  59FA               	subwfb	(??_main+4)& (0+255),w,b
  1588  000C9A  B0D8               	btfsc	status,0,c
  1589  000C9C  D03A               	goto	l181
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;main.c: 208: sprintf(salida, "%d\n\r", frecuenciaMedida);
  1593  000C9E  0E2D               	movlw	low _salida
  1594  000CA0  0100               	movlb	0	; () banked
  1595  000CA2  6FE6               	movwf	sprintf@sp& (0+255),b
  1596  000CA4  0E00               	movlw	high _salida
  1597  000CA6  0100               	movlb	0	; () banked
  1598  000CA8  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  1599  000CAA  0E3B               	movlw	low STR_5
  1600  000CAC  0100               	movlb	0	; () banked
  1601  000CAE  6FE8               	movwf	sprintf@f& (0+255),b
  1602  000CB0  0E06               	movlw	high STR_5
  1603  000CB2  0100               	movlb	0	; () banked
  1604  000CB4  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  1605  000CB6  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  1606  000CBA  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  1607  000CBE  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  1608  000CC2  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  1609  000CC6  EC1C  F00F         	call	_sprintf	;wreg free
  1610                           
  1611                           ;main.c: 210: for (i = 0; i < 8; i++) {
  1612  000CCA  0E00               	movlw	0
  1613  000CCC  6E1A               	movwf	_i+1,c
  1614  000CCE  0E00               	movlw	0
  1615  000CD0  6E19               	movwf	_i,c
  1616  000CD2                     l3781:
  1617  000CD2  FFFF               	dw	65535	; assembler added errata NOP
  1618  000CD4  BE1A               	btfsc	_i+1,7,c
  1619  000CD6  D006               	goto	l3785
  1620  000CD8  501A               	movf	_i+1,w,c
  1621  000CDA  E116               	bnz	l3791
  1622  000CDC  0E08               	movlw	8
  1623  000CDE  5C19               	subwf	_i,w,c
  1624  000CE0  B0D8               	btfsc	status,0,c
  1625  000CE2  D012               	goto	l3791
  1626  000CE4                     l3785:
  1627  000CE4  FFFF               	dw	65535	; assembler added errata NOP
  1628                           
  1629                           ;main.c: 211: TXREG = salida[i];
  1630  000CE6  90D8               	bcf	status,0,c
  1631  000CE8  3419               	rlcf	_i,w,c
  1632  000CEA  6ED9               	movwf	fsr2l,c
  1633  000CEC  341A               	rlcf	_i+1,w,c
  1634  000CEE  6EDA               	movwf	fsr2h,c
  1635  000CF0  0E2D               	movlw	low _salida
  1636  000CF2  26D9               	addwf	fsr2l,f,c
  1637  000CF4  0E00               	movlw	high _salida
  1638  000CF6  22DA               	addwfc	fsr2h,f,c
  1639  000CF8  50DF               	movf	indf2,w,c
  1640  000CFA  6EAD               	movwf	4013,c	;volatile
  1641  000CFC                     l185:
  1642  000CFC  FFFF               	dw	65535	; assembler added errata NOP
  1643  000CFE  A2AC               	btfss	4012,1,c	;volatile
  1644  000D00  D7FD               	goto	l185
  1645  000D02  4A19               	infsnz	_i,f,c
  1646  000D04  2A1A               	incf	_i+1,f,c
  1647  000D06  D7E5               	goto	l3781
  1648  000D08                     l3791:
  1649  000D08  FFFF               	dw	65535	; assembler added errata NOP
  1650                           
  1651                           ;main.c: 214: }
  1652                           ;main.c: 215: unSegundo = 0;
  1653  000D0A  0E00               	movlw	0
  1654  000D0C  6E22               	movwf	_unSegundo+1,c
  1655  000D0E  0E00               	movlw	0
  1656  000D10  6E21               	movwf	_unSegundo,c
  1657  000D12                     l181:
  1658  000D12  FFFF               	dw	65535	; assembler added errata NOP
  1659                           
  1660                           ;main.c: 216: }
  1661                           ;main.c: 217: }
  1662                           ;main.c: 218: segundos = 0;
  1663  000D14  0E00               	movlw	0
  1664  000D16  6E18               	movwf	_segundos+1,c
  1665  000D18  0E00               	movlw	0
  1666  000D1A  6E17               	movwf	_segundos,c
  1667  000D1C                     l3793:
  1668  000D1C  FFFF               	dw	65535	; assembler added errata NOP
  1669                           
  1670                           ;main.c: 219: }
  1671                           ;main.c: 220: if (comando[10] == '4' && unSegundo == 1) {
  1672  000D1E  0E34               	movlw	52
  1673  000D20  0100               	movlb	0	; () banked
  1674  000D22  19A8               	xorwf	(_comando+10)& (0+255),w,b
  1675  000D24  A4D8               	btfss	status,2,c
  1676  000D26  D078               	goto	l3821
  1677                           
  1678                           ; BSR set to: 0
  1679  000D28  0421               	decf	_unSegundo,w,c
  1680  000D2A  1022               	iorwf	_unSegundo+1,w,c
  1681  000D2C  A4D8               	btfss	status,2,c
  1682  000D2E  D074               	goto	l3821
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;main.c: 221: segundos++;
  1686  000D30  4A17               	infsnz	_segundos,f,c
  1687  000D32  2A18               	incf	_segundos+1,f,c
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;main.c: 222: if (segundos == 4) {
  1691  000D34  0E04               	movlw	4
  1692  000D36  1817               	xorwf	_segundos,w,c
  1693  000D38  1018               	iorwf	_segundos+1,w,c
  1694  000D3A  A4D8               	btfss	status,2,c
  1695  000D3C  D068               	goto	l189
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;main.c: 223: frecuenciaMedida = TMR1 / segundos;
  1699  000D3E  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  1700  000D42  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  1701  000D46  C017  F05C         	movff	_segundos,___lwdiv@divisor
  1702  000D4A  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  1703  000D4E  EC27  F011         	call	___lwdiv	;wreg free
  1704  000D52  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  1705  000D56  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  1706  000D5A  6A03               	clrf	_frecuenciaMedida+2,c
  1707  000D5C  6A04               	clrf	_frecuenciaMedida+3,c
  1708                           
  1709                           ;main.c: 224: if (frecuenciaMedida < ret) {
  1710  000D5E  C05E  F0F6         	movff	_ret,??_main
  1711  000D62  C05F  F0F7         	movff	_ret+1,??_main+1
  1712  000D66  0E00               	movlw	0
  1713  000D68  0100               	movlb	0	; () banked
  1714  000D6A  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  1715  000D6C  0EFF               	movlw	255
  1716  000D6E  6FF8               	movwf	(??_main+2)& (0+255),b
  1717  000D70  6FF9               	movwf	(??_main+3)& (0+255),b
  1718  000D72  0100               	movlb	0	; () banked
  1719  000D74  51F6               	movf	??_main& (0+255),w,b
  1720  000D76  5C01               	subwf	_frecuenciaMedida,w,c
  1721  000D78  0100               	movlb	0	; () banked
  1722  000D7A  51F7               	movf	(??_main+1)& (0+255),w,b
  1723  000D7C  5802               	subwfb	_frecuenciaMedida+1,w,c
  1724  000D7E  0100               	movlb	0	; () banked
  1725  000D80  51F8               	movf	(??_main+2)& (0+255),w,b
  1726  000D82  5803               	subwfb	_frecuenciaMedida+2,w,c
  1727  000D84  5004               	movf	_frecuenciaMedida+3,w,c
  1728  000D86  0A80               	xorlw	128
  1729  000D88  0100               	movlb	0	; () banked
  1730  000D8A  6FFA               	movwf	(??_main+4)& (0+255),b
  1731  000D8C  0100               	movlb	0	; () banked
  1732  000D8E  51F9               	movf	(??_main+3)& (0+255),w,b
  1733  000D90  0A80               	xorlw	128
  1734  000D92  0100               	movlb	0	; () banked
  1735  000D94  59FA               	subwfb	(??_main+4)& (0+255),w,b
  1736  000D96  B0D8               	btfsc	status,0,c
  1737  000D98  D03A               	goto	l189
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;main.c: 225: sprintf(salida, "%d\n\r", frecuenciaMedida);
  1741  000D9A  0E2D               	movlw	low _salida
  1742  000D9C  0100               	movlb	0	; () banked
  1743  000D9E  6FE6               	movwf	sprintf@sp& (0+255),b
  1744  000DA0  0E00               	movlw	high _salida
  1745  000DA2  0100               	movlb	0	; () banked
  1746  000DA4  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  1747  000DA6  0E3B               	movlw	low STR_5
  1748  000DA8  0100               	movlb	0	; () banked
  1749  000DAA  6FE8               	movwf	sprintf@f& (0+255),b
  1750  000DAC  0E06               	movlw	high STR_5
  1751  000DAE  0100               	movlb	0	; () banked
  1752  000DB0  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  1753  000DB2  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  1754  000DB6  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  1755  000DBA  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  1756  000DBE  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  1757  000DC2  EC1C  F00F         	call	_sprintf	;wreg free
  1758                           
  1759                           ;main.c: 227: for (i = 0; i < 8; i++) {
  1760  000DC6  0E00               	movlw	0
  1761  000DC8  6E1A               	movwf	_i+1,c
  1762  000DCA  0E00               	movlw	0
  1763  000DCC  6E19               	movwf	_i,c
  1764  000DCE                     l3809:
  1765  000DCE  FFFF               	dw	65535	; assembler added errata NOP
  1766  000DD0  BE1A               	btfsc	_i+1,7,c
  1767  000DD2  D006               	goto	l3813
  1768  000DD4  501A               	movf	_i+1,w,c
  1769  000DD6  E116               	bnz	l3819
  1770  000DD8  0E08               	movlw	8
  1771  000DDA  5C19               	subwf	_i,w,c
  1772  000DDC  B0D8               	btfsc	status,0,c
  1773  000DDE  D012               	goto	l3819
  1774  000DE0                     l3813:
  1775  000DE0  FFFF               	dw	65535	; assembler added errata NOP
  1776                           
  1777                           ;main.c: 228: TXREG = salida[i];
  1778  000DE2  90D8               	bcf	status,0,c
  1779  000DE4  3419               	rlcf	_i,w,c
  1780  000DE6  6ED9               	movwf	fsr2l,c
  1781  000DE8  341A               	rlcf	_i+1,w,c
  1782  000DEA  6EDA               	movwf	fsr2h,c
  1783  000DEC  0E2D               	movlw	low _salida
  1784  000DEE  26D9               	addwf	fsr2l,f,c
  1785  000DF0  0E00               	movlw	high _salida
  1786  000DF2  22DA               	addwfc	fsr2h,f,c
  1787  000DF4  50DF               	movf	indf2,w,c
  1788  000DF6  6EAD               	movwf	4013,c	;volatile
  1789  000DF8                     l193:
  1790  000DF8  FFFF               	dw	65535	; assembler added errata NOP
  1791  000DFA  A2AC               	btfss	4012,1,c	;volatile
  1792  000DFC  D7FD               	goto	l193
  1793  000DFE  4A19               	infsnz	_i,f,c
  1794  000E00  2A1A               	incf	_i+1,f,c
  1795  000E02  D7E5               	goto	l3809
  1796  000E04                     l3819:
  1797  000E04  FFFF               	dw	65535	; assembler added errata NOP
  1798                           
  1799                           ;main.c: 231: }
  1800                           ;main.c: 232: unSegundo = 0;
  1801  000E06  0E00               	movlw	0
  1802  000E08  6E22               	movwf	_unSegundo+1,c
  1803  000E0A  0E00               	movlw	0
  1804  000E0C  6E21               	movwf	_unSegundo,c
  1805  000E0E                     l189:
  1806  000E0E  FFFF               	dw	65535	; assembler added errata NOP
  1807                           
  1808                           ;main.c: 233: }
  1809                           ;main.c: 234: }
  1810                           ;main.c: 235: segundos = 0;
  1811  000E10  0E00               	movlw	0
  1812  000E12  6E18               	movwf	_segundos+1,c
  1813  000E14  0E00               	movlw	0
  1814  000E16  6E17               	movwf	_segundos,c
  1815  000E18                     l3821:
  1816  000E18  FFFF               	dw	65535	; assembler added errata NOP
  1817                           
  1818                           ;main.c: 236: }
  1819                           ;main.c: 237: if (comando[10] == '5' && unSegundo == 1) {
  1820  000E1A  0E35               	movlw	53
  1821  000E1C  0100               	movlb	0	; () banked
  1822  000E1E  19A8               	xorwf	(_comando+10)& (0+255),w,b
  1823  000E20  A4D8               	btfss	status,2,c
  1824  000E22  D078               	goto	l3849
  1825                           
  1826                           ; BSR set to: 0
  1827  000E24  0421               	decf	_unSegundo,w,c
  1828  000E26  1022               	iorwf	_unSegundo+1,w,c
  1829  000E28  A4D8               	btfss	status,2,c
  1830  000E2A  D074               	goto	l3849
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;main.c: 238: segundos++;
  1834  000E2C  4A17               	infsnz	_segundos,f,c
  1835  000E2E  2A18               	incf	_segundos+1,f,c
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;main.c: 239: if (segundos == 5) {
  1839  000E30  0E05               	movlw	5
  1840  000E32  1817               	xorwf	_segundos,w,c
  1841  000E34  1018               	iorwf	_segundos+1,w,c
  1842  000E36  A4D8               	btfss	status,2,c
  1843  000E38  D06D               	goto	l3849
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;main.c: 240: frecuenciaMedida = TMR1 / segundos;
  1847  000E3A  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  1848  000E3E  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  1849  000E42  C017  F05C         	movff	_segundos,___lwdiv@divisor
  1850  000E46  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  1851  000E4A  EC27  F011         	call	___lwdiv	;wreg free
  1852  000E4E  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  1853  000E52  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  1854  000E56  6A03               	clrf	_frecuenciaMedida+2,c
  1855  000E58  6A04               	clrf	_frecuenciaMedida+3,c
  1856                           
  1857                           ;main.c: 241: if (frecuenciaMedida < ret) {
  1858  000E5A  C05E  F0F6         	movff	_ret,??_main
  1859  000E5E  C05F  F0F7         	movff	_ret+1,??_main+1
  1860  000E62  0E00               	movlw	0
  1861  000E64  0100               	movlb	0	; () banked
  1862  000E66  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  1863  000E68  0EFF               	movlw	255
  1864  000E6A  6FF8               	movwf	(??_main+2)& (0+255),b
  1865  000E6C  6FF9               	movwf	(??_main+3)& (0+255),b
  1866  000E6E  0100               	movlb	0	; () banked
  1867  000E70  51F6               	movf	??_main& (0+255),w,b
  1868  000E72  5C01               	subwf	_frecuenciaMedida,w,c
  1869  000E74  0100               	movlb	0	; () banked
  1870  000E76  51F7               	movf	(??_main+1)& (0+255),w,b
  1871  000E78  5802               	subwfb	_frecuenciaMedida+1,w,c
  1872  000E7A  0100               	movlb	0	; () banked
  1873  000E7C  51F8               	movf	(??_main+2)& (0+255),w,b
  1874  000E7E  5803               	subwfb	_frecuenciaMedida+2,w,c
  1875  000E80  5004               	movf	_frecuenciaMedida+3,w,c
  1876  000E82  0A80               	xorlw	128
  1877  000E84  0100               	movlb	0	; () banked
  1878  000E86  6FFA               	movwf	(??_main+4)& (0+255),b
  1879  000E88  0100               	movlb	0	; () banked
  1880  000E8A  51F9               	movf	(??_main+3)& (0+255),w,b
  1881  000E8C  0A80               	xorlw	128
  1882  000E8E  0100               	movlb	0	; () banked
  1883  000E90  59FA               	subwfb	(??_main+4)& (0+255),w,b
  1884  000E92  B0D8               	btfsc	status,0,c
  1885  000E94  D03A               	goto	l198
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;main.c: 242: sprintf(salida, "%d\n\r", frecuenciaMedida);
  1889  000E96  0E2D               	movlw	low _salida
  1890  000E98  0100               	movlb	0	; () banked
  1891  000E9A  6FE6               	movwf	sprintf@sp& (0+255),b
  1892  000E9C  0E00               	movlw	high _salida
  1893  000E9E  0100               	movlb	0	; () banked
  1894  000EA0  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  1895  000EA2  0E3B               	movlw	low STR_5
  1896  000EA4  0100               	movlb	0	; () banked
  1897  000EA6  6FE8               	movwf	sprintf@f& (0+255),b
  1898  000EA8  0E06               	movlw	high STR_5
  1899  000EAA  0100               	movlb	0	; () banked
  1900  000EAC  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  1901  000EAE  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  1902  000EB2  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  1903  000EB6  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  1904  000EBA  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  1905  000EBE  EC1C  F00F         	call	_sprintf	;wreg free
  1906                           
  1907                           ;main.c: 244: for (i = 0; i < 6; i++) {
  1908  000EC2  0E00               	movlw	0
  1909  000EC4  6E1A               	movwf	_i+1,c
  1910  000EC6  0E00               	movlw	0
  1911  000EC8  6E19               	movwf	_i,c
  1912  000ECA                     l3837:
  1913  000ECA  FFFF               	dw	65535	; assembler added errata NOP
  1914  000ECC  BE1A               	btfsc	_i+1,7,c
  1915  000ECE  D006               	goto	l3841
  1916  000ED0  501A               	movf	_i+1,w,c
  1917  000ED2  E116               	bnz	l3847
  1918  000ED4  0E06               	movlw	6
  1919  000ED6  5C19               	subwf	_i,w,c
  1920  000ED8  B0D8               	btfsc	status,0,c
  1921  000EDA  D012               	goto	l3847
  1922  000EDC                     l3841:
  1923  000EDC  FFFF               	dw	65535	; assembler added errata NOP
  1924                           
  1925                           ;main.c: 245: TXREG = salida[i];
  1926  000EDE  90D8               	bcf	status,0,c
  1927  000EE0  3419               	rlcf	_i,w,c
  1928  000EE2  6ED9               	movwf	fsr2l,c
  1929  000EE4  341A               	rlcf	_i+1,w,c
  1930  000EE6  6EDA               	movwf	fsr2h,c
  1931  000EE8  0E2D               	movlw	low _salida
  1932  000EEA  26D9               	addwf	fsr2l,f,c
  1933  000EEC  0E00               	movlw	high _salida
  1934  000EEE  22DA               	addwfc	fsr2h,f,c
  1935  000EF0  50DF               	movf	indf2,w,c
  1936  000EF2  6EAD               	movwf	4013,c	;volatile
  1937  000EF4                     l201:
  1938  000EF4  FFFF               	dw	65535	; assembler added errata NOP
  1939  000EF6  A2AC               	btfss	4012,1,c	;volatile
  1940  000EF8  D7FD               	goto	l201
  1941  000EFA  4A19               	infsnz	_i,f,c
  1942  000EFC  2A1A               	incf	_i+1,f,c
  1943  000EFE  D7E5               	goto	l3837
  1944  000F00                     l3847:
  1945  000F00  FFFF               	dw	65535	; assembler added errata NOP
  1946                           
  1947                           ;main.c: 248: }
  1948                           ;main.c: 249: unSegundo = 0;
  1949  000F02  0E00               	movlw	0
  1950  000F04  6E22               	movwf	_unSegundo+1,c
  1951  000F06  0E00               	movlw	0
  1952  000F08  6E21               	movwf	_unSegundo,c
  1953  000F0A                     l198:
  1954  000F0A  FFFF               	dw	65535	; assembler added errata NOP
  1955                           
  1956                           ;main.c: 250: }
  1957                           ;main.c: 251: segundos = 0;
  1958  000F0C  0E00               	movlw	0
  1959  000F0E  6E18               	movwf	_segundos+1,c
  1960  000F10  0E00               	movlw	0
  1961  000F12  6E17               	movwf	_segundos,c
  1962  000F14                     l3849:
  1963  000F14  FFFF               	dw	65535	; assembler added errata NOP
  1964                           
  1965                           ;main.c: 252: }
  1966                           ;main.c: 253: }
  1967                           ;main.c: 254: if (comando[10] == '6' && unSegundo == 1) {
  1968  000F16  0E36               	movlw	54
  1969  000F18  0100               	movlb	0	; () banked
  1970  000F1A  19A8               	xorwf	(_comando+10)& (0+255),w,b
  1971  000F1C  A4D8               	btfss	status,2,c
  1972  000F1E  D078               	goto	l3877
  1973                           
  1974                           ; BSR set to: 0
  1975  000F20  0421               	decf	_unSegundo,w,c
  1976  000F22  1022               	iorwf	_unSegundo+1,w,c
  1977  000F24  A4D8               	btfss	status,2,c
  1978  000F26  D074               	goto	l3877
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;main.c: 255: segundos++;
  1982  000F28  4A17               	infsnz	_segundos,f,c
  1983  000F2A  2A18               	incf	_segundos+1,f,c
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;main.c: 256: if (segundos == 6) {
  1987  000F2C  0E06               	movlw	6
  1988  000F2E  1817               	xorwf	_segundos,w,c
  1989  000F30  1018               	iorwf	_segundos+1,w,c
  1990  000F32  A4D8               	btfss	status,2,c
  1991  000F34  D068               	goto	l205
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;main.c: 257: frecuenciaMedida = TMR1 / segundos;
  1995  000F36  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  1996  000F3A  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  1997  000F3E  C017  F05C         	movff	_segundos,___lwdiv@divisor
  1998  000F42  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  1999  000F46  EC27  F011         	call	___lwdiv	;wreg free
  2000  000F4A  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  2001  000F4E  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  2002  000F52  6A03               	clrf	_frecuenciaMedida+2,c
  2003  000F54  6A04               	clrf	_frecuenciaMedida+3,c
  2004                           
  2005                           ;main.c: 258: if (frecuenciaMedida < ret) {
  2006  000F56  C05E  F0F6         	movff	_ret,??_main
  2007  000F5A  C05F  F0F7         	movff	_ret+1,??_main+1
  2008  000F5E  0E00               	movlw	0
  2009  000F60  0100               	movlb	0	; () banked
  2010  000F62  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  2011  000F64  0EFF               	movlw	255
  2012  000F66  6FF8               	movwf	(??_main+2)& (0+255),b
  2013  000F68  6FF9               	movwf	(??_main+3)& (0+255),b
  2014  000F6A  0100               	movlb	0	; () banked
  2015  000F6C  51F6               	movf	??_main& (0+255),w,b
  2016  000F6E  5C01               	subwf	_frecuenciaMedida,w,c
  2017  000F70  0100               	movlb	0	; () banked
  2018  000F72  51F7               	movf	(??_main+1)& (0+255),w,b
  2019  000F74  5802               	subwfb	_frecuenciaMedida+1,w,c
  2020  000F76  0100               	movlb	0	; () banked
  2021  000F78  51F8               	movf	(??_main+2)& (0+255),w,b
  2022  000F7A  5803               	subwfb	_frecuenciaMedida+2,w,c
  2023  000F7C  5004               	movf	_frecuenciaMedida+3,w,c
  2024  000F7E  0A80               	xorlw	128
  2025  000F80  0100               	movlb	0	; () banked
  2026  000F82  6FFA               	movwf	(??_main+4)& (0+255),b
  2027  000F84  0100               	movlb	0	; () banked
  2028  000F86  51F9               	movf	(??_main+3)& (0+255),w,b
  2029  000F88  0A80               	xorlw	128
  2030  000F8A  0100               	movlb	0	; () banked
  2031  000F8C  59FA               	subwfb	(??_main+4)& (0+255),w,b
  2032  000F8E  B0D8               	btfsc	status,0,c
  2033  000F90  D03A               	goto	l205
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;main.c: 259: sprintf(salida, "%d\n\r", frecuenciaMedida);
  2037  000F92  0E2D               	movlw	low _salida
  2038  000F94  0100               	movlb	0	; () banked
  2039  000F96  6FE6               	movwf	sprintf@sp& (0+255),b
  2040  000F98  0E00               	movlw	high _salida
  2041  000F9A  0100               	movlb	0	; () banked
  2042  000F9C  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  2043  000F9E  0E3B               	movlw	low STR_5
  2044  000FA0  0100               	movlb	0	; () banked
  2045  000FA2  6FE8               	movwf	sprintf@f& (0+255),b
  2046  000FA4  0E06               	movlw	high STR_5
  2047  000FA6  0100               	movlb	0	; () banked
  2048  000FA8  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  2049  000FAA  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  2050  000FAE  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  2051  000FB2  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  2052  000FB6  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  2053  000FBA  EC1C  F00F         	call	_sprintf	;wreg free
  2054                           
  2055                           ;main.c: 261: for (i = 0; i < 8; i++) {
  2056  000FBE  0E00               	movlw	0
  2057  000FC0  6E1A               	movwf	_i+1,c
  2058  000FC2  0E00               	movlw	0
  2059  000FC4  6E19               	movwf	_i,c
  2060  000FC6                     l3865:
  2061  000FC6  FFFF               	dw	65535	; assembler added errata NOP
  2062  000FC8  BE1A               	btfsc	_i+1,7,c
  2063  000FCA  D006               	goto	l3869
  2064  000FCC  501A               	movf	_i+1,w,c
  2065  000FCE  E116               	bnz	l3875
  2066  000FD0  0E08               	movlw	8
  2067  000FD2  5C19               	subwf	_i,w,c
  2068  000FD4  B0D8               	btfsc	status,0,c
  2069  000FD6  D012               	goto	l3875
  2070  000FD8                     l3869:
  2071  000FD8  FFFF               	dw	65535	; assembler added errata NOP
  2072                           
  2073                           ;main.c: 262: TXREG = salida[i];
  2074  000FDA  90D8               	bcf	status,0,c
  2075  000FDC  3419               	rlcf	_i,w,c
  2076  000FDE  6ED9               	movwf	fsr2l,c
  2077  000FE0  341A               	rlcf	_i+1,w,c
  2078  000FE2  6EDA               	movwf	fsr2h,c
  2079  000FE4  0E2D               	movlw	low _salida
  2080  000FE6  26D9               	addwf	fsr2l,f,c
  2081  000FE8  0E00               	movlw	high _salida
  2082  000FEA  22DA               	addwfc	fsr2h,f,c
  2083  000FEC  50DF               	movf	indf2,w,c
  2084  000FEE  6EAD               	movwf	4013,c	;volatile
  2085  000FF0                     l209:
  2086  000FF0  FFFF               	dw	65535	; assembler added errata NOP
  2087  000FF2  A2AC               	btfss	4012,1,c	;volatile
  2088  000FF4  D7FD               	goto	l209
  2089  000FF6  4A19               	infsnz	_i,f,c
  2090  000FF8  2A1A               	incf	_i+1,f,c
  2091  000FFA  D7E5               	goto	l3865
  2092  000FFC                     l3875:
  2093  000FFC  FFFF               	dw	65535	; assembler added errata NOP
  2094                           
  2095                           ;main.c: 265: }
  2096                           ;main.c: 266: unSegundo = 0;
  2097  000FFE  0E00               	movlw	0
  2098  001000  6E22               	movwf	_unSegundo+1,c
  2099  001002  0E00               	movlw	0
  2100  001004  6E21               	movwf	_unSegundo,c
  2101  001006                     l205:
  2102  001006  FFFF               	dw	65535	; assembler added errata NOP
  2103                           
  2104                           ;main.c: 267: }
  2105                           ;main.c: 268: }
  2106                           ;main.c: 269: segundos = 0;
  2107  001008  0E00               	movlw	0
  2108  00100A  6E18               	movwf	_segundos+1,c
  2109  00100C  0E00               	movlw	0
  2110  00100E  6E17               	movwf	_segundos,c
  2111  001010                     l3877:
  2112  001010  FFFF               	dw	65535	; assembler added errata NOP
  2113                           
  2114                           ;main.c: 270: }
  2115                           ;main.c: 271: if (comando[10] == '7' && unSegundo == 1) {
  2116  001012  0E37               	movlw	55
  2117  001014  0100               	movlb	0	; () banked
  2118  001016  19A8               	xorwf	(_comando+10)& (0+255),w,b
  2119  001018  A4D8               	btfss	status,2,c
  2120  00101A  D078               	goto	l3905
  2121                           
  2122                           ; BSR set to: 0
  2123  00101C  0421               	decf	_unSegundo,w,c
  2124  00101E  1022               	iorwf	_unSegundo+1,w,c
  2125  001020  A4D8               	btfss	status,2,c
  2126  001022  D074               	goto	l3905
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;main.c: 272: segundos++;
  2130  001024  4A17               	infsnz	_segundos,f,c
  2131  001026  2A18               	incf	_segundos+1,f,c
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;main.c: 273: if (segundos == 7) {
  2135  001028  0E07               	movlw	7
  2136  00102A  1817               	xorwf	_segundos,w,c
  2137  00102C  1018               	iorwf	_segundos+1,w,c
  2138  00102E  A4D8               	btfss	status,2,c
  2139  001030  D068               	goto	l213
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;main.c: 274: frecuenciaMedida = TMR1 / segundos;
  2143  001032  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  2144  001036  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  2145  00103A  C017  F05C         	movff	_segundos,___lwdiv@divisor
  2146  00103E  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  2147  001042  EC27  F011         	call	___lwdiv	;wreg free
  2148  001046  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  2149  00104A  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  2150  00104E  6A03               	clrf	_frecuenciaMedida+2,c
  2151  001050  6A04               	clrf	_frecuenciaMedida+3,c
  2152                           
  2153                           ;main.c: 275: if (frecuenciaMedida < ret) {
  2154  001052  C05E  F0F6         	movff	_ret,??_main
  2155  001056  C05F  F0F7         	movff	_ret+1,??_main+1
  2156  00105A  0E00               	movlw	0
  2157  00105C  0100               	movlb	0	; () banked
  2158  00105E  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  2159  001060  0EFF               	movlw	255
  2160  001062  6FF8               	movwf	(??_main+2)& (0+255),b
  2161  001064  6FF9               	movwf	(??_main+3)& (0+255),b
  2162  001066  0100               	movlb	0	; () banked
  2163  001068  51F6               	movf	??_main& (0+255),w,b
  2164  00106A  5C01               	subwf	_frecuenciaMedida,w,c
  2165  00106C  0100               	movlb	0	; () banked
  2166  00106E  51F7               	movf	(??_main+1)& (0+255),w,b
  2167  001070  5802               	subwfb	_frecuenciaMedida+1,w,c
  2168  001072  0100               	movlb	0	; () banked
  2169  001074  51F8               	movf	(??_main+2)& (0+255),w,b
  2170  001076  5803               	subwfb	_frecuenciaMedida+2,w,c
  2171  001078  5004               	movf	_frecuenciaMedida+3,w,c
  2172  00107A  0A80               	xorlw	128
  2173  00107C  0100               	movlb	0	; () banked
  2174  00107E  6FFA               	movwf	(??_main+4)& (0+255),b
  2175  001080  0100               	movlb	0	; () banked
  2176  001082  51F9               	movf	(??_main+3)& (0+255),w,b
  2177  001084  0A80               	xorlw	128
  2178  001086  0100               	movlb	0	; () banked
  2179  001088  59FA               	subwfb	(??_main+4)& (0+255),w,b
  2180  00108A  B0D8               	btfsc	status,0,c
  2181  00108C  D03A               	goto	l213
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;main.c: 276: sprintf(salida, "%d\n\r", frecuenciaMedida);
  2185  00108E  0E2D               	movlw	low _salida
  2186  001090  0100               	movlb	0	; () banked
  2187  001092  6FE6               	movwf	sprintf@sp& (0+255),b
  2188  001094  0E00               	movlw	high _salida
  2189  001096  0100               	movlb	0	; () banked
  2190  001098  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  2191  00109A  0E3B               	movlw	low STR_5
  2192  00109C  0100               	movlb	0	; () banked
  2193  00109E  6FE8               	movwf	sprintf@f& (0+255),b
  2194  0010A0  0E06               	movlw	high STR_5
  2195  0010A2  0100               	movlb	0	; () banked
  2196  0010A4  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  2197  0010A6  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  2198  0010AA  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  2199  0010AE  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  2200  0010B2  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  2201  0010B6  EC1C  F00F         	call	_sprintf	;wreg free
  2202                           
  2203                           ;main.c: 278: for (i = 0; i < 8; i++) {
  2204  0010BA  0E00               	movlw	0
  2205  0010BC  6E1A               	movwf	_i+1,c
  2206  0010BE  0E00               	movlw	0
  2207  0010C0  6E19               	movwf	_i,c
  2208  0010C2                     l3893:
  2209  0010C2  FFFF               	dw	65535	; assembler added errata NOP
  2210  0010C4  BE1A               	btfsc	_i+1,7,c
  2211  0010C6  D006               	goto	l3897
  2212  0010C8  501A               	movf	_i+1,w,c
  2213  0010CA  E116               	bnz	l3903
  2214  0010CC  0E08               	movlw	8
  2215  0010CE  5C19               	subwf	_i,w,c
  2216  0010D0  B0D8               	btfsc	status,0,c
  2217  0010D2  D012               	goto	l3903
  2218  0010D4                     l3897:
  2219  0010D4  FFFF               	dw	65535	; assembler added errata NOP
  2220                           
  2221                           ;main.c: 279: TXREG = salida[i];
  2222  0010D6  90D8               	bcf	status,0,c
  2223  0010D8  3419               	rlcf	_i,w,c
  2224  0010DA  6ED9               	movwf	fsr2l,c
  2225  0010DC  341A               	rlcf	_i+1,w,c
  2226  0010DE  6EDA               	movwf	fsr2h,c
  2227  0010E0  0E2D               	movlw	low _salida
  2228  0010E2  26D9               	addwf	fsr2l,f,c
  2229  0010E4  0E00               	movlw	high _salida
  2230  0010E6  22DA               	addwfc	fsr2h,f,c
  2231  0010E8  50DF               	movf	indf2,w,c
  2232  0010EA  6EAD               	movwf	4013,c	;volatile
  2233  0010EC                     l217:
  2234  0010EC  FFFF               	dw	65535	; assembler added errata NOP
  2235  0010EE  A2AC               	btfss	4012,1,c	;volatile
  2236  0010F0  D7FD               	goto	l217
  2237  0010F2  4A19               	infsnz	_i,f,c
  2238  0010F4  2A1A               	incf	_i+1,f,c
  2239  0010F6  D7E5               	goto	l3893
  2240  0010F8                     l3903:
  2241  0010F8  FFFF               	dw	65535	; assembler added errata NOP
  2242                           
  2243                           ;main.c: 282: }
  2244                           ;main.c: 283: unSegundo = 0;
  2245  0010FA  0E00               	movlw	0
  2246  0010FC  6E22               	movwf	_unSegundo+1,c
  2247  0010FE  0E00               	movlw	0
  2248  001100  6E21               	movwf	_unSegundo,c
  2249  001102                     l213:
  2250  001102  FFFF               	dw	65535	; assembler added errata NOP
  2251                           
  2252                           ;main.c: 284: }
  2253                           ;main.c: 285: }
  2254                           ;main.c: 286: segundos = 0;
  2255  001104  0E00               	movlw	0
  2256  001106  6E18               	movwf	_segundos+1,c
  2257  001108  0E00               	movlw	0
  2258  00110A  6E17               	movwf	_segundos,c
  2259  00110C                     l3905:
  2260  00110C  FFFF               	dw	65535	; assembler added errata NOP
  2261                           
  2262                           ;main.c: 287: }
  2263                           ;main.c: 288: if (comando[10] == '8' && unSegundo == 1) {
  2264  00110E  0E38               	movlw	56
  2265  001110  0100               	movlb	0	; () banked
  2266  001112  19A8               	xorwf	(_comando+10)& (0+255),w,b
  2267  001114  A4D8               	btfss	status,2,c
  2268  001116  D078               	goto	l3933
  2269                           
  2270                           ; BSR set to: 0
  2271  001118  0421               	decf	_unSegundo,w,c
  2272  00111A  1022               	iorwf	_unSegundo+1,w,c
  2273  00111C  A4D8               	btfss	status,2,c
  2274  00111E  D074               	goto	l3933
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;main.c: 289: segundos++;
  2278  001120  4A17               	infsnz	_segundos,f,c
  2279  001122  2A18               	incf	_segundos+1,f,c
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;main.c: 290: if (segundos == 8) {
  2283  001124  0E08               	movlw	8
  2284  001126  1817               	xorwf	_segundos,w,c
  2285  001128  1018               	iorwf	_segundos+1,w,c
  2286  00112A  A4D8               	btfss	status,2,c
  2287  00112C  D068               	goto	l221
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;main.c: 291: frecuenciaMedida = TMR1 / segundos;
  2291  00112E  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  2292  001132  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  2293  001136  C017  F05C         	movff	_segundos,___lwdiv@divisor
  2294  00113A  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  2295  00113E  EC27  F011         	call	___lwdiv	;wreg free
  2296  001142  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  2297  001146  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  2298  00114A  6A03               	clrf	_frecuenciaMedida+2,c
  2299  00114C  6A04               	clrf	_frecuenciaMedida+3,c
  2300                           
  2301                           ;main.c: 292: if (frecuenciaMedida < ret) {
  2302  00114E  C05E  F0F6         	movff	_ret,??_main
  2303  001152  C05F  F0F7         	movff	_ret+1,??_main+1
  2304  001156  0E00               	movlw	0
  2305  001158  0100               	movlb	0	; () banked
  2306  00115A  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  2307  00115C  0EFF               	movlw	255
  2308  00115E  6FF8               	movwf	(??_main+2)& (0+255),b
  2309  001160  6FF9               	movwf	(??_main+3)& (0+255),b
  2310  001162  0100               	movlb	0	; () banked
  2311  001164  51F6               	movf	??_main& (0+255),w,b
  2312  001166  5C01               	subwf	_frecuenciaMedida,w,c
  2313  001168  0100               	movlb	0	; () banked
  2314  00116A  51F7               	movf	(??_main+1)& (0+255),w,b
  2315  00116C  5802               	subwfb	_frecuenciaMedida+1,w,c
  2316  00116E  0100               	movlb	0	; () banked
  2317  001170  51F8               	movf	(??_main+2)& (0+255),w,b
  2318  001172  5803               	subwfb	_frecuenciaMedida+2,w,c
  2319  001174  5004               	movf	_frecuenciaMedida+3,w,c
  2320  001176  0A80               	xorlw	128
  2321  001178  0100               	movlb	0	; () banked
  2322  00117A  6FFA               	movwf	(??_main+4)& (0+255),b
  2323  00117C  0100               	movlb	0	; () banked
  2324  00117E  51F9               	movf	(??_main+3)& (0+255),w,b
  2325  001180  0A80               	xorlw	128
  2326  001182  0100               	movlb	0	; () banked
  2327  001184  59FA               	subwfb	(??_main+4)& (0+255),w,b
  2328  001186  B0D8               	btfsc	status,0,c
  2329  001188  D03A               	goto	l221
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;main.c: 293: sprintf(salida, "%d\n\r", frecuenciaMedida);
  2333  00118A  0E2D               	movlw	low _salida
  2334  00118C  0100               	movlb	0	; () banked
  2335  00118E  6FE6               	movwf	sprintf@sp& (0+255),b
  2336  001190  0E00               	movlw	high _salida
  2337  001192  0100               	movlb	0	; () banked
  2338  001194  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  2339  001196  0E3B               	movlw	low STR_5
  2340  001198  0100               	movlb	0	; () banked
  2341  00119A  6FE8               	movwf	sprintf@f& (0+255),b
  2342  00119C  0E06               	movlw	high STR_5
  2343  00119E  0100               	movlb	0	; () banked
  2344  0011A0  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  2345  0011A2  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  2346  0011A6  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  2347  0011AA  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  2348  0011AE  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  2349  0011B2  EC1C  F00F         	call	_sprintf	;wreg free
  2350                           
  2351                           ;main.c: 295: for (i = 0; i < 8; i++) {
  2352  0011B6  0E00               	movlw	0
  2353  0011B8  6E1A               	movwf	_i+1,c
  2354  0011BA  0E00               	movlw	0
  2355  0011BC  6E19               	movwf	_i,c
  2356  0011BE                     l3921:
  2357  0011BE  FFFF               	dw	65535	; assembler added errata NOP
  2358  0011C0  BE1A               	btfsc	_i+1,7,c
  2359  0011C2  D006               	goto	l3925
  2360  0011C4  501A               	movf	_i+1,w,c
  2361  0011C6  E116               	bnz	l3931
  2362  0011C8  0E08               	movlw	8
  2363  0011CA  5C19               	subwf	_i,w,c
  2364  0011CC  B0D8               	btfsc	status,0,c
  2365  0011CE  D012               	goto	l3931
  2366  0011D0                     l3925:
  2367  0011D0  FFFF               	dw	65535	; assembler added errata NOP
  2368                           
  2369                           ;main.c: 296: TXREG = salida[i];
  2370  0011D2  90D8               	bcf	status,0,c
  2371  0011D4  3419               	rlcf	_i,w,c
  2372  0011D6  6ED9               	movwf	fsr2l,c
  2373  0011D8  341A               	rlcf	_i+1,w,c
  2374  0011DA  6EDA               	movwf	fsr2h,c
  2375  0011DC  0E2D               	movlw	low _salida
  2376  0011DE  26D9               	addwf	fsr2l,f,c
  2377  0011E0  0E00               	movlw	high _salida
  2378  0011E2  22DA               	addwfc	fsr2h,f,c
  2379  0011E4  50DF               	movf	indf2,w,c
  2380  0011E6  6EAD               	movwf	4013,c	;volatile
  2381  0011E8                     l225:
  2382  0011E8  FFFF               	dw	65535	; assembler added errata NOP
  2383  0011EA  A2AC               	btfss	4012,1,c	;volatile
  2384  0011EC  D7FD               	goto	l225
  2385  0011EE  4A19               	infsnz	_i,f,c
  2386  0011F0  2A1A               	incf	_i+1,f,c
  2387  0011F2  D7E5               	goto	l3921
  2388  0011F4                     l3931:
  2389  0011F4  FFFF               	dw	65535	; assembler added errata NOP
  2390                           
  2391                           ;main.c: 299: }
  2392                           ;main.c: 300: unSegundo = 0;
  2393  0011F6  0E00               	movlw	0
  2394  0011F8  6E22               	movwf	_unSegundo+1,c
  2395  0011FA  0E00               	movlw	0
  2396  0011FC  6E21               	movwf	_unSegundo,c
  2397  0011FE                     l221:
  2398  0011FE  FFFF               	dw	65535	; assembler added errata NOP
  2399                           
  2400                           ;main.c: 301: }
  2401                           ;main.c: 302: }
  2402                           ;main.c: 303: segundos = 0;
  2403  001200  0E00               	movlw	0
  2404  001202  6E18               	movwf	_segundos+1,c
  2405  001204  0E00               	movlw	0
  2406  001206  6E17               	movwf	_segundos,c
  2407  001208                     l3933:
  2408  001208  FFFF               	dw	65535	; assembler added errata NOP
  2409                           
  2410                           ;main.c: 304: }
  2411                           ;main.c: 305: if (comando[10] == '9' && unSegundo == 1) {
  2412  00120A  0E39               	movlw	57
  2413  00120C  0100               	movlb	0	; () banked
  2414  00120E  19A8               	xorwf	(_comando+10)& (0+255),w,b
  2415  001210  A4D8               	btfss	status,2,c
  2416  001212  EF55  F000         	goto	start
  2417                           
  2418                           ; BSR set to: 0
  2419  001216  0421               	decf	_unSegundo,w,c
  2420  001218  1022               	iorwf	_unSegundo+1,w,c
  2421  00121A  A4D8               	btfss	status,2,c
  2422  00121C  EF55  F000         	goto	start
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;main.c: 306: segundos++;
  2426  001220  4A17               	infsnz	_segundos,f,c
  2427  001222  2A18               	incf	_segundos+1,f,c
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;main.c: 307: if (segundos == 9) {
  2431  001224  0E09               	movlw	9
  2432  001226  1817               	xorwf	_segundos,w,c
  2433  001228  1018               	iorwf	_segundos+1,w,c
  2434  00122A  A4D8               	btfss	status,2,c
  2435  00122C  D068               	goto	l229
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 308: frecuenciaMedida = TMR1 / segundos;
  2439  00122E  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  2440  001232  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  2441  001236  C017  F05C         	movff	_segundos,___lwdiv@divisor
  2442  00123A  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  2443  00123E  EC27  F011         	call	___lwdiv	;wreg free
  2444  001242  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  2445  001246  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  2446  00124A  6A03               	clrf	_frecuenciaMedida+2,c
  2447  00124C  6A04               	clrf	_frecuenciaMedida+3,c
  2448                           
  2449                           ;main.c: 309: if (frecuenciaMedida < ret) {
  2450  00124E  C05E  F0F6         	movff	_ret,??_main
  2451  001252  C05F  F0F7         	movff	_ret+1,??_main+1
  2452  001256  0E00               	movlw	0
  2453  001258  0100               	movlb	0	; () banked
  2454  00125A  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  2455  00125C  0EFF               	movlw	255
  2456  00125E  6FF8               	movwf	(??_main+2)& (0+255),b
  2457  001260  6FF9               	movwf	(??_main+3)& (0+255),b
  2458  001262  0100               	movlb	0	; () banked
  2459  001264  51F6               	movf	??_main& (0+255),w,b
  2460  001266  5C01               	subwf	_frecuenciaMedida,w,c
  2461  001268  0100               	movlb	0	; () banked
  2462  00126A  51F7               	movf	(??_main+1)& (0+255),w,b
  2463  00126C  5802               	subwfb	_frecuenciaMedida+1,w,c
  2464  00126E  0100               	movlb	0	; () banked
  2465  001270  51F8               	movf	(??_main+2)& (0+255),w,b
  2466  001272  5803               	subwfb	_frecuenciaMedida+2,w,c
  2467  001274  5004               	movf	_frecuenciaMedida+3,w,c
  2468  001276  0A80               	xorlw	128
  2469  001278  0100               	movlb	0	; () banked
  2470  00127A  6FFA               	movwf	(??_main+4)& (0+255),b
  2471  00127C  0100               	movlb	0	; () banked
  2472  00127E  51F9               	movf	(??_main+3)& (0+255),w,b
  2473  001280  0A80               	xorlw	128
  2474  001282  0100               	movlb	0	; () banked
  2475  001284  59FA               	subwfb	(??_main+4)& (0+255),w,b
  2476  001286  B0D8               	btfsc	status,0,c
  2477  001288  D03A               	goto	l229
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;main.c: 310: sprintf(salida, "%d\n\r", frecuenciaMedida);
  2481  00128A  0E2D               	movlw	low _salida
  2482  00128C  0100               	movlb	0	; () banked
  2483  00128E  6FE6               	movwf	sprintf@sp& (0+255),b
  2484  001290  0E00               	movlw	high _salida
  2485  001292  0100               	movlb	0	; () banked
  2486  001294  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  2487  001296  0E3B               	movlw	low STR_5
  2488  001298  0100               	movlb	0	; () banked
  2489  00129A  6FE8               	movwf	sprintf@f& (0+255),b
  2490  00129C  0E06               	movlw	high STR_5
  2491  00129E  0100               	movlb	0	; () banked
  2492  0012A0  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  2493  0012A2  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  2494  0012A6  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  2495  0012AA  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  2496  0012AE  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  2497  0012B2  EC1C  F00F         	call	_sprintf	;wreg free
  2498                           
  2499                           ;main.c: 312: for (i = 0; i < 8; i++) {
  2500  0012B6  0E00               	movlw	0
  2501  0012B8  6E1A               	movwf	_i+1,c
  2502  0012BA  0E00               	movlw	0
  2503  0012BC  6E19               	movwf	_i,c
  2504  0012BE                     l3949:
  2505  0012BE  FFFF               	dw	65535	; assembler added errata NOP
  2506  0012C0  BE1A               	btfsc	_i+1,7,c
  2507  0012C2  D006               	goto	l3953
  2508  0012C4  501A               	movf	_i+1,w,c
  2509  0012C6  E116               	bnz	l3959
  2510  0012C8  0E08               	movlw	8
  2511  0012CA  5C19               	subwf	_i,w,c
  2512  0012CC  B0D8               	btfsc	status,0,c
  2513  0012CE  D012               	goto	l3959
  2514  0012D0                     l3953:
  2515  0012D0  FFFF               	dw	65535	; assembler added errata NOP
  2516                           
  2517                           ;main.c: 313: TXREG = salida[i];
  2518  0012D2  90D8               	bcf	status,0,c
  2519  0012D4  3419               	rlcf	_i,w,c
  2520  0012D6  6ED9               	movwf	fsr2l,c
  2521  0012D8  341A               	rlcf	_i+1,w,c
  2522  0012DA  6EDA               	movwf	fsr2h,c
  2523  0012DC  0E2D               	movlw	low _salida
  2524  0012DE  26D9               	addwf	fsr2l,f,c
  2525  0012E0  0E00               	movlw	high _salida
  2526  0012E2  22DA               	addwfc	fsr2h,f,c
  2527  0012E4  50DF               	movf	indf2,w,c
  2528  0012E6  6EAD               	movwf	4013,c	;volatile
  2529  0012E8                     l233:
  2530  0012E8  FFFF               	dw	65535	; assembler added errata NOP
  2531  0012EA  A2AC               	btfss	4012,1,c	;volatile
  2532  0012EC  D7FD               	goto	l233
  2533  0012EE  4A19               	infsnz	_i,f,c
  2534  0012F0  2A1A               	incf	_i+1,f,c
  2535  0012F2  D7E5               	goto	l3949
  2536  0012F4                     l3959:
  2537  0012F4  FFFF               	dw	65535	; assembler added errata NOP
  2538                           
  2539                           ;main.c: 316: }
  2540                           ;main.c: 317: unSegundo = 0;
  2541  0012F6  0E00               	movlw	0
  2542  0012F8  6E22               	movwf	_unSegundo+1,c
  2543  0012FA  0E00               	movlw	0
  2544  0012FC  6E21               	movwf	_unSegundo,c
  2545  0012FE                     l229:
  2546  0012FE  FFFF               	dw	65535	; assembler added errata NOP
  2547                           
  2548                           ;main.c: 318: }
  2549                           ;main.c: 319: }
  2550                           ;main.c: 320: segundos = 0;
  2551  001300  0E00               	movlw	0
  2552  001302  6E18               	movwf	_segundos+1,c
  2553  001304  0E00               	movlw	0
  2554  001306  6E17               	movwf	_segundos,c
  2555                           
  2556                           ;main.c: 321: }
  2557                           ;main.c: 322: }
  2558                           ;main.c: 323: break;
  2559  001308  EF55  F000         	goto	start
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;main.c: 340: __nop();
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;main.c: 339: segundos++;
  2566                           
  2567                           ; BSR set to: 0
  2568                           
  2569                           ;main.c: 336: if (comando[10] == '1' && unSegundo == 1) {
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;main.c: 334: ret = strtol(umbral, &ptr, 10);
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;main.c: 332: umbral [4] = comando [21];
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;main.c: 331: umbral [3] = comando [20];
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;main.c: 330: umbral [2] = comando [19];
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;main.c: 329: umbral [1] = comando [18];
  2585                           
  2586                           ;main.c: 328: umbral [0] = comando [17];
  2587                           
  2588                           ;main.c: 326: g = 1;
  2589                           
  2590                           ;main.c: 325: c = 0;
  2591                           
  2592                           ;main.c: 324: if (mode == 2) {
  2593  00130C  F000               	nop	
  2594                           
  2595                           ;main.c: 342: __nop();
  2596                           
  2597                           ;main.c: 341: if (segundos == 1) {
  2598  00130E  F000               	nop	
  2599  001310                     l3997:
  2600  001310  FFFF               	dw	65535	; assembler added errata NOP
  2601  001312  BE1A               	btfsc	_i+1,7,c
  2602  001314  D006               	goto	l4001
  2603  001316  501A               	movf	_i+1,w,c
  2604  001318  E116               	bnz	l4007
  2605  00131A  0E08               	movlw	8
  2606  00131C  5C19               	subwf	_i,w,c
  2607  00131E  B0D8               	btfsc	status,0,c
  2608  001320  D012               	goto	l4007
  2609  001322                     l4001:
  2610  001322  FFFF               	dw	65535	; assembler added errata NOP
  2611                           
  2612                           ;main.c: 349: TXREG = salida[i];
  2613  001324  90D8               	bcf	status,0,c
  2614  001326  3419               	rlcf	_i,w,c
  2615  001328  6ED9               	movwf	fsr2l,c
  2616  00132A  341A               	rlcf	_i+1,w,c
  2617  00132C  6EDA               	movwf	fsr2h,c
  2618  00132E  0E2D               	movlw	low _salida
  2619  001330  26D9               	addwf	fsr2l,f,c
  2620  001332  0E00               	movlw	high _salida
  2621  001334  22DA               	addwfc	fsr2h,f,c
  2622  001336  50DF               	movf	indf2,w,c
  2623  001338  6EAD               	movwf	4013,c	;volatile
  2624  00133A                     l243:
  2625  00133A  FFFF               	dw	65535	; assembler added errata NOP
  2626  00133C  A2AC               	btfss	4012,1,c	;volatile
  2627  00133E  D7FD               	goto	l243
  2628  001340  4A19               	infsnz	_i,f,c
  2629  001342  2A1A               	incf	_i+1,f,c
  2630  001344  D7E5               	goto	l3997
  2631  001346                     l4007:
  2632  001346  FFFF               	dw	65535	; assembler added errata NOP
  2633                           
  2634                           ;main.c: 352: }
  2635                           ;main.c: 353: unSegundo = 0;
  2636  001348  0E00               	movlw	0
  2637  00134A  6E22               	movwf	_unSegundo+1,c
  2638  00134C  0E00               	movlw	0
  2639  00134E  6E21               	movwf	_unSegundo,c
  2640                           
  2641                           ;main.c: 354: }
  2642                           ;main.c: 355: }
  2643                           ;main.c: 357: }
  2644                           ;main.c: 358: segundos = 0;
  2645  001350  0E00               	movlw	0
  2646  001352  6E18               	movwf	_segundos+1,c
  2647  001354  0E00               	movlw	0
  2648  001356  6E17               	movwf	_segundos,c
  2649                           
  2650                           ;main.c: 361: if (comando[10] == '2' && unSegundo == 1) {
  2651  001358  0E32               	movlw	50
  2652  00135A  0100               	movlb	0	; () banked
  2653  00135C  19A8               	xorwf	(_comando+10)& (0+255),w,b
  2654  00135E  A4D8               	btfss	status,2,c
  2655  001360  D078               	goto	l4037
  2656                           
  2657                           ; BSR set to: 0
  2658  001362  0421               	decf	_unSegundo,w,c
  2659  001364  1022               	iorwf	_unSegundo+1,w,c
  2660  001366  A4D8               	btfss	status,2,c
  2661  001368  D074               	goto	l4037
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;main.c: 362: segundos++;
  2665  00136A  4A17               	infsnz	_segundos,f,c
  2666  00136C  2A18               	incf	_segundos+1,f,c
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;main.c: 363: if (segundos == 2) {
  2670  00136E  0E02               	movlw	2
  2671  001370  1817               	xorwf	_segundos,w,c
  2672  001372  1018               	iorwf	_segundos+1,w,c
  2673  001374  A4D8               	btfss	status,2,c
  2674  001376  D068               	goto	l247
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;main.c: 364: frecuenciaMedida = TMR1 / segundos;
  2678  001378  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  2679  00137C  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  2680  001380  C017  F05C         	movff	_segundos,___lwdiv@divisor
  2681  001384  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  2682  001388  EC27  F011         	call	___lwdiv	;wreg free
  2683  00138C  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  2684  001390  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  2685  001394  6A03               	clrf	_frecuenciaMedida+2,c
  2686  001396  6A04               	clrf	_frecuenciaMedida+3,c
  2687                           
  2688                           ;main.c: 365: if (frecuenciaMedida < ret) {
  2689  001398  C05E  F0F6         	movff	_ret,??_main
  2690  00139C  C05F  F0F7         	movff	_ret+1,??_main+1
  2691  0013A0  0E00               	movlw	0
  2692  0013A2  0100               	movlb	0	; () banked
  2693  0013A4  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  2694  0013A6  0EFF               	movlw	255
  2695  0013A8  6FF8               	movwf	(??_main+2)& (0+255),b
  2696  0013AA  6FF9               	movwf	(??_main+3)& (0+255),b
  2697  0013AC  0100               	movlb	0	; () banked
  2698  0013AE  51F6               	movf	??_main& (0+255),w,b
  2699  0013B0  5C01               	subwf	_frecuenciaMedida,w,c
  2700  0013B2  0100               	movlb	0	; () banked
  2701  0013B4  51F7               	movf	(??_main+1)& (0+255),w,b
  2702  0013B6  5802               	subwfb	_frecuenciaMedida+1,w,c
  2703  0013B8  0100               	movlb	0	; () banked
  2704  0013BA  51F8               	movf	(??_main+2)& (0+255),w,b
  2705  0013BC  5803               	subwfb	_frecuenciaMedida+2,w,c
  2706  0013BE  5004               	movf	_frecuenciaMedida+3,w,c
  2707  0013C0  0A80               	xorlw	128
  2708  0013C2  0100               	movlb	0	; () banked
  2709  0013C4  6FFA               	movwf	(??_main+4)& (0+255),b
  2710  0013C6  0100               	movlb	0	; () banked
  2711  0013C8  51F9               	movf	(??_main+3)& (0+255),w,b
  2712  0013CA  0A80               	xorlw	128
  2713  0013CC  0100               	movlb	0	; () banked
  2714  0013CE  59FA               	subwfb	(??_main+4)& (0+255),w,b
  2715  0013D0  B0D8               	btfsc	status,0,c
  2716  0013D2  D03A               	goto	l247
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;main.c: 366: sprintf(salida, "%d\n\r", frecuenciaMedida);
  2720  0013D4  0E2D               	movlw	low _salida
  2721  0013D6  0100               	movlb	0	; () banked
  2722  0013D8  6FE6               	movwf	sprintf@sp& (0+255),b
  2723  0013DA  0E00               	movlw	high _salida
  2724  0013DC  0100               	movlb	0	; () banked
  2725  0013DE  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  2726  0013E0  0E3B               	movlw	low STR_5
  2727  0013E2  0100               	movlb	0	; () banked
  2728  0013E4  6FE8               	movwf	sprintf@f& (0+255),b
  2729  0013E6  0E06               	movlw	high STR_5
  2730  0013E8  0100               	movlb	0	; () banked
  2731  0013EA  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  2732  0013EC  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  2733  0013F0  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  2734  0013F4  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  2735  0013F8  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  2736  0013FC  EC1C  F00F         	call	_sprintf	;wreg free
  2737                           
  2738                           ;main.c: 368: for (i = 0; i < 8; i++) {
  2739  001400  0E00               	movlw	0
  2740  001402  6E1A               	movwf	_i+1,c
  2741  001404  0E00               	movlw	0
  2742  001406  6E19               	movwf	_i,c
  2743  001408                     l4025:
  2744  001408  FFFF               	dw	65535	; assembler added errata NOP
  2745  00140A  BE1A               	btfsc	_i+1,7,c
  2746  00140C  D006               	goto	l4029
  2747  00140E  501A               	movf	_i+1,w,c
  2748  001410  E116               	bnz	l4035
  2749  001412  0E08               	movlw	8
  2750  001414  5C19               	subwf	_i,w,c
  2751  001416  B0D8               	btfsc	status,0,c
  2752  001418  D012               	goto	l4035
  2753  00141A                     l4029:
  2754  00141A  FFFF               	dw	65535	; assembler added errata NOP
  2755                           
  2756                           ;main.c: 369: TXREG = salida[i];
  2757  00141C  90D8               	bcf	status,0,c
  2758  00141E  3419               	rlcf	_i,w,c
  2759  001420  6ED9               	movwf	fsr2l,c
  2760  001422  341A               	rlcf	_i+1,w,c
  2761  001424  6EDA               	movwf	fsr2h,c
  2762  001426  0E2D               	movlw	low _salida
  2763  001428  26D9               	addwf	fsr2l,f,c
  2764  00142A  0E00               	movlw	high _salida
  2765  00142C  22DA               	addwfc	fsr2h,f,c
  2766  00142E  50DF               	movf	indf2,w,c
  2767  001430  6EAD               	movwf	4013,c	;volatile
  2768  001432                     l251:
  2769  001432  FFFF               	dw	65535	; assembler added errata NOP
  2770  001434  A2AC               	btfss	4012,1,c	;volatile
  2771  001436  D7FD               	goto	l251
  2772  001438  4A19               	infsnz	_i,f,c
  2773  00143A  2A1A               	incf	_i+1,f,c
  2774  00143C  D7E5               	goto	l4025
  2775  00143E                     l4035:
  2776  00143E  FFFF               	dw	65535	; assembler added errata NOP
  2777                           
  2778                           ;main.c: 372: }
  2779                           ;main.c: 373: unSegundo = 0;
  2780  001440  0E00               	movlw	0
  2781  001442  6E22               	movwf	_unSegundo+1,c
  2782  001444  0E00               	movlw	0
  2783  001446  6E21               	movwf	_unSegundo,c
  2784  001448                     l247:
  2785  001448  FFFF               	dw	65535	; assembler added errata NOP
  2786                           
  2787                           ;main.c: 374: }
  2788                           ;main.c: 375: }
  2789                           ;main.c: 376: segundos = 0;
  2790  00144A  0E00               	movlw	0
  2791  00144C  6E18               	movwf	_segundos+1,c
  2792  00144E  0E00               	movlw	0
  2793  001450  6E17               	movwf	_segundos,c
  2794  001452                     l4037:
  2795  001452  FFFF               	dw	65535	; assembler added errata NOP
  2796                           
  2797                           ;main.c: 377: }
  2798                           ;main.c: 378: if (comando[10] == '3' && unSegundo == 1) {
  2799  001454  0E33               	movlw	51
  2800  001456  0100               	movlb	0	; () banked
  2801  001458  19A8               	xorwf	(_comando+10)& (0+255),w,b
  2802  00145A  A4D8               	btfss	status,2,c
  2803  00145C  D078               	goto	l4065
  2804                           
  2805                           ; BSR set to: 0
  2806  00145E  0421               	decf	_unSegundo,w,c
  2807  001460  1022               	iorwf	_unSegundo+1,w,c
  2808  001462  A4D8               	btfss	status,2,c
  2809  001464  D074               	goto	l4065
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;main.c: 379: segundos++;
  2813  001466  4A17               	infsnz	_segundos,f,c
  2814  001468  2A18               	incf	_segundos+1,f,c
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;main.c: 380: if (segundos == 3) {
  2818  00146A  0E03               	movlw	3
  2819  00146C  1817               	xorwf	_segundos,w,c
  2820  00146E  1018               	iorwf	_segundos+1,w,c
  2821  001470  A4D8               	btfss	status,2,c
  2822  001472  D068               	goto	l255
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;main.c: 381: frecuenciaMedida = TMR1 / segundos;
  2826  001474  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  2827  001478  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  2828  00147C  C017  F05C         	movff	_segundos,___lwdiv@divisor
  2829  001480  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  2830  001484  EC27  F011         	call	___lwdiv	;wreg free
  2831  001488  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  2832  00148C  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  2833  001490  6A03               	clrf	_frecuenciaMedida+2,c
  2834  001492  6A04               	clrf	_frecuenciaMedida+3,c
  2835                           
  2836                           ;main.c: 382: if (frecuenciaMedida < ret) {
  2837  001494  C05E  F0F6         	movff	_ret,??_main
  2838  001498  C05F  F0F7         	movff	_ret+1,??_main+1
  2839  00149C  0E00               	movlw	0
  2840  00149E  0100               	movlb	0	; () banked
  2841  0014A0  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  2842  0014A2  0EFF               	movlw	255
  2843  0014A4  6FF8               	movwf	(??_main+2)& (0+255),b
  2844  0014A6  6FF9               	movwf	(??_main+3)& (0+255),b
  2845  0014A8  0100               	movlb	0	; () banked
  2846  0014AA  51F6               	movf	??_main& (0+255),w,b
  2847  0014AC  5C01               	subwf	_frecuenciaMedida,w,c
  2848  0014AE  0100               	movlb	0	; () banked
  2849  0014B0  51F7               	movf	(??_main+1)& (0+255),w,b
  2850  0014B2  5802               	subwfb	_frecuenciaMedida+1,w,c
  2851  0014B4  0100               	movlb	0	; () banked
  2852  0014B6  51F8               	movf	(??_main+2)& (0+255),w,b
  2853  0014B8  5803               	subwfb	_frecuenciaMedida+2,w,c
  2854  0014BA  5004               	movf	_frecuenciaMedida+3,w,c
  2855  0014BC  0A80               	xorlw	128
  2856  0014BE  0100               	movlb	0	; () banked
  2857  0014C0  6FFA               	movwf	(??_main+4)& (0+255),b
  2858  0014C2  0100               	movlb	0	; () banked
  2859  0014C4  51F9               	movf	(??_main+3)& (0+255),w,b
  2860  0014C6  0A80               	xorlw	128
  2861  0014C8  0100               	movlb	0	; () banked
  2862  0014CA  59FA               	subwfb	(??_main+4)& (0+255),w,b
  2863  0014CC  B0D8               	btfsc	status,0,c
  2864  0014CE  D03A               	goto	l255
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;main.c: 383: sprintf(salida, "%d\n\r", frecuenciaMedida);
  2868  0014D0  0E2D               	movlw	low _salida
  2869  0014D2  0100               	movlb	0	; () banked
  2870  0014D4  6FE6               	movwf	sprintf@sp& (0+255),b
  2871  0014D6  0E00               	movlw	high _salida
  2872  0014D8  0100               	movlb	0	; () banked
  2873  0014DA  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  2874  0014DC  0E3B               	movlw	low STR_5
  2875  0014DE  0100               	movlb	0	; () banked
  2876  0014E0  6FE8               	movwf	sprintf@f& (0+255),b
  2877  0014E2  0E06               	movlw	high STR_5
  2878  0014E4  0100               	movlb	0	; () banked
  2879  0014E6  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  2880  0014E8  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  2881  0014EC  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  2882  0014F0  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  2883  0014F4  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  2884  0014F8  EC1C  F00F         	call	_sprintf	;wreg free
  2885                           
  2886                           ;main.c: 385: for (i = 0; i < 8; i++) {
  2887  0014FC  0E00               	movlw	0
  2888  0014FE  6E1A               	movwf	_i+1,c
  2889  001500  0E00               	movlw	0
  2890  001502  6E19               	movwf	_i,c
  2891  001504                     l4053:
  2892  001504  FFFF               	dw	65535	; assembler added errata NOP
  2893  001506  BE1A               	btfsc	_i+1,7,c
  2894  001508  D006               	goto	l4057
  2895  00150A  501A               	movf	_i+1,w,c
  2896  00150C  E116               	bnz	l4063
  2897  00150E  0E08               	movlw	8
  2898  001510  5C19               	subwf	_i,w,c
  2899  001512  B0D8               	btfsc	status,0,c
  2900  001514  D012               	goto	l4063
  2901  001516                     l4057:
  2902  001516  FFFF               	dw	65535	; assembler added errata NOP
  2903                           
  2904                           ;main.c: 386: TXREG = salida[i];
  2905  001518  90D8               	bcf	status,0,c
  2906  00151A  3419               	rlcf	_i,w,c
  2907  00151C  6ED9               	movwf	fsr2l,c
  2908  00151E  341A               	rlcf	_i+1,w,c
  2909  001520  6EDA               	movwf	fsr2h,c
  2910  001522  0E2D               	movlw	low _salida
  2911  001524  26D9               	addwf	fsr2l,f,c
  2912  001526  0E00               	movlw	high _salida
  2913  001528  22DA               	addwfc	fsr2h,f,c
  2914  00152A  50DF               	movf	indf2,w,c
  2915  00152C  6EAD               	movwf	4013,c	;volatile
  2916  00152E                     l259:
  2917  00152E  FFFF               	dw	65535	; assembler added errata NOP
  2918  001530  A2AC               	btfss	4012,1,c	;volatile
  2919  001532  D7FD               	goto	l259
  2920  001534  4A19               	infsnz	_i,f,c
  2921  001536  2A1A               	incf	_i+1,f,c
  2922  001538  D7E5               	goto	l4053
  2923  00153A                     l4063:
  2924  00153A  FFFF               	dw	65535	; assembler added errata NOP
  2925                           
  2926                           ;main.c: 389: }
  2927                           ;main.c: 390: unSegundo = 0;
  2928  00153C  0E00               	movlw	0
  2929  00153E  6E22               	movwf	_unSegundo+1,c
  2930  001540  0E00               	movlw	0
  2931  001542  6E21               	movwf	_unSegundo,c
  2932  001544                     l255:
  2933  001544  FFFF               	dw	65535	; assembler added errata NOP
  2934                           
  2935                           ;main.c: 391: }
  2936                           ;main.c: 392: }
  2937                           ;main.c: 393: segundos = 0;
  2938  001546  0E00               	movlw	0
  2939  001548  6E18               	movwf	_segundos+1,c
  2940  00154A  0E00               	movlw	0
  2941  00154C  6E17               	movwf	_segundos,c
  2942  00154E                     l4065:
  2943  00154E  FFFF               	dw	65535	; assembler added errata NOP
  2944                           
  2945                           ;main.c: 394: }
  2946                           ;main.c: 395: if (comando[10] == '4' && unSegundo == 1) {
  2947  001550  0E34               	movlw	52
  2948  001552  0100               	movlb	0	; () banked
  2949  001554  19A8               	xorwf	(_comando+10)& (0+255),w,b
  2950  001556  A4D8               	btfss	status,2,c
  2951  001558  D078               	goto	l4093
  2952                           
  2953                           ; BSR set to: 0
  2954  00155A  0421               	decf	_unSegundo,w,c
  2955  00155C  1022               	iorwf	_unSegundo+1,w,c
  2956  00155E  A4D8               	btfss	status,2,c
  2957  001560  D074               	goto	l4093
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;main.c: 396: segundos++;
  2961  001562  4A17               	infsnz	_segundos,f,c
  2962  001564  2A18               	incf	_segundos+1,f,c
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;main.c: 397: if (segundos == 4) {
  2966  001566  0E04               	movlw	4
  2967  001568  1817               	xorwf	_segundos,w,c
  2968  00156A  1018               	iorwf	_segundos+1,w,c
  2969  00156C  A4D8               	btfss	status,2,c
  2970  00156E  D068               	goto	l263
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;main.c: 398: frecuenciaMedida = TMR1 / segundos;
  2974  001570  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  2975  001574  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  2976  001578  C017  F05C         	movff	_segundos,___lwdiv@divisor
  2977  00157C  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  2978  001580  EC27  F011         	call	___lwdiv	;wreg free
  2979  001584  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  2980  001588  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  2981  00158C  6A03               	clrf	_frecuenciaMedida+2,c
  2982  00158E  6A04               	clrf	_frecuenciaMedida+3,c
  2983                           
  2984                           ;main.c: 399: if (frecuenciaMedida < ret) {
  2985  001590  C05E  F0F6         	movff	_ret,??_main
  2986  001594  C05F  F0F7         	movff	_ret+1,??_main+1
  2987  001598  0E00               	movlw	0
  2988  00159A  0100               	movlb	0	; () banked
  2989  00159C  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  2990  00159E  0EFF               	movlw	255
  2991  0015A0  6FF8               	movwf	(??_main+2)& (0+255),b
  2992  0015A2  6FF9               	movwf	(??_main+3)& (0+255),b
  2993  0015A4  0100               	movlb	0	; () banked
  2994  0015A6  51F6               	movf	??_main& (0+255),w,b
  2995  0015A8  5C01               	subwf	_frecuenciaMedida,w,c
  2996  0015AA  0100               	movlb	0	; () banked
  2997  0015AC  51F7               	movf	(??_main+1)& (0+255),w,b
  2998  0015AE  5802               	subwfb	_frecuenciaMedida+1,w,c
  2999  0015B0  0100               	movlb	0	; () banked
  3000  0015B2  51F8               	movf	(??_main+2)& (0+255),w,b
  3001  0015B4  5803               	subwfb	_frecuenciaMedida+2,w,c
  3002  0015B6  5004               	movf	_frecuenciaMedida+3,w,c
  3003  0015B8  0A80               	xorlw	128
  3004  0015BA  0100               	movlb	0	; () banked
  3005  0015BC  6FFA               	movwf	(??_main+4)& (0+255),b
  3006  0015BE  0100               	movlb	0	; () banked
  3007  0015C0  51F9               	movf	(??_main+3)& (0+255),w,b
  3008  0015C2  0A80               	xorlw	128
  3009  0015C4  0100               	movlb	0	; () banked
  3010  0015C6  59FA               	subwfb	(??_main+4)& (0+255),w,b
  3011  0015C8  B0D8               	btfsc	status,0,c
  3012  0015CA  D03A               	goto	l263
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;main.c: 400: sprintf(salida, "%d\n\r", frecuenciaMedida);
  3016  0015CC  0E2D               	movlw	low _salida
  3017  0015CE  0100               	movlb	0	; () banked
  3018  0015D0  6FE6               	movwf	sprintf@sp& (0+255),b
  3019  0015D2  0E00               	movlw	high _salida
  3020  0015D4  0100               	movlb	0	; () banked
  3021  0015D6  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  3022  0015D8  0E3B               	movlw	low STR_5
  3023  0015DA  0100               	movlb	0	; () banked
  3024  0015DC  6FE8               	movwf	sprintf@f& (0+255),b
  3025  0015DE  0E06               	movlw	high STR_5
  3026  0015E0  0100               	movlb	0	; () banked
  3027  0015E2  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  3028  0015E4  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  3029  0015E8  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  3030  0015EC  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  3031  0015F0  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  3032  0015F4  EC1C  F00F         	call	_sprintf	;wreg free
  3033                           
  3034                           ;main.c: 402: for (i = 0; i < 8; i++) {
  3035  0015F8  0E00               	movlw	0
  3036  0015FA  6E1A               	movwf	_i+1,c
  3037  0015FC  0E00               	movlw	0
  3038  0015FE  6E19               	movwf	_i,c
  3039  001600                     l4081:
  3040  001600  FFFF               	dw	65535	; assembler added errata NOP
  3041  001602  BE1A               	btfsc	_i+1,7,c
  3042  001604  D006               	goto	l4085
  3043  001606  501A               	movf	_i+1,w,c
  3044  001608  E116               	bnz	l4091
  3045  00160A  0E08               	movlw	8
  3046  00160C  5C19               	subwf	_i,w,c
  3047  00160E  B0D8               	btfsc	status,0,c
  3048  001610  D012               	goto	l4091
  3049  001612                     l4085:
  3050  001612  FFFF               	dw	65535	; assembler added errata NOP
  3051                           
  3052                           ;main.c: 403: TXREG = salida[i];
  3053  001614  90D8               	bcf	status,0,c
  3054  001616  3419               	rlcf	_i,w,c
  3055  001618  6ED9               	movwf	fsr2l,c
  3056  00161A  341A               	rlcf	_i+1,w,c
  3057  00161C  6EDA               	movwf	fsr2h,c
  3058  00161E  0E2D               	movlw	low _salida
  3059  001620  26D9               	addwf	fsr2l,f,c
  3060  001622  0E00               	movlw	high _salida
  3061  001624  22DA               	addwfc	fsr2h,f,c
  3062  001626  50DF               	movf	indf2,w,c
  3063  001628  6EAD               	movwf	4013,c	;volatile
  3064  00162A                     l267:
  3065  00162A  FFFF               	dw	65535	; assembler added errata NOP
  3066  00162C  A2AC               	btfss	4012,1,c	;volatile
  3067  00162E  D7FD               	goto	l267
  3068  001630  4A19               	infsnz	_i,f,c
  3069  001632  2A1A               	incf	_i+1,f,c
  3070  001634  D7E5               	goto	l4081
  3071  001636                     l4091:
  3072  001636  FFFF               	dw	65535	; assembler added errata NOP
  3073                           
  3074                           ;main.c: 406: }
  3075                           ;main.c: 407: unSegundo = 0;
  3076  001638  0E00               	movlw	0
  3077  00163A  6E22               	movwf	_unSegundo+1,c
  3078  00163C  0E00               	movlw	0
  3079  00163E  6E21               	movwf	_unSegundo,c
  3080  001640                     l263:
  3081  001640  FFFF               	dw	65535	; assembler added errata NOP
  3082                           
  3083                           ;main.c: 408: }
  3084                           ;main.c: 409: }
  3085                           ;main.c: 410: segundos = 0;
  3086  001642  0E00               	movlw	0
  3087  001644  6E18               	movwf	_segundos+1,c
  3088  001646  0E00               	movlw	0
  3089  001648  6E17               	movwf	_segundos,c
  3090  00164A                     l4093:
  3091  00164A  FFFF               	dw	65535	; assembler added errata NOP
  3092                           
  3093                           ;main.c: 411: }
  3094                           ;main.c: 412: if (comando[10] == '5' && unSegundo == 1) {
  3095  00164C  0E35               	movlw	53
  3096  00164E  0100               	movlb	0	; () banked
  3097  001650  19A8               	xorwf	(_comando+10)& (0+255),w,b
  3098  001652  A4D8               	btfss	status,2,c
  3099  001654  D078               	goto	l4121
  3100                           
  3101                           ; BSR set to: 0
  3102  001656  0421               	decf	_unSegundo,w,c
  3103  001658  1022               	iorwf	_unSegundo+1,w,c
  3104  00165A  A4D8               	btfss	status,2,c
  3105  00165C  D074               	goto	l4121
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;main.c: 413: segundos++;
  3109  00165E  4A17               	infsnz	_segundos,f,c
  3110  001660  2A18               	incf	_segundos+1,f,c
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;main.c: 414: if (segundos == 5) {
  3114  001662  0E05               	movlw	5
  3115  001664  1817               	xorwf	_segundos,w,c
  3116  001666  1018               	iorwf	_segundos+1,w,c
  3117  001668  A4D8               	btfss	status,2,c
  3118  00166A  D06D               	goto	l4121
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;main.c: 415: frecuenciaMedida = TMR1 / segundos;
  3122  00166C  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  3123  001670  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  3124  001674  C017  F05C         	movff	_segundos,___lwdiv@divisor
  3125  001678  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  3126  00167C  EC27  F011         	call	___lwdiv	;wreg free
  3127  001680  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  3128  001684  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  3129  001688  6A03               	clrf	_frecuenciaMedida+2,c
  3130  00168A  6A04               	clrf	_frecuenciaMedida+3,c
  3131                           
  3132                           ;main.c: 416: if (frecuenciaMedida < ret) {
  3133  00168C  C05E  F0F6         	movff	_ret,??_main
  3134  001690  C05F  F0F7         	movff	_ret+1,??_main+1
  3135  001694  0E00               	movlw	0
  3136  001696  0100               	movlb	0	; () banked
  3137  001698  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  3138  00169A  0EFF               	movlw	255
  3139  00169C  6FF8               	movwf	(??_main+2)& (0+255),b
  3140  00169E  6FF9               	movwf	(??_main+3)& (0+255),b
  3141  0016A0  0100               	movlb	0	; () banked
  3142  0016A2  51F6               	movf	??_main& (0+255),w,b
  3143  0016A4  5C01               	subwf	_frecuenciaMedida,w,c
  3144  0016A6  0100               	movlb	0	; () banked
  3145  0016A8  51F7               	movf	(??_main+1)& (0+255),w,b
  3146  0016AA  5802               	subwfb	_frecuenciaMedida+1,w,c
  3147  0016AC  0100               	movlb	0	; () banked
  3148  0016AE  51F8               	movf	(??_main+2)& (0+255),w,b
  3149  0016B0  5803               	subwfb	_frecuenciaMedida+2,w,c
  3150  0016B2  5004               	movf	_frecuenciaMedida+3,w,c
  3151  0016B4  0A80               	xorlw	128
  3152  0016B6  0100               	movlb	0	; () banked
  3153  0016B8  6FFA               	movwf	(??_main+4)& (0+255),b
  3154  0016BA  0100               	movlb	0	; () banked
  3155  0016BC  51F9               	movf	(??_main+3)& (0+255),w,b
  3156  0016BE  0A80               	xorlw	128
  3157  0016C0  0100               	movlb	0	; () banked
  3158  0016C2  59FA               	subwfb	(??_main+4)& (0+255),w,b
  3159  0016C4  B0D8               	btfsc	status,0,c
  3160  0016C6  D03A               	goto	l272
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;main.c: 417: sprintf(salida, "%d\n\r", frecuenciaMedida);
  3164  0016C8  0E2D               	movlw	low _salida
  3165  0016CA  0100               	movlb	0	; () banked
  3166  0016CC  6FE6               	movwf	sprintf@sp& (0+255),b
  3167  0016CE  0E00               	movlw	high _salida
  3168  0016D0  0100               	movlb	0	; () banked
  3169  0016D2  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  3170  0016D4  0E3B               	movlw	low STR_5
  3171  0016D6  0100               	movlb	0	; () banked
  3172  0016D8  6FE8               	movwf	sprintf@f& (0+255),b
  3173  0016DA  0E06               	movlw	high STR_5
  3174  0016DC  0100               	movlb	0	; () banked
  3175  0016DE  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  3176  0016E0  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  3177  0016E4  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  3178  0016E8  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  3179  0016EC  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  3180  0016F0  EC1C  F00F         	call	_sprintf	;wreg free
  3181                           
  3182                           ;main.c: 419: for (i = 0; i < 8; i++) {
  3183  0016F4  0E00               	movlw	0
  3184  0016F6  6E1A               	movwf	_i+1,c
  3185  0016F8  0E00               	movlw	0
  3186  0016FA  6E19               	movwf	_i,c
  3187  0016FC                     l4109:
  3188  0016FC  FFFF               	dw	65535	; assembler added errata NOP
  3189  0016FE  BE1A               	btfsc	_i+1,7,c
  3190  001700  D006               	goto	l4113
  3191  001702  501A               	movf	_i+1,w,c
  3192  001704  E116               	bnz	l4119
  3193  001706  0E08               	movlw	8
  3194  001708  5C19               	subwf	_i,w,c
  3195  00170A  B0D8               	btfsc	status,0,c
  3196  00170C  D012               	goto	l4119
  3197  00170E                     l4113:
  3198  00170E  FFFF               	dw	65535	; assembler added errata NOP
  3199                           
  3200                           ;main.c: 420: TXREG = salida[i];
  3201  001710  90D8               	bcf	status,0,c
  3202  001712  3419               	rlcf	_i,w,c
  3203  001714  6ED9               	movwf	fsr2l,c
  3204  001716  341A               	rlcf	_i+1,w,c
  3205  001718  6EDA               	movwf	fsr2h,c
  3206  00171A  0E2D               	movlw	low _salida
  3207  00171C  26D9               	addwf	fsr2l,f,c
  3208  00171E  0E00               	movlw	high _salida
  3209  001720  22DA               	addwfc	fsr2h,f,c
  3210  001722  50DF               	movf	indf2,w,c
  3211  001724  6EAD               	movwf	4013,c	;volatile
  3212  001726                     l275:
  3213  001726  FFFF               	dw	65535	; assembler added errata NOP
  3214  001728  A2AC               	btfss	4012,1,c	;volatile
  3215  00172A  D7FD               	goto	l275
  3216  00172C  4A19               	infsnz	_i,f,c
  3217  00172E  2A1A               	incf	_i+1,f,c
  3218  001730  D7E5               	goto	l4109
  3219  001732                     l4119:
  3220  001732  FFFF               	dw	65535	; assembler added errata NOP
  3221                           
  3222                           ;main.c: 423: }
  3223                           ;main.c: 424: unSegundo = 0;
  3224  001734  0E00               	movlw	0
  3225  001736  6E22               	movwf	_unSegundo+1,c
  3226  001738  0E00               	movlw	0
  3227  00173A  6E21               	movwf	_unSegundo,c
  3228  00173C                     l272:
  3229  00173C  FFFF               	dw	65535	; assembler added errata NOP
  3230                           
  3231                           ;main.c: 425: }
  3232                           ;main.c: 426: segundos = 0;
  3233  00173E  0E00               	movlw	0
  3234  001740  6E18               	movwf	_segundos+1,c
  3235  001742  0E00               	movlw	0
  3236  001744  6E17               	movwf	_segundos,c
  3237  001746                     l4121:
  3238  001746  FFFF               	dw	65535	; assembler added errata NOP
  3239                           
  3240                           ;main.c: 427: }
  3241                           ;main.c: 428: }
  3242                           ;main.c: 429: if (comando[10] == '6' && unSegundo == 1) {
  3243  001748  0E36               	movlw	54
  3244  00174A  0100               	movlb	0	; () banked
  3245  00174C  19A8               	xorwf	(_comando+10)& (0+255),w,b
  3246  00174E  A4D8               	btfss	status,2,c
  3247  001750  D078               	goto	l4149
  3248                           
  3249                           ; BSR set to: 0
  3250  001752  0421               	decf	_unSegundo,w,c
  3251  001754  1022               	iorwf	_unSegundo+1,w,c
  3252  001756  A4D8               	btfss	status,2,c
  3253  001758  D074               	goto	l4149
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 430: segundos++;
  3257  00175A  4A17               	infsnz	_segundos,f,c
  3258  00175C  2A18               	incf	_segundos+1,f,c
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 431: if (segundos == 6) {
  3262  00175E  0E06               	movlw	6
  3263  001760  1817               	xorwf	_segundos,w,c
  3264  001762  1018               	iorwf	_segundos+1,w,c
  3265  001764  A4D8               	btfss	status,2,c
  3266  001766  D068               	goto	l279
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;main.c: 432: frecuenciaMedida = TMR1 / segundos;
  3270  001768  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  3271  00176C  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  3272  001770  C017  F05C         	movff	_segundos,___lwdiv@divisor
  3273  001774  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  3274  001778  EC27  F011         	call	___lwdiv	;wreg free
  3275  00177C  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  3276  001780  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  3277  001784  6A03               	clrf	_frecuenciaMedida+2,c
  3278  001786  6A04               	clrf	_frecuenciaMedida+3,c
  3279                           
  3280                           ;main.c: 433: if (frecuenciaMedida < ret) {
  3281  001788  C05E  F0F6         	movff	_ret,??_main
  3282  00178C  C05F  F0F7         	movff	_ret+1,??_main+1
  3283  001790  0E00               	movlw	0
  3284  001792  0100               	movlb	0	; () banked
  3285  001794  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  3286  001796  0EFF               	movlw	255
  3287  001798  6FF8               	movwf	(??_main+2)& (0+255),b
  3288  00179A  6FF9               	movwf	(??_main+3)& (0+255),b
  3289  00179C  0100               	movlb	0	; () banked
  3290  00179E  51F6               	movf	??_main& (0+255),w,b
  3291  0017A0  5C01               	subwf	_frecuenciaMedida,w,c
  3292  0017A2  0100               	movlb	0	; () banked
  3293  0017A4  51F7               	movf	(??_main+1)& (0+255),w,b
  3294  0017A6  5802               	subwfb	_frecuenciaMedida+1,w,c
  3295  0017A8  0100               	movlb	0	; () banked
  3296  0017AA  51F8               	movf	(??_main+2)& (0+255),w,b
  3297  0017AC  5803               	subwfb	_frecuenciaMedida+2,w,c
  3298  0017AE  5004               	movf	_frecuenciaMedida+3,w,c
  3299  0017B0  0A80               	xorlw	128
  3300  0017B2  0100               	movlb	0	; () banked
  3301  0017B4  6FFA               	movwf	(??_main+4)& (0+255),b
  3302  0017B6  0100               	movlb	0	; () banked
  3303  0017B8  51F9               	movf	(??_main+3)& (0+255),w,b
  3304  0017BA  0A80               	xorlw	128
  3305  0017BC  0100               	movlb	0	; () banked
  3306  0017BE  59FA               	subwfb	(??_main+4)& (0+255),w,b
  3307  0017C0  B0D8               	btfsc	status,0,c
  3308  0017C2  D03A               	goto	l279
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;main.c: 434: sprintf(salida, "%d\n\r", frecuenciaMedida);
  3312  0017C4  0E2D               	movlw	low _salida
  3313  0017C6  0100               	movlb	0	; () banked
  3314  0017C8  6FE6               	movwf	sprintf@sp& (0+255),b
  3315  0017CA  0E00               	movlw	high _salida
  3316  0017CC  0100               	movlb	0	; () banked
  3317  0017CE  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  3318  0017D0  0E3B               	movlw	low STR_5
  3319  0017D2  0100               	movlb	0	; () banked
  3320  0017D4  6FE8               	movwf	sprintf@f& (0+255),b
  3321  0017D6  0E06               	movlw	high STR_5
  3322  0017D8  0100               	movlb	0	; () banked
  3323  0017DA  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  3324  0017DC  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  3325  0017E0  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  3326  0017E4  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  3327  0017E8  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  3328  0017EC  EC1C  F00F         	call	_sprintf	;wreg free
  3329                           
  3330                           ;main.c: 436: for (i = 0; i < 8; i++) {
  3331  0017F0  0E00               	movlw	0
  3332  0017F2  6E1A               	movwf	_i+1,c
  3333  0017F4  0E00               	movlw	0
  3334  0017F6  6E19               	movwf	_i,c
  3335  0017F8                     l4137:
  3336  0017F8  FFFF               	dw	65535	; assembler added errata NOP
  3337  0017FA  BE1A               	btfsc	_i+1,7,c
  3338  0017FC  D006               	goto	l4141
  3339  0017FE  501A               	movf	_i+1,w,c
  3340  001800  E116               	bnz	l4147
  3341  001802  0E08               	movlw	8
  3342  001804  5C19               	subwf	_i,w,c
  3343  001806  B0D8               	btfsc	status,0,c
  3344  001808  D012               	goto	l4147
  3345  00180A                     l4141:
  3346  00180A  FFFF               	dw	65535	; assembler added errata NOP
  3347                           
  3348                           ;main.c: 437: TXREG = salida[i];
  3349  00180C  90D8               	bcf	status,0,c
  3350  00180E  3419               	rlcf	_i,w,c
  3351  001810  6ED9               	movwf	fsr2l,c
  3352  001812  341A               	rlcf	_i+1,w,c
  3353  001814  6EDA               	movwf	fsr2h,c
  3354  001816  0E2D               	movlw	low _salida
  3355  001818  26D9               	addwf	fsr2l,f,c
  3356  00181A  0E00               	movlw	high _salida
  3357  00181C  22DA               	addwfc	fsr2h,f,c
  3358  00181E  50DF               	movf	indf2,w,c
  3359  001820  6EAD               	movwf	4013,c	;volatile
  3360  001822                     l283:
  3361  001822  FFFF               	dw	65535	; assembler added errata NOP
  3362  001824  A2AC               	btfss	4012,1,c	;volatile
  3363  001826  D7FD               	goto	l283
  3364  001828  4A19               	infsnz	_i,f,c
  3365  00182A  2A1A               	incf	_i+1,f,c
  3366  00182C  D7E5               	goto	l4137
  3367  00182E                     l4147:
  3368  00182E  FFFF               	dw	65535	; assembler added errata NOP
  3369                           
  3370                           ;main.c: 440: }
  3371                           ;main.c: 441: unSegundo = 0;
  3372  001830  0E00               	movlw	0
  3373  001832  6E22               	movwf	_unSegundo+1,c
  3374  001834  0E00               	movlw	0
  3375  001836  6E21               	movwf	_unSegundo,c
  3376  001838                     l279:
  3377  001838  FFFF               	dw	65535	; assembler added errata NOP
  3378                           
  3379                           ;main.c: 442: }
  3380                           ;main.c: 443: }
  3381                           ;main.c: 444: segundos = 0;
  3382  00183A  0E00               	movlw	0
  3383  00183C  6E18               	movwf	_segundos+1,c
  3384  00183E  0E00               	movlw	0
  3385  001840  6E17               	movwf	_segundos,c
  3386  001842                     l4149:
  3387  001842  FFFF               	dw	65535	; assembler added errata NOP
  3388                           
  3389                           ;main.c: 445: }
  3390                           ;main.c: 446: if (comando[10] == '7' && unSegundo == 1) {
  3391  001844  0E37               	movlw	55
  3392  001846  0100               	movlb	0	; () banked
  3393  001848  19A8               	xorwf	(_comando+10)& (0+255),w,b
  3394  00184A  A4D8               	btfss	status,2,c
  3395  00184C  D078               	goto	l4177
  3396                           
  3397                           ; BSR set to: 0
  3398  00184E  0421               	decf	_unSegundo,w,c
  3399  001850  1022               	iorwf	_unSegundo+1,w,c
  3400  001852  A4D8               	btfss	status,2,c
  3401  001854  D074               	goto	l4177
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;main.c: 447: segundos++;
  3405  001856  4A17               	infsnz	_segundos,f,c
  3406  001858  2A18               	incf	_segundos+1,f,c
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;main.c: 448: if (segundos == 7) {
  3410  00185A  0E07               	movlw	7
  3411  00185C  1817               	xorwf	_segundos,w,c
  3412  00185E  1018               	iorwf	_segundos+1,w,c
  3413  001860  A4D8               	btfss	status,2,c
  3414  001862  D068               	goto	l287
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;main.c: 449: frecuenciaMedida = TMR1 / segundos;
  3418  001864  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  3419  001868  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  3420  00186C  C017  F05C         	movff	_segundos,___lwdiv@divisor
  3421  001870  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  3422  001874  EC27  F011         	call	___lwdiv	;wreg free
  3423  001878  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  3424  00187C  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  3425  001880  6A03               	clrf	_frecuenciaMedida+2,c
  3426  001882  6A04               	clrf	_frecuenciaMedida+3,c
  3427                           
  3428                           ;main.c: 450: if (frecuenciaMedida < ret) {
  3429  001884  C05E  F0F6         	movff	_ret,??_main
  3430  001888  C05F  F0F7         	movff	_ret+1,??_main+1
  3431  00188C  0E00               	movlw	0
  3432  00188E  0100               	movlb	0	; () banked
  3433  001890  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  3434  001892  0EFF               	movlw	255
  3435  001894  6FF8               	movwf	(??_main+2)& (0+255),b
  3436  001896  6FF9               	movwf	(??_main+3)& (0+255),b
  3437  001898  0100               	movlb	0	; () banked
  3438  00189A  51F6               	movf	??_main& (0+255),w,b
  3439  00189C  5C01               	subwf	_frecuenciaMedida,w,c
  3440  00189E  0100               	movlb	0	; () banked
  3441  0018A0  51F7               	movf	(??_main+1)& (0+255),w,b
  3442  0018A2  5802               	subwfb	_frecuenciaMedida+1,w,c
  3443  0018A4  0100               	movlb	0	; () banked
  3444  0018A6  51F8               	movf	(??_main+2)& (0+255),w,b
  3445  0018A8  5803               	subwfb	_frecuenciaMedida+2,w,c
  3446  0018AA  5004               	movf	_frecuenciaMedida+3,w,c
  3447  0018AC  0A80               	xorlw	128
  3448  0018AE  0100               	movlb	0	; () banked
  3449  0018B0  6FFA               	movwf	(??_main+4)& (0+255),b
  3450  0018B2  0100               	movlb	0	; () banked
  3451  0018B4  51F9               	movf	(??_main+3)& (0+255),w,b
  3452  0018B6  0A80               	xorlw	128
  3453  0018B8  0100               	movlb	0	; () banked
  3454  0018BA  59FA               	subwfb	(??_main+4)& (0+255),w,b
  3455  0018BC  B0D8               	btfsc	status,0,c
  3456  0018BE  D03A               	goto	l287
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;main.c: 451: sprintf(salida, "%d\n\r", frecuenciaMedida);
  3460  0018C0  0E2D               	movlw	low _salida
  3461  0018C2  0100               	movlb	0	; () banked
  3462  0018C4  6FE6               	movwf	sprintf@sp& (0+255),b
  3463  0018C6  0E00               	movlw	high _salida
  3464  0018C8  0100               	movlb	0	; () banked
  3465  0018CA  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  3466  0018CC  0E3B               	movlw	low STR_5
  3467  0018CE  0100               	movlb	0	; () banked
  3468  0018D0  6FE8               	movwf	sprintf@f& (0+255),b
  3469  0018D2  0E06               	movlw	high STR_5
  3470  0018D4  0100               	movlb	0	; () banked
  3471  0018D6  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  3472  0018D8  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  3473  0018DC  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  3474  0018E0  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  3475  0018E4  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  3476  0018E8  EC1C  F00F         	call	_sprintf	;wreg free
  3477                           
  3478                           ;main.c: 453: for (i = 0; i < 8; i++) {
  3479  0018EC  0E00               	movlw	0
  3480  0018EE  6E1A               	movwf	_i+1,c
  3481  0018F0  0E00               	movlw	0
  3482  0018F2  6E19               	movwf	_i,c
  3483  0018F4                     l4165:
  3484  0018F4  FFFF               	dw	65535	; assembler added errata NOP
  3485  0018F6  BE1A               	btfsc	_i+1,7,c
  3486  0018F8  D006               	goto	l4169
  3487  0018FA  501A               	movf	_i+1,w,c
  3488  0018FC  E116               	bnz	l4175
  3489  0018FE  0E08               	movlw	8
  3490  001900  5C19               	subwf	_i,w,c
  3491  001902  B0D8               	btfsc	status,0,c
  3492  001904  D012               	goto	l4175
  3493  001906                     l4169:
  3494  001906  FFFF               	dw	65535	; assembler added errata NOP
  3495                           
  3496                           ;main.c: 454: TXREG = salida[i];
  3497  001908  90D8               	bcf	status,0,c
  3498  00190A  3419               	rlcf	_i,w,c
  3499  00190C  6ED9               	movwf	fsr2l,c
  3500  00190E  341A               	rlcf	_i+1,w,c
  3501  001910  6EDA               	movwf	fsr2h,c
  3502  001912  0E2D               	movlw	low _salida
  3503  001914  26D9               	addwf	fsr2l,f,c
  3504  001916  0E00               	movlw	high _salida
  3505  001918  22DA               	addwfc	fsr2h,f,c
  3506  00191A  50DF               	movf	indf2,w,c
  3507  00191C  6EAD               	movwf	4013,c	;volatile
  3508  00191E                     l291:
  3509  00191E  FFFF               	dw	65535	; assembler added errata NOP
  3510  001920  A2AC               	btfss	4012,1,c	;volatile
  3511  001922  D7FD               	goto	l291
  3512  001924  4A19               	infsnz	_i,f,c
  3513  001926  2A1A               	incf	_i+1,f,c
  3514  001928  D7E5               	goto	l4165
  3515  00192A                     l4175:
  3516  00192A  FFFF               	dw	65535	; assembler added errata NOP
  3517                           
  3518                           ;main.c: 457: }
  3519                           ;main.c: 458: unSegundo = 0;
  3520  00192C  0E00               	movlw	0
  3521  00192E  6E22               	movwf	_unSegundo+1,c
  3522  001930  0E00               	movlw	0
  3523  001932  6E21               	movwf	_unSegundo,c
  3524  001934                     l287:
  3525  001934  FFFF               	dw	65535	; assembler added errata NOP
  3526                           
  3527                           ;main.c: 459: }
  3528                           ;main.c: 460: }
  3529                           ;main.c: 461: segundos = 0;
  3530  001936  0E00               	movlw	0
  3531  001938  6E18               	movwf	_segundos+1,c
  3532  00193A  0E00               	movlw	0
  3533  00193C  6E17               	movwf	_segundos,c
  3534  00193E                     l4177:
  3535  00193E  FFFF               	dw	65535	; assembler added errata NOP
  3536                           
  3537                           ;main.c: 462: }
  3538                           ;main.c: 463: if (comando[10] == '8' && unSegundo == 1) {
  3539  001940  0E38               	movlw	56
  3540  001942  0100               	movlb	0	; () banked
  3541  001944  19A8               	xorwf	(_comando+10)& (0+255),w,b
  3542  001946  A4D8               	btfss	status,2,c
  3543  001948  D078               	goto	l4205
  3544                           
  3545                           ; BSR set to: 0
  3546  00194A  0421               	decf	_unSegundo,w,c
  3547  00194C  1022               	iorwf	_unSegundo+1,w,c
  3548  00194E  A4D8               	btfss	status,2,c
  3549  001950  D074               	goto	l4205
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;main.c: 464: segundos++;
  3553  001952  4A17               	infsnz	_segundos,f,c
  3554  001954  2A18               	incf	_segundos+1,f,c
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;main.c: 465: if (segundos == 8) {
  3558  001956  0E08               	movlw	8
  3559  001958  1817               	xorwf	_segundos,w,c
  3560  00195A  1018               	iorwf	_segundos+1,w,c
  3561  00195C  A4D8               	btfss	status,2,c
  3562  00195E  D068               	goto	l295
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;main.c: 466: frecuenciaMedida = TMR1 / segundos;
  3566  001960  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  3567  001964  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  3568  001968  C017  F05C         	movff	_segundos,___lwdiv@divisor
  3569  00196C  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  3570  001970  EC27  F011         	call	___lwdiv	;wreg free
  3571  001974  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  3572  001978  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  3573  00197C  6A03               	clrf	_frecuenciaMedida+2,c
  3574  00197E  6A04               	clrf	_frecuenciaMedida+3,c
  3575                           
  3576                           ;main.c: 467: if (frecuenciaMedida < ret) {
  3577  001980  C05E  F0F6         	movff	_ret,??_main
  3578  001984  C05F  F0F7         	movff	_ret+1,??_main+1
  3579  001988  0E00               	movlw	0
  3580  00198A  0100               	movlb	0	; () banked
  3581  00198C  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  3582  00198E  0EFF               	movlw	255
  3583  001990  6FF8               	movwf	(??_main+2)& (0+255),b
  3584  001992  6FF9               	movwf	(??_main+3)& (0+255),b
  3585  001994  0100               	movlb	0	; () banked
  3586  001996  51F6               	movf	??_main& (0+255),w,b
  3587  001998  5C01               	subwf	_frecuenciaMedida,w,c
  3588  00199A  0100               	movlb	0	; () banked
  3589  00199C  51F7               	movf	(??_main+1)& (0+255),w,b
  3590  00199E  5802               	subwfb	_frecuenciaMedida+1,w,c
  3591  0019A0  0100               	movlb	0	; () banked
  3592  0019A2  51F8               	movf	(??_main+2)& (0+255),w,b
  3593  0019A4  5803               	subwfb	_frecuenciaMedida+2,w,c
  3594  0019A6  5004               	movf	_frecuenciaMedida+3,w,c
  3595  0019A8  0A80               	xorlw	128
  3596  0019AA  0100               	movlb	0	; () banked
  3597  0019AC  6FFA               	movwf	(??_main+4)& (0+255),b
  3598  0019AE  0100               	movlb	0	; () banked
  3599  0019B0  51F9               	movf	(??_main+3)& (0+255),w,b
  3600  0019B2  0A80               	xorlw	128
  3601  0019B4  0100               	movlb	0	; () banked
  3602  0019B6  59FA               	subwfb	(??_main+4)& (0+255),w,b
  3603  0019B8  B0D8               	btfsc	status,0,c
  3604  0019BA  D03A               	goto	l295
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;main.c: 468: sprintf(salida, "%d\n\r", frecuenciaMedida);
  3608  0019BC  0E2D               	movlw	low _salida
  3609  0019BE  0100               	movlb	0	; () banked
  3610  0019C0  6FE6               	movwf	sprintf@sp& (0+255),b
  3611  0019C2  0E00               	movlw	high _salida
  3612  0019C4  0100               	movlb	0	; () banked
  3613  0019C6  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  3614  0019C8  0E3B               	movlw	low STR_5
  3615  0019CA  0100               	movlb	0	; () banked
  3616  0019CC  6FE8               	movwf	sprintf@f& (0+255),b
  3617  0019CE  0E06               	movlw	high STR_5
  3618  0019D0  0100               	movlb	0	; () banked
  3619  0019D2  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  3620  0019D4  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  3621  0019D8  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  3622  0019DC  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  3623  0019E0  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  3624  0019E4  EC1C  F00F         	call	_sprintf	;wreg free
  3625                           
  3626                           ;main.c: 470: for (i = 0; i < 8; i++) {
  3627  0019E8  0E00               	movlw	0
  3628  0019EA  6E1A               	movwf	_i+1,c
  3629  0019EC  0E00               	movlw	0
  3630  0019EE  6E19               	movwf	_i,c
  3631  0019F0                     l4193:
  3632  0019F0  FFFF               	dw	65535	; assembler added errata NOP
  3633  0019F2  BE1A               	btfsc	_i+1,7,c
  3634  0019F4  D006               	goto	l4197
  3635  0019F6  501A               	movf	_i+1,w,c
  3636  0019F8  E116               	bnz	l4203
  3637  0019FA  0E08               	movlw	8
  3638  0019FC  5C19               	subwf	_i,w,c
  3639  0019FE  B0D8               	btfsc	status,0,c
  3640  001A00  D012               	goto	l4203
  3641  001A02                     l4197:
  3642  001A02  FFFF               	dw	65535	; assembler added errata NOP
  3643                           
  3644                           ;main.c: 471: TXREG = salida[i];
  3645  001A04  90D8               	bcf	status,0,c
  3646  001A06  3419               	rlcf	_i,w,c
  3647  001A08  6ED9               	movwf	fsr2l,c
  3648  001A0A  341A               	rlcf	_i+1,w,c
  3649  001A0C  6EDA               	movwf	fsr2h,c
  3650  001A0E  0E2D               	movlw	low _salida
  3651  001A10  26D9               	addwf	fsr2l,f,c
  3652  001A12  0E00               	movlw	high _salida
  3653  001A14  22DA               	addwfc	fsr2h,f,c
  3654  001A16  50DF               	movf	indf2,w,c
  3655  001A18  6EAD               	movwf	4013,c	;volatile
  3656  001A1A                     l299:
  3657  001A1A  FFFF               	dw	65535	; assembler added errata NOP
  3658  001A1C  A2AC               	btfss	4012,1,c	;volatile
  3659  001A1E  D7FD               	goto	l299
  3660  001A20  4A19               	infsnz	_i,f,c
  3661  001A22  2A1A               	incf	_i+1,f,c
  3662  001A24  D7E5               	goto	l4193
  3663  001A26                     l4203:
  3664  001A26  FFFF               	dw	65535	; assembler added errata NOP
  3665                           
  3666                           ;main.c: 474: }
  3667                           ;main.c: 475: unSegundo = 0;
  3668  001A28  0E00               	movlw	0
  3669  001A2A  6E22               	movwf	_unSegundo+1,c
  3670  001A2C  0E00               	movlw	0
  3671  001A2E  6E21               	movwf	_unSegundo,c
  3672  001A30                     l295:
  3673  001A30  FFFF               	dw	65535	; assembler added errata NOP
  3674                           
  3675                           ;main.c: 476: }
  3676                           ;main.c: 477: }
  3677                           ;main.c: 478: segundos = 0;
  3678  001A32  0E00               	movlw	0
  3679  001A34  6E18               	movwf	_segundos+1,c
  3680  001A36  0E00               	movlw	0
  3681  001A38  6E17               	movwf	_segundos,c
  3682  001A3A                     l4205:
  3683  001A3A  FFFF               	dw	65535	; assembler added errata NOP
  3684                           
  3685                           ;main.c: 479: }
  3686                           ;main.c: 480: if (comando[10] == '9' && unSegundo == 1) {
  3687  001A3C  0E39               	movlw	57
  3688  001A3E  0100               	movlb	0	; () banked
  3689  001A40  19A8               	xorwf	(_comando+10)& (0+255),w,b
  3690  001A42  A4D8               	btfss	status,2,c
  3691  001A44  D078               	goto	l4233
  3692                           
  3693                           ; BSR set to: 0
  3694  001A46  0421               	decf	_unSegundo,w,c
  3695  001A48  1022               	iorwf	_unSegundo+1,w,c
  3696  001A4A  A4D8               	btfss	status,2,c
  3697  001A4C  D074               	goto	l4233
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;main.c: 481: segundos++;
  3701  001A4E  4A17               	infsnz	_segundos,f,c
  3702  001A50  2A18               	incf	_segundos+1,f,c
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;main.c: 482: if (segundos == 9) {
  3706  001A52  0E09               	movlw	9
  3707  001A54  1817               	xorwf	_segundos,w,c
  3708  001A56  1018               	iorwf	_segundos+1,w,c
  3709  001A58  A4D8               	btfss	status,2,c
  3710  001A5A  D068               	goto	l303
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;main.c: 483: frecuenciaMedida = TMR1 / segundos;
  3714  001A5C  CFCE F05A          	movff	4046,___lwdiv@dividend	;volatile
  3715  001A60  CFCF F05B          	movff	4047,___lwdiv@dividend+1	;volatile
  3716  001A64  C017  F05C         	movff	_segundos,___lwdiv@divisor
  3717  001A68  C018  F05D         	movff	_segundos+1,___lwdiv@divisor+1
  3718  001A6C  EC27  F011         	call	___lwdiv	;wreg free
  3719  001A70  C05A  F001         	movff	?___lwdiv,_frecuenciaMedida
  3720  001A74  C05B  F002         	movff	?___lwdiv+1,_frecuenciaMedida+1
  3721  001A78  6A03               	clrf	_frecuenciaMedida+2,c
  3722  001A7A  6A04               	clrf	_frecuenciaMedida+3,c
  3723                           
  3724                           ;main.c: 484: if (frecuenciaMedida < ret) {
  3725  001A7C  C05E  F0F6         	movff	_ret,??_main
  3726  001A80  C05F  F0F7         	movff	_ret+1,??_main+1
  3727  001A84  0E00               	movlw	0
  3728  001A86  0100               	movlb	0	; () banked
  3729  001A88  BFF7               	btfsc	(??_main+1)& (0+255),7,b
  3730  001A8A  0EFF               	movlw	255
  3731  001A8C  6FF8               	movwf	(??_main+2)& (0+255),b
  3732  001A8E  6FF9               	movwf	(??_main+3)& (0+255),b
  3733  001A90  0100               	movlb	0	; () banked
  3734  001A92  51F6               	movf	??_main& (0+255),w,b
  3735  001A94  5C01               	subwf	_frecuenciaMedida,w,c
  3736  001A96  0100               	movlb	0	; () banked
  3737  001A98  51F7               	movf	(??_main+1)& (0+255),w,b
  3738  001A9A  5802               	subwfb	_frecuenciaMedida+1,w,c
  3739  001A9C  0100               	movlb	0	; () banked
  3740  001A9E  51F8               	movf	(??_main+2)& (0+255),w,b
  3741  001AA0  5803               	subwfb	_frecuenciaMedida+2,w,c
  3742  001AA2  5004               	movf	_frecuenciaMedida+3,w,c
  3743  001AA4  0A80               	xorlw	128
  3744  001AA6  0100               	movlb	0	; () banked
  3745  001AA8  6FFA               	movwf	(??_main+4)& (0+255),b
  3746  001AAA  0100               	movlb	0	; () banked
  3747  001AAC  51F9               	movf	(??_main+3)& (0+255),w,b
  3748  001AAE  0A80               	xorlw	128
  3749  001AB0  0100               	movlb	0	; () banked
  3750  001AB2  59FA               	subwfb	(??_main+4)& (0+255),w,b
  3751  001AB4  B0D8               	btfsc	status,0,c
  3752  001AB6  D03A               	goto	l303
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;main.c: 485: sprintf(salida, "%d\n\r", frecuenciaMedida);
  3756  001AB8  0E2D               	movlw	low _salida
  3757  001ABA  0100               	movlb	0	; () banked
  3758  001ABC  6FE6               	movwf	sprintf@sp& (0+255),b
  3759  001ABE  0E00               	movlw	high _salida
  3760  001AC0  0100               	movlb	0	; () banked
  3761  001AC2  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  3762  001AC4  0E3B               	movlw	low STR_5
  3763  001AC6  0100               	movlb	0	; () banked
  3764  001AC8  6FE8               	movwf	sprintf@f& (0+255),b
  3765  001ACA  0E06               	movlw	high STR_5
  3766  001ACC  0100               	movlb	0	; () banked
  3767  001ACE  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  3768  001AD0  C001  F0EA         	movff	_frecuenciaMedida,?_sprintf+4
  3769  001AD4  C002  F0EB         	movff	_frecuenciaMedida+1,?_sprintf+5
  3770  001AD8  C003  F0EC         	movff	_frecuenciaMedida+2,?_sprintf+6
  3771  001ADC  C004  F0ED         	movff	_frecuenciaMedida+3,?_sprintf+7
  3772  001AE0  EC1C  F00F         	call	_sprintf	;wreg free
  3773                           
  3774                           ;main.c: 487: for (i = 0; i < 8; i++) {
  3775  001AE4  0E00               	movlw	0
  3776  001AE6  6E1A               	movwf	_i+1,c
  3777  001AE8  0E00               	movlw	0
  3778  001AEA  6E19               	movwf	_i,c
  3779  001AEC                     l4221:
  3780  001AEC  FFFF               	dw	65535	; assembler added errata NOP
  3781  001AEE  BE1A               	btfsc	_i+1,7,c
  3782  001AF0  D006               	goto	l4225
  3783  001AF2  501A               	movf	_i+1,w,c
  3784  001AF4  E116               	bnz	l4231
  3785  001AF6  0E08               	movlw	8
  3786  001AF8  5C19               	subwf	_i,w,c
  3787  001AFA  B0D8               	btfsc	status,0,c
  3788  001AFC  D012               	goto	l4231
  3789  001AFE                     l4225:
  3790  001AFE  FFFF               	dw	65535	; assembler added errata NOP
  3791                           
  3792                           ;main.c: 488: TXREG = salida[i];
  3793  001B00  90D8               	bcf	status,0,c
  3794  001B02  3419               	rlcf	_i,w,c
  3795  001B04  6ED9               	movwf	fsr2l,c
  3796  001B06  341A               	rlcf	_i+1,w,c
  3797  001B08  6EDA               	movwf	fsr2h,c
  3798  001B0A  0E2D               	movlw	low _salida
  3799  001B0C  26D9               	addwf	fsr2l,f,c
  3800  001B0E  0E00               	movlw	high _salida
  3801  001B10  22DA               	addwfc	fsr2h,f,c
  3802  001B12  50DF               	movf	indf2,w,c
  3803  001B14  6EAD               	movwf	4013,c	;volatile
  3804  001B16                     l307:
  3805  001B16  FFFF               	dw	65535	; assembler added errata NOP
  3806  001B18  A2AC               	btfss	4012,1,c	;volatile
  3807  001B1A  D7FD               	goto	l307
  3808  001B1C  4A19               	infsnz	_i,f,c
  3809  001B1E  2A1A               	incf	_i+1,f,c
  3810  001B20  D7E5               	goto	l4221
  3811  001B22                     l4231:
  3812  001B22  FFFF               	dw	65535	; assembler added errata NOP
  3813                           
  3814                           ;main.c: 491: }
  3815                           ;main.c: 492: unSegundo = 0;
  3816  001B24  0E00               	movlw	0
  3817  001B26  6E22               	movwf	_unSegundo+1,c
  3818  001B28  0E00               	movlw	0
  3819  001B2A  6E21               	movwf	_unSegundo,c
  3820  001B2C                     l303:
  3821  001B2C  FFFF               	dw	65535	; assembler added errata NOP
  3822                           
  3823                           ;main.c: 493: }
  3824                           ;main.c: 494: }
  3825                           ;main.c: 495: segundos = 0;
  3826  001B2E  0E00               	movlw	0
  3827  001B30  6E18               	movwf	_segundos+1,c
  3828  001B32  0E00               	movlw	0
  3829  001B34  6E17               	movwf	_segundos,c
  3830  001B36                     l4233:
  3831  001B36  FFFF               	dw	65535	; assembler added errata NOP
  3832                           
  3833                           ;main.c: 496: }
  3834                           ;main.c: 497: }
  3835                           ;main.c: 499: if (mode == 3) {
  3836  001B38  0E03               	movlw	3
  3837  001B3A  182B               	xorwf	_mode,w,c
  3838  001B3C  A4D8               	btfss	status,2,c
  3839  001B3E  EF26  F003         	goto	l3571
  3840                           
  3841                           ;main.c: 500: c = 1;
  3842  001B42  0E00               	movlw	0
  3843  001B44  6E0A               	movwf	_c+1,c
  3844  001B46  0E01               	movlw	1
  3845  001B48  6E09               	movwf	_c,c
  3846                           
  3847                           ;main.c: 501: g = 1;
  3848  001B4A  0E00               	movlw	0
  3849  001B4C  6E08               	movwf	_g+1,c
  3850  001B4E  0E01               	movlw	1
  3851  001B50  6E07               	movwf	_g,c
  3852                           
  3853                           ;main.c: 502: a = TMR1;
  3854  001B52  CFCE F00B          	movff	4046,_a	;volatile
  3855  001B56  CFCF F00C          	movff	4047,_a+1	;volatile
  3856                           
  3857                           ;main.c: 503: sprintf(salida, "%d\n\r", a);
  3858  001B5A  0E2D               	movlw	low _salida
  3859  001B5C  0100               	movlb	0	; () banked
  3860  001B5E  6FE6               	movwf	sprintf@sp& (0+255),b
  3861  001B60  0E00               	movlw	high _salida
  3862  001B62  0100               	movlb	0	; () banked
  3863  001B64  6FE7               	movwf	(sprintf@sp+1)& (0+255),b
  3864  001B66  0E3B               	movlw	low STR_5
  3865  001B68  0100               	movlb	0	; () banked
  3866  001B6A  6FE8               	movwf	sprintf@f& (0+255),b
  3867  001B6C  0E06               	movlw	high STR_5
  3868  001B6E  0100               	movlb	0	; () banked
  3869  001B70  6FE9               	movwf	(sprintf@f+1)& (0+255),b
  3870  001B72  C00B  F0EA         	movff	_a,?_sprintf+4
  3871  001B76  C00C  F0EB         	movff	_a+1,?_sprintf+5
  3872  001B7A  EC1C  F00F         	call	_sprintf	;wreg free
  3873                           
  3874                           ;main.c: 504: for (i = 0; i < 8; i++) {
  3875  001B7E  0E00               	movlw	0
  3876  001B80  6E1A               	movwf	_i+1,c
  3877  001B82  0E00               	movlw	0
  3878  001B84  6E19               	movwf	_i,c
  3879  001B86  BE1A               	btfsc	_i+1,7,c
  3880  001B88  D00B               	goto	l4247
  3881  001B8A  501A               	movf	_i+1,w,c
  3882  001B8C  E107               	bnz	u6310
  3883  001B8E  FFFF               	dw	65535	; assembler added errata NOP
  3884  001B90  0E08               	movlw	8
  3885  001B92  5C19               	subwf	_i,w,c
  3886  001B94  B0D8               	btfsc	status,0,c
  3887  001B96  EF26  F003         	goto	l3571
  3888  001B9A  D002               	goto	l4247
  3889  001B9C                     u6310:
  3890  001B9C  EF26  F003         	goto	l3571
  3891  001BA0                     l4247:
  3892  001BA0  FFFF               	dw	65535	; assembler added errata NOP
  3893                           
  3894                           ;main.c: 505: TXREG = salida[i];
  3895  001BA2  90D8               	bcf	status,0,c
  3896  001BA4  3419               	rlcf	_i,w,c
  3897  001BA6  6ED9               	movwf	fsr2l,c
  3898  001BA8  341A               	rlcf	_i+1,w,c
  3899  001BAA  6EDA               	movwf	fsr2h,c
  3900  001BAC  0E2D               	movlw	low _salida
  3901  001BAE  26D9               	addwf	fsr2l,f,c
  3902  001BB0  0E00               	movlw	high _salida
  3903  001BB2  22DA               	addwfc	fsr2h,f,c
  3904  001BB4  50DF               	movf	indf2,w,c
  3905  001BB6  6EAD               	movwf	4013,c	;volatile
  3906  001BB8                     l313:
  3907  001BB8  FFFF               	dw	65535	; assembler added errata NOP
  3908  001BBA  A2AC               	btfss	4012,1,c	;volatile
  3909  001BBC  D7FD               	goto	l313
  3910  001BBE  4A19               	infsnz	_i,f,c
  3911  001BC0  2A1A               	incf	_i+1,f,c
  3912  001BC2  BE1A               	btfsc	_i+1,7,c
  3913  001BC4  D7ED               	goto	l4247
  3914  001BC6  501A               	movf	_i+1,w,c
  3915  001BC8  E101               	bnz	u6330
  3916  001BCA  D7E1               	goto	L5
  3917  001BCC                     u6330:
  3918  001BCC  EF26  F003         	goto	l3571
  3919  001BD0                     __end_of_main:
  3920                           	opt stack 0
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           postinc0	equ	0xFEE
  3926                           wreg	equ	0xFE8
  3927                           indf2	equ	0xFDF
  3928                           fsr2h	equ	0xFDA
  3929                           fsr2l	equ	0xFD9
  3930                           status	equ	0xFD8
  3931                           
  3932 ;; *************** function _strtol *****************
  3933 ;; Defined at:
  3934 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\strtol.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  3937 ;;		 -> umbral(12), 
  3938 ;;  endptr          2   10[BANK0 ] PTR PTR unsigned char 
  3939 ;;		 -> ptr(2), 
  3940 ;;  base            2   12[BANK0 ] int 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;  a               4   19[BANK0 ] long 
  3943 ;;  c               1   23[BANK0 ] unsigned char 
  3944 ;;  sign            1   18[BANK0 ] unsigned char 
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  4    8[BANK0 ] long 
  3947 ;; Registers used:
  3948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3954 ;;      Params:         0       6       0       0       0       0       0
  3955 ;;      Locals:         0       6       0       0       0       0       0
  3956 ;;      Temps:          0       4       0       0       0       0       0
  3957 ;;      Totals:         0      16       0       0       0       0       0
  3958 ;;Total ram usage:       16 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    4
  3961 ;; This function calls:
  3962 ;;		___lmul
  3963 ;;		_isalpha
  3964 ;;		_isdigit
  3965 ;;		_isspace
  3966 ;;		_toupper
  3967 ;; This function is called by:
  3968 ;;		_main
  3969 ;; This function uses a non-reentrant model
  3970 ;;
  3971                           
  3972                           	psect	text1
  3973  001BD0                     __ptext1:
  3974                           	opt stack 0
  3975  001BD0                     _strtol:
  3976                           	opt stack 26
  3977  001BD0  FFFF               	dw	65535	; assembler added errata NOP
  3978  001BD2  C0E6  FFD9         	movff	strtol@s,fsr2l
  3979  001BD6  C0E7  FFDA         	movff	strtol@s+1,fsr2h
  3980  001BDA  50DF               	movf	indf2,w,c
  3981  001BDC  0100               	movlb	0	; () banked
  3982  001BDE  6FF5               	movwf	strtol@c& (0+255),b
  3983                           
  3984                           ; BSR set to: 0
  3985  001BE0  0100               	movlb	0	; () banked
  3986  001BE2  4BE6               	infsnz	strtol@s& (0+255),f,b
  3987  001BE4  2BE7               	incf	(strtol@s+1)& (0+255),f,b
  3988                           
  3989                           ; BSR set to: 0
  3990  001BE6  0100               	movlb	0	; () banked
  3991  001BE8  51F5               	movf	strtol@c& (0+255),w,b
  3992  001BEA  ECE6  F011         	call	_isspace
  3993  001BEE  B0D8               	btfsc	status,0,c
  3994  001BF0  D7EF               	goto	l3489
  3995  001BF2  0E00               	movlw	0
  3996  001BF4  0100               	movlb	0	; () banked
  3997  001BF6  6FF1               	movwf	strtol@a& (0+255),b
  3998  001BF8  0E00               	movlw	0
  3999  001BFA  6FF2               	movwf	(strtol@a+1)& (0+255),b
  4000  001BFC  0E00               	movlw	0
  4001  001BFE  6FF3               	movwf	(strtol@a+2)& (0+255),b
  4002  001C00  0E00               	movlw	0
  4003  001C02  6FF4               	movwf	(strtol@a+3)& (0+255),b
  4004  001C04  0E00               	movlw	0
  4005  001C06  0100               	movlb	0	; () banked
  4006  001C08  6FF0               	movwf	strtol@sign& (0+255),b
  4007                           
  4008                           ; BSR set to: 0
  4009  001C0A  0E2D               	movlw	45
  4010  001C0C  0100               	movlb	0	; () banked
  4011  001C0E  19F5               	xorwf	strtol@c& (0+255),w,b
  4012  001C10  A4D8               	btfss	status,2,c
  4013  001C12  D009               	goto	l3505
  4014                           
  4015                           ; BSR set to: 0
  4016  001C14  0E01               	movlw	1
  4017  001C16  0100               	movlb	0	; () banked
  4018  001C18  6FF0               	movwf	strtol@sign& (0+255),b
  4019  001C1A  D00B               	goto	l3507
  4020  001C1C                     l3503:
  4021  001C1C  FFFF               	dw	65535	; assembler added errata NOP
  4022                           
  4023                           ; BSR set to: 0
  4024  001C1E  0100               	movlb	0	; () banked
  4025  001C20  4BE6               	infsnz	strtol@s& (0+255),f,b
  4026  001C22  2BE7               	incf	(strtol@s+1)& (0+255),f,b
  4027  001C24  D00F               	goto	l3511
  4028  001C26                     l3505:
  4029  001C26  FFFF               	dw	65535	; assembler added errata NOP
  4030                           
  4031                           ; BSR set to: 0
  4032  001C28  0E2B               	movlw	43
  4033  001C2A  0100               	movlb	0	; () banked
  4034  001C2C  19F5               	xorwf	strtol@c& (0+255),w,b
  4035  001C2E  A4D8               	btfss	status,2,c
  4036  001C30  D009               	goto	l3511
  4037  001C32                     l3507:
  4038  001C32  FFFF               	dw	65535	; assembler added errata NOP
  4039                           
  4040                           ; BSR set to: 0
  4041  001C34  C0E6  FFD9         	movff	strtol@s,fsr2l
  4042  001C38  C0E7  FFDA         	movff	strtol@s+1,fsr2h
  4043  001C3C  50DF               	movf	indf2,w,c
  4044  001C3E  0100               	movlb	0	; () banked
  4045  001C40  6FF5               	movwf	strtol@c& (0+255),b
  4046  001C42  D7EC               	goto	l3503
  4047  001C44                     l3511:
  4048  001C44  FFFF               	dw	65535	; assembler added errata NOP
  4049                           
  4050                           ; BSR set to: 0
  4051  001C46  0E30               	movlw	48
  4052  001C48  0100               	movlb	0	; () banked
  4053  001C4A  19F5               	xorwf	strtol@c& (0+255),w,b
  4054  001C4C  A4D8               	btfss	status,2,c
  4055  001C4E  D03F               	goto	l3535
  4056                           
  4057                           ; BSR set to: 0
  4058  001C50  C0E6  FFD9         	movff	strtol@s,fsr2l
  4059  001C54  C0E7  FFDA         	movff	strtol@s+1,fsr2h
  4060  001C58  50DF               	movf	indf2,w,c
  4061  001C5A  0100               	movlb	0	; () banked
  4062  001C5C  6FF5               	movwf	strtol@c& (0+255),b
  4063                           
  4064                           ; BSR set to: 0
  4065  001C5E  0100               	movlb	0	; () banked
  4066  001C60  4BE6               	infsnz	strtol@s& (0+255),f,b
  4067  001C62  2BE7               	incf	(strtol@s+1)& (0+255),f,b
  4068                           
  4069                           ; BSR set to: 0
  4070  001C64  0100               	movlb	0	; () banked
  4071  001C66  51EA               	movf	strtol@base& (0+255),w,b
  4072  001C68  0100               	movlb	0	; () banked
  4073  001C6A  11EB               	iorwf	(strtol@base+1)& (0+255),w,b
  4074  001C6C  B4D8               	btfsc	status,2,c
  4075  001C6E  D007               	goto	l3521
  4076                           
  4077                           ; BSR set to: 0
  4078  001C70  0E10               	movlw	16
  4079  001C72  0100               	movlb	0	; () banked
  4080  001C74  19EA               	xorwf	strtol@base& (0+255),w,b
  4081  001C76  0100               	movlb	0	; () banked
  4082  001C78  11EB               	iorwf	(strtol@base+1)& (0+255),w,b
  4083  001C7A  A4D8               	btfss	status,2,c
  4084  001C7C  D01C               	goto	l3531
  4085  001C7E                     l3521:
  4086  001C7E  FFFF               	dw	65535	; assembler added errata NOP
  4087                           
  4088                           ; BSR set to: 0
  4089  001C80  0E78               	movlw	120
  4090  001C82  0100               	movlb	0	; () banked
  4091  001C84  19F5               	xorwf	strtol@c& (0+255),w,b
  4092  001C86  B4D8               	btfsc	status,2,c
  4093  001C88  D005               	goto	l3525
  4094                           
  4095                           ; BSR set to: 0
  4096  001C8A  0E58               	movlw	88
  4097  001C8C  0100               	movlb	0	; () banked
  4098  001C8E  19F5               	xorwf	strtol@c& (0+255),w,b
  4099  001C90  A4D8               	btfss	status,2,c
  4100  001C92  D011               	goto	l3531
  4101  001C94                     l3525:
  4102  001C94  FFFF               	dw	65535	; assembler added errata NOP
  4103                           
  4104                           ; BSR set to: 0
  4105  001C96  0E00               	movlw	0
  4106  001C98  0100               	movlb	0	; () banked
  4107  001C9A  6FEB               	movwf	(strtol@base+1)& (0+255),b
  4108  001C9C  0E10               	movlw	16
  4109  001C9E  6FEA               	movwf	strtol@base& (0+255),b
  4110                           
  4111                           ; BSR set to: 0
  4112  001CA0  C0E6  FFD9         	movff	strtol@s,fsr2l
  4113  001CA4  C0E7  FFDA         	movff	strtol@s+1,fsr2h
  4114  001CA8  50DF               	movf	indf2,w,c
  4115  001CAA  0100               	movlb	0	; () banked
  4116  001CAC  6FF5               	movwf	strtol@c& (0+255),b
  4117                           
  4118                           ; BSR set to: 0
  4119  001CAE  0100               	movlb	0	; () banked
  4120  001CB0  4BE6               	infsnz	strtol@s& (0+255),f,b
  4121  001CB2  2BE7               	incf	(strtol@s+1)& (0+255),f,b
  4122  001CB4  D00C               	goto	l3535
  4123  001CB6                     l3531:
  4124  001CB6  FFFF               	dw	65535	; assembler added errata NOP
  4125                           
  4126                           ; BSR set to: 0
  4127  001CB8  0100               	movlb	0	; () banked
  4128  001CBA  51EA               	movf	strtol@base& (0+255),w,b
  4129  001CBC  0100               	movlb	0	; () banked
  4130  001CBE  11EB               	iorwf	(strtol@base+1)& (0+255),w,b
  4131  001CC0  A4D8               	btfss	status,2,c
  4132  001CC2  D005               	goto	l3535
  4133                           
  4134                           ; BSR set to: 0
  4135  001CC4  0E00               	movlw	0
  4136  001CC6  0100               	movlb	0	; () banked
  4137  001CC8  6FEB               	movwf	(strtol@base+1)& (0+255),b
  4138  001CCA  0E08               	movlw	8
  4139  001CCC  6FEA               	movwf	strtol@base& (0+255),b
  4140  001CCE                     l3535:
  4141  001CCE  FFFF               	dw	65535	; assembler added errata NOP
  4142                           
  4143                           ; BSR set to: 0
  4144  001CD0  0100               	movlb	0	; () banked
  4145  001CD2  51EA               	movf	strtol@base& (0+255),w,b
  4146  001CD4  0100               	movlb	0	; () banked
  4147  001CD6  11EB               	iorwf	(strtol@base+1)& (0+255),w,b
  4148  001CD8  A4D8               	btfss	status,2,c
  4149  001CDA  D005               	goto	l3539
  4150                           
  4151                           ; BSR set to: 0
  4152  001CDC  0E00               	movlw	0
  4153  001CDE  0100               	movlb	0	; () banked
  4154  001CE0  6FEB               	movwf	(strtol@base+1)& (0+255),b
  4155  001CE2  0E0A               	movlw	10
  4156  001CE4  6FEA               	movwf	strtol@base& (0+255),b
  4157  001CE6                     l3539:
  4158  001CE6  FFFF               	dw	65535	; assembler added errata NOP
  4159                           
  4160                           ; BSR set to: 0
  4161  001CE8  0100               	movlb	0	; () banked
  4162  001CEA  51F5               	movf	strtol@c& (0+255),w,b
  4163  001CEC  ECC8  F011         	call	_isalpha
  4164  001CF0  A0D8               	btfss	status,0,c
  4165  001CF2  D008               	goto	l3543
  4166  001CF4  0100               	movlb	0	; () banked
  4167  001CF6  51F5               	movf	strtol@c& (0+255),w,b
  4168  001CF8  EC21  F012         	call	_toupper
  4169  001CFC  0FC9               	addlw	201
  4170  001CFE  0100               	movlb	0	; () banked
  4171  001D00  6FF5               	movwf	strtol@c& (0+255),b
  4172  001D02  D00A               	goto	l3547
  4173  001D04                     l3543:
  4174  001D04  FFFF               	dw	65535	; assembler added errata NOP
  4175  001D06  0100               	movlb	0	; () banked
  4176  001D08  51F5               	movf	strtol@c& (0+255),w,b
  4177  001D0A  ECFD  F011         	call	_isdigit
  4178  001D0E  A0D8               	btfss	status,0,c
  4179  001D10  D04D               	goto	l3557
  4180  001D12  0E30               	movlw	48
  4181  001D14  0100               	movlb	0	; () banked
  4182  001D16  5FF5               	subwf	strtol@c& (0+255),f,b
  4183  001D18                     l3547:
  4184  001D18  FFFF               	dw	65535	; assembler added errata NOP
  4185                           
  4186                           ; BSR set to: 0
  4187  001D1A  0100               	movlb	0	; () banked
  4188  001D1C  51F5               	movf	strtol@c& (0+255),w,b
  4189  001D1E  0100               	movlb	0	; () banked
  4190  001D20  6FEC               	movwf	??_strtol& (0+255),b
  4191  001D22  6BED               	clrf	(??_strtol+1)& (0+255),b
  4192  001D24  0100               	movlb	0	; () banked
  4193  001D26  51EA               	movf	strtol@base& (0+255),w,b
  4194  001D28  0100               	movlb	0	; () banked
  4195  001D2A  5DEC               	subwf	??_strtol& (0+255),w,b
  4196  001D2C  0100               	movlb	0	; () banked
  4197  001D2E  51ED               	movf	(??_strtol+1)& (0+255),w,b
  4198  001D30  0A80               	xorlw	128
  4199  001D32  0100               	movlb	0	; () banked
  4200  001D34  6FEE               	movwf	(??_strtol+2)& (0+255),b
  4201  001D36  0100               	movlb	0	; () banked
  4202  001D38  51EB               	movf	(strtol@base+1)& (0+255),w,b
  4203  001D3A  0A80               	xorlw	128
  4204  001D3C  0100               	movlb	0	; () banked
  4205  001D3E  59EE               	subwfb	(??_strtol+2)& (0+255),w,b
  4206  001D40  B0D8               	btfsc	status,0,c
  4207  001D42  D034               	goto	l3557
  4208                           
  4209                           ; BSR set to: 0
  4210                           
  4211                           ; BSR set to: 0
  4212                           
  4213                           ; BSR set to: 0
  4214  001D44  C0EA  F0DE         	movff	strtol@base,___lmul@multiplier
  4215  001D48  C0EB  F0DF         	movff	strtol@base+1,___lmul@multiplier+1
  4216  001D4C  0100               	movlb	0	; () banked
  4217  001D4E  0E00               	movlw	0
  4218  001D50  BFDF               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  4219  001D52  0EFF               	movlw	-1
  4220  001D54  6FE0               	movwf	(___lmul@multiplier+2)& (0+255),b
  4221  001D56  6FE1               	movwf	(___lmul@multiplier+3)& (0+255),b
  4222  001D58  C0F1  F0E2         	movff	strtol@a,___lmul@multiplicand
  4223  001D5C  C0F2  F0E3         	movff	strtol@a+1,___lmul@multiplicand+1
  4224  001D60  C0F3  F0E4         	movff	strtol@a+2,___lmul@multiplicand+2
  4225  001D64  C0F4  F0E5         	movff	strtol@a+3,___lmul@multiplicand+3
  4226  001D68  ECB5  F010         	call	___lmul	;wreg free
  4227  001D6C  0100               	movlb	0	; () banked
  4228  001D6E  51F5               	movf	strtol@c& (0+255),w,b
  4229  001D70  0100               	movlb	0	; () banked
  4230  001D72  25DE               	addwf	?___lmul& (0+255),w,b
  4231  001D74  0100               	movlb	0	; () banked
  4232  001D76  6FF1               	movwf	strtol@a& (0+255),b
  4233  001D78  0E00               	movlw	0
  4234  001D7A  0100               	movlb	0	; () banked
  4235  001D7C  21DF               	addwfc	(?___lmul+1)& (0+255),w,b
  4236  001D7E  0100               	movlb	0	; () banked
  4237  001D80  6FF2               	movwf	(strtol@a+1)& (0+255),b
  4238  001D82  0E00               	movlw	0
  4239  001D84  0100               	movlb	0	; () banked
  4240  001D86  21E0               	addwfc	(?___lmul+2)& (0+255),w,b
  4241  001D88  0100               	movlb	0	; () banked
  4242  001D8A  6FF3               	movwf	(strtol@a+2)& (0+255),b
  4243  001D8C  0E00               	movlw	0
  4244  001D8E  0100               	movlb	0	; () banked
  4245  001D90  21E1               	addwfc	(?___lmul+3)& (0+255),w,b
  4246  001D92  0100               	movlb	0	; () banked
  4247  001D94  6FF4               	movwf	(strtol@a+3)& (0+255),b
  4248                           
  4249                           ; BSR set to: 0
  4250  001D96  C0E6  FFD9         	movff	strtol@s,fsr2l
  4251  001D9A  C0E7  FFDA         	movff	strtol@s+1,fsr2h
  4252  001D9E  50DF               	movf	indf2,w,c
  4253  001DA0  0100               	movlb	0	; () banked
  4254  001DA2  6FF5               	movwf	strtol@c& (0+255),b
  4255                           
  4256                           ; BSR set to: 0
  4257  001DA4  0100               	movlb	0	; () banked
  4258  001DA6  4BE6               	infsnz	strtol@s& (0+255),f,b
  4259  001DA8  2BE7               	incf	(strtol@s+1)& (0+255),f,b
  4260  001DAA  D79D               	goto	l3539
  4261  001DAC                     l3557:
  4262  001DAC  FFFF               	dw	65535	; assembler added errata NOP
  4263  001DAE  0100               	movlb	0	; () banked
  4264  001DB0  51E8               	movf	strtol@endptr& (0+255),w,b
  4265  001DB2  0100               	movlb	0	; () banked
  4266  001DB4  11E9               	iorwf	(strtol@endptr+1)& (0+255),w,b
  4267  001DB6  B4D8               	btfsc	status,2,c
  4268  001DB8  D012               	goto	l3561
  4269                           
  4270                           ; BSR set to: 0
  4271  001DBA  0EFF               	movlw	255
  4272  001DBC  0100               	movlb	0	; () banked
  4273  001DBE  25E6               	addwf	strtol@s& (0+255),w,b
  4274  001DC0  0100               	movlb	0	; () banked
  4275  001DC2  6FEC               	movwf	??_strtol& (0+255),b
  4276  001DC4  0EFF               	movlw	255
  4277  001DC6  0100               	movlb	0	; () banked
  4278  001DC8  21E7               	addwfc	(strtol@s+1)& (0+255),w,b
  4279  001DCA  0100               	movlb	0	; () banked
  4280  001DCC  6FED               	movwf	(??_strtol+1)& (0+255),b
  4281  001DCE  C0E8  FFD9         	movff	strtol@endptr,fsr2l
  4282  001DD2  C0E9  FFDA         	movff	strtol@endptr+1,fsr2h
  4283  001DD6  C0EC  FFDE         	movff	??_strtol,postinc2
  4284  001DDA  C0ED  FFDD         	movff	??_strtol+1,postdec2
  4285  001DDE                     l3561:
  4286  001DDE  FFFF               	dw	65535	; assembler added errata NOP
  4287                           
  4288                           ; BSR set to: 0
  4289  001DE0  0100               	movlb	0	; () banked
  4290  001DE2  51F0               	movf	strtol@sign& (0+255),w,b
  4291  001DE4  0100               	movlb	0	; () banked
  4292  001DE6  B4D8               	btfsc	status,2,c
  4293  001DE8  D01B               	goto	l991
  4294                           
  4295                           ; BSR set to: 0
  4296  001DEA  C0F1  F0EC         	movff	strtol@a,??_strtol
  4297  001DEE  C0F2  F0ED         	movff	strtol@a+1,??_strtol+1
  4298  001DF2  C0F3  F0EE         	movff	strtol@a+2,??_strtol+2
  4299  001DF6  C0F4  F0EF         	movff	strtol@a+3,??_strtol+3
  4300  001DFA  0100               	movlb	0	; () banked
  4301  001DFC  1FEC               	comf	??_strtol& (0+255),f,b
  4302  001DFE  1FED               	comf	(??_strtol+1)& (0+255),f,b
  4303  001E00  1FEE               	comf	(??_strtol+2)& (0+255),f,b
  4304  001E02  1FEF               	comf	(??_strtol+3)& (0+255),f,b
  4305  001E04  2BEC               	incf	??_strtol& (0+255),f,b
  4306  001E06  0E00               	movlw	0
  4307  001E08  23ED               	addwfc	(??_strtol+1)& (0+255),f,b
  4308  001E0A  23EE               	addwfc	(??_strtol+2)& (0+255),f,b
  4309  001E0C  23EF               	addwfc	(??_strtol+3)& (0+255),f,b
  4310  001E0E  C0EC  F0E6         	movff	??_strtol,?_strtol
  4311  001E12  C0ED  F0E7         	movff	??_strtol+1,?_strtol+1
  4312  001E16  C0EE  F0E8         	movff	??_strtol+2,?_strtol+2
  4313  001E1A  C0EF  F0E9         	movff	??_strtol+3,?_strtol+3
  4314                           
  4315                           ; BSR set to: 0
  4316  001E1E  D009               	goto	l992
  4317  001E20                     l991:
  4318  001E20  FFFF               	dw	65535	; assembler added errata NOP
  4319                           
  4320                           ; BSR set to: 0
  4321  001E22  C0F1  F0E6         	movff	strtol@a,?_strtol
  4322  001E26  C0F2  F0E7         	movff	strtol@a+1,?_strtol+1
  4323  001E2A  C0F3  F0E8         	movff	strtol@a+2,?_strtol+2
  4324  001E2E  C0F4  F0E9         	movff	strtol@a+3,?_strtol+3
  4325  001E32                     l992:
  4326  001E32  FFFF               	dw	65535	; assembler added errata NOP
  4327                           
  4328                           ; BSR set to: 0
  4329  001E34  0012               	return		;funcret
  4330  001E36  FFFF               	dw	65535	; errata NOP
  4331  001E38                     __end_of_strtol:
  4332                           	opt stack 0
  4333                           tblptru	equ	0xFF8
  4334                           tblptrh	equ	0xFF7
  4335                           tblptrl	equ	0xFF6
  4336                           tablat	equ	0xFF5
  4337                           postinc0	equ	0xFEE
  4338                           wreg	equ	0xFE8
  4339                           indf2	equ	0xFDF
  4340                           postinc2	equ	0xFDE
  4341                           postdec2	equ	0xFDD
  4342                           fsr2h	equ	0xFDA
  4343                           fsr2l	equ	0xFD9
  4344                           status	equ	0xFD8
  4345                           
  4346 ;; *************** function _toupper *****************
  4347 ;; Defined at:
  4348 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\toupper.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  c               1    wreg     unsigned char 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  c               1   31[COMRAM] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  1    wreg      unsigned char 
  4355 ;; Registers used:
  4356 ;;		wreg, status,2, status,0
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4362 ;;      Params:         0       0       0       0       0       0       0
  4363 ;;      Locals:         1       0       0       0       0       0       0
  4364 ;;      Temps:          0       0       0       0       0       0       0
  4365 ;;      Totals:         1       0       0       0       0       0       0
  4366 ;;Total ram usage:        1 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    2
  4369 ;; This function calls:
  4370 ;;		Nothing
  4371 ;; This function is called by:
  4372 ;;		_strtol
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           	psect	text2
  4377  002442                     __ptext2:
  4378                           	opt stack 0
  4379  002442                     _toupper:
  4380                           	opt stack 0
  4381  002442  FFFF               	dw	65535	; assembler added errata NOP
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;incstack = 0
  4385                           ;toupper@c stored from wreg
  4386  002444  6E5A               	movwf	toupper@c,c
  4387  002446  0E7B               	movlw	123
  4388  002448  605A               	cpfslt	toupper@c,c
  4389  00244A  D004               	goto	l3395
  4390  00244C  0E60               	movlw	96
  4391  00244E  645A               	cpfsgt	toupper@c,c
  4392  002450  D001               	goto	l3395
  4393  002452  9A5A               	bcf	toupper@c,5,c
  4394  002454                     l3395:
  4395  002454  FFFF               	dw	65535	; assembler added errata NOP
  4396  002456  505A               	movf	toupper@c,w,c
  4397  002458  0012               	return		;funcret
  4398  00245A  FFFF               	dw	65535	; errata NOP
  4399  00245C                     __end_of_toupper:
  4400                           	opt stack 0
  4401                           tblptru	equ	0xFF8
  4402                           tblptrh	equ	0xFF7
  4403                           tblptrl	equ	0xFF6
  4404                           tablat	equ	0xFF5
  4405                           postinc0	equ	0xFEE
  4406                           wreg	equ	0xFE8
  4407                           indf2	equ	0xFDF
  4408                           postinc2	equ	0xFDE
  4409                           postdec2	equ	0xFDD
  4410                           fsr2h	equ	0xFDA
  4411                           fsr2l	equ	0xFD9
  4412                           status	equ	0xFD8
  4413                           
  4414 ;; *************** function _isspace *****************
  4415 ;; Defined at:
  4416 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\isspace.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;  c               1    wreg     unsigned char 
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;  c               1   33[COMRAM] unsigned char 
  4421 ;; Return value:  Size  Location     Type
  4422 ;;		None               void
  4423 ;; Registers used:
  4424 ;;		wreg, status,2, status,0
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4430 ;;      Params:         0       0       0       0       0       0       0
  4431 ;;      Locals:         2       0       0       0       0       0       0
  4432 ;;      Temps:          1       0       0       0       0       0       0
  4433 ;;      Totals:         3       0       0       0       0       0       0
  4434 ;;Total ram usage:        3 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    2
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_strtol
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           	psect	text3
  4445  0023CC                     __ptext3:
  4446                           	opt stack 0
  4447  0023CC                     _isspace:
  4448                           	opt stack 0
  4449  0023CC  FFFF               	dw	65535	; assembler added errata NOP
  4450                           
  4451                           ;incstack = 0
  4452                           ;isspace@c stored from wreg
  4453  0023CE  6E5C               	movwf	isspace@c,c
  4454  0023D0  0E01               	movlw	1
  4455  0023D2  6E5B               	movwf	_isspace$1613,c
  4456  0023D4  0E20               	movlw	32
  4457  0023D6  185C               	xorwf	isspace@c,w,c
  4458  0023D8  B4D8               	btfsc	status,2,c
  4459  0023DA  D009               	goto	l3371
  4460  0023DC  0E0E               	movlw	14
  4461  0023DE  605C               	cpfslt	isspace@c,c
  4462  0023E0  D003               	goto	l3369
  4463  0023E2  0E09               	movlw	9
  4464  0023E4  605C               	cpfslt	isspace@c,c
  4465  0023E6  D003               	goto	l3371
  4466  0023E8                     l3369:
  4467  0023E8  FFFF               	dw	65535	; assembler added errata NOP
  4468  0023EA  0E00               	movlw	0
  4469  0023EC  6E5B               	movwf	_isspace$1613,c
  4470  0023EE                     l3371:
  4471  0023EE  FFFF               	dw	65535	; assembler added errata NOP
  4472  0023F0  C05B  F05A         	movff	_isspace$1613,??_isspace
  4473  0023F4  305A               	rrcf	??_isspace,w,c
  4474  0023F6  0012               	return		;funcret
  4475  0023F8  FFFF               	dw	65535	; errata NOP
  4476  0023FA                     __end_of_isspace:
  4477                           	opt stack 0
  4478                           tblptru	equ	0xFF8
  4479                           tblptrh	equ	0xFF7
  4480                           tblptrl	equ	0xFF6
  4481                           tablat	equ	0xFF5
  4482                           postinc0	equ	0xFEE
  4483                           wreg	equ	0xFE8
  4484                           indf2	equ	0xFDF
  4485                           postinc2	equ	0xFDE
  4486                           postdec2	equ	0xFDD
  4487                           fsr2h	equ	0xFDA
  4488                           fsr2l	equ	0xFD9
  4489                           status	equ	0xFD8
  4490                           
  4491 ;; *************** function _isdigit *****************
  4492 ;; Defined at:
  4493 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\isdigit.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;  c               1    wreg     unsigned char 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  c               1   33[COMRAM] unsigned char 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;		None               void
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4507 ;;      Params:         0       0       0       0       0       0       0
  4508 ;;      Locals:         2       0       0       0       0       0       0
  4509 ;;      Temps:          1       0       0       0       0       0       0
  4510 ;;      Totals:         3       0       0       0       0       0       0
  4511 ;;Total ram usage:        3 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    2
  4514 ;; This function calls:
  4515 ;;		Nothing
  4516 ;; This function is called by:
  4517 ;;		_strtol
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text4
  4522  0023FA                     __ptext4:
  4523                           	opt stack 0
  4524  0023FA                     _isdigit:
  4525                           	opt stack 0
  4526  0023FA  FFFF               	dw	65535	; assembler added errata NOP
  4527                           
  4528                           ;incstack = 0
  4529                           ;isdigit@c stored from wreg
  4530  0023FC  6E5C               	movwf	isdigit@c,c
  4531  0023FE  0E00               	movlw	0
  4532  002400  6E5B               	movwf	_isdigit$1610,c
  4533  002402  0E3A               	movlw	58
  4534  002404  605C               	cpfslt	isdigit@c,c
  4535  002406  D005               	goto	l3407
  4536  002408  0E2F               	movlw	47
  4537  00240A  645C               	cpfsgt	isdigit@c,c
  4538  00240C  D002               	goto	l3407
  4539  00240E  0E01               	movlw	1
  4540  002410  6E5B               	movwf	_isdigit$1610,c
  4541  002412                     l3407:
  4542  002412  FFFF               	dw	65535	; assembler added errata NOP
  4543  002414  C05B  F05A         	movff	_isdigit$1610,??_isdigit
  4544  002418  305A               	rrcf	??_isdigit,w,c
  4545  00241A  0012               	return		;funcret
  4546  00241C  FFFF               	dw	65535	; errata NOP
  4547  00241E                     __end_of_isdigit:
  4548                           	opt stack 0
  4549                           tblptru	equ	0xFF8
  4550                           tblptrh	equ	0xFF7
  4551                           tblptrl	equ	0xFF6
  4552                           tablat	equ	0xFF5
  4553                           postinc0	equ	0xFEE
  4554                           wreg	equ	0xFE8
  4555                           indf2	equ	0xFDF
  4556                           postinc2	equ	0xFDE
  4557                           postdec2	equ	0xFDD
  4558                           fsr2h	equ	0xFDA
  4559                           fsr2l	equ	0xFD9
  4560                           status	equ	0xFD8
  4561                           
  4562 ;; *************** function _isalpha *****************
  4563 ;; Defined at:
  4564 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\isalpha.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;  c               1    wreg     unsigned char 
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;  c               1    1[BANK0 ] unsigned char 
  4569 ;; Return value:  Size  Location     Type
  4570 ;;		None               void
  4571 ;; Registers used:
  4572 ;;		wreg, status,2, status,0, cstack
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4578 ;;      Params:         0       0       0       0       0       0       0
  4579 ;;      Locals:         0       2       0       0       0       0       0
  4580 ;;      Temps:          1       0       0       0       0       0       0
  4581 ;;      Totals:         1       2       0       0       0       0       0
  4582 ;;Total ram usage:        3 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    3
  4585 ;; This function calls:
  4586 ;;		_isupper
  4587 ;; This function is called by:
  4588 ;;		_strtol
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           	psect	text5
  4593  002390                     __ptext5:
  4594                           	opt stack 0
  4595  002390                     _isalpha:
  4596                           	opt stack 0
  4597  002390  FFFF               	dw	65535	; assembler added errata NOP
  4598                           
  4599                           ;incstack = 0
  4600                           ;isalpha@c stored from wreg
  4601  002392  0100               	movlb	0	; () banked
  4602  002394  6FDF               	movwf	isalpha@c& (0+255),b
  4603  002396  0E01               	movlw	1
  4604  002398  0100               	movlb	0	; () banked
  4605  00239A  6FDE               	movwf	_isalpha$1607& (0+255),b
  4606                           
  4607                           ; BSR set to: 0
  4608  00239C  0E7B               	movlw	123
  4609  00239E  0100               	movlb	0	; () banked
  4610  0023A0  61DF               	cpfslt	isalpha@c& (0+255),b
  4611  0023A2  D004               	goto	l3381
  4612                           
  4613                           ; BSR set to: 0
  4614  0023A4  0E61               	movlw	97
  4615  0023A6  0100               	movlb	0	; () banked
  4616  0023A8  61DF               	cpfslt	isalpha@c& (0+255),b
  4617  0023AA  D00A               	goto	l3385
  4618  0023AC                     l3381:
  4619  0023AC  FFFF               	dw	65535	; assembler added errata NOP
  4620                           
  4621                           ; BSR set to: 0
  4622  0023AE  0100               	movlb	0	; () banked
  4623  0023B0  51DF               	movf	isalpha@c& (0+255),w,b
  4624  0023B2  EC0F  F012         	call	_isupper
  4625  0023B6  B0D8               	btfsc	status,0,c
  4626  0023B8  D003               	goto	l3385
  4627  0023BA  0E00               	movlw	0
  4628  0023BC  0100               	movlb	0	; () banked
  4629  0023BE  6FDE               	movwf	_isalpha$1607& (0+255),b
  4630  0023C0                     l3385:
  4631  0023C0  FFFF               	dw	65535	; assembler added errata NOP
  4632  0023C2  C0DE  F05D         	movff	_isalpha$1607,??_isalpha
  4633  0023C6  305D               	rrcf	??_isalpha,w,c
  4634  0023C8  0012               	return		;funcret
  4635  0023CA  FFFF               	dw	65535	; errata NOP
  4636  0023CC                     __end_of_isalpha:
  4637                           	opt stack 0
  4638                           tblptru	equ	0xFF8
  4639                           tblptrh	equ	0xFF7
  4640                           tblptrl	equ	0xFF6
  4641                           tablat	equ	0xFF5
  4642                           postinc0	equ	0xFEE
  4643                           wreg	equ	0xFE8
  4644                           indf2	equ	0xFDF
  4645                           postinc2	equ	0xFDE
  4646                           postdec2	equ	0xFDD
  4647                           fsr2h	equ	0xFDA
  4648                           fsr2l	equ	0xFD9
  4649                           status	equ	0xFD8
  4650                           
  4651 ;; *************** function _isupper *****************
  4652 ;; Defined at:
  4653 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\isupper.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;  c               1    wreg     unsigned char 
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;  c               1   33[COMRAM] unsigned char 
  4658 ;; Return value:  Size  Location     Type
  4659 ;;		None               void
  4660 ;; Registers used:
  4661 ;;		wreg, status,2, status,0
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4667 ;;      Params:         0       0       0       0       0       0       0
  4668 ;;      Locals:         2       0       0       0       0       0       0
  4669 ;;      Temps:          1       0       0       0       0       0       0
  4670 ;;      Totals:         3       0       0       0       0       0       0
  4671 ;;Total ram usage:        3 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:    2
  4674 ;; This function calls:
  4675 ;;		Nothing
  4676 ;; This function is called by:
  4677 ;;		_isalpha
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           	psect	text6
  4682  00241E                     __ptext6:
  4683                           	opt stack 0
  4684  00241E                     _isupper:
  4685                           	opt stack 0
  4686  00241E  FFFF               	dw	65535	; assembler added errata NOP
  4687                           
  4688                           ;incstack = 0
  4689                           ;isupper@c stored from wreg
  4690  002420  6E5C               	movwf	isupper@c,c
  4691  002422  0E00               	movlw	0
  4692  002424  6E5B               	movwf	_isupper$1616,c
  4693  002426  0E5B               	movlw	91
  4694  002428  605C               	cpfslt	isupper@c,c
  4695  00242A  D005               	goto	l3309
  4696  00242C  0E40               	movlw	64
  4697  00242E  645C               	cpfsgt	isupper@c,c
  4698  002430  D002               	goto	l3309
  4699  002432  0E01               	movlw	1
  4700  002434  6E5B               	movwf	_isupper$1616,c
  4701  002436                     l3309:
  4702  002436  FFFF               	dw	65535	; assembler added errata NOP
  4703  002438  C05B  F05A         	movff	_isupper$1616,??_isupper
  4704  00243C  305A               	rrcf	??_isupper,w,c
  4705  00243E  0012               	return		;funcret
  4706  002440  FFFF               	dw	65535	; errata NOP
  4707  002442                     __end_of_isupper:
  4708                           	opt stack 0
  4709                           tblptru	equ	0xFF8
  4710                           tblptrh	equ	0xFF7
  4711                           tblptrl	equ	0xFF6
  4712                           tablat	equ	0xFF5
  4713                           postinc0	equ	0xFEE
  4714                           wreg	equ	0xFE8
  4715                           indf2	equ	0xFDF
  4716                           postinc2	equ	0xFDE
  4717                           postdec2	equ	0xFDD
  4718                           fsr2h	equ	0xFDA
  4719                           fsr2l	equ	0xFD9
  4720                           status	equ	0xFD8
  4721                           
  4722 ;; *************** function ___lmul *****************
  4723 ;; Defined at:
  4724 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\Umul32.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4727 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4728 ;; Auto vars:     Size  Location     Type
  4729 ;;  product         4   31[COMRAM] unsigned long 
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  4    0[BANK0 ] unsigned long 
  4732 ;; Registers used:
  4733 ;;		wreg, status,2, status,0
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4739 ;;      Params:         0       8       0       0       0       0       0
  4740 ;;      Locals:         4       0       0       0       0       0       0
  4741 ;;      Temps:          0       0       0       0       0       0       0
  4742 ;;      Totals:         4       8       0       0       0       0       0
  4743 ;;Total ram usage:       12 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    2
  4746 ;; This function calls:
  4747 ;;		Nothing
  4748 ;; This function is called by:
  4749 ;;		_strtol
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           	psect	text7
  4754  00216A                     __ptext7:
  4755                           	opt stack 0
  4756  00216A                     ___lmul:
  4757                           	opt stack 0
  4758  00216A  FFFF               	dw	65535	; assembler added errata NOP
  4759                           
  4760                           ;incstack = 0
  4761  00216C  0E00               	movlw	0
  4762  00216E  6E5A               	movwf	___lmul@product,c
  4763  002170  0E00               	movlw	0
  4764  002172  6E5B               	movwf	___lmul@product+1,c
  4765  002174  0E00               	movlw	0
  4766  002176  6E5C               	movwf	___lmul@product+2,c
  4767  002178  0E00               	movlw	0
  4768  00217A  6E5D               	movwf	___lmul@product+3,c
  4769  00217C                     l3315:
  4770  00217C  FFFF               	dw	65535	; assembler added errata NOP
  4771  00217E  0100               	movlb	0	; () banked
  4772  002180  A1DE               	btfss	___lmul@multiplier& (0+255),0,b
  4773  002182  D00C               	goto	l3319
  4774                           
  4775                           ; BSR set to: 0
  4776  002184  0100               	movlb	0	; () banked
  4777  002186  51E2               	movf	___lmul@multiplicand& (0+255),w,b
  4778  002188  265A               	addwf	___lmul@product,f,c
  4779  00218A  0100               	movlb	0	; () banked
  4780  00218C  51E3               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  4781  00218E  225B               	addwfc	___lmul@product+1,f,c
  4782  002190  0100               	movlb	0	; () banked
  4783  002192  51E4               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  4784  002194  225C               	addwfc	___lmul@product+2,f,c
  4785  002196  0100               	movlb	0	; () banked
  4786  002198  51E5               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  4787  00219A  225D               	addwfc	___lmul@product+3,f,c
  4788  00219C                     l3319:
  4789  00219C  FFFF               	dw	65535	; assembler added errata NOP
  4790                           
  4791                           ; BSR set to: 0
  4792  00219E  0100               	movlb	0	; () banked
  4793  0021A0  90D8               	bcf	status,0,c
  4794  0021A2  37E2               	rlcf	___lmul@multiplicand& (0+255),f,b
  4795  0021A4  37E3               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  4796  0021A6  37E4               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  4797  0021A8  37E5               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  4798                           
  4799                           ; BSR set to: 0
  4800  0021AA  0100               	movlb	0	; () banked
  4801  0021AC  90D8               	bcf	status,0,c
  4802  0021AE  33E1               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  4803  0021B0  33E0               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  4804  0021B2  33DF               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  4805  0021B4  33DE               	rrcf	___lmul@multiplier& (0+255),f,b
  4806  0021B6  0100               	movlb	0	; () banked
  4807  0021B8  51DE               	movf	___lmul@multiplier& (0+255),w,b
  4808  0021BA  0100               	movlb	0	; () banked
  4809  0021BC  11DF               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  4810  0021BE  0100               	movlb	0	; () banked
  4811  0021C0  11E0               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  4812  0021C2  0100               	movlb	0	; () banked
  4813  0021C4  11E1               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  4814  0021C6  A4D8               	btfss	status,2,c
  4815  0021C8  D7D9               	goto	l3315
  4816                           
  4817                           ; BSR set to: 0
  4818  0021CA  C05A  F0DE         	movff	___lmul@product,?___lmul
  4819  0021CE  C05B  F0DF         	movff	___lmul@product+1,?___lmul+1
  4820  0021D2  C05C  F0E0         	movff	___lmul@product+2,?___lmul+2
  4821  0021D6  C05D  F0E1         	movff	___lmul@product+3,?___lmul+3
  4822                           
  4823                           ; BSR set to: 0
  4824  0021DA  0012               	return		;funcret
  4825  0021DC  FFFF               	dw	65535	; errata NOP
  4826  0021DE                     __end_of___lmul:
  4827                           	opt stack 0
  4828                           tblptru	equ	0xFF8
  4829                           tblptrh	equ	0xFF7
  4830                           tblptrl	equ	0xFF6
  4831                           tablat	equ	0xFF5
  4832                           postinc0	equ	0xFEE
  4833                           wreg	equ	0xFE8
  4834                           indf2	equ	0xFDF
  4835                           postinc2	equ	0xFDE
  4836                           postdec2	equ	0xFDD
  4837                           fsr2h	equ	0xFDA
  4838                           fsr2l	equ	0xFD9
  4839                           status	equ	0xFD8
  4840                           
  4841 ;; *************** function _strcpy *****************
  4842 ;; Defined at:
  4843 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\strcpy.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;  to              2   31[COMRAM] PTR unsigned char 
  4846 ;;		 -> str4(22), str3(5), str2(16), str1(10), 
  4847 ;;  from            2   33[COMRAM] PTR const unsigned char 
  4848 ;;		 -> STR_4(24), STR_3(7), STR_2(17), STR_1(11), 
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;  cp              2    0[BANK0 ] PTR unsigned char 
  4851 ;;		 -> str4(22), str3(5), str2(16), str1(10), 
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  2   31[COMRAM] PTR unsigned char 
  4854 ;; Registers used:
  4855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4861 ;;      Params:         4       0       0       0       0       0       0
  4862 ;;      Locals:         0       2       0       0       0       0       0
  4863 ;;      Temps:          0       0       0       0       0       0       0
  4864 ;;      Totals:         4       2       0       0       0       0       0
  4865 ;;Total ram usage:        6 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    2
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_main
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text8
  4876  002352                     __ptext8:
  4877                           	opt stack 0
  4878  002352                     _strcpy:
  4879                           	opt stack 0
  4880  002352  FFFF               	dw	65535	; assembler added errata NOP
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;incstack = 0
  4884  002354  C05A  F0DE         	movff	strcpy@to,strcpy@cp
  4885  002358  C05B  F0DF         	movff	strcpy@to+1,strcpy@cp+1
  4886  00235C  D006               	goto	l3415
  4887  00235E                     l3413:
  4888  00235E  FFFF               	dw	65535	; assembler added errata NOP
  4889  002360  0100               	movlb	0	; () banked
  4890  002362  4BDE               	infsnz	strcpy@cp& (0+255),f,b
  4891  002364  2BDF               	incf	(strcpy@cp+1)& (0+255),f,b
  4892  002366  4A5C               	infsnz	strcpy@from,f,c
  4893  002368  2A5D               	incf	strcpy@from+1,f,c
  4894  00236A                     l3415:
  4895  00236A  FFFF               	dw	65535	; assembler added errata NOP
  4896  00236C  C05C  FFF6         	movff	strcpy@from,tblptrl
  4897  002370  C05D  FFF7         	movff	strcpy@from+1,tblptrh
  4898  002374                     	if	0	;tblptru may be non-zero
  4899  002374                     	endif
  4900  002374                     	if	0	;tblptru may be non-zero
  4901  002374                     	endif
  4902  002374  C0DE  FFD9         	movff	strcpy@cp,fsr2l
  4903  002378  C0DF  FFDA         	movff	strcpy@cp+1,fsr2h
  4904  00237C  0008               	tblrd		*
  4905  00237E  FFFF               	dw	65535	; errata NOP
  4906  002380  CFF5 FFDF          	movff	tablat,indf2
  4907  002384  50DF               	movf	indf2,w,c
  4908  002386  B4D8               	btfsc	status,2,c
  4909                           
  4910                           ;	Return value of _strcpy is never used
  4911  002388  0012               	return		;funcret
  4912  00238A  FFFF               	dw	65535	; assembler added errata NOP
  4913  00238C  D7E8               	goto	l3413
  4914  00238E  FFFF               	dw	65535	; errata NOP
  4915  002390                     __end_of_strcpy:
  4916                           	opt stack 0
  4917                           tblptru	equ	0xFF8
  4918                           tblptrh	equ	0xFF7
  4919                           tblptrl	equ	0xFF6
  4920                           tablat	equ	0xFF5
  4921                           postinc0	equ	0xFEE
  4922                           wreg	equ	0xFE8
  4923                           indf2	equ	0xFDF
  4924                           postinc2	equ	0xFDE
  4925                           postdec2	equ	0xFDD
  4926                           fsr2h	equ	0xFDA
  4927                           fsr2l	equ	0xFD9
  4928                           status	equ	0xFD8
  4929                           
  4930 ;; *************** function _strcmp *****************
  4931 ;; Defined at:
  4932 ;;		line 33 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\strcmp.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;  s1              2   31[COMRAM] PTR const unsigned char 
  4935 ;;		 -> comando(21), 
  4936 ;;  s2              2   33[COMRAM] PTR const unsigned char 
  4937 ;;		 -> str3(5), str2(16), str1(10), 
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;  r               1    1[BANK0 ] char 
  4940 ;; Return value:  Size  Location     Type
  4941 ;;                  2   31[COMRAM] int 
  4942 ;; Registers used:
  4943 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4944 ;; Tracked objects:
  4945 ;;		On entry : 0/0
  4946 ;;		On exit  : 0/0
  4947 ;;		Unchanged: 0/0
  4948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4949 ;;      Params:         4       0       0       0       0       0       0
  4950 ;;      Locals:         0       1       0       0       0       0       0
  4951 ;;      Temps:          0       1       0       0       0       0       0
  4952 ;;      Totals:         4       2       0       0       0       0       0
  4953 ;;Total ram usage:        6 bytes
  4954 ;; Hardware stack levels used:    1
  4955 ;; Hardware stack levels required when called:    2
  4956 ;; This function calls:
  4957 ;;		Nothing
  4958 ;; This function is called by:
  4959 ;;		_main
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           	psect	text9
  4964  0022BA                     __ptext9:
  4965                           	opt stack 0
  4966  0022BA                     _strcmp:
  4967                           	opt stack 0
  4968  0022BA  FFFF               	dw	65535	; assembler added errata NOP
  4969                           
  4970                           ;incstack = 0
  4971  0022BC  D005               	goto	l3421
  4972  0022BE                     l3419:
  4973  0022BE  FFFF               	dw	65535	; assembler added errata NOP
  4974  0022C0  4A5A               	infsnz	strcmp@s1,f,c
  4975  0022C2  2A5B               	incf	strcmp@s1+1,f,c
  4976  0022C4  4A5C               	infsnz	strcmp@s2,f,c
  4977  0022C6  2A5D               	incf	strcmp@s2+1,f,c
  4978  0022C8                     l3421:
  4979  0022C8  FFFF               	dw	65535	; assembler added errata NOP
  4980  0022CA  C05A  FFD9         	movff	strcmp@s1,fsr2l
  4981  0022CE  C05B  FFDA         	movff	strcmp@s1+1,fsr2h
  4982  0022D2  50DF               	movf	indf2,w,c
  4983  0022D4  0100               	movlb	0	; () banked
  4984  0022D6  6FDE               	movwf	??_strcmp& (0+255),b
  4985  0022D8  C05C  FFD9         	movff	strcmp@s2,fsr2l
  4986  0022DC  C05D  FFDA         	movff	strcmp@s2+1,fsr2h
  4987  0022E0  50DF               	movf	indf2,w,c
  4988  0022E2  0800               	sublw	0
  4989  0022E4  0100               	movlb	0	; () banked
  4990  0022E6  25DE               	addwf	??_strcmp& (0+255),w,b
  4991  0022E8  0100               	movlb	0	; () banked
  4992  0022EA  6FDF               	movwf	strcmp@r& (0+255),b
  4993  0022EC  0100               	movlb	0	; () banked
  4994  0022EE  51DF               	movf	strcmp@r& (0+255),w,b
  4995  0022F0  A4D8               	btfss	status,2,c
  4996  0022F2  D007               	goto	l3425
  4997                           
  4998                           ; BSR set to: 0
  4999  0022F4  C05A  FFD9         	movff	strcmp@s1,fsr2l
  5000  0022F8  C05B  FFDA         	movff	strcmp@s1+1,fsr2h
  5001  0022FC  50DF               	movf	indf2,w,c
  5002  0022FE  A4D8               	btfss	status,2,c
  5003  002300  D7DE               	goto	l3419
  5004  002302                     l3425:
  5005  002302  FFFF               	dw	65535	; assembler added errata NOP
  5006                           
  5007                           ; BSR set to: 0
  5008  002304  0100               	movlb	0	; () banked
  5009  002306  51DF               	movf	strcmp@r& (0+255),w,b
  5010  002308  6E5A               	movwf	?_strcmp,c
  5011  00230A  6A5B               	clrf	?_strcmp+1,c
  5012  00230C  BE5A               	btfsc	?_strcmp,7,c
  5013  00230E  065B               	decf	?_strcmp+1,f,c
  5014                           
  5015                           ; BSR set to: 0
  5016                           
  5017                           ; BSR set to: 0
  5018  002310  0012               	return		;funcret
  5019  002312  FFFF               	dw	65535	; errata NOP
  5020  002314                     __end_of_strcmp:
  5021                           	opt stack 0
  5022                           tblptru	equ	0xFF8
  5023                           tblptrh	equ	0xFF7
  5024                           tblptrl	equ	0xFF6
  5025                           tablat	equ	0xFF5
  5026                           postinc0	equ	0xFEE
  5027                           wreg	equ	0xFE8
  5028                           indf2	equ	0xFDF
  5029                           postinc2	equ	0xFDE
  5030                           postdec2	equ	0xFDD
  5031                           fsr2h	equ	0xFDA
  5032                           fsr2l	equ	0xFD9
  5033                           status	equ	0xFD8
  5034                           
  5035 ;; *************** function _sprintf *****************
  5036 ;; Defined at:
  5037 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\doprnt.c"
  5038 ;; Parameters:    Size  Location     Type
  5039 ;;  sp              2    8[BANK0 ] PTR unsigned char 
  5040 ;;		 -> salida(12), 
  5041 ;;  f               2   10[BANK0 ] PTR const unsigned char 
  5042 ;;		 -> STR_24(5), STR_23(5), STR_22(5), STR_21(5), 
  5043 ;;		 -> STR_20(5), STR_19(5), STR_18(5), STR_17(5), 
  5044 ;;		 -> STR_16(5), STR_15(5), STR_14(5), STR_13(5), 
  5045 ;;		 -> STR_12(5), STR_11(5), STR_10(5), STR_9(5), 
  5046 ;;		 -> STR_8(5), STR_7(5), STR_6(5), STR_5(5), 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  tmpval          4    0        struct .
  5049 ;;  cp              3    0        PTR const unsigned char 
  5050 ;;  val             2   21[BANK0 ] unsigned int 
  5051 ;;  ap              2   17[BANK0 ] PTR void [1]
  5052 ;;		 -> ?_sprintf(2), 
  5053 ;;  len             2    0        unsigned int 
  5054 ;;  c               1   23[BANK0 ] char 
  5055 ;;  prec            1   20[BANK0 ] char 
  5056 ;;  flag            1   19[BANK0 ] unsigned char 
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  2    8[BANK0 ] int 
  5059 ;; Registers used:
  5060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : 0/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5066 ;;      Params:         0       8       0       0       0       0       0
  5067 ;;      Locals:         0       7       0       0       0       0       0
  5068 ;;      Temps:          0       1       0       0       0       0       0
  5069 ;;      Totals:         0      16       0       0       0       0       0
  5070 ;;Total ram usage:       16 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    3
  5073 ;; This function calls:
  5074 ;;		___lwdiv
  5075 ;;		___lwmod
  5076 ;; This function is called by:
  5077 ;;		_main
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text10
  5082  001E38                     __ptext10:
  5083                           	opt stack 0
  5084  001E38                     _sprintf:
  5085                           	opt stack 0
  5086  001E38  FFFF               	dw	65535	; assembler added errata NOP
  5087                           
  5088                           ;doprnt.c: 494: va_list ap;
  5089                           ;doprnt.c: 499: signed char c;
  5090                           ;doprnt.c: 506: signed char prec;
  5091                           ;doprnt.c: 508: unsigned char flag;
  5092                           ;doprnt.c: 523: union {
  5093                           ;doprnt.c: 524: unsigned long vd;
  5094                           ;doprnt.c: 525: double integ;
  5095                           ;doprnt.c: 526: } tmpval;
  5096                           ;doprnt.c: 528: unsigned int val;
  5097                           ;doprnt.c: 529: unsigned len;
  5098                           ;doprnt.c: 530: const char * cp;
  5099                           ;doprnt.c: 533: *ap = __va_start();
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;incstack = 0
  5103  001E3A  0EEA               	movlw	low (?_sprintf+4)
  5104  001E3C  0100               	movlb	0	; () banked
  5105  001E3E  6FEF               	movwf	sprintf@ap& (0+255),b
  5106  001E40  0E00               	movlw	high (?_sprintf+4)
  5107  001E42  0100               	movlb	0	; () banked
  5108  001E44  6FF0               	movwf	(sprintf@ap+1)& (0+255),b
  5109                           
  5110                           ;doprnt.c: 536: while(c = *f++) {
  5111  001E46  D0B2               	goto	l3483
  5112  001E48                     l3431:
  5113  001E48  FFFF               	dw	65535	; assembler added errata NOP
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;doprnt.c: 538: if(c != '%')
  5117  001E4A  0E25               	movlw	37
  5118  001E4C  0100               	movlb	0	; () banked
  5119  001E4E  19F5               	xorwf	sprintf@c& (0+255),w,b
  5120  001E50  B4D8               	btfsc	status,2,c
  5121  001E52  D00A               	goto	l3437
  5122                           
  5123                           ; BSR set to: 0
  5124                           ;doprnt.c: 540: {
  5125                           ;doprnt.c: 541: ((*sp++ = (c)));
  5126  001E54  C0E6  FFD9         	movff	sprintf@sp,fsr2l
  5127  001E58  C0E7  FFDA         	movff	sprintf@sp+1,fsr2h
  5128  001E5C  C0F5  FFDF         	movff	sprintf@c,indf2
  5129                           
  5130                           ; BSR set to: 0
  5131  001E60  0100               	movlb	0	; () banked
  5132  001E62  4BE6               	infsnz	sprintf@sp& (0+255),f,b
  5133  001E64  2BE7               	incf	(sprintf@sp+1)& (0+255),f,b
  5134                           
  5135                           ;doprnt.c: 542: continue;
  5136  001E66  D0A2               	goto	l3483
  5137  001E68                     l3437:
  5138  001E68  FFFF               	dw	65535	; assembler added errata NOP
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;doprnt.c: 543: }
  5142                           ;doprnt.c: 548: flag = 0;
  5143  001E6A  0E00               	movlw	0
  5144  001E6C  0100               	movlb	0	; () banked
  5145  001E6E  6FF1               	movwf	sprintf@flag& (0+255),b
  5146                           
  5147                           ; BSR set to: 0
  5148                           
  5149                           ; BSR set to: 0
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;doprnt.c: 822: }
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;doprnt.c: 813: continue;
  5156                           
  5157                           ;doprnt.c: 802: default:
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;doprnt.c: 698: case 'i':
  5161                           ;doprnt.c: 699: break;
  5162                           
  5163                           ; BSR set to: 0
  5164                           
  5165                           ;doprnt.c: 697: case 'd':
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;doprnt.c: 638: goto alldone;
  5169                           
  5170                           ;doprnt.c: 637: case 0:
  5171                           
  5172                           ;doprnt.c: 635: switch(c = *f++) {
  5173  001E70  C0E8  FFF6         	movff	sprintf@f,tblptrl
  5174  001E74  C0E9  FFF7         	movff	sprintf@f+1,tblptrh
  5175  001E78  0100               	movlb	0	; () banked
  5176  001E7A  4BE8               	infsnz	sprintf@f& (0+255),f,b
  5177  001E7C  2BE9               	incf	(sprintf@f+1)& (0+255),f,b
  5178  001E7E                     	if	0	;tblptru may be non-zero
  5179  001E7E                     	endif
  5180  001E7E                     	if	0	;tblptru may be non-zero
  5181  001E7E                     	endif
  5182  001E7E  0008               	tblrd		*
  5183  001E80  FFFF               	dw	65535	; errata NOP
  5184  001E82  CFF5 F0F5          	movff	tablat,sprintf@c
  5185  001E86  0100               	movlb	0	; () banked
  5186  001E88  51F5               	movf	sprintf@c& (0+255),w,b
  5187                           
  5188                           ; Switch size 1, requested type "space"
  5189                           ; Number of cases is 3, Range of values is 0 to 105
  5190                           ; switch strategies available:
  5191                           ; Name         Instructions Cycles
  5192                           ; simple_byte           10     6 (average)
  5193                           ;	Chosen strategy is simple_byte
  5194  001E8A  0A00               	xorlw	0	; case 0
  5195  001E8C  B4D8               	btfsc	status,2,c
  5196  001E8E  D09E               	goto	l3485
  5197  001E90  0A64               	xorlw	100	; case 100
  5198  001E92  B4D8               	btfsc	status,2,c
  5199  001E94  D003               	goto	l3443
  5200  001E96  0A0D               	xorlw	13	; case 105
  5201  001E98  A4D8               	btfss	status,2,c
  5202  001E9A  D088               	goto	l3483
  5203  001E9C                     l3443:
  5204  001E9C  FFFF               	dw	65535	; assembler added errata NOP
  5205                           
  5206                           ; BSR set to: 0
  5207                           ;doprnt.c: 1253: {
  5208                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5209  001E9E  C0EF  FFD9         	movff	sprintf@ap,fsr2l
  5210  001EA2  C0F0  FFDA         	movff	sprintf@ap+1,fsr2h
  5211  001EA6  CFDE F0F3          	movff	postinc2,sprintf@val
  5212  001EAA  CFDD F0F4          	movff	postdec2,sprintf@val+1
  5213                           
  5214                           ; BSR set to: 0
  5215  001EAE  0E02               	movlw	2
  5216  001EB0  0100               	movlb	0	; () banked
  5217  001EB2  27EF               	addwf	sprintf@ap& (0+255),f,b
  5218  001EB4  0E00               	movlw	0
  5219  001EB6  23F0               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5220                           
  5221                           ; BSR set to: 0
  5222                           ;doprnt.c: 1261: if((int)val < 0) {
  5223  001EB8  0100               	movlb	0	; () banked
  5224  001EBA  AFF4               	btfss	(sprintf@val+1)& (0+255),7,b
  5225  001EBC  D008               	goto	l3453
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;doprnt.c: 1262: flag |= 0x03;
  5229  001EBE  0E03               	movlw	3
  5230  001EC0  0100               	movlb	0	; () banked
  5231  001EC2  13F1               	iorwf	sprintf@flag& (0+255),f,b
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;doprnt.c: 1263: val = -val;
  5235  001EC4  0100               	movlb	0	; () banked
  5236  001EC6  6DF3               	negf	sprintf@val& (0+255),b
  5237  001EC8  1FF4               	comf	(sprintf@val+1)& (0+255),f,b
  5238  001ECA  B0D8               	btfsc	status,0,c
  5239  001ECC  2BF4               	incf	(sprintf@val+1)& (0+255),f,b
  5240  001ECE                     l3453:
  5241  001ECE  FFFF               	dw	65535	; assembler added errata NOP
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;doprnt.c: 1264: }
  5245                           ;doprnt.c: 1266: }
  5246                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5247  001ED0  0E01               	movlw	1
  5248  001ED2  0100               	movlb	0	; () banked
  5249  001ED4  6FF5               	movwf	sprintf@c& (0+255),b
  5250  001ED6                     l3455:
  5251  001ED6  FFFF               	dw	65535	; assembler added errata NOP
  5252                           
  5253                           ; BSR set to: 0
  5254  001ED8  0E05               	movlw	5
  5255  001EDA  0100               	movlb	0	; () banked
  5256  001EDC  19F5               	xorwf	sprintf@c& (0+255),w,b
  5257  001EDE  B4D8               	btfsc	status,2,c
  5258  001EE0  D018               	goto	l3467
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;doprnt.c: 1306: if(val < dpowers[c])
  5262                           
  5263                           ; BSR set to: 0
  5264                           
  5265                           ; BSR set to: 0
  5266  001EE2  0100               	movlb	0	; () banked
  5267  001EE4  51F5               	movf	sprintf@c& (0+255),w,b
  5268  001EE6  0D02               	mullw	2
  5269  001EE8  0E01               	movlw	low _dpowers
  5270  001EEA  24F3               	addwf	prodl,w,c
  5271  001EEC  6EF6               	movwf	tblptrl,c
  5272  001EEE  0E06               	movlw	high _dpowers
  5273  001EF0  20F4               	addwfc	prodh,w,c
  5274  001EF2  6EF7               	movwf	tblptrh,c
  5275  001EF4                     	if	0	;There are less than 3 active tblptr bytes
  5276  001EF4                     	endif
  5277  001EF4  0009               	tblrd		*+
  5278  001EF6  FFFF               	dw	65535	; errata NOP
  5279  001EF8  50F5               	movf	tablat,w,c
  5280  001EFA  0100               	movlb	0	; () banked
  5281  001EFC  5DF3               	subwf	sprintf@val& (0+255),w,b
  5282  001EFE  0009               	tblrd		*+
  5283  001F00  FFFF               	dw	65535	; errata NOP
  5284  001F02  50F5               	movf	tablat,w,c
  5285  001F04  0100               	movlb	0	; () banked
  5286  001F06  59F4               	subwfb	(sprintf@val+1)& (0+255),w,b
  5287  001F08  A0D8               	btfss	status,0,c
  5288  001F0A  D003               	goto	l3467
  5289                           
  5290                           ; BSR set to: 0
  5291                           
  5292                           ; BSR set to: 0
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;doprnt.c: 1307: break;
  5296  001F0C  0100               	movlb	0	; () banked
  5297  001F0E  2BF5               	incf	sprintf@c& (0+255),f,b
  5298  001F10  D7E2               	goto	l3455
  5299  001F12                     l3467:
  5300  001F12  FFFF               	dw	65535	; assembler added errata NOP
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;doprnt.c: 1422: {
  5304                           ;doprnt.c: 1438: if(flag & 0x03)
  5305  001F14  C0F1  F0EE         	movff	sprintf@flag,??_sprintf
  5306  001F18  0E03               	movlw	3
  5307  001F1A  0100               	movlb	0	; () banked
  5308  001F1C  17EE               	andwf	??_sprintf& (0+255),f,b
  5309  001F1E  B4D8               	btfsc	status,2,c
  5310  001F20  D009               	goto	l3473
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5314  001F22  C0E6  FFD9         	movff	sprintf@sp,fsr2l
  5315  001F26  C0E7  FFDA         	movff	sprintf@sp+1,fsr2h
  5316  001F2A  0E2D               	movlw	45
  5317  001F2C  6EDF               	movwf	indf2,c
  5318                           
  5319                           ; BSR set to: 0
  5320  001F2E  0100               	movlb	0	; () banked
  5321  001F30  4BE6               	infsnz	sprintf@sp& (0+255),f,b
  5322  001F32  2BE7               	incf	(sprintf@sp+1)& (0+255),f,b
  5323  001F34                     l3473:
  5324  001F34  FFFF               	dw	65535	; assembler added errata NOP
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;doprnt.c: 1469: }
  5328                           ;doprnt.c: 1472: prec = c;
  5329  001F36  C0F5  F0F2         	movff	sprintf@c,sprintf@prec
  5330                           
  5331                           ;doprnt.c: 1474: while(prec--) {
  5332  001F3A  D031               	goto	l3481
  5333  001F3C                     l3475:
  5334  001F3C  FFFF               	dw	65535	; assembler added errata NOP
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;doprnt.c: 1478: {
  5338                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5339  001F3E  0100               	movlb	0	; () banked
  5340  001F40  51F2               	movf	sprintf@prec& (0+255),w,b
  5341  001F42  0D02               	mullw	2
  5342  001F44  0E01               	movlw	low _dpowers
  5343  001F46  24F3               	addwf	prodl,w,c
  5344  001F48  6EF6               	movwf	tblptrl,c
  5345  001F4A  0E06               	movlw	high _dpowers
  5346  001F4C  20F4               	addwfc	prodh,w,c
  5347  001F4E  6EF7               	movwf	tblptrh,c
  5348  001F50                     	if	0	;There are less than 3 active tblptr bytes
  5349  001F50                     	endif
  5350  001F50  0009               	tblrd		*+
  5351  001F52  FFFF               	dw	65535	; errata NOP
  5352  001F54  CFF5 F05C          	movff	tablat,___lwdiv@divisor
  5353  001F58  000A               	tblrd		*-
  5354  001F5A  FFFF               	dw	65535	; errata NOP
  5355  001F5C  CFF5 F05D          	movff	tablat,___lwdiv@divisor+1
  5356  001F60  C0F3  F05A         	movff	sprintf@val,___lwdiv@dividend
  5357  001F64  C0F4  F05B         	movff	sprintf@val+1,___lwdiv@dividend+1
  5358  001F68  EC27  F011         	call	___lwdiv	;wreg free
  5359  001F6C  C05A  F0E1         	movff	?___lwdiv,___lwmod@dividend
  5360  001F70  C05B  F0E2         	movff	?___lwdiv+1,___lwmod@dividend+1
  5361  001F74  0E00               	movlw	0
  5362  001F76  0100               	movlb	0	; () banked
  5363  001F78  6FE4               	movwf	(___lwmod@divisor+1)& (0+255),b
  5364  001F7A  0E0A               	movlw	10
  5365  001F7C  6FE3               	movwf	___lwmod@divisor& (0+255),b
  5366  001F7E  ECEF  F010         	call	___lwmod	;wreg free
  5367  001F82  0100               	movlb	0	; () banked
  5368  001F84  51E1               	movf	?___lwmod& (0+255),w,b
  5369  001F86  0F30               	addlw	48
  5370  001F88  0100               	movlb	0	; () banked
  5371  001F8A  6FF5               	movwf	sprintf@c& (0+255),b
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;doprnt.c: 1523: }
  5375                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5376  001F8C  C0E6  FFD9         	movff	sprintf@sp,fsr2l
  5377  001F90  C0E7  FFDA         	movff	sprintf@sp+1,fsr2h
  5378  001F94  C0F5  FFDF         	movff	sprintf@c,indf2
  5379                           
  5380                           ; BSR set to: 0
  5381  001F98  0100               	movlb	0	; () banked
  5382  001F9A  4BE6               	infsnz	sprintf@sp& (0+255),f,b
  5383  001F9C  2BE7               	incf	(sprintf@sp+1)& (0+255),f,b
  5384  001F9E                     l3481:
  5385  001F9E  FFFF               	dw	65535	; assembler added errata NOP
  5386                           
  5387                           ; BSR set to: 0
  5388  001FA0  0100               	movlb	0	; () banked
  5389  001FA2  07F2               	decf	sprintf@prec& (0+255),f,b
  5390  001FA4  0100               	movlb	0	; () banked
  5391  001FA6  29F2               	incf	sprintf@prec& (0+255),w,b
  5392  001FA8  A4D8               	btfss	status,2,c
  5393  001FAA  D7C8               	goto	l3475
  5394  001FAC                     l3483:
  5395  001FAC  FFFF               	dw	65535	; assembler added errata NOP
  5396                           
  5397                           ; BSR set to: 0
  5398  001FAE  C0E8  FFF6         	movff	sprintf@f,tblptrl
  5399  001FB2  C0E9  FFF7         	movff	sprintf@f+1,tblptrh
  5400  001FB6  0100               	movlb	0	; () banked
  5401  001FB8  4BE8               	infsnz	sprintf@f& (0+255),f,b
  5402  001FBA  2BE9               	incf	(sprintf@f+1)& (0+255),f,b
  5403  001FBC                     	if	0	;tblptru may be non-zero
  5404  001FBC                     	endif
  5405  001FBC                     	if	0	;tblptru may be non-zero
  5406  001FBC                     	endif
  5407  001FBC  0008               	tblrd		*
  5408  001FBE  FFFF               	dw	65535	; errata NOP
  5409  001FC0  CFF5 F0F5          	movff	tablat,sprintf@c
  5410  001FC4  0100               	movlb	0	; () banked
  5411  001FC6  51F5               	movf	sprintf@c& (0+255),w,b
  5412  001FC8  A4D8               	btfss	status,2,c
  5413  001FCA  D73E               	goto	l3431
  5414  001FCC                     l3485:
  5415  001FCC  FFFF               	dw	65535	; assembler added errata NOP
  5416                           
  5417                           ; BSR set to: 0
  5418                           ;doprnt.c: 1538: *sp = 0;
  5419  001FCE  C0E6  FFD9         	movff	sprintf@sp,fsr2l
  5420  001FD2  C0E7  FFDA         	movff	sprintf@sp+1,fsr2h
  5421  001FD6  0E00               	movlw	0
  5422  001FD8  6EDF               	movwf	indf2,c
  5423                           
  5424                           ; BSR set to: 0
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;doprnt.c: 1540: return 0;
  5428                           ;	Return value of _sprintf is never used
  5429  001FDA  0012               	return		;funcret
  5430  001FDC  FFFF               	dw	65535	; errata NOP
  5431  001FDE                     __end_of_sprintf:
  5432                           	opt stack 0
  5433                           tblptru	equ	0xFF8
  5434                           tblptrh	equ	0xFF7
  5435                           tblptrl	equ	0xFF6
  5436                           tablat	equ	0xFF5
  5437                           prodh	equ	0xFF4
  5438                           prodl	equ	0xFF3
  5439                           postinc0	equ	0xFEE
  5440                           wreg	equ	0xFE8
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           fsr2h	equ	0xFDA
  5445                           fsr2l	equ	0xFD9
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function ___lwmod *****************
  5449 ;; Defined at:
  5450 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\lwmod.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  dividend        2    3[BANK0 ] unsigned int 
  5453 ;;  divisor         2    5[BANK0 ] unsigned int 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  counter         1    7[BANK0 ] unsigned char 
  5456 ;; Return value:  Size  Location     Type
  5457 ;;                  2    3[BANK0 ] unsigned int 
  5458 ;; Registers used:
  5459 ;;		wreg, status,2, status,0
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5465 ;;      Params:         0       4       0       0       0       0       0
  5466 ;;      Locals:         0       1       0       0       0       0       0
  5467 ;;      Temps:          0       0       0       0       0       0       0
  5468 ;;      Totals:         0       5       0       0       0       0       0
  5469 ;;Total ram usage:        5 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:    2
  5472 ;; This function calls:
  5473 ;;		Nothing
  5474 ;; This function is called by:
  5475 ;;		_sprintf
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           	psect	text11
  5480  0021DE                     __ptext11:
  5481                           	opt stack 0
  5482  0021DE                     ___lwmod:
  5483                           	opt stack 0
  5484  0021DE  FFFF               	dw	65535	; assembler added errata NOP
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;incstack = 0
  5488  0021E0  0100               	movlb	0	; () banked
  5489  0021E2  51E3               	movf	___lwmod@divisor& (0+255),w,b
  5490  0021E4  0100               	movlb	0	; () banked
  5491  0021E6  11E4               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5492  0021E8  B4D8               	btfsc	status,2,c
  5493  0021EA  D02A               	goto	l812
  5494                           
  5495                           ; BSR set to: 0
  5496  0021EC  0E01               	movlw	1
  5497  0021EE  0100               	movlb	0	; () banked
  5498  0021F0  6FE5               	movwf	___lwmod@counter& (0+255),b
  5499  0021F2  D007               	goto	l3351
  5500  0021F4                     l3349:
  5501  0021F4  FFFF               	dw	65535	; assembler added errata NOP
  5502                           
  5503                           ; BSR set to: 0
  5504  0021F6  0100               	movlb	0	; () banked
  5505  0021F8  90D8               	bcf	status,0,c
  5506  0021FA  37E3               	rlcf	___lwmod@divisor& (0+255),f,b
  5507  0021FC  37E4               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5508  0021FE  0100               	movlb	0	; () banked
  5509  002200  2BE5               	incf	___lwmod@counter& (0+255),f,b
  5510  002202                     l3351:
  5511  002202  FFFF               	dw	65535	; assembler added errata NOP
  5512                           
  5513                           ; BSR set to: 0
  5514  002204  0100               	movlb	0	; () banked
  5515  002206  AFE4               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5516  002208  D7F5               	goto	l3349
  5517  00220A                     l3353:
  5518  00220A  FFFF               	dw	65535	; assembler added errata NOP
  5519                           
  5520                           ; BSR set to: 0
  5521  00220C  0100               	movlb	0	; () banked
  5522  00220E  51E3               	movf	___lwmod@divisor& (0+255),w,b
  5523  002210  0100               	movlb	0	; () banked
  5524  002212  5DE1               	subwf	___lwmod@dividend& (0+255),w,b
  5525  002214  0100               	movlb	0	; () banked
  5526  002216  51E4               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5527  002218  0100               	movlb	0	; () banked
  5528  00221A  59E2               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5529  00221C  A0D8               	btfss	status,0,c
  5530  00221E  D008               	goto	l3357
  5531                           
  5532                           ; BSR set to: 0
  5533  002220  0100               	movlb	0	; () banked
  5534  002222  51E3               	movf	___lwmod@divisor& (0+255),w,b
  5535  002224  0100               	movlb	0	; () banked
  5536  002226  5FE1               	subwf	___lwmod@dividend& (0+255),f,b
  5537  002228  0100               	movlb	0	; () banked
  5538  00222A  51E4               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5539  00222C  0100               	movlb	0	; () banked
  5540  00222E  5BE2               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5541  002230                     l3357:
  5542  002230  FFFF               	dw	65535	; assembler added errata NOP
  5543                           
  5544                           ; BSR set to: 0
  5545  002232  0100               	movlb	0	; () banked
  5546  002234  90D8               	bcf	status,0,c
  5547  002236  33E4               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5548  002238  33E3               	rrcf	___lwmod@divisor& (0+255),f,b
  5549                           
  5550                           ; BSR set to: 0
  5551  00223A  0100               	movlb	0	; () banked
  5552  00223C  2FE5               	decfsz	___lwmod@counter& (0+255),f,b
  5553  00223E  D7E5               	goto	l3353
  5554  002240                     l812:
  5555  002240  FFFF               	dw	65535	; assembler added errata NOP
  5556                           
  5557                           ; BSR set to: 0
  5558  002242  C0E1  F0E1         	movff	___lwmod@dividend,?___lwmod
  5559  002246  C0E2  F0E2         	movff	___lwmod@dividend+1,?___lwmod+1
  5560                           
  5561                           ; BSR set to: 0
  5562  00224A  0012               	return		;funcret
  5563  00224C  FFFF               	dw	65535	; errata NOP
  5564  00224E                     __end_of___lwmod:
  5565                           	opt stack 0
  5566                           tblptru	equ	0xFF8
  5567                           tblptrh	equ	0xFF7
  5568                           tblptrl	equ	0xFF6
  5569                           tablat	equ	0xFF5
  5570                           prodh	equ	0xFF4
  5571                           prodl	equ	0xFF3
  5572                           postinc0	equ	0xFEE
  5573                           wreg	equ	0xFE8
  5574                           indf2	equ	0xFDF
  5575                           postinc2	equ	0xFDE
  5576                           postdec2	equ	0xFDD
  5577                           fsr2h	equ	0xFDA
  5578                           fsr2l	equ	0xFD9
  5579                           status	equ	0xFD8
  5580                           
  5581 ;; *************** function ___lwdiv *****************
  5582 ;; Defined at:
  5583 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  dividend        2   31[COMRAM] unsigned int 
  5586 ;;  divisor         2   33[COMRAM] unsigned int 
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;  quotient        2    1[BANK0 ] unsigned int 
  5589 ;;  counter         1    0[BANK0 ] unsigned char 
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  2   31[COMRAM] unsigned int 
  5592 ;; Registers used:
  5593 ;;		wreg, status,2, status,0
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5599 ;;      Params:         4       0       0       0       0       0       0
  5600 ;;      Locals:         0       3       0       0       0       0       0
  5601 ;;      Temps:          0       0       0       0       0       0       0
  5602 ;;      Totals:         4       3       0       0       0       0       0
  5603 ;;Total ram usage:        7 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:    2
  5606 ;; This function calls:
  5607 ;;		Nothing
  5608 ;; This function is called by:
  5609 ;;		_main
  5610 ;;		_sprintf
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           	psect	text12
  5615  00224E                     __ptext12:
  5616                           	opt stack 0
  5617  00224E                     ___lwdiv:
  5618                           	opt stack 0
  5619  00224E  FFFF               	dw	65535	; assembler added errata NOP
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;incstack = 0
  5623  002250  0E00               	movlw	0
  5624  002252  0100               	movlb	0	; () banked
  5625  002254  6FE0               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5626  002256  0E00               	movlw	0
  5627  002258  6FDF               	movwf	___lwdiv@quotient& (0+255),b
  5628                           
  5629                           ; BSR set to: 0
  5630  00225A  505C               	movf	___lwdiv@divisor,w,c
  5631  00225C  105D               	iorwf	___lwdiv@divisor+1,w,c
  5632  00225E  B4D8               	btfsc	status,2,c
  5633  002260  D025               	goto	l802
  5634                           
  5635                           ; BSR set to: 0
  5636  002262  0E01               	movlw	1
  5637  002264  0100               	movlb	0	; () banked
  5638  002266  6FDE               	movwf	___lwdiv@counter& (0+255),b
  5639  002268  D006               	goto	l3331
  5640  00226A                     l3329:
  5641  00226A  FFFF               	dw	65535	; assembler added errata NOP
  5642                           
  5643                           ; BSR set to: 0
  5644  00226C  90D8               	bcf	status,0,c
  5645  00226E  365C               	rlcf	___lwdiv@divisor,f,c
  5646  002270  365D               	rlcf	___lwdiv@divisor+1,f,c
  5647  002272  0100               	movlb	0	; () banked
  5648  002274  2BDE               	incf	___lwdiv@counter& (0+255),f,b
  5649  002276                     l3331:
  5650  002276  FFFF               	dw	65535	; assembler added errata NOP
  5651                           
  5652                           ; BSR set to: 0
  5653  002278  AE5D               	btfss	___lwdiv@divisor+1,7,c
  5654  00227A  D7F7               	goto	l3329
  5655  00227C                     l3333:
  5656  00227C  FFFF               	dw	65535	; assembler added errata NOP
  5657                           
  5658                           ; BSR set to: 0
  5659  00227E  0100               	movlb	0	; () banked
  5660  002280  90D8               	bcf	status,0,c
  5661  002282  37DF               	rlcf	___lwdiv@quotient& (0+255),f,b
  5662  002284  37E0               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5663                           
  5664                           ; BSR set to: 0
  5665  002286  505C               	movf	___lwdiv@divisor,w,c
  5666  002288  5C5A               	subwf	___lwdiv@dividend,w,c
  5667  00228A  505D               	movf	___lwdiv@divisor+1,w,c
  5668  00228C  585B               	subwfb	___lwdiv@dividend+1,w,c
  5669  00228E  A0D8               	btfss	status,0,c
  5670  002290  D006               	goto	l3341
  5671                           
  5672                           ; BSR set to: 0
  5673  002292  505C               	movf	___lwdiv@divisor,w,c
  5674  002294  5E5A               	subwf	___lwdiv@dividend,f,c
  5675  002296  505D               	movf	___lwdiv@divisor+1,w,c
  5676  002298  5A5B               	subwfb	___lwdiv@dividend+1,f,c
  5677                           
  5678                           ; BSR set to: 0
  5679  00229A  0100               	movlb	0	; () banked
  5680  00229C  81DF               	bsf	___lwdiv@quotient& (0+255),0,b
  5681  00229E                     l3341:
  5682  00229E  FFFF               	dw	65535	; assembler added errata NOP
  5683                           
  5684                           ; BSR set to: 0
  5685  0022A0  90D8               	bcf	status,0,c
  5686  0022A2  325D               	rrcf	___lwdiv@divisor+1,f,c
  5687  0022A4  325C               	rrcf	___lwdiv@divisor,f,c
  5688                           
  5689                           ; BSR set to: 0
  5690  0022A6  0100               	movlb	0	; () banked
  5691  0022A8  2FDE               	decfsz	___lwdiv@counter& (0+255),f,b
  5692  0022AA  D7E8               	goto	l3333
  5693  0022AC                     l802:
  5694  0022AC  FFFF               	dw	65535	; assembler added errata NOP
  5695                           
  5696                           ; BSR set to: 0
  5697  0022AE  C0DF  F05A         	movff	___lwdiv@quotient,?___lwdiv
  5698  0022B2  C0E0  F05B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5699                           
  5700                           ; BSR set to: 0
  5701  0022B6  0012               	return		;funcret
  5702  0022B8  FFFF               	dw	65535	; errata NOP
  5703  0022BA                     __end_of___lwdiv:
  5704                           	opt stack 0
  5705                           tblptru	equ	0xFF8
  5706                           tblptrh	equ	0xFF7
  5707                           tblptrl	equ	0xFF6
  5708                           tablat	equ	0xFF5
  5709                           prodh	equ	0xFF4
  5710                           prodl	equ	0xFF3
  5711                           postinc0	equ	0xFEE
  5712                           wreg	equ	0xFE8
  5713                           indf2	equ	0xFDF
  5714                           postinc2	equ	0xFDE
  5715                           postdec2	equ	0xFDD
  5716                           fsr2h	equ	0xFDA
  5717                           fsr2l	equ	0xFD9
  5718                           status	equ	0xFD8
  5719                           
  5720 ;; *************** function _InitApp *****************
  5721 ;; Defined at:
  5722 ;;		line 28 in file "user.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;		None
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      void 
  5729 ;; Registers used:
  5730 ;;		wreg, status,2
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5736 ;;      Params:         0       0       0       0       0       0       0
  5737 ;;      Locals:         0       0       0       0       0       0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0
  5739 ;;      Totals:         0       0       0       0       0       0       0
  5740 ;;Total ram usage:        0 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    2
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_main
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           	psect	text13
  5751  0020D2                     __ptext13:
  5752                           	opt stack 0
  5753  0020D2                     _InitApp:
  5754                           	opt stack 0
  5755  0020D2  FFFF               	dw	65535	; assembler added errata NOP
  5756                           
  5757                           ;user.c: 33: ADCON1bits.PCFG=0b0111;
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;incstack = 0
  5761  0020D4  50C1               	movf	4033,w,c	;volatile
  5762  0020D6  0BF0               	andlw	-16
  5763  0020D8  0907               	iorlw	7
  5764  0020DA  6EC1               	movwf	4033,c	;volatile
  5765                           
  5766                           ;user.c: 35: PORTA=0b00;
  5767  0020DC  0E00               	movlw	0
  5768  0020DE  6E80               	movwf	3968,c	;volatile
  5769                           
  5770                           ;user.c: 36: PORTB=0b00;
  5771  0020E0  0E00               	movlw	0
  5772  0020E2  6E81               	movwf	3969,c	;volatile
  5773                           
  5774                           ;user.c: 37: PORTC=0b00;
  5775  0020E4  0E00               	movlw	0
  5776  0020E6  6E82               	movwf	3970,c	;volatile
  5777                           
  5778                           ;user.c: 39: TRISC=0b11000001;
  5779  0020E8  0EC1               	movlw	193
  5780  0020EA  6E94               	movwf	3988,c	;volatile
  5781                           
  5782                           ;user.c: 40: TRISA=0b0010000;
  5783  0020EC  0E10               	movlw	16
  5784  0020EE  6E92               	movwf	3986,c	;volatile
  5785                           
  5786                           ;user.c: 41: TRISBbits.RB0=0;
  5787  0020F0  9093               	bcf	3987,0,c	;volatile
  5788                           
  5789                           ;user.c: 42: TRISBbits.RB1=0;
  5790  0020F2  9293               	bcf	3987,1,c	;volatile
  5791                           
  5792                           ;user.c: 43: TRISBbits.RB2=0;
  5793  0020F4  9493               	bcf	3987,2,c	;volatile
  5794                           
  5795                           ;user.c: 44: TRISBbits.RB3=0;
  5796  0020F6  9693               	bcf	3987,3,c	;volatile
  5797                           
  5798                           ;user.c: 45: TRISBbits.RB4=0;
  5799  0020F8  9893               	bcf	3987,4,c	;volatile
  5800                           
  5801                           ;user.c: 46: TRISBbits.RB5=0;
  5802  0020FA  9A93               	bcf	3987,5,c	;volatile
  5803                           
  5804                           ;user.c: 47: TRISBbits.RB6=0;
  5805  0020FC  9C93               	bcf	3987,6,c	;volatile
  5806                           
  5807                           ;user.c: 48: TRISBbits.RB7=0;
  5808  0020FE  9E93               	bcf	3987,7,c	;volatile
  5809                           
  5810                           ;user.c: 52: INTCON2bits.RBIP=1;
  5811  002100  80F1               	bsf	intcon2,0,c	;volatile
  5812                           
  5813                           ;user.c: 55: TRISCbits.RC7=1;
  5814  002102  8E94               	bsf	3988,7,c	;volatile
  5815                           
  5816                           ;user.c: 56: TRISCbits.RC6=0;
  5817  002104  9C94               	bcf	3988,6,c	;volatile
  5818                           
  5819                           ;user.c: 57: SPBRG=10;
  5820  002106  0E0A               	movlw	10
  5821  002108  6EAF               	movwf	4015,c	;volatile
  5822                           
  5823                           ;user.c: 61: RCSTAbits.SPEN=1;
  5824  00210A  8EAB               	bsf	4011,7,c	;volatile
  5825                           
  5826                           ;user.c: 62: TXSTAbits.SYNC=0;
  5827  00210C  98AC               	bcf	4012,4,c	;volatile
  5828                           
  5829                           ;user.c: 63: TXSTAbits.BRGH=1;
  5830  00210E  84AC               	bsf	4012,2,c	;volatile
  5831                           
  5832                           ;user.c: 64: TXSTAbits.TXEN=1;
  5833  002110  8AAC               	bsf	4012,5,c	;volatile
  5834                           
  5835                           ;user.c: 69: RCSTAbits.CREN=1;
  5836  002112  88AB               	bsf	4011,4,c	;volatile
  5837                           
  5838                           ;user.c: 70: RCONbits.IPEN=1;
  5839  002114  8ED0               	bsf	4048,7,c	;volatile
  5840                           
  5841                           ;user.c: 71: INTCONbits.GIE=1;
  5842  002116  8EF2               	bsf	intcon,7,c	;volatile
  5843                           
  5844                           ;user.c: 72: INTCONbits.PEIE=1;
  5845  002118  8CF2               	bsf	intcon,6,c	;volatile
  5846                           
  5847                           ;user.c: 73: PIE1bits.RCIE=1;
  5848  00211A  8A9D               	bsf	3997,5,c	;volatile
  5849                           
  5850                           ;user.c: 74: IPR1bits.RCIP=1;
  5851  00211C  8A9F               	bsf	3999,5,c	;volatile
  5852                           
  5853                           ;user.c: 79: T0CONbits.T08BIT=0;
  5854  00211E  9CD5               	bcf	4053,6,c	;volatile
  5855                           
  5856                           ;user.c: 80: T0CONbits.T0CS=0;
  5857  002120  9AD5               	bcf	4053,5,c	;volatile
  5858                           
  5859                           ;user.c: 81: T0CONbits.T0SE=0;
  5860  002122  98D5               	bcf	4053,4,c	;volatile
  5861                           
  5862                           ;user.c: 82: T0CONbits.PSA=0;
  5863  002124  96D5               	bcf	4053,3,c	;volatile
  5864                           
  5865                           ;user.c: 83: T0CONbits.T0PS=0b0111;
  5866  002126  80D5               	bsf	4053,0,c	;volatile
  5867  002128  82D5               	bsf	4053,1,c	;volatile
  5868  00212A  84D5               	bsf	4053,2,c	;volatile
  5869                           
  5870                           ;user.c: 86: INTCON2bits.TMR0IP=1;
  5871  00212C  84F1               	bsf	intcon2,2,c	;volatile
  5872                           
  5873                           ;user.c: 87: INTCONbits.TMR0IE=1;
  5874  00212E  8AF2               	bsf	intcon,5,c	;volatile
  5875                           
  5876                           ;user.c: 88: T0CONbits.TMR0ON=1;
  5877  002130  8ED5               	bsf	4053,7,c	;volatile
  5878                           
  5879                           ;user.c: 89: TMR0 = 46005;
  5880  002132  0EB3               	movlw	179
  5881  002134  6ED7               	movwf	4055,c	;volatile
  5882  002136  0EB5               	movlw	181
  5883  002138  6ED6               	movwf	4054,c	;volatile
  5884                           
  5885                           ;user.c: 93: IPR1bits.TMR1IP=0;
  5886  00213A  909F               	bcf	3999,0,c	;volatile
  5887                           
  5888                           ;user.c: 94: PIE1bits.TMR1IE=0;
  5889  00213C  909D               	bcf	3997,0,c	;volatile
  5890                           
  5891                           ;user.c: 95: T1CONbits.RD16 =1;
  5892  00213E  8ECD               	bsf	4045,7,c	;volatile
  5893                           
  5894                           ;user.c: 96: T1CONbits.TMR1CS=1;
  5895  002140  82CD               	bsf	4045,1,c	;volatile
  5896                           
  5897                           ;user.c: 97: T1CONbits.T1CKPS0=0;
  5898  002142  98CD               	bcf	4045,4,c	;volatile
  5899                           
  5900                           ;user.c: 98: T1CONbits.T1CKPS1=0;
  5901  002144  9ACD               	bcf	4045,5,c	;volatile
  5902                           
  5903                           ;user.c: 99: T1CONbits.TMR1ON =1;
  5904  002146  80CD               	bsf	4045,0,c	;volatile
  5905                           
  5906                           ;user.c: 100: TMR1=0;
  5907  002148  0E00               	movlw	0
  5908  00214A  6ECF               	movwf	4047,c	;volatile
  5909  00214C  0E00               	movlw	0
  5910  00214E  6ECE               	movwf	4046,c	;volatile
  5911                           
  5912                           ;user.c: 104: IPR2bits.TMR3IP=1;
  5913  002150  82A2               	bsf	4002,1,c	;volatile
  5914                           
  5915                           ;user.c: 105: PIE2bits.TMR3IE=1;
  5916  002152  82A0               	bsf	4000,1,c	;volatile
  5917                           
  5918                           ;user.c: 106: T3CONbits.RD16=1;
  5919  002154  8EB1               	bsf	4017,7,c	;volatile
  5920                           
  5921                           ;user.c: 107: T3CONbits.TMR3CS=0;
  5922  002156  92B1               	bcf	4017,1,c	;volatile
  5923                           
  5924                           ;user.c: 108: T3CONbits.T3CKPS1=1;
  5925  002158  8AB1               	bsf	4017,5,c	;volatile
  5926                           
  5927                           ;user.c: 109: T3CONbits.T3CKPS0=1;
  5928  00215A  88B1               	bsf	4017,4,c	;volatile
  5929                           
  5930                           ;user.c: 110: T3CONbits.TMR3ON=1;
  5931  00215C  80B1               	bsf	4017,0,c	;volatile
  5932                           
  5933                           ;user.c: 111: TMR3=64911;
  5934  00215E  0EFD               	movlw	253
  5935  002160  6EB3               	movwf	4019,c	;volatile
  5936  002162  0E8F               	movlw	143
  5937  002164  6EB2               	movwf	4018,c	;volatile
  5938  002166  0012               	return		;funcret
  5939  002168  FFFF               	dw	65535	; errata NOP
  5940  00216A                     __end_of_InitApp:
  5941                           	opt stack 0
  5942                           tblptru	equ	0xFF8
  5943                           tblptrh	equ	0xFF7
  5944                           tblptrl	equ	0xFF6
  5945                           tablat	equ	0xFF5
  5946                           prodh	equ	0xFF4
  5947                           prodl	equ	0xFF3
  5948                           intcon	equ	0xFF2
  5949                           intcon2	equ	0xFF1
  5950                           postinc0	equ	0xFEE
  5951                           wreg	equ	0xFE8
  5952                           indf2	equ	0xFDF
  5953                           postinc2	equ	0xFDE
  5954                           postdec2	equ	0xFDD
  5955                           fsr2h	equ	0xFDA
  5956                           fsr2l	equ	0xFD9
  5957                           status	equ	0xFD8
  5958                           
  5959 ;; *************** function _ConfigureOscillator *****************
  5960 ;; Defined at:
  5961 ;;		line 24 in file "system.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;		None
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;		None
  5966 ;; Return value:  Size  Location     Type
  5967 ;;                  1    wreg      void 
  5968 ;; Registers used:
  5969 ;;		None
  5970 ;; Tracked objects:
  5971 ;;		On entry : 0/0
  5972 ;;		On exit  : 0/0
  5973 ;;		Unchanged: 0/0
  5974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5975 ;;      Params:         0       0       0       0       0       0       0
  5976 ;;      Locals:         0       0       0       0       0       0       0
  5977 ;;      Temps:          0       0       0       0       0       0       0
  5978 ;;      Totals:         0       0       0       0       0       0       0
  5979 ;;Total ram usage:        0 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:    2
  5982 ;; This function calls:
  5983 ;;		Nothing
  5984 ;; This function is called by:
  5985 ;;		_main
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           	psect	text14
  5990  00245C                     __ptext14:
  5991                           	opt stack 0
  5992  00245C                     _ConfigureOscillator:
  5993                           	opt stack 0
  5994  00245C  FFFF               	dw	65535	; assembler added errata NOP
  5995                           
  5996                           ;incstack = 0
  5997  00245E  0012               	return		;funcret
  5998  002460  FFFF               	dw	65535	; errata NOP
  5999  002462                     __end_of_ConfigureOscillator:
  6000                           	opt stack 0
  6001                           tblptru	equ	0xFF8
  6002                           tblptrh	equ	0xFF7
  6003                           tblptrl	equ	0xFF6
  6004                           tablat	equ	0xFF5
  6005                           prodh	equ	0xFF4
  6006                           prodl	equ	0xFF3
  6007                           intcon	equ	0xFF2
  6008                           intcon2	equ	0xFF1
  6009                           postinc0	equ	0xFEE
  6010                           wreg	equ	0xFE8
  6011                           indf2	equ	0xFDF
  6012                           postinc2	equ	0xFDE
  6013                           postdec2	equ	0xFDD
  6014                           fsr2h	equ	0xFDA
  6015                           fsr2l	equ	0xFD9
  6016                           status	equ	0xFD8
  6017                           
  6018 ;; *************** function _low_isr *****************
  6019 ;; Defined at:
  6020 ;;		line 79 in file "interrupts.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;		None
  6023 ;; Auto vars:     Size  Location     Type
  6024 ;;		None
  6025 ;; Return value:  Size  Location     Type
  6026 ;;                  1    wreg      void 
  6027 ;; Registers used:
  6028 ;;		None
  6029 ;; Tracked objects:
  6030 ;;		On entry : 0/0
  6031 ;;		On exit  : 0/0
  6032 ;;		Unchanged: 0/0
  6033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6034 ;;      Params:         0       0       0       0       0       0       0
  6035 ;;      Locals:         0       0       0       0       0       0       0
  6036 ;;      Temps:         17       0       0       0       0       0       0
  6037 ;;      Totals:        17       0       0       0       0       0       0
  6038 ;;Total ram usage:       17 bytes
  6039 ;; Hardware stack levels used:    1
  6040 ;; Hardware stack levels required when called:    1
  6041 ;; This function calls:
  6042 ;;		Nothing
  6043 ;; This function is called by:
  6044 ;;		Interrupt level 1
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           	psect	intcodelo
  6049  000018                     __pintcodelo:
  6050                           	opt stack 0
  6051  000018                     _low_isr:
  6052                           	opt stack 0
  6053  000018  FFFF               	dw	65535	; assembler added errata NOP
  6054                           
  6055                           ;incstack = 0
  6056  00001A  8060               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6057  00001C  CFD8 F049          	movff	status,??_low_isr
  6058  000020  CFE8 F04A          	movff	wreg,??_low_isr+1
  6059  000024  CFE0 F04B          	movff	bsr,??_low_isr+2
  6060  000028  CFFA F04C          	movff	pclath,??_low_isr+3
  6061  00002C  CFFB F04D          	movff	pclatu,??_low_isr+4
  6062  000030  CFE9 F04E          	movff	fsr0l,??_low_isr+5
  6063  000034  CFEA F04F          	movff	fsr0h,??_low_isr+6
  6064  000038  CFE1 F050          	movff	fsr1l,??_low_isr+7
  6065  00003C  CFE2 F051          	movff	fsr1h,??_low_isr+8
  6066  000040  CFD9 F052          	movff	fsr2l,??_low_isr+9
  6067  000044  CFDA F053          	movff	fsr2h,??_low_isr+10
  6068  000048  CFF3 F054          	movff	prodl,??_low_isr+11
  6069  00004C  CFF4 F055          	movff	prodh,??_low_isr+12
  6070  000050  CFF6 F056          	movff	tblptrl,??_low_isr+13
  6071  000054  CFF7 F057          	movff	tblptrh,??_low_isr+14
  6072  000058  CFF8 F058          	movff	tblptru,??_low_isr+15
  6073  00005C  CFF5 F059          	movff	tablat,??_low_isr+16
  6074  000060  C059  FFF5         	movff	??_low_isr+16,tablat
  6075  000064  C058  FFF8         	movff	??_low_isr+15,tblptru
  6076  000068  C057  FFF7         	movff	??_low_isr+14,tblptrh
  6077  00006C  C056  FFF6         	movff	??_low_isr+13,tblptrl
  6078  000070  C055  FFF4         	movff	??_low_isr+12,prodh
  6079  000074  C054  FFF3         	movff	??_low_isr+11,prodl
  6080  000078  C053  FFDA         	movff	??_low_isr+10,fsr2h
  6081  00007C  C052  FFD9         	movff	??_low_isr+9,fsr2l
  6082  000080  C051  FFE2         	movff	??_low_isr+8,fsr1h
  6083  000084  C050  FFE1         	movff	??_low_isr+7,fsr1l
  6084  000088  C04F  FFEA         	movff	??_low_isr+6,fsr0h
  6085  00008C  C04E  FFE9         	movff	??_low_isr+5,fsr0l
  6086  000090  C04D  FFFB         	movff	??_low_isr+4,pclatu
  6087  000094  C04C  FFFA         	movff	??_low_isr+3,pclath
  6088  000098  C04B  FFE0         	movff	??_low_isr+2,bsr
  6089  00009C  C04A  FFE8         	movff	??_low_isr+1,wreg
  6090  0000A0  C049  FFD8         	movff	??_low_isr,status
  6091  0000A4  9060               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6092  0000A6  0010               	retfie	
  6093  0000A8  FFFF               	dw	65535	; errata NOP
  6094  0000AA                     __end_of_low_isr:
  6095                           	opt stack 0
  6096                           pclatu	equ	0xFFB
  6097                           pclath	equ	0xFFA
  6098                           tblptru	equ	0xFF8
  6099                           tblptrh	equ	0xFF7
  6100                           tblptrl	equ	0xFF6
  6101                           tablat	equ	0xFF5
  6102                           prodh	equ	0xFF4
  6103                           prodl	equ	0xFF3
  6104                           intcon	equ	0xFF2
  6105                           intcon2	equ	0xFF1
  6106                           postinc0	equ	0xFEE
  6107                           fsr0h	equ	0xFEA
  6108                           fsr0l	equ	0xFE9
  6109                           wreg	equ	0xFE8
  6110                           fsr1h	equ	0xFE2
  6111                           fsr1l	equ	0xFE1
  6112                           bsr	equ	0xFE0
  6113                           indf2	equ	0xFDF
  6114                           postinc2	equ	0xFDE
  6115                           postdec2	equ	0xFDD
  6116                           fsr2h	equ	0xFDA
  6117                           fsr2l	equ	0xFD9
  6118                           status	equ	0xFD8
  6119                           
  6120 ;; *************** function _high_isr *****************
  6121 ;; Defined at:
  6122 ;;		line 36 in file "interrupts.c"
  6123 ;; Parameters:    Size  Location     Type
  6124 ;;		None
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;		None
  6127 ;; Return value:  Size  Location     Type
  6128 ;;                  1    wreg      void 
  6129 ;; Registers used:
  6130 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6136 ;;      Params:         0       0       0       0       0       0       0
  6137 ;;      Locals:         0       0       0       0       0       0       0
  6138 ;;      Temps:         14       0       0       0       0       0       0
  6139 ;;      Totals:        14       0       0       0       0       0       0
  6140 ;;Total ram usage:       14 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		Interrupt level 2
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           	psect	intcode
  6150  000008                     __pintcode:
  6151                           	opt stack 0
  6152  000008                     _high_isr:
  6153                           	opt stack 0
  6154  000008  FFFF               	dw	65535	; assembler added errata NOP
  6155                           
  6156                           ;incstack = 0
  6157  00000A  8260               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6158  00000C  EFEF  F00F         	goto	int_func
  6159                           pclatu	equ	0xFFB
  6160                           pclath	equ	0xFFA
  6161                           tblptru	equ	0xFF8
  6162                           tblptrh	equ	0xFF7
  6163                           tblptrl	equ	0xFF6
  6164                           tablat	equ	0xFF5
  6165                           prodh	equ	0xFF4
  6166                           prodl	equ	0xFF3
  6167                           intcon	equ	0xFF2
  6168                           intcon2	equ	0xFF1
  6169                           postinc0	equ	0xFEE
  6170                           fsr0h	equ	0xFEA
  6171                           fsr0l	equ	0xFE9
  6172                           wreg	equ	0xFE8
  6173                           fsr1h	equ	0xFE2
  6174                           fsr1l	equ	0xFE1
  6175                           bsr	equ	0xFE0
  6176                           indf2	equ	0xFDF
  6177                           postinc2	equ	0xFDE
  6178                           postdec2	equ	0xFDD
  6179                           fsr2h	equ	0xFDA
  6180                           fsr2l	equ	0xFD9
  6181                           status	equ	0xFD8
  6182                           
  6183                           	psect	intcode_body
  6184  001FDE                     __pintcode_body:
  6185                           	opt stack 26
  6186  001FDE                     int_func:
  6187                           	opt stack 26
  6188  001FDE  FFFF               	dw	65535	; errata NOP
  6189  001FE0  CFFA F03B          	movff	pclath,??_high_isr
  6190  001FE4  CFFB F03C          	movff	pclatu,??_high_isr+1
  6191  001FE8  CFE9 F03D          	movff	fsr0l,??_high_isr+2
  6192  001FEC  CFEA F03E          	movff	fsr0h,??_high_isr+3
  6193  001FF0  CFE1 F03F          	movff	fsr1l,??_high_isr+4
  6194  001FF4  CFE2 F040          	movff	fsr1h,??_high_isr+5
  6195  001FF8  CFD9 F041          	movff	fsr2l,??_high_isr+6
  6196  001FFC  CFDA F042          	movff	fsr2h,??_high_isr+7
  6197  002000  CFF3 F043          	movff	prodl,??_high_isr+8
  6198  002004  CFF4 F044          	movff	prodh,??_high_isr+9
  6199  002008  CFF6 F045          	movff	tblptrl,??_high_isr+10
  6200  00200C  CFF7 F046          	movff	tblptrh,??_high_isr+11
  6201  002010  CFF8 F047          	movff	tblptru,??_high_isr+12
  6202  002014  CFF5 F048          	movff	tablat,??_high_isr+13
  6203                           
  6204                           ;interrupts.c: 45: __nop();
  6205  002018  F000               	nop	
  6206                           
  6207                           ;interrupts.c: 47: if (INTCONbits.TMR0IF == 1) {
  6208  00201A  A4F2               	btfss	intcon,2,c	;volatile
  6209  00201C  D00A               	goto	i2l2583
  6210                           
  6211                           ;interrupts.c: 48: unSegundo = 1;
  6212  00201E  0E00               	movlw	0
  6213  002020  6E22               	movwf	_unSegundo+1,c
  6214  002022  0E01               	movlw	1
  6215  002024  6E21               	movwf	_unSegundo,c
  6216                           
  6217                           ;interrupts.c: 49: __nop();
  6218  002026  F000               	nop	
  6219                           
  6220                           ;interrupts.c: 50: TMR0 = 46005;
  6221  002028  0EB3               	movlw	179
  6222  00202A  6ED7               	movwf	4055,c	;volatile
  6223  00202C  0EB5               	movlw	181
  6224  00202E  6ED6               	movwf	4054,c	;volatile
  6225                           
  6226                           ;interrupts.c: 51: INTCONbits.TMR0IF = 0;
  6227  002030  94F2               	bcf	intcon,2,c	;volatile
  6228  002032                     i2l2583:
  6229  002032  FFFF               	dw	65535	; assembler added errata NOP
  6230                           
  6231                           ;interrupts.c: 53: }
  6232                           ;interrupts.c: 56: if (PIR1bits.RCIF == 1 && RCREG !='\r') {
  6233  002034  AA9E               	btfss	3998,5,c	;volatile
  6234  002036  D00F               	goto	i2l2593
  6235  002038  0E0D               	movlw	13
  6236  00203A  18AE               	xorwf	4014,w,c	;volatile
  6237  00203C  B4D8               	btfsc	status,2,c
  6238  00203E  D00B               	goto	i2l2593
  6239                           
  6240                           ;interrupts.c: 57: comando[n] = RCREG;
  6241  002040  0E9E               	movlw	low _comando
  6242  002042  2425               	addwf	_n,w,c
  6243  002044  6ED9               	movwf	fsr2l,c
  6244  002046  0E00               	movlw	high _comando
  6245  002048  2026               	addwfc	_n+1,w,c
  6246  00204A  6EDA               	movwf	fsr2h,c
  6247  00204C  CFAE FFDF          	movff	4014,indf2	;volatile
  6248                           
  6249                           ;interrupts.c: 58: n++;
  6250  002050  4A25               	infsnz	_n,f,c
  6251  002052  2A26               	incf	_n+1,f,c
  6252                           
  6253                           ;interrupts.c: 59: PIR1bits.RCIF = 0;
  6254  002054  9A9E               	bcf	3998,5,c	;volatile
  6255  002056                     i2l2593:
  6256  002056  FFFF               	dw	65535	; assembler added errata NOP
  6257                           
  6258                           ;interrupts.c: 60: }
  6259                           ;interrupts.c: 62: if (PIR1bits.RCIF == 1 && RCREG =='\r') {
  6260  002058  AA9E               	btfss	3998,5,c	;volatile
  6261  00205A  D00E               	goto	i2l2603
  6262  00205C  0E0D               	movlw	13
  6263  00205E  18AE               	xorwf	4014,w,c	;volatile
  6264  002060  A4D8               	btfss	status,2,c
  6265  002062  D00A               	goto	i2l2603
  6266                           
  6267                           ;interrupts.c: 63: n = 0 ;
  6268  002064  0E00               	movlw	0
  6269  002066  6E26               	movwf	_n+1,c
  6270  002068  0E00               	movlw	0
  6271  00206A  6E25               	movwf	_n,c
  6272                           
  6273                           ;interrupts.c: 64: enter = 1 ;
  6274  00206C  0E00               	movlw	0
  6275  00206E  6E2A               	movwf	_enter+1,c
  6276  002070  0E01               	movlw	1
  6277  002072  6E29               	movwf	_enter,c
  6278                           
  6279                           ;interrupts.c: 65: PIR1bits.RCIF = 0 ;
  6280  002074  9A9E               	bcf	3998,5,c	;volatile
  6281                           
  6282                           ;interrupts.c: 66: __nop() ;
  6283  002076  F000               	nop	
  6284  002078                     i2l2603:
  6285  002078  FFFF               	dw	65535	; assembler added errata NOP
  6286                           
  6287                           ;interrupts.c: 67: }
  6288                           ;interrupts.c: 68: if (PIR2bits.TMR3IF == 1 ) {
  6289  00207A  A2A1               	btfss	4001,1,c	;volatile
  6290  00207C  D00A               	goto	i2l39
  6291                           
  6292                           ;interrupts.c: 69: b = 1 ;
  6293  00207E  0E00               	movlw	0
  6294  002080  6E28               	movwf	_b+1,c
  6295  002082  0E01               	movlw	1
  6296  002084  6E27               	movwf	_b,c
  6297                           
  6298                           ;interrupts.c: 70: TMR3 = 65473;
  6299  002086  0EFF               	movlw	255
  6300  002088  6EB3               	movwf	4019,c	;volatile
  6301  00208A  0EC1               	movlw	193
  6302  00208C  6EB2               	movwf	4018,c	;volatile
  6303                           
  6304                           ;interrupts.c: 71: __nop() ;
  6305  00208E  F000               	nop	
  6306                           
  6307                           ;interrupts.c: 72: PIR2bits.TMR3IF = 0 ;
  6308  002090  92A1               	bcf	4001,1,c	;volatile
  6309  002092                     i2l39:
  6310  002092  FFFF               	dw	65535	; assembler added errata NOP
  6311  002094  C048  FFF5         	movff	??_high_isr+13,tablat
  6312  002098  C047  FFF8         	movff	??_high_isr+12,tblptru
  6313  00209C  C046  FFF7         	movff	??_high_isr+11,tblptrh
  6314  0020A0  C045  FFF6         	movff	??_high_isr+10,tblptrl
  6315  0020A4  C044  FFF4         	movff	??_high_isr+9,prodh
  6316  0020A8  C043  FFF3         	movff	??_high_isr+8,prodl
  6317  0020AC  C042  FFDA         	movff	??_high_isr+7,fsr2h
  6318  0020B0  C041  FFD9         	movff	??_high_isr+6,fsr2l
  6319  0020B4  C040  FFE2         	movff	??_high_isr+5,fsr1h
  6320  0020B8  C03F  FFE1         	movff	??_high_isr+4,fsr1l
  6321  0020BC  C03E  FFEA         	movff	??_high_isr+3,fsr0h
  6322  0020C0  C03D  FFE9         	movff	??_high_isr+2,fsr0l
  6323  0020C4  C03C  FFFB         	movff	??_high_isr+1,pclatu
  6324  0020C8  C03B  FFFA         	movff	??_high_isr,pclath
  6325  0020CC  9260               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6326  0020CE  0011               	retfie		f
  6327  0020D0  FFFF               	dw	65535	; errata NOP
  6328  0020D2                     __end_of_high_isr:
  6329                           	opt stack 0
  6330                           pclatu	equ	0xFFB
  6331                           pclath	equ	0xFFA
  6332                           tblptru	equ	0xFF8
  6333                           tblptrh	equ	0xFF7
  6334                           tblptrl	equ	0xFF6
  6335                           tablat	equ	0xFF5
  6336                           prodh	equ	0xFF4
  6337                           prodl	equ	0xFF3
  6338                           intcon	equ	0xFF2
  6339                           intcon2	equ	0xFF1
  6340                           postinc0	equ	0xFEE
  6341                           fsr0h	equ	0xFEA
  6342                           fsr0l	equ	0xFE9
  6343                           wreg	equ	0xFE8
  6344                           fsr1h	equ	0xFE2
  6345                           fsr1l	equ	0xFE1
  6346                           bsr	equ	0xFE0
  6347                           indf2	equ	0xFDF
  6348                           postinc2	equ	0xFDE
  6349                           postdec2	equ	0xFDD
  6350                           fsr2h	equ	0xFDA
  6351                           fsr2l	equ	0xFD9
  6352                           status	equ	0xFD8
  6353                           pclatu	equ	0xFFB
  6354                           pclath	equ	0xFFA
  6355                           tblptru	equ	0xFF8
  6356                           tblptrh	equ	0xFF7
  6357                           tblptrl	equ	0xFF6
  6358                           tablat	equ	0xFF5
  6359                           prodh	equ	0xFF4
  6360                           prodl	equ	0xFF3
  6361                           intcon	equ	0xFF2
  6362                           intcon2	equ	0xFF1
  6363                           postinc0	equ	0xFEE
  6364                           fsr0h	equ	0xFEA
  6365                           fsr0l	equ	0xFE9
  6366                           wreg	equ	0xFE8
  6367                           fsr1h	equ	0xFE2
  6368                           fsr1l	equ	0xFE1
  6369                           bsr	equ	0xFE0
  6370                           indf2	equ	0xFDF
  6371                           postinc2	equ	0xFDE
  6372                           postdec2	equ	0xFDD
  6373                           fsr2h	equ	0xFDA
  6374                           fsr2l	equ	0xFD9
  6375                           status	equ	0xFD8
  6376                           
  6377                           	psect	rparam
  6378  0000                     pclatu	equ	0xFFB
  6379                           pclath	equ	0xFFA
  6380                           tblptru	equ	0xFF8
  6381                           tblptrh	equ	0xFF7
  6382                           tblptrl	equ	0xFF6
  6383                           tablat	equ	0xFF5
  6384                           prodh	equ	0xFF4
  6385                           prodl	equ	0xFF3
  6386                           intcon	equ	0xFF2
  6387                           intcon2	equ	0xFF1
  6388                           postinc0	equ	0xFEE
  6389                           fsr0h	equ	0xFEA
  6390                           fsr0l	equ	0xFE9
  6391                           wreg	equ	0xFE8
  6392                           fsr1h	equ	0xFE2
  6393                           fsr1l	equ	0xFE1
  6394                           bsr	equ	0xFE0
  6395                           indf2	equ	0xFDF
  6396                           postinc2	equ	0xFDE
  6397                           postdec2	equ	0xFDD
  6398                           fsr2h	equ	0xFDA
  6399                           fsr2l	equ	0xFD9
  6400                           status	equ	0xFD8
  6401                           
  6402                           	psect	temp
  6403  000060                     btemp:
  6404                           	opt stack 0
  6405  000060                     	ds	1
  6406  0000                     int$flags	set	btemp
  6407                           pclatu	equ	0xFFB
  6408                           pclath	equ	0xFFA
  6409                           tblptru	equ	0xFF8
  6410                           tblptrh	equ	0xFF7
  6411                           tblptrl	equ	0xFF6
  6412                           tablat	equ	0xFF5
  6413                           prodh	equ	0xFF4
  6414                           prodl	equ	0xFF3
  6415                           intcon	equ	0xFF2
  6416                           intcon2	equ	0xFF1
  6417                           postinc0	equ	0xFEE
  6418                           fsr0h	equ	0xFEA
  6419                           fsr0l	equ	0xFE9
  6420                           wreg	equ	0xFE8
  6421                           fsr1h	equ	0xFE2
  6422                           fsr1l	equ	0xFE1
  6423                           bsr	equ	0xFE0
  6424                           indf2	equ	0xFDF
  6425                           postinc2	equ	0xFDE
  6426                           postdec2	equ	0xFDD
  6427                           fsr2h	equ	0xFDA
  6428                           fsr2l	equ	0xFD9
  6429                           status	equ	0xFD8


Data Sizes:
    Strings     53
    Constant    10
    Data        2
    BSS         152
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     35      95
    BANK0           128     29     123
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 2
		 -> ptr(COMRAM[2]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 12
		 -> umbral(BANK0[12]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_4(CODE[24]), STR_3(CODE[7]), STR_2(CODE[17]), STR_1(CODE[11]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 22
		 -> str4(BANK0[22]), str3(BANK0[5]), str2(BANK0[16]), str1(BANK0[10]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 22
		 -> str4(BANK0[22]), str3(BANK0[5]), str2(BANK0[16]), str1(BANK0[10]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 16
		 -> str3(BANK0[5]), str2(BANK0[16]), str1(BANK0[10]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 21
		 -> comando(BANK0[21]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_24(CODE[5]), STR_23(CODE[5]), STR_22(CODE[5]), STR_21(CODE[5]), 
		 -> STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), 
		 -> STR_16(CODE[5]), STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), 
		 -> STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 12
		 -> salida(COMRAM[12]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    ptr	PTR unsigned char  size(2) Largest target is 12
		 -> NULL(NULL[0]), umbral(BANK0[12]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 22
		 -> str4(BANK0[22]), str3(BANK0[5]), str2(BANK0[16]), str1(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->___lwdiv
    _main->_strcmp
    _main->_strcpy
    _strtol->___lmul
    _strtol->_isalpha
    _isalpha->_isupper
    _sprintf->___lwdiv
    ___lwmod->___lwdiv

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _main->_strtol
    _strtol->___lmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   16705
                                             24 BANK0      5     5      0
                _ConfigureOscillator
                            _InitApp
                            ___lwdiv
                            _sprintf
                             _strcmp
                             _strcpy
                             _strtol
 ---------------------------------------------------------------------------------
 (1) _strtol                                              16    10      6    2273
                                              8 BANK0     16    10      6
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (2) _toupper                                              1     1      0      96
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isspace                                              3     3      0     130
                                             31 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             31 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _isalpha                                              3     3      0     229
                                             34 COMRAM     1     1      0
                                              0 BANK0      2     2      0
                            _isupper
 ---------------------------------------------------------------------------------
 (3) _isupper                                              3     3      0      99
                                             31 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     456
                                             31 COMRAM     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     829
                                             31 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4    1213
                                             31 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    17      8    8549
                                              8 BANK0     16     8      8
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                              3 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    3841
                                             31 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   ___lwdiv
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _strcmp
   _strcpy
   _strtol
     ___lmul
     _isalpha
       _isupper
     _isdigit
     _isspace
     _toupper

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1D      7B       5       96.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     23      5F       1       75.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DA      15        0.0%
DATA                 0      0      DA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Oct 01 21:34:45 2017

                                                                      _a 000B  
                                                                      _b 0027  
                                                                      _c 0009  
                                                                      _d 0084  
                                                                      _e 0080  
                                                                      _g 0007  
                                                                      _h 0005  
                                                                      _i 0019  
                                                                      _n 0025  
                                                                      _u 0023  
                                                                     _fm 0015  
                                                                     bsr 000FE0  
                                                           __CFG_CP0$OFF 000000  
                                                           __CFG_CP1$OFF 000000  
                                                           __CFG_CP2$OFF 000000  
                                                           __CFG_CP3$OFF 000000  
                                                            __CFG_OSC$HS 000000  
                                                                    l201 0EF4  
                                                                    l221 11FE  
                                                                    l213 1102  
                                                                    l205 1006  
                                                                    l150 097A  
                                                                    l303 1B2C  
                                                                    l313 1BB8  
                                                                    l233 12E8  
                                                                    l225 11E8  
                                                                    l217 10EC  
                                                                    l209 0FF0  
                                                                    l137 0740  
                                                                    l154 0964  
                                                                    l307 1B16  
                                                                    l251 1432  
                                                                    l243 133A  
                                                                    l147 0886  
                                                                    l229 12FE  
                                                                    l181 0D12  
                                                                    l173 0C16  
                                                                    l165 0B1A  
                                                                    l263 1640  
                                                                    l255 1544  
                                                                    l247 1448  
                                                                    l272 173C  
                                                                    l193 0DF8  
                                                                    l185 0CFC  
                                                                    l177 0C00  
                                                                    l169 0B04  
                                                                    l291 191E  
                                                                    l283 1822  
                                                                    l275 1726  
                                                                    l267 162A  
                                                                    l259 152E  
                                                                    l189 0E0E  
                                                                    l198 0F0A  
                                                                    l295 1A30  
                                                                    l287 1934  
                                                                    l279 1838  
                                                                    l802 22AC  
                                                                    l299 1A1A  
                                                                    l812 2240  
                                                                    l991 1E20  
                                                                    l992 1E32  
                                                           __CFG_CPB$OFF 000000  
                                                           __CFG_CPD$OFF 000000  
                                                           __CFG_BOR$OFF 000000  
                                                                    _ret 005E  
                                                                    _ptr 0039  
                                                           __CFG_BORV$45 000000  
                                                                    wreg 000FE8  
                                                           __CFG_LVP$OFF 000000  
                                                           __CFG_WDT$OFF 000000  
                                                                   l4001 1322  
                                                                   l4007 1346  
                                                                   l4113 170E  
                                                                   l4121 1746  
                                                                   l4025 1408  
                                                                   l3331 2276  
                                                                   l3315 217C  
                                                                   l4203 1A26  
                                                                   l4035 143E  
                                                                   l3341 229E  
                                                                   l3333 227C  
                                                                   l3421 22C8  
                                                                   l3413 235E  
                                                                   l3309 2436  
                                                                   l4221 1AEC  
                                                                   l4205 1A3A  
                                                                   l4141 180A  
                                                                   l4109 16FC  
                                                                   l4053 1504  
                                                                   l4029 141A  
                                                                   l4037 1452  
                                                                   l3351 2202  
                                                                   l3431 1E48  
                                                                   l3415 236A  
                                                                   l3319 219C  
                                                                   l3407 2412  
                                                                   l3511 1C44  
                                                                   l3503 1C1C  
                                                                   l4231 1B22  
                                                                   l4119 1732  
                                                                   l4063 153A  
                                                                   l3329 226A  
                                                                   l3353 220A  
                                                                   l3425 2302  
                                                                   l3521 1C7E  
                                                                   l3505 1C26  
                                                                   l4225 1AFE  
                                                                   l4137 17F8  
                                                                   l4081 1600  
                                                                   l4057 1516  
                                                                   l4065 154E  
                                                                   l4233 1B36  
                                                                   l3443 1E9C  
                                                                   l3419 22BE  
                                                                   l3371 23EE  
                                                                   l3531 1CB6  
                                                                   l3507 1C32  
                                                                   l4147 182E  
                                                                   l4091 1636  
                                                                   l3611 075A  
                                                                   l3357 2230  
                                                                   l3349 21F4  
                                                                   l3453 1ECE  
                                                                   l3437 1E68  
                                                                   l3381 23AC  
                                                                   l3525 1C94  
                                                                   l4165 18F4  
                                                                   l4149 1842  
                                                                   l4085 1612  
                                                                   l4093 164A  
                                                                   l3455 1ED6  
                                                                   l3543 1D04  
                                                                   l3535 1CCE  
                                                                   l4247 1BA0  
                                                                   l4175 192A  
                                                                   l3615 0768  
                                                                   l3607 074C  
                                                                   l3481 1F9E  
                                                                   l3473 1F34  
                                                                   l3385 23C0  
                                                                   l3369 23E8  
                                                                   l3561 1DDE  
                                                                   l4193 19F0  
                                                                   l4169 1906  
                                                                   l4177 193E  
                                                                   l3475 1F3C  
                                                                   l3467 1F12  
                                                                   l3483 1FAC  
                                                                   l3395 2454  
                                                                   l3547 1D18  
                                                                   l3539 1CE6  
                                                                   l3619 0778  
                                                                   l3571 064C  
                                                                   l3485 1FCC  
                                                                   l3557 1DAC  
                                                                   l4197 1A02  
                                                                   l3813 0DE0  
                                                                   l3821 0E18  
                                                                   l3725 0ADA  
                                                                   l3637 0800  
                                                                   l3903 10F8  
                                                                   l3735 0B10  
                                                                   l3671 093A  
                                                                   l3639 080A  
                                                                   l3489 1BD0  
                                                                   l3921 11BE  
                                                                   l3905 110C  
                                                                   l3841 0EDC  
                                                                   l3809 0DCE  
                                                                   l3753 0BD6  
                                                                   l3729 0AEC  
                                                                   l3737 0B24  
                                                                   l3681 0970  
                                                                   l3649 087C  
                                                                   l3931 11F4  
                                                                   l3819 0E04  
                                                                   l3763 0C0C  
                                                                   l3691 09EE  
                                                                   l3675 094C  
                                                                   l3683 0984  
                                                                   l3595 071A  
                                                                   l3925 11D0  
                                                                   l3933 1208  
                                                                   l3837 0ECA  
                                                                   l3781 0CD2  
                                                                   l3757 0BE8  
                                                                   l3765 0C20  
                                                                   l3847 0F00  
                                                                   l3791 0D08  
                                                                   l3695 09FC  
                                                                   l3599 072C  
                                                                   l3953 12D0  
                                                                   l3865 0FC6  
                                                                   l3849 0F14  
                                                                   l3785 0CE4  
                                                                   l3793 0D1C  
                                                                   l3875 0FFC  
                                                                   l3699 0A0C  
                                                                   l3949 12BE  
                                                                   l3893 10C2  
                                                                   l3869 0FD8  
                                                                   l3877 1010  
                                                                   l3959 12F4  
                                                                   l3897 10D4  
                                                                   l3997 1310  
                                                                   STR_1 0629  
                                                                   STR_2 0623  
                                                                   STR_3 0634  
                                                                   STR_4 060B  
                                                                   STR_5 063B  
                                                                   STR_6 063B  
                                                                   STR_7 063B  
                                                                   STR_8 063B  
                                                                   STR_9 063B  
                                                                   u6310 1B9C  
                                                                   u6330 1BCC  
                                                                   u4900 084C  
                                                                   u4906 0850  
                                                                   u4860 07C2  
                                                                   i2l39 2092  
                                                                   u4868 07C8  
                                                                   _TMR0 000FD6  
                                                                   _TMR1 000FCE  
                                                                   _TMR3 000FB2  
                                                           __CFG_WDTPS$1 000000  
                                                                   _cont 001F  
                                                                   _main 0642  
                                                                   _mode 002B  
                                                                   _retf 0011  
                                                                   _retp 000D  
                                                                   _str1 00CF  
                                                                   _str2 00B3  
                                                                   _str3 00D9  
                                                                   _str4 0088  
                                                                   _retu 000F  
                                                                   fsr0h 000FEA  
                                                                   fsr1h 000FE2  
                                                                   fsr2h 000FDA  
                                                                   fsr0l 000FE9  
                                                                   indf2 000FDF  
                                                                   fsr1l 000FE1  
                                                                   fsr2l 000FD9  
                                                                   btemp 0060  
                                                                   prodh 000FF4  
                                                                   prodl 000FF3  
                                                                   start 00AA  
                                                           ___param_bank 000000  
                                                        __end_of_InitApp 216A  
                                                          __CFG_OSCS$OFF 000000  
                                                                  ?_main 003B  
                                                                  STR_10 063B  
                                                                  STR_11 063B  
                                                                  STR_20 063B  
                                                                  STR_12 063B  
                                                                  STR_21 063B  
                                                                  STR_13 063B  
                                                                  STR_22 063B  
                                                                  STR_14 063B  
                                                                  STR_23 063B  
                                                                  STR_15 063B  
                                                                  STR_24 063B  
                                                                  STR_16 063B  
                                                                  STR_17 063B  
                                                                  STR_18 063B  
                                                                  STR_19 063B  
                                                        __end_of___lwdiv 22BA  
                                                        __end_of___lwmod 224E  
                                                                  _RCREG 000FAE  
                                                                  _SPBRG 000FAF  
                                                                  _PORTA 000F80  
                                                                  _PORTB 000F81  
                                                                  _PORTC 000F82  
                                                                  _TRISA 000F92  
                                                                  _TRISC 000F94  
                                                                  _TXREG 000FAD  
                                                    _ConfigureOscillator 245C  
                                                          __CFG_PWRT$OFF 000000  
                                                          __CFG_WRT0$OFF 000000  
                                                          __CFG_WRT1$OFF 000000  
                                                          __CFG_WRT2$OFF 000000  
                                                    ___lmul@multiplicand 00E2  
                                                          __CFG_WRT3$OFF 000000  
                                                         __CFG_EBTR0$OFF 000000  
                                                         __CFG_EBTR1$OFF 000000  
                                                         __CFG_EBTR2$OFF 000000  
                                                         __CFG_EBTR3$OFF 000000  
                                                          __CFG_STVR$OFF 000000  
                                                          __CFG_WRTB$OFF 000000  
                                                          __CFG_WRTC$OFF 000000  
                                                          __CFG_WRTD$OFF 000000  
                                                         __CFG_EBTRB$OFF 000000  
                                                                  _cont1 001D  
                                                        __end_of_dpowers 060B  
                                                                  _enter 0029  
                                                        __end_of_isalpha 23CC  
                                                        __end_of_isdigit 241E  
                                                        __end_of_isspace 23FA  
                                                        __end_of_low_isr 00AA  
                                                        __end_of_isupper 2442  
                                                                  pclath 000FFA  
                                                                  tablat 000FF5  
                                                                  status 000FD8  
                                                        __end_of_sprintf 1FDE  
                                                        __end_of_toupper 245C  
                                                   ?_ConfigureOscillator 003B  
                                                        __initialization 2314  
                                                           __end_of_main 1BD0  
                                                                 ??_main 00F6  
                                                          __activetblptr 000002  
                                                                 i2l2603 2078  
                                                                 i2l2583 2032  
                                                                 i2l2593 2056  
                                                              ??_InitApp 005A  
                                                  ??_ConfigureOscillator 005A  
                                                       __end_of_high_isr 20D2  
                                                                 ___lmul 216A  
                                                              ??___lwdiv 005E  
                                                              ??___lwmod 005E  
                                                                 clear_0 2332  
                                                                 clear_1 233E  
                                                                 _salida 002D  
                                                                 _umbral 00C3  
                                                                 _strcmp 22BA  
                                                                 _strcpy 2352  
                                                                 _strtol 1BD0  
                                                           __pdataCOMRAM 005E  
                                                              ??_isalpha 005D  
                                                              ??_isdigit 005A  
                                                           __mediumconst 0000  
                                                              ??_isspace 005A  
                                                              ??_low_isr 0049  
                                                                 tblptrh 000FF7  
                                                              ??_isupper 005A  
                                                                 tblptrl 000FF6  
                                                                 tblptru 000FF8  
                                                              ??_sprintf 00EE  
                                                              ??_toupper 005A  
                                                             __accesstop 0080  
                                                __end_of__initialization 2344  
                                                          ___rparam_used 000001  
                                                         __pcstackCOMRAM 003B  
                                                             __pbssBANK0 0080  
                                                                ?___lmul 00DE  
                                                       __CFG_CCP2MUX$OFF 000000  
                                                         ___lmul@product 005A  
                                                                ?_strcmp 005A  
                                                                ?_strcpy 005A  
                                                                ?_strtol 00E6  
                                                              ?_high_isr 003B  
                                                                _InitApp 20D2  
                                                                __Hparam 0000  
                                                                __Lparam 0000  
                                                        __size_of___lmul 0074  
                                                                ___lwdiv 224E  
                                                                ___lwmod 21DE  
                                                           __psmallconst 0600  
                                                                __pcinit 2314  
                                                                __ramtop 0600  
                                                                __ptext0 0642  
                                                                __ptext1 1BD0  
                                                                __ptext2 2442  
                                                                __ptext3 23CC  
                                                                __ptext4 23FA  
                                                                __ptext5 2390  
                                                                __ptext6 241E  
                                                                __ptext7 216A  
                                                                __ptext8 2352  
                                                                __ptext9 22BA  
                                                                _comando 009E  
                                                              _T0CONbits 000FD5  
                                                        __size_of_strcmp 005A  
                                                        __size_of_strcpy 003E  
                                                              _T1CONbits 000FCD  
                                                        __size_of_strtol 0268  
                                                                _dpowers 0601  
                                                                _isalpha 2390  
                                                                _isdigit 23FA  
                                                              _T3CONbits 000FB1  
                                                                _isspace 23CC  
                                                                _low_isr 0018  
                                                                _isupper 241E  
                                                                _sprintf 1E38  
                                                             ??_high_isr 003B  
                                                         __pintcode_body 1FDE  
                                                                _toupper 2442  
                                                   end_of_initialization 2344  
                                                          __Lmediumconst 0000  
                                                                int_func 1FDE  
                                                              _RCSTAbits 000FAB  
                                                                postdec2 000FDD  
                                                                postinc0 000FEE  
                                                                postinc2 000FDE  
                                                                strcmp@r 00DF  
                                                                strtol@a 00F1  
                                                                strtol@c 00F5  
                                                                strtol@s 00E6  
                                                              _PORTBbits 000F81  
                                                             _posicion10 0013  
                                                              _TRISBbits 000F93  
                                                              _TRISCbits 000F94  
                                                           strtol@endptr 00E8  
                                            __end_of_ConfigureOscillator 2462  
                                                              _TXSTAbits 000FAC  
                                                         __end_of___lmul 21DE  
                                                          __pidataCOMRAM 2462  
                                                         __end_of_strcmp 2314  
                                                         __end_of_strcpy 2390  
                                                         __end_of_strtol 1E38  
                                                    start_initialization 2314  
                                                               ??___lmul 005A  
                                                               ??_strcmp 00DE  
                                                               ??_strcpy 005E  
                                                               ??_strtol 00EC  
                                                            __pbssCOMRAM 0001  
                                                          __pcstackBANK0 00DE  
                                                           _isalpha$1607 00DE  
                                                           _isdigit$1610 005B  
                                                      __size_of_high_isr 20CA  
                                                            sprintf@flag 00F1  
                                                            sprintf@prec 00F2  
                                                               ?_InitApp 003B  
                                                       ___lwdiv@dividend 005A  
                                                              __pintcode 0008  
                                                               ?___lwdiv 005A  
                                                               ?___lwmod 00E1  
                                                            __pintcodelo 0018  
                                                            __smallconst 0600  
                                                               ?_isalpha 003B  
                                                               ?_isdigit 003B  
                                                               ?_isspace 003B  
                                                               ?_low_isr 003B  
                                                               ?_isupper 003B  
                                                       ___lwdiv@quotient 00DF  
                                                               ?_sprintf 00E6  
                                                               ?_toupper 003B  
                                                               _LATBbits 000F8A  
                                                               _IPR1bits 000F9F  
                                                               _IPR2bits 000FA2  
                                                               _PIE1bits 000F9D  
                                                               _PIE2bits 000FA0  
                                                              _unSegundo 0021  
                                                               _PIR1bits 000F9E  
                                                               _PIR2bits 000FA1  
                                                               _RCONbits 000FD0  
                                                            _comparacion 001B  
                                                             _ADCON1bits 000FC1  
                                                           _isspace$1613 005B  
                                                      ___lmul@multiplier 00DE  
                                                            _INTCON2bits 000FF1  
                                                       __size_of_InitApp 0098  
                                                               __Hrparam 0000  
                                                               __Lrparam 0000  
                                                       __size_of___lwdiv 006C  
                                                       __size_of___lwmod 0070  
                                                           _isupper$1616 005B  
                                                             sprintf@val 00F3  
                                                       __size_of_isalpha 003C  
                                                       __size_of_isdigit 0024  
                                                        ___lwdiv@divisor 005C  
                                                       __size_of_isspace 002E  
                                                        ___lwdiv@counter 00DE  
                                                       __size_of_low_isr 0092  
                                                               __ptext10 1E38  
                                                               __ptext11 21DE  
                                                               __ptext12 224E  
                                                               __ptext13 20D2  
                                                               __ptext14 245C  
                                                       __size_of_isupper 0024  
                                                               _high_isr 0008  
                                                               _led_mode 002C  
                                                       __size_of_sprintf 01A6  
                                                       __size_of_toupper 001A  
                                                             strcpy@from 005C  
                                                          __size_of_main 158E  
                                           __size_of_ConfigureOscillator 0006  
                                                               _segundos 0017  
                                                       _frecuenciaMedida 0001  
                                                               int$flags 0060  
                                                             strtol@base 00EA  
                                                             strtol@sign 00F0  
                                                             _INTCONbits 000FF2  
                                                               isalpha@c 00DF  
                                                               isdigit@c 005C  
                                                               intlevel1 2464  
                                                               intlevel2 2464  
                                                              sprintf@ap 00EF  
                                                              sprintf@sp 00E6  
                                                       ___lwmod@dividend 00E1  
                                                               isspace@c 005C  
                                                               isupper@c 005C  
                                                               sprintf@c 00F5  
                                                               sprintf@f 00E8  
                                                               strcmp@s1 005A  
                                                               strcmp@s2 005C  
                                                        ___lwmod@divisor 00E3  
                                                               strcpy@cp 00DE  
                                                               strcpy@to 005A  
                                                        ___lwmod@counter 00E5  
                                                               toupper@c 005A  
