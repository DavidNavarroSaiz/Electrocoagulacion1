

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Oct 13 14:19:54 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	idataCOMRAM
    54  002E70                     __pidataCOMRAM:
    55                           	opt stack 0
    56                           
    57                           ;initializer for _RAPIDO
    58  002E70  0001               	dw	1
    59                           
    60                           ;initializer for _tmues
    61  002E72  000A               	dw	10
    62                           
    63                           ;initializer for _tvis
    64  002E74  0005               	dw	5
    65                           
    66                           	psect	idataBANK0
    67  002E60                     __pidataBANK0:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _binnum
    71  002E60  0001               	dw	1
    72                           
    73                           ;initializer for _info
    74  002E62  0001               	dw	1
    75                           
    76                           ;initializer for _muestreo1
    77  002E64  0001               	dw	1
    78                           
    79                           ;initializer for _muestreo2
    80  002E66  0001               	dw	1
    81                           
    82                           ;initializer for _muestreo3
    83  002E68  0001               	dw	1
    84                           
    85                           ;initializer for _visualizacion1
    86  002E6A  0001               	dw	1
    87                           
    88                           ;initializer for _visualizacion2
    89  002E6C  0001               	dw	1
    90                           
    91                           ;initializer for _visualizacion3
    92  002E6E  0001               	dw	1
    93                           
    94                           	psect	mediumconst
    95  007E0A                     __pmediumconst:
    96                           	opt stack 0
    97  007E0A  00                 	db	0
    98  007E0B                     _dpowers:
    99                           	opt stack 0
   100  007E0B  0001               	dw	1
   101  007E0D  0000               	dw	0
   102  007E0F  000A               	dw	10
   103  007E11  0000               	dw	0
   104  007E13  0064               	dw	100
   105  007E15  0000               	dw	0
   106  007E17  03E8               	dw	1000
   107  007E19  0000               	dw	0
   108  007E1B  2710               	dw	10000
   109  007E1D  0000               	dw	0
   110  007E1F  86A0               	dw	34464
   111  007E21  0001               	dw	1
   112  007E23  4240               	dw	16960
   113  007E25  000F               	dw	15
   114  007E27  9680               	dw	38528
   115  007E29  0098               	dw	152
   116  007E2B  E100               	dw	57600
   117  007E2D  05F5               	dw	1525
   118  007E2F  CA00               	dw	51712
   119  007E31  3B9A               	dw	15258
   120  007E33                     __end_of_dpowers:
   121                           	opt stack 0
   122  007E33                     __npowers_:
   123                           	opt stack 0
   124  007E33  00                 	db	0
   125  007E34  80                 	db	128
   126  007E35  3F                 	db	63
   127  007E36  CD                 	db	205
   128  007E37  CC                 	db	204
   129  007E38  3D                 	db	61
   130  007E39  D7                 	db	215
   131  007E3A  23                 	db	35
   132  007E3B  3C                 	db	60
   133  007E3C  12                 	db	18
   134  007E3D  83                 	db	131
   135  007E3E  3A                 	db	58
   136  007E3F  B7                 	db	183
   137  007E40  D1                 	db	209
   138  007E41  38                 	db	56
   139  007E42  C6                 	db	198
   140  007E43  27                 	db	39
   141  007E44  37                 	db	55
   142  007E45  38                 	db	56
   143  007E46  86                 	db	134
   144  007E47  35                 	db	53
   145  007E48  C0                 	db	192
   146  007E49  D6                 	db	214
   147  007E4A  33                 	db	51
   148  007E4B  CC                 	db	204
   149  007E4C  2B                 	db	43
   150  007E4D  32                 	db	50
   151  007E4E  70                 	db	112
   152  007E4F  89                 	db	137
   153  007E50  30                 	db	48
   154  007E51  E7                 	db	231
   155  007E52  DB                 	db	219
   156  007E53  2E                 	db	46
   157  007E54  E5                 	db	229
   158  007E55  3C                 	db	60
   159  007E56  1E                 	db	30
   160  007E57  42                 	db	66
   161  007E58  A2                 	db	162
   162  007E59  0D                 	db	13
   163  007E5A                     __end_of__npowers_:
   164                           	opt stack 0
   165  007E5A                     __powers_:
   166                           	opt stack 0
   167  007E5A  00                 	db	0
   168  007E5B  80                 	db	128
   169  007E5C  3F                 	db	63
   170  007E5D  00                 	db	0
   171  007E5E  20                 	db	32
   172  007E5F  41                 	db	65
   173  007E60  00                 	db	0
   174  007E61  C8                 	db	200
   175  007E62  42                 	db	66
   176  007E63  00                 	db	0
   177  007E64  7A                 	db	122
   178  007E65  44                 	db	68
   179  007E66  40                 	db	64
   180  007E67  1C                 	db	28
   181  007E68  46                 	db	70
   182  007E69  50                 	db	80
   183  007E6A  C3                 	db	195
   184  007E6B  47                 	db	71
   185  007E6C  24                 	db	36
   186  007E6D  74                 	db	116
   187  007E6E  49                 	db	73
   188  007E6F  97                 	db	151
   189  007E70  18                 	db	24
   190  007E71  4B                 	db	75
   191  007E72  BC                 	db	188
   192  007E73  BE                 	db	190
   193  007E74  4C                 	db	76
   194  007E75  6B                 	db	107
   195  007E76  6E                 	db	110
   196  007E77  4E                 	db	78
   197  007E78  03                 	db	3
   198  007E79  15                 	db	21
   199  007E7A  50                 	db	80
   200  007E7B  79                 	db	121
   201  007E7C  AD                 	db	173
   202  007E7D  60                 	db	96
   203  007E7E  F3                 	db	243
   204  007E7F  49                 	db	73
   205  007E80  71                 	db	113
   206  007E81                     __end_of__powers_:
   207                           	opt stack 0
   208  007E81                     _hexpowers:
   209                           	opt stack 0
   210  007E81  0001               	dw	1
   211  007E83  0000               	dw	0
   212  007E85  0010               	dw	16
   213  007E87  0000               	dw	0
   214  007E89  0100               	dw	256
   215  007E8B  0000               	dw	0
   216  007E8D  1000               	dw	4096
   217  007E8F  0000               	dw	0
   218  007E91  0000               	dw	0
   219  007E93  0001               	dw	1
   220  007E95  0000               	dw	0
   221  007E97  0010               	dw	16
   222  007E99  0000               	dw	0
   223  007E9B  0100               	dw	256
   224  007E9D  0000               	dw	0
   225  007E9F  1000               	dw	4096
   226  007EA1                     __end_of_hexpowers:
   227                           	opt stack 0
   228  007EA1                     _canal2:
   229                           	opt stack 0
   230  007EA1  63                 	db	99
   231  007EA2  61                 	db	97
   232  007EA3  6E                 	db	110
   233  007EA4  61                 	db	97
   234  007EA5  6C                 	db	108
   235  007EA6  20                 	db	32
   236  007EA7  32                 	db	50
   237  007EA8  20                 	db	32
   238  007EA9  3A                 	db	58
   239  007EAA  00                 	db	0
   240  007EAB                     __end_of_canal2:
   241                           	opt stack 0
   242  007EAB                     _saludo:
   243                           	opt stack 0
   244  007EAB  42                 	db	66
   245  007EAC  49                 	db	73
   246  007EAD  45                 	db	69
   247  007EAE  4E                 	db	78
   248  007EAF  56                 	db	86
   249  007EB0  45                 	db	69
   250  007EB1  4E                 	db	78
   251  007EB2  49                 	db	73
   252  007EB3  44                 	db	68
   253  007EB4  4F                 	db	79
   254  007EB5  20                 	db	32
   255  007EB6  41                 	db	65
   256  007EB7  20                 	db	32
   257  007EB8  4C                 	db	76
   258  007EB9  41                 	db	65
   259  007EBA  20                 	db	32
   260  007EBB  43                 	db	67
   261  007EBC  4F                 	db	79
   262  007EBD  4E                 	db	78
   263  007EBE  56                 	db	86
   264  007EBF  45                 	db	69
   265  007EC0  52                 	db	82
   266  007EC1  53                 	db	83
   267  007EC2  49                 	db	73
   268  007EC3  4F                 	db	79
   269  007EC4  4E                 	db	78
   270  007EC5  20                 	db	32
   271  007EC6  41                 	db	65
   272  007EC7  44                 	db	68
   273  007EC8  43                 	db	67
   274  007EC9  00                 	db	0
   275  007ECA                     __end_of_saludo:
   276                           	opt stack 0
   277  007ECA                     _estadoactualnormal:
   278                           	opt stack 0
   279  007ECA  4D                 	db	77
   280  007ECB  6F                 	db	111
   281  007ECC  64                 	db	100
   282  007ECD  6F                 	db	111
   283  007ECE  20                 	db	32
   284  007ECF  64                 	db	100
   285  007ED0  65                 	db	101
   286  007ED1  20                 	db	32
   287  007ED2  6D                 	db	109
   288  007ED3  75                 	db	117
   289  007ED4  65                 	db	101
   290  007ED5  73                 	db	115
   291  007ED6  74                 	db	116
   292  007ED7  72                 	db	114
   293  007ED8  65                 	db	101
   294  007ED9  6F                 	db	111
   295  007EDA  20                 	db	32
   296  007EDB  6E                 	db	110
   297  007EDC  6F                 	db	111
   298  007EDD  72                 	db	114
   299  007EDE  6D                 	db	109
   300  007EDF  61                 	db	97
   301  007EE0  6C                 	db	108
   302  007EE1  00                 	db	0
   303  007EE2                     __end_of_estadoactualnormal:
   304                           	opt stack 0
   305  007EE2                     _estadoactualrapido:
   306                           	opt stack 0
   307  007EE2  4D                 	db	77
   308  007EE3  6F                 	db	111
   309  007EE4  64                 	db	100
   310  007EE5  6F                 	db	111
   311  007EE6  20                 	db	32
   312  007EE7  64                 	db	100
   313  007EE8  65                 	db	101
   314  007EE9  20                 	db	32
   315  007EEA  6D                 	db	109
   316  007EEB  75                 	db	117
   317  007EEC  65                 	db	101
   318  007EED  73                 	db	115
   319  007EEE  74                 	db	116
   320  007EEF  72                 	db	114
   321  007EF0  65                 	db	101
   322  007EF1  6F                 	db	111
   323  007EF2  20                 	db	32
   324  007EF3  72                 	db	114
   325  007EF4  61                 	db	97
   326  007EF5  70                 	db	112
   327  007EF6  69                 	db	105
   328  007EF7  64                 	db	100
   329  007EF8  6F                 	db	111
   330  007EF9  00                 	db	0
   331  007EFA                     __end_of_estadoactualrapido:
   332                           	opt stack 0
   333  007EFA                     _visualizacionnoaplica:
   334                           	opt stack 0
   335  007EFA  76                 	db	118
   336  007EFB  69                 	db	105
   337  007EFC  73                 	db	115
   338  007EFD  75                 	db	117
   339  007EFE  61                 	db	97
   340  007EFF  6C                 	db	108
   341  007F00  69                 	db	105
   342  007F01  7A                 	db	122
   343  007F02  61                 	db	97
   344  007F03  63                 	db	99
   345  007F04  69                 	db	105
   346  007F05  6F                 	db	111
   347  007F06  6E                 	db	110
   348  007F07  20                 	db	32
   349  007F08  4E                 	db	78
   350  007F09  4F                 	db	79
   351  007F0A  20                 	db	32
   352  007F0B  41                 	db	65
   353  007F0C  50                 	db	80
   354  007F0D  4C                 	db	76
   355  007F0E  49                 	db	73
   356  007F0F  43                 	db	67
   357  007F10  41                 	db	65
   358  007F11  00                 	db	0
   359  007F12                     __end_of_visualizacionnoaplica:
   360                           	opt stack 0
   361  007F12                     _noreconocido:
   362                           	opt stack 0
   363  007F12  43                 	db	67
   364  007F13  4F                 	db	79
   365  007F14  4D                 	db	77
   366  007F15  41                 	db	65
   367  007F16  4E                 	db	78
   368  007F17  44                 	db	68
   369  007F18  4F                 	db	79
   370  007F19  20                 	db	32
   371  007F1A  4E                 	db	78
   372  007F1B  4F                 	db	79
   373  007F1C  20                 	db	32
   374  007F1D  52                 	db	82
   375  007F1E  45                 	db	69
   376  007F1F  43                 	db	67
   377  007F20  4F                 	db	79
   378  007F21  4E                 	db	78
   379  007F22  4F                 	db	79
   380  007F23  43                 	db	67
   381  007F24  49                 	db	73
   382  007F25  44                 	db	68
   383  007F26  4F                 	db	79
   384  007F27  00                 	db	0
   385  007F28                     __end_of_noreconocido:
   386                           	opt stack 0
   387  007F28                     _muestreonoaplica:
   388                           	opt stack 0
   389  007F28  4D                 	db	77
   390  007F29  75                 	db	117
   391  007F2A  65                 	db	101
   392  007F2B  73                 	db	115
   393  007F2C  74                 	db	116
   394  007F2D  72                 	db	114
   395  007F2E  65                 	db	101
   396  007F2F  6F                 	db	111
   397  007F30  20                 	db	32
   398  007F31  4E                 	db	78
   399  007F32  4F                 	db	79
   400  007F33  20                 	db	32
   401  007F34  41                 	db	65
   402  007F35  50                 	db	80
   403  007F36  4C                 	db	76
   404  007F37  49                 	db	73
   405  007F38  43                 	db	67
   406  007F39  41                 	db	65
   407  007F3A  00                 	db	0
   408  007F3B                     __end_of_muestreonoaplica:
   409                           	opt stack 0
   410  007F3B                     _VISUALIZACION1:
   411                           	opt stack 0
   412  007F3B  56                 	db	86
   413  007F3C  49                 	db	73
   414  007F3D  53                 	db	83
   415  007F3E  55                 	db	85
   416  007F3F  41                 	db	65
   417  007F40  4C                 	db	76
   418  007F41  49                 	db	73
   419  007F42  5A                 	db	90
   420  007F43  41                 	db	65
   421  007F44  43                 	db	67
   422  007F45  49                 	db	73
   423  007F46  4F                 	db	79
   424  007F47  4E                 	db	78
   425  007F48  31                 	db	49
   426  007F49  00                 	db	0
   427  007F4A                     __end_of_VISUALIZACION1:
   428                           	opt stack 0
   429  007F4A                     _VISUALIZACION2:
   430                           	opt stack 0
   431  007F4A  56                 	db	86
   432  007F4B  49                 	db	73
   433  007F4C  53                 	db	83
   434  007F4D  55                 	db	85
   435  007F4E  41                 	db	65
   436  007F4F  4C                 	db	76
   437  007F50  49                 	db	73
   438  007F51  5A                 	db	90
   439  007F52  41                 	db	65
   440  007F53  43                 	db	67
   441  007F54  49                 	db	73
   442  007F55  4F                 	db	79
   443  007F56  4E                 	db	78
   444  007F57  32                 	db	50
   445  007F58  00                 	db	0
   446  007F59                     __end_of_VISUALIZACION2:
   447                           	opt stack 0
   448  007F59                     _VISUALIZACION3:
   449                           	opt stack 0
   450  007F59  56                 	db	86
   451  007F5A  49                 	db	73
   452  007F5B  53                 	db	83
   453  007F5C  55                 	db	85
   454  007F5D  41                 	db	65
   455  007F5E  4C                 	db	76
   456  007F5F  49                 	db	73
   457  007F60  5A                 	db	90
   458  007F61  41                 	db	65
   459  007F62  43                 	db	67
   460  007F63  49                 	db	73
   461  007F64  4F                 	db	79
   462  007F65  4E                 	db	78
   463  007F66  33                 	db	51
   464  007F67  00                 	db	0
   465  007F68                     __end_of_VISUALIZACION3:
   466                           	opt stack 0
   467  007F68                     _MODONORMAL:
   468                           	opt stack 0
   469  007F68  4D                 	db	77
   470  007F69  4F                 	db	79
   471  007F6A  44                 	db	68
   472  007F6B  4F                 	db	79
   473  007F6C  4E                 	db	78
   474  007F6D  4F                 	db	79
   475  007F6E  52                 	db	82
   476  007F6F  4D                 	db	77
   477  007F70  41                 	db	65
   478  007F71  4C                 	db	76
   479  007F72  00                 	db	0
   480  007F73                     __end_of_MODONORMAL:
   481                           	opt stack 0
   482  007F73                     _MODORAPIDO:
   483                           	opt stack 0
   484  007F73  4D                 	db	77
   485  007F74  4F                 	db	79
   486  007F75  44                 	db	68
   487  007F76  4F                 	db	79
   488  007F77  52                 	db	82
   489  007F78  41                 	db	65
   490  007F79  50                 	db	80
   491  007F7A  49                 	db	73
   492  007F7B  44                 	db	68
   493  007F7C  4F                 	db	79
   494  007F7D  00                 	db	0
   495  007F7E                     __end_of_MODORAPIDO:
   496                           	opt stack 0
   497  007F7E                     _MUESTREO1:
   498                           	opt stack 0
   499  007F7E  4D                 	db	77
   500  007F7F  55                 	db	85
   501  007F80  45                 	db	69
   502  007F81  53                 	db	83
   503  007F82  54                 	db	84
   504  007F83  52                 	db	82
   505  007F84  45                 	db	69
   506  007F85  4F                 	db	79
   507  007F86  31                 	db	49
   508  007F87  00                 	db	0
   509  007F88                     __end_of_MUESTREO1:
   510                           	opt stack 0
   511  007F88                     _MUESTREO2:
   512                           	opt stack 0
   513  007F88  4D                 	db	77
   514  007F89  55                 	db	85
   515  007F8A  45                 	db	69
   516  007F8B  53                 	db	83
   517  007F8C  54                 	db	84
   518  007F8D  52                 	db	82
   519  007F8E  45                 	db	69
   520  007F8F  4F                 	db	79
   521  007F90  32                 	db	50
   522  007F91  00                 	db	0
   523  007F92                     __end_of_MUESTREO2:
   524                           	opt stack 0
   525  007F92                     _MUESTREO3:
   526                           	opt stack 0
   527  007F92  4D                 	db	77
   528  007F93  55                 	db	85
   529  007F94  45                 	db	69
   530  007F95  53                 	db	83
   531  007F96  54                 	db	84
   532  007F97  52                 	db	82
   533  007F98  45                 	db	69
   534  007F99  4F                 	db	79
   535  007F9A  33                 	db	51
   536  007F9B  00                 	db	0
   537  007F9C                     __end_of_MUESTREO3:
   538                           	opt stack 0
   539  007F9C                     _INFO:
   540                           	opt stack 0
   541  007F9C  49                 	db	73
   542  007F9D  4E                 	db	78
   543  007F9E  46                 	db	70
   544  007F9F  4F                 	db	79
   545  007FA0  00                 	db	0
   546  007FA1                     __end_of_INFO:
   547                           	opt stack 0
   548  0000                     _TMR0	set	4054
   549  0000                     _TMR1	set	4046
   550  0000                     _TMR3	set	4018
   551  0000                     _ADCON0bits	set	4034
   552  0000                     _ADCON1bits	set	4033
   553  0000                     _ADRESH	set	4036
   554  0000                     _ADRESL	set	4035
   555  0000                     _INTCON2bits	set	4081
   556  0000                     _INTCONbits	set	4082
   557  0000                     _IPR1bits	set	3999
   558  0000                     _IPR2bits	set	4002
   559  0000                     _LATBbits	set	3978
   560  0000                     _PIE1bits	set	3997
   561  0000                     _PIE2bits	set	4000
   562  0000                     _PIR1bits	set	3998
   563  0000                     _PIR2bits	set	4001
   564  0000                     _PORTA	set	3968
   565  0000                     _PORTB	set	3969
   566  0000                     _PORTBbits	set	3969
   567  0000                     _PORTC	set	3970
   568  0000                     _RCONbits	set	4048
   569  0000                     _RCREG	set	4014
   570  0000                     _RCSTAbits	set	4011
   571  0000                     _SPBRG	set	4015
   572  0000                     _T0CONbits	set	4053
   573  0000                     _T1CONbits	set	4045
   574  0000                     _T3CONbits	set	4017
   575  0000                     _TRISAbits	set	3986
   576  0000                     _TRISBbits	set	3987
   577  0000                     _TRISCbits	set	3988
   578  0000                     _TXREG	set	4013
   579  0000                     _TXSTAbits	set	4012
   580  007FA1                     STR_5:
   581  007FA1  20                 	db	32
   582  007FA2  20                 	db	32
   583  007FA3  63                 	db	99	;'c'
   584  007FA4  61                 	db	97	;'a'
   585  007FA5  6E                 	db	110	;'n'
   586  007FA6  61                 	db	97	;'a'
   587  007FA7  6C                 	db	108	;'l'
   588  007FA8  20                 	db	32
   589  007FA9  33                 	db	51	;'3'
   590  007FAA  3A                 	db	58	;':'
   591  007FAB  20                 	db	32
   592  007FAC  30                 	db	48	;'0'
   593  007FAD  78                 	db	120	;'x'
   594  007FAE  25                 	db	37
   595  007FAF  30                 	db	48	;'0'
   596  007FB0  34                 	db	52	;'4'
   597  007FB1  58                 	db	88	;'X'
   598  007FB2  2E                 	db	46
   599  007FB3  0A                 	db	10
   600  007FB4  0D                 	db	13
   601  007FB5  00                 	db	0
   602  007FB6                     STR_3:
   603  007FB6  76                 	db	118	;'v'
   604  007FB7  69                 	db	105	;'i'
   605  007FB8  73                 	db	115	;'s'
   606  007FB9  75                 	db	117	;'u'
   607  007FBA  61                 	db	97	;'a'
   608  007FBB  6C                 	db	108	;'l'
   609  007FBC  69                 	db	105	;'i'
   610  007FBD  7A                 	db	122	;'z'
   611  007FBE  61                 	db	97	;'a'
   612  007FBF  63                 	db	99	;'c'
   613  007FC0  69                 	db	105	;'i'
   614  007FC1  6F                 	db	111	;'o'
   615  007FC2  6E                 	db	110	;'n'
   616  007FC3  20                 	db	32
   617  007FC4  25                 	db	37
   618  007FC5  64                 	db	100	;'d'
   619  007FC6  20                 	db	32
   620  007FC7  6D                 	db	109	;'m'
   621  007FC8  73                 	db	115	;'s'
   622  007FC9  2E                 	db	46
   623  007FCA  00                 	db	0
   624  007FCB                     STR_7:
   625  007FCB  30                 	db	48	;'0'
   626  007FCC  31                 	db	49	;'1'
   627  007FCD  32                 	db	50	;'2'
   628  007FCE  33                 	db	51	;'3'
   629  007FCF  34                 	db	52	;'4'
   630  007FD0  35                 	db	53	;'5'
   631  007FD1  36                 	db	54	;'6'
   632  007FD2  37                 	db	55	;'7'
   633  007FD3  38                 	db	56	;'8'
   634  007FD4  39                 	db	57	;'9'
   635  007FD5  41                 	db	65	;'A'
   636  007FD6  42                 	db	66	;'B'
   637  007FD7  43                 	db	67	;'C'
   638  007FD8  44                 	db	68	;'D'
   639  007FD9  45                 	db	69	;'E'
   640  007FDA  46                 	db	70	;'F'
   641  007FDB  00                 	db	0
   642  007FDC                     STR_4:
   643  007FDC  63                 	db	99	;'c'
   644  007FDD  61                 	db	97	;'a'
   645  007FDE  6E                 	db	110	;'n'
   646  007FDF  61                 	db	97	;'a'
   647  007FE0  6C                 	db	108	;'l'
   648  007FE1  20                 	db	32
   649  007FE2  31                 	db	49	;'1'
   650  007FE3  3A                 	db	58	;':'
   651  007FE4  20                 	db	32
   652  007FE5  25                 	db	37
   653  007FE6  66                 	db	102	;'f'
   654  007FE7  20                 	db	32
   655  007FE8  56                 	db	86	;'V'
   656  007FE9  20                 	db	32
   657  007FEA  20                 	db	32
   658  007FEB  00                 	db	0
   659  007FEC                     STR_2:
   660  007FEC  6D                 	db	109	;'m'
   661  007FED  75                 	db	117	;'u'
   662  007FEE  65                 	db	101	;'e'
   663  007FEF  73                 	db	115	;'s'
   664  007FF0  74                 	db	116	;'t'
   665  007FF1  72                 	db	114	;'r'
   666  007FF2  65                 	db	101	;'e'
   667  007FF3  6F                 	db	111	;'o'
   668  007FF4  20                 	db	32
   669  007FF5  25                 	db	37
   670  007FF6  64                 	db	100	;'d'
   671  007FF7  20                 	db	32
   672  007FF8  6D                 	db	109	;'m'
   673  007FF9  73                 	db	115	;'s'
   674  007FFA  2E                 	db	46
   675  007FFB  00                 	db	0
   676  007FFC                     STR_1:
   677  007FFC  25                 	db	37
   678  007FFD  64                 	db	100	;'d'
   679  007FFE  00                 	db	0
   680  0000                     
   681                           ; #config settings
   682  007FFF  00                 	db	0	; dummy byte at the end
   683  0000                     
   684                           	psect	cinit
   685  002BA2                     __pcinit:
   686                           	opt stack 0
   687  002BA2                     start_initialization:
   688                           	opt stack 0
   689  002BA2                     __initialization:
   690                           	opt stack 0
   691                           
   692                           ; Initialize objects allocated to BANK0 (16 bytes)
   693                           ; load TBLPTR registers with __pidataBANK0
   694  002BA2  0E60               	movlw	low __pidataBANK0
   695  002BA4  6EF6               	movwf	tblptrl,c
   696  002BA6  0E2E               	movlw	high __pidataBANK0
   697  002BA8  6EF7               	movwf	tblptrh,c
   698  002BAA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   699  002BAC  6EF8               	movwf	tblptru,c
   700  002BAE  EE00  F0E6         	lfsr	0,__pdataBANK0
   701  002BB2  EE10 F010          	lfsr	1,16
   702  002BB6                     copy_data0:
   703  002BB6  0009               	tblrd		*+
   704  002BB8  CFF5 FFEE          	movff	tablat,postinc0
   705  002BBC  50E5               	movf	postdec1,w,c
   706  002BBE  50E1               	movf	fsr1l,w,c
   707  002BC0  E1FA               	bnz	copy_data0
   708                           
   709                           ; Initialize objects allocated to COMRAM (6 bytes)
   710                           ; load TBLPTR registers with __pidataCOMRAM
   711  002BC2  0E70               	movlw	low __pidataCOMRAM
   712  002BC4  6EF6               	movwf	tblptrl,c
   713  002BC6  0E2E               	movlw	high __pidataCOMRAM
   714  002BC8  6EF7               	movwf	tblptrh,c
   715  002BCA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   716  002BCC  6EF8               	movwf	tblptru,c
   717  002BCE  EE00  F057         	lfsr	0,__pdataCOMRAM
   718  002BD2  EE10 F006          	lfsr	1,6
   719  002BD6                     copy_data1:
   720  002BD6  0009               	tblrd		*+
   721  002BD8  CFF5 FFEE          	movff	tablat,postinc0
   722  002BDC  50E5               	movf	postdec1,w,c
   723  002BDE  50E1               	movf	fsr1l,w,c
   724  002BE0  E1FA               	bnz	copy_data1
   725                           
   726                           ; Clear objects allocated to BANK1 (95 bytes)
   727  002BE2  EE01  F000         	lfsr	0,__pbssBANK1
   728  002BE6  0E5F               	movlw	95
   729  002BE8                     clear_0:
   730  002BE8  6AEE               	clrf	postinc0,c
   731  002BEA  06E8               	decf	wreg,f,c
   732  002BEC  E1FD               	bnz	clear_0
   733                           
   734                           ; Clear objects allocated to BANK0 (49 bytes)
   735  002BEE  EE00  F0B5         	lfsr	0,__pbssBANK0
   736  002BF2  0E31               	movlw	49
   737  002BF4                     clear_1:
   738  002BF4  6AEE               	clrf	postinc0,c
   739  002BF6  06E8               	decf	wreg,f,c
   740  002BF8  E1FD               	bnz	clear_1
   741                           
   742                           ; Clear objects allocated to COMRAM (27 bytes)
   743  002BFA  EE00  F03C         	lfsr	0,__pbssCOMRAM
   744  002BFE  0E1B               	movlw	27
   745  002C00                     clear_2:
   746  002C00  6AEE               	clrf	postinc0,c
   747  002C02  06E8               	decf	wreg,f,c
   748  002C04  E1FD               	bnz	clear_2
   749  002C06                     end_of_initialization:
   750                           	opt stack 0
   751  002C06                     __end_of__initialization:
   752                           	opt stack 0
   753  002C06  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   754  002C08  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   755  002C0A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   756  002C0C  6EF8               	movwf	tblptru,c
   757  002C0E  0100               	movlb	0
   758  002C10  EFEC  F006         	goto	_main	;jump to C main() function
   759                           tblptru	equ	0xFF8
   760                           tblptrh	equ	0xFF7
   761                           tblptrl	equ	0xFF6
   762                           tablat	equ	0xFF5
   763                           postinc0	equ	0xFEE
   764                           wreg	equ	0xFE8
   765                           postdec1	equ	0xFE5
   766                           fsr1l	equ	0xFE1
   767                           
   768                           	psect	bssCOMRAM
   769  00003C                     __pbssCOMRAM:
   770                           	opt stack 0
   771  00003C                     _NORMAL:
   772                           	opt stack 0
   773  00003C                     	ds	2
   774  00003E                     _conversionadc:
   775                           	opt stack 0
   776  00003E                     	ds	2
   777  000040                     _enter:
   778                           	opt stack 0
   779  000040                     	ds	2
   780  000042                     _i:
   781                           	opt stack 0
   782  000042                     	ds	2
   783  000044                     _led:
   784                           	opt stack 0
   785  000044                     	ds	2
   786  000046                     _modoestado:
   787                           	opt stack 0
   788  000046                     	ds	2
   789  000048                     _muestreo:
   790                           	opt stack 0
   791  000048                     	ds	2
   792  00004A                     _promedio:
   793                           	opt stack 0
   794  00004A                     	ds	2
   795  00004C                     _resultadoadc:
   796                           	opt stack 0
   797  00004C                     	ds	2
   798  00004E                     _suma0:
   799                           	opt stack 0
   800  00004E                     	ds	2
   801  000050                     _suma1:
   802                           	opt stack 0
   803  000050                     	ds	2
   804  000052                     _suma2:
   805                           	opt stack 0
   806  000052                     	ds	2
   807  000054                     _tama:
   808                           	opt stack 0
   809  000054                     	ds	2
   810  000056                     _dato:
   811                           	opt stack 0
   812  000056                     	ds	1
   813                           tblptru	equ	0xFF8
   814                           tblptrh	equ	0xFF7
   815                           tblptrl	equ	0xFF6
   816                           tablat	equ	0xFF5
   817                           postinc0	equ	0xFEE
   818                           wreg	equ	0xFE8
   819                           postdec1	equ	0xFE5
   820                           fsr1l	equ	0xFE1
   821                           
   822                           	psect	dataCOMRAM
   823  000057                     __pdataCOMRAM:
   824                           	opt stack 0
   825  000057                     _RAPIDO:
   826                           	opt stack 0
   827  000057                     	ds	2
   828  000059                     _tmues:
   829                           	opt stack 0
   830  000059                     	ds	2
   831  00005B                     _tvis:
   832                           	opt stack 0
   833  00005B                     	ds	2
   834                           tblptru	equ	0xFF8
   835                           tblptrh	equ	0xFF7
   836                           tblptrl	equ	0xFF6
   837                           tablat	equ	0xFF5
   838                           postinc0	equ	0xFEE
   839                           wreg	equ	0xFE8
   840                           postdec1	equ	0xFE5
   841                           fsr1l	equ	0xFE1
   842                           
   843                           	psect	bssBANK0
   844  0000B5                     __pbssBANK0:
   845                           	opt stack 0
   846  0000B5                     _bin:
   847                           	opt stack 0
   848  0000B5                     	ds	10
   849  0000BF                     _promediovolt1:
   850                           	opt stack 0
   851  0000BF                     	ds	3
   852  0000C2                     _a:
   853                           	opt stack 0
   854  0000C2                     	ds	2
   855  0000C4                     _b:
   856                           	opt stack 0
   857  0000C4                     	ds	2
   858  0000C6                     _d:
   859                           	opt stack 0
   860  0000C6                     	ds	2
   861  0000C8                     _e:
   862                           	opt stack 0
   863  0000C8                     	ds	2
   864  0000CA                     _g:
   865                           	opt stack 0
   866  0000CA                     	ds	2
   867  0000CC                     _h0:
   868                           	opt stack 0
   869  0000CC                     	ds	2
   870  0000CE                     _h1:
   871                           	opt stack 0
   872  0000CE                     	ds	2
   873  0000D0                     _h2:
   874                           	opt stack 0
   875  0000D0                     	ds	2
   876  0000D2                     _modo:
   877                           	opt stack 0
   878  0000D2                     	ds	2
   879  0000D4                     _n:
   880                           	opt stack 0
   881  0000D4                     	ds	2
   882  0000D6                     _promedio1:
   883                           	opt stack 0
   884  0000D6                     	ds	2
   885  0000D8                     _promedio2:
   886                           	opt stack 0
   887  0000D8                     	ds	2
   888  0000DA                     _promedio3:
   889                           	opt stack 0
   890  0000DA                     	ds	2
   891  0000DC                     _promediovolt2:
   892                           	opt stack 0
   893  0000DC                     	ds	2
   894  0000DE                     _promediovolt3:
   895                           	opt stack 0
   896  0000DE                     	ds	2
   897  0000E0                     _tvisualizacion:
   898                           	opt stack 0
   899  0000E0                     	ds	2
   900  0000E2                     _unSegundo:
   901                           	opt stack 0
   902  0000E2                     	ds	2
   903  0000E4                     _visualizacion:
   904                           	opt stack 0
   905  0000E4                     	ds	2
   906                           tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           postinc0	equ	0xFEE
   911                           wreg	equ	0xFE8
   912                           postdec1	equ	0xFE5
   913                           fsr1l	equ	0xFE1
   914                           
   915                           	psect	dataBANK0
   916  0000E6                     __pdataBANK0:
   917                           	opt stack 0
   918  0000E6                     _binnum:
   919                           	opt stack 0
   920  0000E6                     	ds	2
   921  0000E8                     _info:
   922                           	opt stack 0
   923  0000E8                     	ds	2
   924  0000EA                     _muestreo1:
   925                           	opt stack 0
   926  0000EA                     	ds	2
   927  0000EC                     _muestreo2:
   928                           	opt stack 0
   929  0000EC                     	ds	2
   930  0000EE                     _muestreo3:
   931                           	opt stack 0
   932  0000EE                     	ds	2
   933  0000F0                     _visualizacion1:
   934                           	opt stack 0
   935  0000F0                     	ds	2
   936  0000F2                     _visualizacion2:
   937                           	opt stack 0
   938  0000F2                     	ds	2
   939  0000F4                     _visualizacion3:
   940                           	opt stack 0
   941  0000F4                     	ds	2
   942                           tblptru	equ	0xFF8
   943                           tblptrh	equ	0xFF7
   944                           tblptrl	equ	0xFF6
   945                           tablat	equ	0xFF5
   946                           postinc0	equ	0xFEE
   947                           wreg	equ	0xFE8
   948                           postdec1	equ	0xFE5
   949                           fsr1l	equ	0xFE1
   950                           
   951                           	psect	bssBANK1
   952  000100                     __pbssBANK1:
   953                           	opt stack 0
   954  000100                     _tam:
   955                           	opt stack 0
   956  000100                     	ds	40
   957  000128                     _salida:
   958                           	opt stack 0
   959  000128                     	ds	30
   960  000146                     _comando:
   961                           	opt stack 0
   962  000146                     	ds	25
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           postdec1	equ	0xFE5
   970                           fsr1l	equ	0xFE1
   971                           
   972                           	psect	cstackBANK1
   973  00015F                     __pcstackBANK1:
   974                           	opt stack 0
   975  00015F                     _sprintf$2073:
   976                           	opt stack 0
   977                           
   978                           ; 3 bytes @ 0x0
   979  00015F                     	ds	3
   980  000162                     sprintf@idx:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0x3
   984  000162                     	ds	1
   985  000163                     sprintf@ap:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x4
   989  000163                     	ds	2
   990  000165                     sprintf@prec:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x6
   994  000165                     	ds	2
   995  000167                     sprintf@tmpval:
   996                           	opt stack 0
   997                           
   998                           ; 4 bytes @ 0x8
   999  000167                     	ds	4
  1000  00016B                     sprintf@width:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0xC
  1004  00016B                     	ds	2
  1005  00016D                     sprintf@exp:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0xE
  1009  00016D                     	ds	2
  1010  00016F                     sprintf@val:
  1011                           	opt stack 0
  1012                           
  1013                           ; 4 bytes @ 0x10
  1014  00016F                     	ds	4
  1015  000173                     sprintf@flag:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x14
  1019  000173                     	ds	2
  1020  000175                     sprintf@fval:
  1021                           	opt stack 0
  1022                           
  1023                           ; 3 bytes @ 0x16
  1024  000175                     	ds	3
  1025  000178                     sprintf@c:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x19
  1029  000178                     	ds	1
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           tblptrl	equ	0xFF6
  1033                           tablat	equ	0xFF5
  1034                           postinc0	equ	0xFEE
  1035                           wreg	equ	0xFE8
  1036                           postdec1	equ	0xFE5
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	cstackBANK0
  1040  000080                     __pcstackBANK0:
  1041                           	opt stack 0
  1042  000080                     ??___ftmul:
  1043                           
  1044                           ; 1 bytes @ 0x0
  1045  000080                     	ds	3
  1046  000083                     ___ftmul@exp:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x3
  1050  000083                     	ds	1
  1051  000084                     ___ftmul@f3_as_product:
  1052                           	opt stack 0
  1053                           
  1054                           ; 3 bytes @ 0x4
  1055  000084                     	ds	3
  1056  000087                     ___ftmul@cntr:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x7
  1060  000087                     	ds	1
  1061  000088                     ___ftmul@sign:
  1062                           	opt stack 0
  1063                           
  1064                           ; 1 bytes @ 0x8
  1065  000088                     	ds	1
  1066  000089                     ?___ftdiv:
  1067                           	opt stack 0
  1068  000089                     ?_fround:
  1069                           	opt stack 0
  1070  000089                     ?_scale:
  1071                           	opt stack 0
  1072  000089                     ___ftdiv@f1:
  1073                           	opt stack 0
  1074                           
  1075                           ; 3 bytes @ 0x9
  1076  000089                     	ds	3
  1077  00008C                     ___ftdiv@f2:
  1078                           	opt stack 0
  1079  00008C                     _fround$2071:
  1080                           	opt stack 0
  1081  00008C                     _scale$2072:
  1082                           	opt stack 0
  1083                           
  1084                           ; 3 bytes @ 0xC
  1085  00008C                     	ds	3
  1086  00008F                     ??___ftdiv:
  1087  00008F                     scale@scl:
  1088                           	opt stack 0
  1089  00008F                     _fround$2070:
  1090                           	opt stack 0
  1091                           
  1092                           ; 3 bytes @ 0xF
  1093  00008F                     	ds	1
  1094  000090                     ?___fttol:
  1095                           	opt stack 0
  1096  000090                     ___fttol@f1:
  1097                           	opt stack 0
  1098                           
  1099                           ; 3 bytes @ 0x10
  1100  000090                     	ds	2
  1101  000092                     fround@prec:
  1102                           	opt stack 0
  1103  000092                     ___ftdiv@cntr:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x12
  1107  000092                     	ds	1
  1108  000093                     ?___ftadd:
  1109                           	opt stack 0
  1110  000093                     ___ftadd@f1:
  1111                           	opt stack 0
  1112  000093                     ___ftdiv@f3:
  1113                           	opt stack 0
  1114                           
  1115                           ; 3 bytes @ 0x13
  1116  000093                     	ds	1
  1117  000094                     ??___fttol:
  1118                           
  1119                           ; 1 bytes @ 0x14
  1120  000094                     	ds	2
  1121  000096                     ___ftdiv@exp:
  1122                           	opt stack 0
  1123  000096                     ___ftadd@f2:
  1124                           	opt stack 0
  1125                           
  1126                           ; 3 bytes @ 0x16
  1127  000096                     	ds	1
  1128  000097                     ___ftdiv@sign:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0x17
  1132  000097                     	ds	2
  1133  000099                     ??___ftadd:
  1134  000099                     ___fttol@sign1:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x19
  1138  000099                     	ds	1
  1139  00009A                     ___fttol@lval:
  1140                           	opt stack 0
  1141                           
  1142                           ; 4 bytes @ 0x1A
  1143  00009A                     	ds	2
  1144  00009C                     ___ftadd@sign:
  1145                           	opt stack 0
  1146                           
  1147                           ; 1 bytes @ 0x1C
  1148  00009C                     	ds	1
  1149  00009D                     ___ftadd@exp2:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x1D
  1153  00009D                     	ds	1
  1154  00009E                     ___ftadd@exp1:
  1155                           	opt stack 0
  1156  00009E                     ___fttol@exp1:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x1E
  1160  00009E                     	ds	1
  1161  00009F                     ?___ftsub:
  1162                           	opt stack 0
  1163  00009F                     ___ftsub@f1:
  1164                           	opt stack 0
  1165                           
  1166                           ; 3 bytes @ 0x1F
  1167  00009F                     	ds	3
  1168  0000A2                     ___ftsub@f2:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0x22
  1172  0000A2                     	ds	3
  1173  0000A5                     ?_sprintf:
  1174                           	opt stack 0
  1175  0000A5                     sprintf@sp:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x25
  1179  0000A5                     	ds	2
  1180  0000A7                     sprintf@f:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x27
  1184  0000A7                     	ds	5
  1185  0000AC                     ??_sprintf:
  1186                           
  1187                           ; 1 bytes @ 0x2C
  1188  0000AC                     	ds	6
  1189  0000B2                     ??_main:
  1190                           
  1191                           ; 1 bytes @ 0x32
  1192  0000B2                     	ds	3
  1193                           tblptru	equ	0xFF8
  1194                           tblptrh	equ	0xFF7
  1195                           tblptrl	equ	0xFF6
  1196                           tablat	equ	0xFF5
  1197                           postinc0	equ	0xFEE
  1198                           wreg	equ	0xFE8
  1199                           postdec1	equ	0xFE5
  1200                           fsr1l	equ	0xFE1
  1201                           
  1202                           	psect	cstackCOMRAM
  1203  000001                     __pcstackCOMRAM:
  1204                           	opt stack 0
  1205  000001                     ??_high_isr:
  1206  000001                     
  1207                           ; 1 bytes @ 0x0
  1208  000001                     	ds	16
  1209  000011                     ??_low_isr:
  1210                           
  1211                           ; 1 bytes @ 0x10
  1212  000011                     	ds	17
  1213  000022                     ??_isdigit:
  1214  000022                     ?_strcmp:
  1215                           	opt stack 0
  1216  000022                     ?___awmod:
  1217                           	opt stack 0
  1218  000022                     ?___ftpack:
  1219                           	opt stack 0
  1220  000022                     ?___ftneg:
  1221                           	opt stack 0
  1222  000022                     ?__tdiv_to_l_:
  1223                           	opt stack 0
  1224  000022                     ?__div_to_l_:
  1225                           	opt stack 0
  1226  000022                     ?___lldiv:
  1227                           	opt stack 0
  1228  000022                     ledestado@tiempoled:
  1229                           	opt stack 0
  1230  000022                     enviarTrama@datos:
  1231                           	opt stack 0
  1232  000022                     enviarTramaSE@datos:
  1233                           	opt stack 0
  1234  000022                     InitApp@i:
  1235                           	opt stack 0
  1236  000022                     ___awmod@dividend:
  1237                           	opt stack 0
  1238  000022                     strcmp@s1:
  1239                           	opt stack 0
  1240  000022                     __div_to_l_@f1:
  1241                           	opt stack 0
  1242  000022                     ___ftpack@arg:
  1243                           	opt stack 0
  1244  000022                     __tdiv_to_l_@f1:
  1245                           	opt stack 0
  1246  000022                     ___ftge@ff1:
  1247                           	opt stack 0
  1248  000022                     ___ftneg@f1:
  1249                           	opt stack 0
  1250  000022                     ___lldiv@dividend:
  1251                           	opt stack 0
  1252                           
  1253                           ; 4 bytes @ 0x21
  1254  000022                     	ds	1
  1255  000023                     _isdigit$1743:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x22
  1259  000023                     	ds	1
  1260  000024                     ??_ledestado:
  1261  000024                     isdigit@c:
  1262                           	opt stack 0
  1263  000024                     ___awmod@divisor:
  1264                           	opt stack 0
  1265  000024                     strcmp@s2:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x23
  1269  000024                     	ds	1
  1270  000025                     ___ftpack@exp:
  1271                           	opt stack 0
  1272  000025                     __div_to_l_@f2:
  1273                           	opt stack 0
  1274  000025                     __tdiv_to_l_@f2:
  1275                           	opt stack 0
  1276  000025                     ___ftge@ff2:
  1277                           	opt stack 0
  1278                           
  1279                           ; 3 bytes @ 0x24
  1280  000025                     	ds	1
  1281  000026                     ??_strcmp:
  1282  000026                     ___awmod@counter:
  1283                           	opt stack 0
  1284  000026                     ___ftpack@sign:
  1285                           	opt stack 0
  1286  000026                     ___lldiv@divisor:
  1287                           	opt stack 0
  1288                           
  1289                           ; 4 bytes @ 0x25
  1290  000026                     	ds	1
  1291  000027                     ??___ftpack:
  1292  000027                     ___awmod@sign:
  1293                           	opt stack 0
  1294  000027                     strcmp@r:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x26
  1298  000027                     	ds	1
  1299  000028                     ??__tdiv_to_l_:
  1300  000028                     ??___ftge:
  1301  000028                     ?___awdiv:
  1302                           	opt stack 0
  1303  000028                     ___awdiv@dividend:
  1304                           	opt stack 0
  1305  000028                     __div_to_l_@quot:
  1306                           	opt stack 0
  1307                           
  1308                           ; 4 bytes @ 0x27
  1309  000028                     	ds	2
  1310  00002A                     ?___awtoft:
  1311                           	opt stack 0
  1312  00002A                     ?___lltoft:
  1313                           	opt stack 0
  1314  00002A                     ___awdiv@divisor:
  1315                           	opt stack 0
  1316  00002A                     ___awtoft@c:
  1317                           	opt stack 0
  1318  00002A                     ___lldiv@quotient:
  1319                           	opt stack 0
  1320  00002A                     ___lltoft@c:
  1321                           	opt stack 0
  1322                           
  1323                           ; 4 bytes @ 0x29
  1324  00002A                     	ds	1
  1325  00002B                     __tdiv_to_l_@quot:
  1326                           	opt stack 0
  1327                           
  1328                           ; 4 bytes @ 0x2A
  1329  00002B                     	ds	1
  1330  00002C                     ___awdiv@counter:
  1331                           	opt stack 0
  1332  00002C                     __div_to_l_@cntr:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x2B
  1336  00002C                     	ds	1
  1337  00002D                     ___awdiv@sign:
  1338                           	opt stack 0
  1339  00002D                     ___awtoft@sign:
  1340                           	opt stack 0
  1341  00002D                     __div_to_l_@exp1:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x2C
  1345  00002D                     	ds	1
  1346  00002E                     ??___lltoft:
  1347  00002E                     ___lldiv@counter:
  1348                           	opt stack 0
  1349  00002E                     ___awdiv@quotient:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x2D
  1353  00002E                     	ds	1
  1354  00002F                     ?___llmod:
  1355                           	opt stack 0
  1356  00002F                     __tdiv_to_l_@cntr:
  1357                           	opt stack 0
  1358  00002F                     ___llmod@dividend:
  1359                           	opt stack 0
  1360                           
  1361                           ; 4 bytes @ 0x2E
  1362  00002F                     	ds	1
  1363  000030                     ?_conversionADMues:
  1364                           	opt stack 0
  1365  000030                     ?___wmul:
  1366                           	opt stack 0
  1367  000030                     __tdiv_to_l_@exp1:
  1368                           	opt stack 0
  1369  000030                     conversionADMues@canal:
  1370                           	opt stack 0
  1371  000030                     ___wmul@multiplier:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x2F
  1375  000030                     	ds	2
  1376  000032                     ___lltoft@exp:
  1377                           	opt stack 0
  1378  000032                     conversionADMues@i:
  1379                           	opt stack 0
  1380  000032                     ___wmul@multiplicand:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x31
  1384  000032                     	ds	1
  1385  000033                     ___llmod@divisor:
  1386                           	opt stack 0
  1387                           
  1388                           ; 4 bytes @ 0x32
  1389  000033                     	ds	1
  1390  000034                     conversionADMues@i_608:
  1391                           	opt stack 0
  1392  000034                     ___wmul@product:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x33
  1396  000034                     	ds	2
  1397  000036                     ?___ftmul:
  1398                           	opt stack 0
  1399  000036                     conversionADMues@i_609:
  1400                           	opt stack 0
  1401  000036                     ___ftmul@f1:
  1402                           	opt stack 0
  1403                           
  1404                           ; 3 bytes @ 0x35
  1405  000036                     	ds	1
  1406  000037                     ___llmod@counter:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x36
  1410  000037                     	ds	2
  1411  000039                     ___ftmul@f2:
  1412                           	opt stack 0
  1413                           
  1414                           ; 3 bytes @ 0x38
  1415  000039                     	ds	3
  1416  00003C                     tblptru	equ	0xFF8
  1417                           tblptrh	equ	0xFF7
  1418                           tblptrl	equ	0xFF6
  1419                           tablat	equ	0xFF5
  1420                           postinc0	equ	0xFEE
  1421                           wreg	equ	0xFE8
  1422                           postdec1	equ	0xFE5
  1423                           fsr1l	equ	0xFE1
  1424                           
  1425                           ; 1 bytes @ 0x3B
  1426 ;;
  1427 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1428 ;;
  1429 ;; *************** function _main *****************
  1430 ;; Defined at:
  1431 ;;		line 103 in file "main.c"
  1432 ;; Parameters:    Size  Location     Type
  1433 ;;		None
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;		None
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  1    wreg      void 
  1438 ;; Registers used:
  1439 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1445 ;;      Params:         0       0       0       0       0       0       0
  1446 ;;      Locals:         0       0       0       0       0       0       0
  1447 ;;      Temps:          0       3       0       0       0       0       0
  1448 ;;      Totals:         0       3       0       0       0       0       0
  1449 ;;Total ram usage:        3 bytes
  1450 ;; Hardware stack levels required when called:    6
  1451 ;; This function calls:
  1452 ;;		_ConfigureOscillator
  1453 ;;		_InitApp
  1454 ;;		___awtoft
  1455 ;;		___ftdiv
  1456 ;;		___ftmul
  1457 ;;		___wmul
  1458 ;;		_conversionADMues
  1459 ;;		_enviarTrama
  1460 ;;		_enviarTramaSE
  1461 ;;		_ledestado
  1462 ;;		_sprintf
  1463 ;;		_strcmp
  1464 ;; This function is called by:
  1465 ;;		Startup code after reset
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469                           	psect	text0
  1470  000DD8                     __ptext0:
  1471                           	opt stack 0
  1472  000DD8                     _main:
  1473                           	opt stack 0
  1474  000DD8  FFFF               	dw	65535	; assembler added errata NOP
  1475                           
  1476                           ;main.c: 105: ConfigureOscillator();
  1477                           
  1478                           ;incstack = 0
  1479  000DDA  EC3B  F017         	call	_ConfigureOscillator	;wreg free
  1480                           
  1481                           ;main.c: 108: InitApp();
  1482  000DDE  EC72  F013         	call	_InitApp	;wreg free
  1483                           
  1484                           ;main.c: 111: enviarTrama(saludo);
  1485  000DE2  0EAB               	movlw	low _saludo
  1486  000DE4  6E22               	movwf	enviarTrama@datos,c
  1487  000DE6  0E7E               	movlw	high _saludo
  1488  000DE8  6E23               	movwf	enviarTrama@datos+1,c
  1489  000DEA  EC5B  F015         	call	_enviarTrama	;wreg free
  1490  000DEE                     l5108:
  1491  000DEE  FFFF               	dw	65535	; assembler added errata NOP
  1492                           
  1493                           ;main.c: 113: if (led == 1 && modoestado == 1) {
  1494  000DF0  0444               	decf	_led,w,c
  1495  000DF2  1045               	iorwf	_led+1,w,c
  1496  000DF4  A4D8               	btfss	status,2,c
  1497  000DF6  D00A               	goto	l5114
  1498  000DF8  0446               	decf	_modoestado,w,c
  1499  000DFA  1047               	iorwf	_modoestado+1,w,c
  1500  000DFC  A4D8               	btfss	status,2,c
  1501  000DFE  D006               	goto	l5114
  1502                           
  1503                           ;main.c: 114: ledestado(10);
  1504  000E00  0E00               	movlw	0
  1505  000E02  6E23               	movwf	ledestado@tiempoled+1,c
  1506  000E04  0E0A               	movlw	10
  1507  000E06  6E22               	movwf	ledestado@tiempoled,c
  1508  000E08  EC3C  F016         	call	_ledestado	;wreg free
  1509  000E0C                     l5114:
  1510  000E0C  FFFF               	dw	65535	; assembler added errata NOP
  1511                           
  1512                           ;main.c: 115: }
  1513                           ;main.c: 116: if (led == 1 && modoestado == 0) {
  1514  000E0E  0444               	decf	_led,w,c
  1515  000E10  1045               	iorwf	_led+1,w,c
  1516  000E12  A4D8               	btfss	status,2,c
  1517  000E14  D00A               	goto	l5120
  1518  000E16  5046               	movf	_modoestado,w,c
  1519  000E18  1047               	iorwf	_modoestado+1,w,c
  1520  000E1A  A4D8               	btfss	status,2,c
  1521  000E1C  D006               	goto	l5120
  1522                           
  1523                           ;main.c: 117: ledestado(5);
  1524  000E1E  0E00               	movlw	0
  1525  000E20  6E23               	movwf	ledestado@tiempoled+1,c
  1526  000E22  0E05               	movlw	5
  1527  000E24  6E22               	movwf	ledestado@tiempoled,c
  1528  000E26  EC3C  F016         	call	_ledestado	;wreg free
  1529  000E2A                     l5120:
  1530  000E2A  FFFF               	dw	65535	; assembler added errata NOP
  1531                           
  1532                           ;main.c: 118: }
  1533                           ;main.c: 119: if (enter == 1) {
  1534  000E2C  0440               	decf	_enter,w,c
  1535  000E2E  1041               	iorwf	_enter+1,w,c
  1536  000E30  A4D8               	btfss	status,2,c
  1537  000E32  D122               	goto	l5188
  1538                           
  1539                           ;main.c: 120: enviarTrama(comando);
  1540  000E34  0E46               	movlw	low _comando
  1541  000E36  6E22               	movwf	enviarTrama@datos,c
  1542  000E38  0E01               	movlw	high _comando
  1543  000E3A  6E23               	movwf	enviarTrama@datos+1,c
  1544  000E3C  EC5B  F015         	call	_enviarTrama	;wreg free
  1545                           
  1546                           ;main.c: 121: if (tama == 10) {
  1547  000E40  0E0A               	movlw	10
  1548  000E42  1854               	xorwf	_tama,w,c
  1549  000E44  1055               	iorwf	_tama+1,w,c
  1550  000E46  A4D8               	btfss	status,2,c
  1551  000E48  D01D               	goto	l5128
  1552                           
  1553                           ;main.c: 122: NORMAL = strcmp(comando, MODONORMAL);
  1554  000E4A  0E46               	movlw	low _comando
  1555  000E4C  6E22               	movwf	strcmp@s1,c
  1556  000E4E  0E01               	movlw	high _comando
  1557  000E50  6E23               	movwf	strcmp@s1+1,c
  1558  000E52  0E68               	movlw	low _MODONORMAL
  1559  000E54  6E24               	movwf	strcmp@s2,c
  1560  000E56  0E7F               	movlw	high _MODONORMAL
  1561  000E58  6E25               	movwf	strcmp@s2+1,c
  1562  000E5A  EC69  F016         	call	_strcmp	;wreg free
  1563  000E5E  C022  F03C         	movff	?_strcmp,_NORMAL
  1564  000E62  C023  F03D         	movff	?_strcmp+1,_NORMAL+1
  1565                           
  1566                           ;main.c: 123: RAPIDO = strcmp(comando, MODORAPIDO);
  1567  000E66  0E46               	movlw	low _comando
  1568  000E68  6E22               	movwf	strcmp@s1,c
  1569  000E6A  0E01               	movlw	high _comando
  1570  000E6C  6E23               	movwf	strcmp@s1+1,c
  1571  000E6E  0E73               	movlw	low _MODORAPIDO
  1572  000E70  6E24               	movwf	strcmp@s2,c
  1573  000E72  0E7F               	movlw	high _MODORAPIDO
  1574  000E74  6E25               	movwf	strcmp@s2+1,c
  1575  000E76  EC69  F016         	call	_strcmp	;wreg free
  1576  000E7A  C022  F057         	movff	?_strcmp,_RAPIDO
  1577  000E7E  C023  F058         	movff	?_strcmp+1,_RAPIDO+1
  1578                           
  1579                           ;main.c: 125: } else if (tama == 9) {
  1580  000E82  D07E               	goto	l5142
  1581  000E84                     l5128:
  1582  000E84  FFFF               	dw	65535	; assembler added errata NOP
  1583  000E86  0E09               	movlw	9
  1584  000E88  1854               	xorwf	_tama,w,c
  1585  000E8A  1055               	iorwf	_tama+1,w,c
  1586  000E8C  A4D8               	btfss	status,2,c
  1587  000E8E  D02B               	goto	l5132
  1588                           
  1589                           ;main.c: 126: muestreo1 = strcmp(comando, MUESTREO1);
  1590  000E90  0E46               	movlw	low _comando
  1591  000E92  6E22               	movwf	strcmp@s1,c
  1592  000E94  0E01               	movlw	high _comando
  1593  000E96  6E23               	movwf	strcmp@s1+1,c
  1594  000E98  0E7E               	movlw	low _MUESTREO1
  1595  000E9A  6E24               	movwf	strcmp@s2,c
  1596  000E9C  0E7F               	movlw	high _MUESTREO1
  1597  000E9E  6E25               	movwf	strcmp@s2+1,c
  1598  000EA0  EC69  F016         	call	_strcmp	;wreg free
  1599  000EA4  C022  F0EA         	movff	?_strcmp,_muestreo1
  1600  000EA8  C023  F0EB         	movff	?_strcmp+1,_muestreo1+1
  1601                           
  1602                           ;main.c: 127: muestreo2 = strcmp(comando, MUESTREO2);
  1603  000EAC  0E46               	movlw	low _comando
  1604  000EAE  6E22               	movwf	strcmp@s1,c
  1605  000EB0  0E01               	movlw	high _comando
  1606  000EB2  6E23               	movwf	strcmp@s1+1,c
  1607  000EB4  0E88               	movlw	low _MUESTREO2
  1608  000EB6  6E24               	movwf	strcmp@s2,c
  1609  000EB8  0E7F               	movlw	high _MUESTREO2
  1610  000EBA  6E25               	movwf	strcmp@s2+1,c
  1611  000EBC  EC69  F016         	call	_strcmp	;wreg free
  1612  000EC0  C022  F0EC         	movff	?_strcmp,_muestreo2
  1613  000EC4  C023  F0ED         	movff	?_strcmp+1,_muestreo2+1
  1614                           
  1615                           ;main.c: 128: muestreo3 = strcmp(comando, MUESTREO3);
  1616  000EC8  0E46               	movlw	low _comando
  1617  000ECA  6E22               	movwf	strcmp@s1,c
  1618  000ECC  0E01               	movlw	high _comando
  1619  000ECE  6E23               	movwf	strcmp@s1+1,c
  1620  000ED0  0E92               	movlw	low _MUESTREO3
  1621  000ED2  6E24               	movwf	strcmp@s2,c
  1622  000ED4  0E7F               	movlw	high _MUESTREO3
  1623  000ED6  6E25               	movwf	strcmp@s2+1,c
  1624  000ED8  EC69  F016         	call	_strcmp	;wreg free
  1625  000EDC  C022  F0EE         	movff	?_strcmp,_muestreo3
  1626  000EE0  C023  F0EF         	movff	?_strcmp+1,_muestreo3+1
  1627                           
  1628                           ;main.c: 130: } else if (tama == 14) {
  1629  000EE4  D04D               	goto	l5142
  1630  000EE6                     l5132:
  1631  000EE6  FFFF               	dw	65535	; assembler added errata NOP
  1632  000EE8  0E0E               	movlw	14
  1633  000EEA  1854               	xorwf	_tama,w,c
  1634  000EEC  1055               	iorwf	_tama+1,w,c
  1635  000EEE  A4D8               	btfss	status,2,c
  1636  000EF0  D02B               	goto	l5136
  1637                           
  1638                           ;main.c: 131: visualizacion1 = strcmp(comando, VISUALIZACION1);
  1639  000EF2  0E46               	movlw	low _comando
  1640  000EF4  6E22               	movwf	strcmp@s1,c
  1641  000EF6  0E01               	movlw	high _comando
  1642  000EF8  6E23               	movwf	strcmp@s1+1,c
  1643  000EFA  0E3B               	movlw	low _VISUALIZACION1
  1644  000EFC  6E24               	movwf	strcmp@s2,c
  1645  000EFE  0E7F               	movlw	high _VISUALIZACION1
  1646  000F00  6E25               	movwf	strcmp@s2+1,c
  1647  000F02  EC69  F016         	call	_strcmp	;wreg free
  1648  000F06  C022  F0F0         	movff	?_strcmp,_visualizacion1
  1649  000F0A  C023  F0F1         	movff	?_strcmp+1,_visualizacion1+1
  1650                           
  1651                           ;main.c: 132: visualizacion2 = strcmp(comando, VISUALIZACION2);
  1652  000F0E  0E46               	movlw	low _comando
  1653  000F10  6E22               	movwf	strcmp@s1,c
  1654  000F12  0E01               	movlw	high _comando
  1655  000F14  6E23               	movwf	strcmp@s1+1,c
  1656  000F16  0E4A               	movlw	low _VISUALIZACION2
  1657  000F18  6E24               	movwf	strcmp@s2,c
  1658  000F1A  0E7F               	movlw	high _VISUALIZACION2
  1659  000F1C  6E25               	movwf	strcmp@s2+1,c
  1660  000F1E  EC69  F016         	call	_strcmp	;wreg free
  1661  000F22  C022  F0F2         	movff	?_strcmp,_visualizacion2
  1662  000F26  C023  F0F3         	movff	?_strcmp+1,_visualizacion2+1
  1663                           
  1664                           ;main.c: 133: visualizacion3 = strcmp(comando, VISUALIZACION3);
  1665  000F2A  0E46               	movlw	low _comando
  1666  000F2C  6E22               	movwf	strcmp@s1,c
  1667  000F2E  0E01               	movlw	high _comando
  1668  000F30  6E23               	movwf	strcmp@s1+1,c
  1669  000F32  0E59               	movlw	low _VISUALIZACION3
  1670  000F34  6E24               	movwf	strcmp@s2,c
  1671  000F36  0E7F               	movlw	high _VISUALIZACION3
  1672  000F38  6E25               	movwf	strcmp@s2+1,c
  1673  000F3A  EC69  F016         	call	_strcmp	;wreg free
  1674  000F3E  C022  F0F4         	movff	?_strcmp,_visualizacion3
  1675  000F42  C023  F0F5         	movff	?_strcmp+1,_visualizacion3+1
  1676                           
  1677                           ;main.c: 135: } else if (tama == 4) {
  1678  000F46  D01C               	goto	l5142
  1679  000F48                     l5136:
  1680  000F48  FFFF               	dw	65535	; assembler added errata NOP
  1681  000F4A  0E04               	movlw	4
  1682  000F4C  1854               	xorwf	_tama,w,c
  1683  000F4E  1055               	iorwf	_tama+1,w,c
  1684  000F50  A4D8               	btfss	status,2,c
  1685  000F52  D00F               	goto	l5140
  1686                           
  1687                           ;main.c: 136: info = strcmp(comando, INFO);
  1688  000F54  0E46               	movlw	low _comando
  1689  000F56  6E22               	movwf	strcmp@s1,c
  1690  000F58  0E01               	movlw	high _comando
  1691  000F5A  6E23               	movwf	strcmp@s1+1,c
  1692  000F5C  0E9C               	movlw	low _INFO
  1693  000F5E  6E24               	movwf	strcmp@s2,c
  1694  000F60  0E7F               	movlw	high _INFO
  1695  000F62  6E25               	movwf	strcmp@s2+1,c
  1696  000F64  EC69  F016         	call	_strcmp	;wreg free
  1697  000F68  C022  F0E8         	movff	?_strcmp,_info
  1698  000F6C  C023  F0E9         	movff	?_strcmp+1,_info+1
  1699                           
  1700                           ;main.c: 137: }
  1701  000F70  D007               	goto	l5142
  1702  000F72                     l5140:
  1703  000F72  FFFF               	dw	65535	; assembler added errata NOP
  1704                           
  1705                           ;main.c: 138: else {
  1706                           ;main.c: 139: enviarTrama(noreconocido);
  1707  000F74  0E12               	movlw	low _noreconocido
  1708  000F76  6E22               	movwf	enviarTrama@datos,c
  1709  000F78  0E7F               	movlw	high _noreconocido
  1710  000F7A  6E23               	movwf	enviarTrama@datos+1,c
  1711  000F7C  EC5B  F015         	call	_enviarTrama	;wreg free
  1712  000F80                     l5142:
  1713  000F80  FFFF               	dw	65535	; assembler added errata NOP
  1714                           
  1715                           ;main.c: 140: }
  1716                           ;main.c: 141: if (NORMAL != 0 && RAPIDO != 0) {
  1717  000F82  503C               	movf	_NORMAL,w,c
  1718  000F84  103D               	iorwf	_NORMAL+1,w,c
  1719  000F86  B4D8               	btfsc	status,2,c
  1720  000F88  D012               	goto	l5152
  1721  000F8A  5057               	movf	_RAPIDO,w,c
  1722  000F8C  1058               	iorwf	_RAPIDO+1,w,c
  1723  000F8E  B4D8               	btfsc	status,2,c
  1724  000F90  D00E               	goto	l5152
  1725                           
  1726                           ;main.c: 142: enviarTrama(noreconocido);
  1727  000F92  0E12               	movlw	low _noreconocido
  1728  000F94  6E22               	movwf	enviarTrama@datos,c
  1729  000F96  0E7F               	movlw	high _noreconocido
  1730  000F98  6E23               	movwf	enviarTrama@datos+1,c
  1731  000F9A  EC5B  F015         	call	_enviarTrama	;wreg free
  1732                           
  1733                           ;main.c: 143: NORMAL = 0 ;
  1734  000F9E  0E00               	movlw	0
  1735  000FA0  6E3D               	movwf	_NORMAL+1,c
  1736  000FA2  0E00               	movlw	0
  1737  000FA4  6E3C               	movwf	_NORMAL,c
  1738                           
  1739                           ;main.c: 144: RAPIDO = 1 ;
  1740  000FA6  0E00               	movlw	0
  1741  000FA8  6E58               	movwf	_RAPIDO+1,c
  1742  000FAA  0E01               	movlw	1
  1743  000FAC  6E57               	movwf	_RAPIDO,c
  1744  000FAE                     l5152:
  1745  000FAE  FFFF               	dw	65535	; assembler added errata NOP
  1746                           
  1747                           ;main.c: 145: }
  1748                           ;main.c: 146: for (i = 0; i < 25; i++) {
  1749  000FB0  0E00               	movlw	0
  1750  000FB2  6E43               	movwf	_i+1,c
  1751  000FB4  0E00               	movlw	0
  1752  000FB6  6E42               	movwf	_i,c
  1753  000FB8                     l5154:
  1754  000FB8  FFFF               	dw	65535	; assembler added errata NOP
  1755  000FBA  BE43               	btfsc	_i+1,7,c
  1756  000FBC  D006               	goto	l5158
  1757  000FBE  5043               	movf	_i+1,w,c
  1758  000FC0  E110               	bnz	l5164
  1759  000FC2  0E19               	movlw	25
  1760  000FC4  5C42               	subwf	_i,w,c
  1761  000FC6  B0D8               	btfsc	status,0,c
  1762  000FC8  D00C               	goto	l5164
  1763  000FCA                     l5158:
  1764  000FCA  FFFF               	dw	65535	; assembler added errata NOP
  1765                           
  1766                           ;main.c: 147: comando[i] = '\0';
  1767  000FCC  0E46               	movlw	low _comando
  1768  000FCE  2442               	addwf	_i,w,c
  1769  000FD0  6ED9               	movwf	fsr2l,c
  1770  000FD2  0E01               	movlw	high _comando
  1771  000FD4  2043               	addwfc	_i+1,w,c
  1772  000FD6  6EDA               	movwf	fsr2h,c
  1773  000FD8  0E00               	movlw	0
  1774  000FDA  6EDF               	movwf	indf2,c
  1775  000FDC  4A42               	infsnz	_i,f,c
  1776  000FDE  2A43               	incf	_i+1,f,c
  1777  000FE0  D7EB               	goto	l5154
  1778  000FE2                     l5164:
  1779  000FE2  FFFF               	dw	65535	; assembler added errata NOP
  1780                           
  1781                           ;main.c: 148: }
  1782                           ;main.c: 149: if (muestreo1 == 0) {
  1783  000FE4  0100               	movlb	0	; () banked
  1784  000FE6  51EA               	movf	_muestreo1& (0+255),w,b
  1785  000FE8  0100               	movlb	0	; () banked
  1786  000FEA  11EB               	iorwf	(_muestreo1+1)& (0+255),w,b
  1787  000FEC  A4D8               	btfss	status,2,c
  1788  000FEE  D004               	goto	l5168
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;main.c: 150: tmues = 10;
  1792  000FF0  0E00               	movlw	0
  1793  000FF2  6E5A               	movwf	_tmues+1,c
  1794  000FF4  0E0A               	movlw	10
  1795  000FF6  6E59               	movwf	_tmues,c
  1796  000FF8                     l5168:
  1797  000FF8  FFFF               	dw	65535	; assembler added errata NOP
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;main.c: 151: }
  1801                           ;main.c: 152: if (muestreo2 == 0) {
  1802  000FFA  0100               	movlb	0	; () banked
  1803  000FFC  51EC               	movf	_muestreo2& (0+255),w,b
  1804  000FFE  0100               	movlb	0	; () banked
  1805  001000  11ED               	iorwf	(_muestreo2+1)& (0+255),w,b
  1806  001002  A4D8               	btfss	status,2,c
  1807  001004  D004               	goto	l5172
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;main.c: 153: tmues = 12;
  1811  001006  0E00               	movlw	0
  1812  001008  6E5A               	movwf	_tmues+1,c
  1813  00100A  0E0C               	movlw	12
  1814  00100C  6E59               	movwf	_tmues,c
  1815  00100E                     l5172:
  1816  00100E  FFFF               	dw	65535	; assembler added errata NOP
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;main.c: 154: }
  1820                           ;main.c: 155: if (muestreo3 == 0) {
  1821  001010  0100               	movlb	0	; () banked
  1822  001012  51EE               	movf	_muestreo3& (0+255),w,b
  1823  001014  0100               	movlb	0	; () banked
  1824  001016  11EF               	iorwf	(_muestreo3+1)& (0+255),w,b
  1825  001018  A4D8               	btfss	status,2,c
  1826  00101A  D004               	goto	l5176
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;main.c: 156: tmues = 20;
  1830  00101C  0E00               	movlw	0
  1831  00101E  6E5A               	movwf	_tmues+1,c
  1832  001020  0E14               	movlw	20
  1833  001022  6E59               	movwf	_tmues,c
  1834  001024                     l5176:
  1835  001024  FFFF               	dw	65535	; assembler added errata NOP
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;main.c: 157: }
  1839                           ;main.c: 158: if (visualizacion1 == 0) {
  1840  001026  0100               	movlb	0	; () banked
  1841  001028  51F0               	movf	_visualizacion1& (0+255),w,b
  1842  00102A  0100               	movlb	0	; () banked
  1843  00102C  11F1               	iorwf	(_visualizacion1+1)& (0+255),w,b
  1844  00102E  A4D8               	btfss	status,2,c
  1845  001030  D004               	goto	l5180
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;main.c: 159: tvis = 5;
  1849  001032  0E00               	movlw	0
  1850  001034  6E5C               	movwf	_tvis+1,c
  1851  001036  0E05               	movlw	5
  1852  001038  6E5B               	movwf	_tvis,c
  1853  00103A                     l5180:
  1854  00103A  FFFF               	dw	65535	; assembler added errata NOP
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;main.c: 160: }
  1858                           ;main.c: 161: if (visualizacion2 == 0) {
  1859  00103C  0100               	movlb	0	; () banked
  1860  00103E  51F2               	movf	_visualizacion2& (0+255),w,b
  1861  001040  0100               	movlb	0	; () banked
  1862  001042  11F3               	iorwf	(_visualizacion2+1)& (0+255),w,b
  1863  001044  A4D8               	btfss	status,2,c
  1864  001046  D004               	goto	l5184
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;main.c: 162: tvis = 10;
  1868  001048  0E00               	movlw	0
  1869  00104A  6E5C               	movwf	_tvis+1,c
  1870  00104C  0E0A               	movlw	10
  1871  00104E  6E5B               	movwf	_tvis,c
  1872  001050                     l5184:
  1873  001050  FFFF               	dw	65535	; assembler added errata NOP
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;main.c: 163: }
  1877                           ;main.c: 164: if (visualizacion3 == 0) {
  1878  001052  0100               	movlb	0	; () banked
  1879  001054  51F4               	movf	_visualizacion3& (0+255),w,b
  1880  001056  0100               	movlb	0	; () banked
  1881  001058  11F5               	iorwf	(_visualizacion3+1)& (0+255),w,b
  1882  00105A  A4D8               	btfss	status,2,c
  1883  00105C  D004               	goto	l229
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;main.c: 165: tvis = 20;
  1887  00105E  0E00               	movlw	0
  1888  001060  6E5C               	movwf	_tvis+1,c
  1889  001062  0E14               	movlw	20
  1890  001064  6E5B               	movwf	_tvis,c
  1891  001066                     l229:
  1892  001066  FFFF               	dw	65535	; assembler added errata NOP
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 166: }
  1896                           ;main.c: 167: enter = 0;
  1897  001068  0E00               	movlw	0
  1898  00106A  6E41               	movwf	_enter+1,c
  1899  00106C  0E00               	movlw	0
  1900  00106E  6E40               	movwf	_enter,c
  1901                           
  1902                           ;main.c: 169: tama = 0 ;
  1903  001070  0E00               	movlw	0
  1904  001072  6E55               	movwf	_tama+1,c
  1905  001074  0E00               	movlw	0
  1906  001076  6E54               	movwf	_tama,c
  1907  001078                     l5188:
  1908  001078  FFFF               	dw	65535	; assembler added errata NOP
  1909                           
  1910                           ;main.c: 170: }
  1911                           ;main.c: 171: if (info == 0) {
  1912  00107A  0100               	movlb	0	; () banked
  1913  00107C  51E8               	movf	_info& (0+255),w,b
  1914  00107E  0100               	movlb	0	; () banked
  1915  001080  11E9               	iorwf	(_info+1)& (0+255),w,b
  1916  001082  A4D8               	btfss	status,2,c
  1917  001084  D07E               	goto	l5216
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;main.c: 172: __nop();
  1921  001086  F000               	nop	
  1922                           
  1923                           ;main.c: 175: sprintf(salida, "%d", modoestado);
  1924  001088  0E28               	movlw	low _salida
  1925  00108A  0100               	movlb	0	; () banked
  1926  00108C  6FA5               	movwf	sprintf@sp& (0+255),b
  1927  00108E  0E01               	movlw	high _salida
  1928  001090  0100               	movlb	0	; () banked
  1929  001092  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  1930  001094  0EFC               	movlw	low STR_1
  1931  001096  0100               	movlb	0	; () banked
  1932  001098  6FA7               	movwf	sprintf@f& (0+255),b
  1933  00109A  0E7F               	movlw	high STR_1
  1934  00109C  0100               	movlb	0	; () banked
  1935  00109E  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  1936  0010A0  C046  F0A9         	movff	_modoestado,?_sprintf+4
  1937  0010A4  C047  F0AA         	movff	_modoestado+1,?_sprintf+5
  1938  0010A8  EC57  F000         	call	_sprintf	;wreg free
  1939                           
  1940                           ;main.c: 176: enviarTrama(salida);
  1941  0010AC  0E28               	movlw	low _salida
  1942  0010AE  6E22               	movwf	enviarTrama@datos,c
  1943  0010B0  0E01               	movlw	high _salida
  1944  0010B2  6E23               	movwf	enviarTrama@datos+1,c
  1945  0010B4  EC5B  F015         	call	_enviarTrama	;wreg free
  1946                           
  1947                           ;main.c: 177: if (modoestado == 1) {
  1948  0010B8  0446               	decf	_modoestado,w,c
  1949  0010BA  1047               	iorwf	_modoestado+1,w,c
  1950  0010BC  A4D8               	btfss	status,2,c
  1951  0010BE  D044               	goto	l5210
  1952                           
  1953                           ;main.c: 178: enviarTrama(estadoactualnormal);
  1954  0010C0  0ECA               	movlw	low _estadoactualnormal
  1955  0010C2  6E22               	movwf	enviarTrama@datos,c
  1956  0010C4  0E7E               	movlw	high _estadoactualnormal
  1957  0010C6  6E23               	movwf	enviarTrama@datos+1,c
  1958  0010C8  EC5B  F015         	call	_enviarTrama	;wreg free
  1959                           
  1960                           ;main.c: 179: sprintf(salida, "muestreo %d ms.", tmues);
  1961  0010CC  0E28               	movlw	low _salida
  1962  0010CE  0100               	movlb	0	; () banked
  1963  0010D0  6FA5               	movwf	sprintf@sp& (0+255),b
  1964  0010D2  0E01               	movlw	high _salida
  1965  0010D4  0100               	movlb	0	; () banked
  1966  0010D6  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  1967  0010D8  0EEC               	movlw	low STR_2
  1968  0010DA  0100               	movlb	0	; () banked
  1969  0010DC  6FA7               	movwf	sprintf@f& (0+255),b
  1970  0010DE  0E7F               	movlw	high STR_2
  1971  0010E0  0100               	movlb	0	; () banked
  1972  0010E2  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  1973  0010E4  C059  F0A9         	movff	_tmues,?_sprintf+4
  1974  0010E8  C05A  F0AA         	movff	_tmues+1,?_sprintf+5
  1975  0010EC  EC57  F000         	call	_sprintf	;wreg free
  1976                           
  1977                           ;main.c: 180: enviarTrama(salida);
  1978  0010F0  0E28               	movlw	low _salida
  1979  0010F2  6E22               	movwf	enviarTrama@datos,c
  1980  0010F4  0E01               	movlw	high _salida
  1981  0010F6  6E23               	movwf	enviarTrama@datos+1,c
  1982  0010F8  EC5B  F015         	call	_enviarTrama	;wreg free
  1983                           
  1984                           ;main.c: 181: tvisualizacion = tvis * 100;
  1985  0010FC  C05B  F030         	movff	_tvis,___wmul@multiplier
  1986  001100  C05C  F031         	movff	_tvis+1,___wmul@multiplier+1
  1987  001104  0E00               	movlw	0
  1988  001106  6E33               	movwf	___wmul@multiplicand+1,c
  1989  001108  0E64               	movlw	100
  1990  00110A  6E32               	movwf	___wmul@multiplicand,c
  1991  00110C  ECF4  F016         	call	___wmul	;wreg free
  1992  001110  C030  F0E0         	movff	?___wmul,_tvisualizacion
  1993  001114  C031  F0E1         	movff	?___wmul+1,_tvisualizacion+1
  1994                           
  1995                           ;main.c: 182: sprintf(salida, "visualizacion %d ms.", tvisualizacion);
  1996  001118  0E28               	movlw	low _salida
  1997  00111A  0100               	movlb	0	; () banked
  1998  00111C  6FA5               	movwf	sprintf@sp& (0+255),b
  1999  00111E  0E01               	movlw	high _salida
  2000  001120  0100               	movlb	0	; () banked
  2001  001122  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  2002  001124  0EB6               	movlw	low STR_3
  2003  001126  0100               	movlb	0	; () banked
  2004  001128  6FA7               	movwf	sprintf@f& (0+255),b
  2005  00112A  0E7F               	movlw	high STR_3
  2006  00112C  0100               	movlb	0	; () banked
  2007  00112E  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  2008  001130  C0E0  F0A9         	movff	_tvisualizacion,?_sprintf+4
  2009  001134  C0E1  F0AA         	movff	_tvisualizacion+1,?_sprintf+5
  2010  001138  EC57  F000         	call	_sprintf	;wreg free
  2011                           
  2012                           ;main.c: 183: enviarTrama(salida);
  2013  00113C  0E28               	movlw	low _salida
  2014  00113E  6E22               	movwf	enviarTrama@datos,c
  2015  001140  0E01               	movlw	high _salida
  2016  001142  6E23               	movwf	enviarTrama@datos+1,c
  2017  001144  EC5B  F015         	call	_enviarTrama	;wreg free
  2018  001148                     l5210:
  2019  001148  FFFF               	dw	65535	; assembler added errata NOP
  2020                           
  2021                           ;main.c: 184: }
  2022                           ;main.c: 185: if (modoestado == 0) {
  2023  00114A  5046               	movf	_modoestado,w,c
  2024  00114C  1047               	iorwf	_modoestado+1,w,c
  2025  00114E  A4D8               	btfss	status,2,c
  2026  001150  D012               	goto	l5214
  2027                           
  2028                           ;main.c: 186: enviarTrama(estadoactualrapido);
  2029  001152  0EE2               	movlw	low _estadoactualrapido
  2030  001154  6E22               	movwf	enviarTrama@datos,c
  2031  001156  0E7E               	movlw	high _estadoactualrapido
  2032  001158  6E23               	movwf	enviarTrama@datos+1,c
  2033  00115A  EC5B  F015         	call	_enviarTrama	;wreg free
  2034                           
  2035                           ;main.c: 187: enviarTrama(muestreonoaplica);
  2036  00115E  0E28               	movlw	low _muestreonoaplica
  2037  001160  6E22               	movwf	enviarTrama@datos,c
  2038  001162  0E7F               	movlw	high _muestreonoaplica
  2039  001164  6E23               	movwf	enviarTrama@datos+1,c
  2040  001166  EC5B  F015         	call	_enviarTrama	;wreg free
  2041                           
  2042                           ;main.c: 188: enviarTrama(visualizacionnoaplica);
  2043  00116A  0EFA               	movlw	low _visualizacionnoaplica
  2044  00116C  6E22               	movwf	enviarTrama@datos,c
  2045  00116E  0E7E               	movlw	high _visualizacionnoaplica
  2046  001170  6E23               	movwf	enviarTrama@datos+1,c
  2047  001172  EC5B  F015         	call	_enviarTrama	;wreg free
  2048  001176                     l5214:
  2049  001176  FFFF               	dw	65535	; assembler added errata NOP
  2050                           
  2051                           ;main.c: 189: }
  2052                           ;main.c: 190: info = 1;
  2053  001178  0E00               	movlw	0
  2054  00117A  0100               	movlb	0	; () banked
  2055  00117C  6FE9               	movwf	(_info+1)& (0+255),b
  2056  00117E  0E01               	movlw	1
  2057  001180  6FE8               	movwf	_info& (0+255),b
  2058  001182                     l5216:
  2059  001182  FFFF               	dw	65535	; assembler added errata NOP
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;main.c: 191: }
  2063                           ;main.c: 192: if (NORMAL == 0) {
  2064  001184  503C               	movf	_NORMAL,w,c
  2065  001186  103D               	iorwf	_NORMAL+1,w,c
  2066  001188  A4D8               	btfss	status,2,c
  2067  00118A  D171               	goto	l5316
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;main.c: 193: modoestado = 1;
  2071  00118C  0E00               	movlw	0
  2072  00118E  6E47               	movwf	_modoestado+1,c
  2073  001190  0E01               	movlw	1
  2074  001192  6E46               	movwf	_modoestado,c
  2075                           
  2076                           ; BSR set to: 0
  2077                           ;main.c: 194: if (muestreo == 1) {
  2078  001194  0448               	decf	_muestreo,w,c
  2079  001196  1049               	iorwf	_muestreo+1,w,c
  2080  001198  A4D8               	btfss	status,2,c
  2081  00119A  D034               	goto	l5232
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;main.c: 195: e++;
  2085  00119C  0100               	movlb	0	; () banked
  2086  00119E  4BC8               	infsnz	_e& (0+255),f,b
  2087  0011A0  2BC9               	incf	(_e+1)& (0+255),f,b
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;main.c: 196: if (e == tmues) {
  2091  0011A2  5059               	movf	_tmues,w,c
  2092  0011A4  0100               	movlb	0	; () banked
  2093  0011A6  19C8               	xorwf	_e& (0+255),w,b
  2094  0011A8  E128               	bnz	l5230
  2095  0011AA  505A               	movf	_tmues+1,w,c
  2096  0011AC  0100               	movlb	0	; () banked
  2097  0011AE  19C9               	xorwf	(_e+1)& (0+255),w,b
  2098  0011B0  A4D8               	btfss	status,2,c
  2099  0011B2  D023               	goto	l5230
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;main.c: 197: promedio1 = conversionADMues(0);
  2103  0011B4  0E00               	movlw	0
  2104  0011B6  6E31               	movwf	conversionADMues@canal+1,c
  2105  0011B8  0E00               	movlw	0
  2106  0011BA  6E30               	movwf	conversionADMues@canal,c
  2107  0011BC  EC20  F00F         	call	_conversionADMues	;wreg free
  2108  0011C0  C030  F0D6         	movff	?_conversionADMues,_promedio1
  2109  0011C4  C031  F0D7         	movff	?_conversionADMues+1,_promedio1+1
  2110                           
  2111                           ;main.c: 198: promedio2 = conversionADMues(1);
  2112  0011C8  0E00               	movlw	0
  2113  0011CA  6E31               	movwf	conversionADMues@canal+1,c
  2114  0011CC  0E01               	movlw	1
  2115  0011CE  6E30               	movwf	conversionADMues@canal,c
  2116  0011D0  EC20  F00F         	call	_conversionADMues	;wreg free
  2117  0011D4  C030  F0D8         	movff	?_conversionADMues,_promedio2
  2118  0011D8  C031  F0D9         	movff	?_conversionADMues+1,_promedio2+1
  2119                           
  2120                           ;main.c: 199: promedio3 = conversionADMues(2);
  2121  0011DC  0E00               	movlw	0
  2122  0011DE  6E31               	movwf	conversionADMues@canal+1,c
  2123  0011E0  0E02               	movlw	2
  2124  0011E2  6E30               	movwf	conversionADMues@canal,c
  2125  0011E4  EC20  F00F         	call	_conversionADMues	;wreg free
  2126  0011E8  C030  F0DA         	movff	?_conversionADMues,_promedio3
  2127  0011EC  C031  F0DB         	movff	?_conversionADMues+1,_promedio3+1
  2128                           
  2129                           ;main.c: 200: e = 0;
  2130  0011F0  0E00               	movlw	0
  2131  0011F2  0100               	movlb	0	; () banked
  2132  0011F4  6FC9               	movwf	(_e+1)& (0+255),b
  2133  0011F6  0E00               	movlw	0
  2134  0011F8  6FC8               	movwf	_e& (0+255),b
  2135  0011FA                     l5230:
  2136  0011FA  FFFF               	dw	65535	; assembler added errata NOP
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;main.c: 201: }
  2140                           ;main.c: 202: muestreo = 0;
  2141  0011FC  0E00               	movlw	0
  2142  0011FE  6E49               	movwf	_muestreo+1,c
  2143  001200  0E00               	movlw	0
  2144  001202  6E48               	movwf	_muestreo,c
  2145  001204                     l5232:
  2146  001204  FFFF               	dw	65535	; assembler added errata NOP
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;main.c: 203: }
  2150                           ;main.c: 204: if (visualizacion == 1) {
  2151  001206  0100               	movlb	0	; () banked
  2152  001208  05E4               	decf	_visualizacion& (0+255),w,b
  2153  00120A  0100               	movlb	0	; () banked
  2154  00120C  11E5               	iorwf	(_visualizacion+1)& (0+255),w,b
  2155  00120E  A4D8               	btfss	status,2,c
  2156  001210  D12E               	goto	l5316
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;main.c: 205: a++;
  2160  001212  0100               	movlb	0	; () banked
  2161  001214  4BC2               	infsnz	_a& (0+255),f,b
  2162  001216  2BC3               	incf	(_a+1)& (0+255),f,b
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;main.c: 206: if (a == tvis) {
  2166  001218  505B               	movf	_tvis,w,c
  2167  00121A  0100               	movlb	0	; () banked
  2168  00121C  19C2               	xorwf	_a& (0+255),w,b
  2169  00121E  E104               	bnz	u6391
  2170  001220  505C               	movf	_tvis+1,w,c
  2171  001222  0100               	movlb	0	; () banked
  2172  001224  19C3               	xorwf	(_a+1)& (0+255),w,b
  2173  001226  A4D8               	btfss	status,2,c
  2174  001228                     u6391:
  2175  001228  D101               	goto	l5302
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;main.c: 207: promediovolt1 = promedio1 * 5.0 / 1024;
  2179  00122A  0E00               	movlw	0
  2180  00122C  6E39               	movwf	___ftmul@f2,c
  2181  00122E  0EA0               	movlw	160
  2182  001230  6E3A               	movwf	___ftmul@f2+1,c
  2183  001232  0E40               	movlw	64
  2184  001234  6E3B               	movwf	___ftmul@f2+2,c
  2185  001236  C0D6  F02A         	movff	_promedio1,___awtoft@c
  2186  00123A  C0D7  F02B         	movff	_promedio1+1,___awtoft@c+1
  2187  00123E  ECBC  F016         	call	___awtoft	;wreg free
  2188  001242  C02A  F036         	movff	?___awtoft,___ftmul@f1
  2189  001246  C02B  F037         	movff	?___awtoft+1,___ftmul@f1+1
  2190  00124A  C02C  F038         	movff	?___awtoft+2,___ftmul@f1+2
  2191  00124E  ECCD  F011         	call	___ftmul	;wreg free
  2192  001252  C036  F089         	movff	?___ftmul,___ftdiv@f1
  2193  001256  C037  F08A         	movff	?___ftmul+1,___ftdiv@f1+1
  2194  00125A  C038  F08B         	movff	?___ftmul+2,___ftdiv@f1+2
  2195  00125E  0E00               	movlw	0
  2196  001260  0100               	movlb	0	; () banked
  2197  001262  6F8C               	movwf	___ftdiv@f2& (0+255),b
  2198  001264  0E80               	movlw	128
  2199  001266  0100               	movlb	0	; () banked
  2200  001268  6F8D               	movwf	(___ftdiv@f2+1)& (0+255),b
  2201  00126A  0E44               	movlw	68
  2202  00126C  0100               	movlb	0	; () banked
  2203  00126E  6F8E               	movwf	(___ftdiv@f2+2)& (0+255),b
  2204  001270  ECF6  F00F         	call	___ftdiv	;wreg free
  2205  001274  C089  F0BF         	movff	?___ftdiv,_promediovolt1
  2206  001278  C08A  F0C0         	movff	?___ftdiv+1,_promediovolt1+1
  2207  00127C  C08B  F0C1         	movff	?___ftdiv+2,_promediovolt1+2
  2208                           
  2209                           ;main.c: 208: sprintf(salida, "canal 1: %f V  ", promediovolt1);
  2210  001280  0E28               	movlw	low _salida
  2211  001282  0100               	movlb	0	; () banked
  2212  001284  6FA5               	movwf	sprintf@sp& (0+255),b
  2213  001286  0E01               	movlw	high _salida
  2214  001288  0100               	movlb	0	; () banked
  2215  00128A  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  2216  00128C  0EDC               	movlw	low STR_4
  2217  00128E  0100               	movlb	0	; () banked
  2218  001290  6FA7               	movwf	sprintf@f& (0+255),b
  2219  001292  0E7F               	movlw	high STR_4
  2220  001294  0100               	movlb	0	; () banked
  2221  001296  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  2222  001298  C0BF  F0A9         	movff	_promediovolt1,?_sprintf+4
  2223  00129C  C0C0  F0AA         	movff	_promediovolt1+1,?_sprintf+5
  2224  0012A0  C0C1  F0AB         	movff	_promediovolt1+2,?_sprintf+6
  2225  0012A4  EC57  F000         	call	_sprintf	;wreg free
  2226                           
  2227                           ;main.c: 209: enviarTramaSE(salida);
  2228  0012A8  0E28               	movlw	low _salida
  2229  0012AA  6E22               	movwf	enviarTramaSE@datos,c
  2230  0012AC  0E01               	movlw	high _salida
  2231  0012AE  6E23               	movwf	enviarTramaSE@datos+1,c
  2232  0012B0  ECDB  F016         	call	_enviarTramaSE	;wreg free
  2233                           
  2234                           ;main.c: 210: for (i = 0; i < 10; i++) {
  2235  0012B4  0E00               	movlw	0
  2236  0012B6  6E43               	movwf	_i+1,c
  2237  0012B8  0E00               	movlw	0
  2238  0012BA  6E42               	movwf	_i,c
  2239  0012BC                     l5246:
  2240  0012BC  FFFF               	dw	65535	; assembler added errata NOP
  2241  0012BE  BE43               	btfsc	_i+1,7,c
  2242  0012C0  D006               	goto	l5250
  2243  0012C2  5043               	movf	_i+1,w,c
  2244  0012C4  E13F               	bnz	l5260
  2245  0012C6  0E0A               	movlw	10
  2246  0012C8  5C42               	subwf	_i,w,c
  2247  0012CA  B0D8               	btfsc	status,0,c
  2248  0012CC  D03B               	goto	l5260
  2249  0012CE                     l5250:
  2250  0012CE  FFFF               	dw	65535	; assembler added errata NOP
  2251                           
  2252                           ;main.c: 211: if ((promedio2 & binnum << (9 - i)) == 0) {
  2253  0012D0  5042               	movf	_i,w,c
  2254  0012D2  0800               	sublw	0
  2255  0012D4  0100               	movlb	0	; () banked
  2256  0012D6  6FB2               	movwf	??_main& (0+255),b
  2257  0012D8  0E09               	movlw	9
  2258  0012DA  0100               	movlb	0	; () banked
  2259  0012DC  27B2               	addwf	??_main& (0+255),f,b
  2260  0012DE  C0E6  F0B3         	movff	_binnum,??_main+1
  2261  0012E2  C0E7  F0B4         	movff	_binnum+1,??_main+2
  2262  0012E6  0100               	movlb	0	; () banked
  2263  0012E8  2BB2               	incf	??_main& (0+255),f,b
  2264  0012EA  D005               	goto	u6414
  2265  0012EC                     u6415:
  2266  0012EC  FFFF               	dw	65535	; assembler added errata NOP
  2267  0012EE  90D8               	bcf	status,0,c
  2268  0012F0  0100               	movlb	0	; () banked
  2269  0012F2  37B3               	rlcf	(??_main+1)& (0+255),f,b
  2270  0012F4  37B4               	rlcf	(??_main+2)& (0+255),f,b
  2271  0012F6                     u6414:
  2272  0012F6  FFFF               	dw	65535	; assembler added errata NOP
  2273  0012F8  0100               	movlb	0	; () banked
  2274  0012FA  2FB2               	decfsz	??_main& (0+255),f,b
  2275  0012FC  D7F7               	goto	u6415
  2276  0012FE  0100               	movlb	0	; () banked
  2277  001300  51D8               	movf	_promedio2& (0+255),w,b
  2278  001302  0100               	movlb	0	; () banked
  2279  001304  17B3               	andwf	(??_main+1)& (0+255),f,b
  2280  001306  0100               	movlb	0	; () banked
  2281  001308  51D9               	movf	(_promedio2+1)& (0+255),w,b
  2282  00130A  0100               	movlb	0	; () banked
  2283  00130C  17B4               	andwf	(??_main+2)& (0+255),f,b
  2284  00130E  0100               	movlb	0	; () banked
  2285  001310  51B3               	movf	(??_main+1)& (0+255),w,b
  2286  001312  0100               	movlb	0	; () banked
  2287  001314  11B4               	iorwf	(??_main+2)& (0+255),w,b
  2288  001316  A4D8               	btfss	status,2,c
  2289  001318  D008               	goto	l5254
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;main.c: 212: bin[i] = '0';
  2293  00131A  0EB5               	movlw	low _bin
  2294  00131C  2442               	addwf	_i,w,c
  2295  00131E  6ED9               	movwf	fsr2l,c
  2296  001320  0E00               	movlw	high _bin
  2297  001322  2043               	addwfc	_i+1,w,c
  2298  001324  6EDA               	movwf	fsr2h,c
  2299  001326  0E30               	movlw	48
  2300  001328  D008               	goto	L1
  2301  00132A                     l5254:
  2302  00132A  FFFF               	dw	65535	; assembler added errata NOP
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;main.c: 214: bin[i] = '1';
  2306  00132C  0EB5               	movlw	low _bin
  2307  00132E  2442               	addwf	_i,w,c
  2308  001330  6ED9               	movwf	fsr2l,c
  2309  001332  0E00               	movlw	high _bin
  2310  001334  2043               	addwfc	_i+1,w,c
  2311  001336  6EDA               	movwf	fsr2h,c
  2312  001338  0E31               	movlw	49
  2313  00133A                     L1:
  2314  00133A  FFFF               	dw	65535	; assembler added errata NOP
  2315  00133C  6EDF               	movwf	indf2,c
  2316                           
  2317                           ; BSR set to: 0
  2318                           
  2319                           ; BSR set to: 0
  2320  00133E  4A42               	infsnz	_i,f,c
  2321  001340  2A43               	incf	_i+1,f,c
  2322  001342  D7BC               	goto	l5246
  2323  001344                     l5260:
  2324  001344  FFFF               	dw	65535	; assembler added errata NOP
  2325                           
  2326                           ;main.c: 215: }
  2327                           ;main.c: 216: }
  2328                           ;main.c: 217: for (i = 0; i < 10; i++) {
  2329  001346  0E00               	movlw	0
  2330  001348  6E43               	movwf	_i+1,c
  2331  00134A  0E00               	movlw	0
  2332  00134C  6E42               	movwf	_i,c
  2333  00134E                     l5262:
  2334  00134E  FFFF               	dw	65535	; assembler added errata NOP
  2335  001350  BE43               	btfsc	_i+1,7,c
  2336  001352  D006               	goto	l5266
  2337  001354  5043               	movf	_i+1,w,c
  2338  001356  E115               	bnz	l5272
  2339  001358  0E0A               	movlw	10
  2340  00135A  5C42               	subwf	_i,w,c
  2341  00135C  B0D8               	btfsc	status,0,c
  2342  00135E  D011               	goto	l5272
  2343  001360                     l5266:
  2344  001360  FFFF               	dw	65535	; assembler added errata NOP
  2345                           
  2346                           ;main.c: 218: TXREG = canal2[i];
  2347  001362  0EA1               	movlw	low _canal2
  2348  001364  2442               	addwf	_i,w,c
  2349  001366  6EF6               	movwf	tblptrl,c
  2350  001368  0E7E               	movlw	high _canal2
  2351  00136A  2043               	addwfc	_i+1,w,c
  2352  00136C  6EF7               	movwf	tblptrh,c
  2353  00136E                     	if	0	;There are less than 3 active tblptr bytes
  2354  00136E                     	endif
  2355  00136E  0008               	tblrd		*
  2356  001370  FFFF               	dw	65535	; errata NOP
  2357  001372  CFF5 FFAD          	movff	tablat,4013	;volatile
  2358  001376                     l244:
  2359  001376  FFFF               	dw	65535	; assembler added errata NOP
  2360  001378  A2AC               	btfss	4012,1,c	;volatile
  2361  00137A  D7FD               	goto	l244
  2362  00137C  4A42               	infsnz	_i,f,c
  2363  00137E  2A43               	incf	_i+1,f,c
  2364  001380  D7E6               	goto	l5262
  2365  001382                     l5272:
  2366  001382  FFFF               	dw	65535	; assembler added errata NOP
  2367                           
  2368                           ;main.c: 220: }
  2369                           ;main.c: 221: for (i = 0; i < 10; i++) {
  2370  001384  0E00               	movlw	0
  2371  001386  6E43               	movwf	_i+1,c
  2372  001388  0E00               	movlw	0
  2373  00138A  6E42               	movwf	_i,c
  2374  00138C                     l5274:
  2375  00138C  FFFF               	dw	65535	; assembler added errata NOP
  2376  00138E  BE43               	btfsc	_i+1,7,c
  2377  001390  D006               	goto	l5278
  2378  001392  5043               	movf	_i+1,w,c
  2379  001394  E113               	bnz	l5284
  2380  001396  0E0A               	movlw	10
  2381  001398  5C42               	subwf	_i,w,c
  2382  00139A  B0D8               	btfsc	status,0,c
  2383  00139C  D00F               	goto	l5284
  2384  00139E                     l5278:
  2385  00139E  FFFF               	dw	65535	; assembler added errata NOP
  2386                           
  2387                           ;main.c: 222: TXREG = bin[i];
  2388  0013A0  0EB5               	movlw	low _bin
  2389  0013A2  2442               	addwf	_i,w,c
  2390  0013A4  6ED9               	movwf	fsr2l,c
  2391  0013A6  0E00               	movlw	high _bin
  2392  0013A8  2043               	addwfc	_i+1,w,c
  2393  0013AA  6EDA               	movwf	fsr2h,c
  2394  0013AC  50DF               	movf	indf2,w,c
  2395  0013AE  6EAD               	movwf	4013,c	;volatile
  2396  0013B0                     l249:
  2397  0013B0  FFFF               	dw	65535	; assembler added errata NOP
  2398  0013B2  A2AC               	btfss	4012,1,c	;volatile
  2399  0013B4  D7FD               	goto	l249
  2400  0013B6  4A42               	infsnz	_i,f,c
  2401  0013B8  2A43               	incf	_i+1,f,c
  2402  0013BA  D7E8               	goto	l5274
  2403  0013BC                     l5284:
  2404  0013BC  FFFF               	dw	65535	; assembler added errata NOP
  2405                           
  2406                           ;main.c: 224: }
  2407                           ;main.c: 225: for (i = 0; i < 10; i++) {
  2408  0013BE  0E00               	movlw	0
  2409  0013C0  6E43               	movwf	_i+1,c
  2410  0013C2  0E00               	movlw	0
  2411  0013C4  6E42               	movwf	_i,c
  2412  0013C6                     l5286:
  2413  0013C6  FFFF               	dw	65535	; assembler added errata NOP
  2414  0013C8  BE43               	btfsc	_i+1,7,c
  2415  0013CA  D006               	goto	l5290
  2416  0013CC  5043               	movf	_i+1,w,c
  2417  0013CE  E110               	bnz	l5296
  2418  0013D0  0E0A               	movlw	10
  2419  0013D2  5C42               	subwf	_i,w,c
  2420  0013D4  B0D8               	btfsc	status,0,c
  2421  0013D6  D00C               	goto	l5296
  2422  0013D8                     l5290:
  2423  0013D8  FFFF               	dw	65535	; assembler added errata NOP
  2424                           
  2425                           ;main.c: 226: bin[i] = 0;
  2426  0013DA  0EB5               	movlw	low _bin
  2427  0013DC  2442               	addwf	_i,w,c
  2428  0013DE  6ED9               	movwf	fsr2l,c
  2429  0013E0  0E00               	movlw	high _bin
  2430  0013E2  2043               	addwfc	_i+1,w,c
  2431  0013E4  6EDA               	movwf	fsr2h,c
  2432  0013E6  0E00               	movlw	0
  2433  0013E8  6EDF               	movwf	indf2,c
  2434  0013EA  4A42               	infsnz	_i,f,c
  2435  0013EC  2A43               	incf	_i+1,f,c
  2436  0013EE  D7EB               	goto	l5286
  2437  0013F0                     l5296:
  2438  0013F0  FFFF               	dw	65535	; assembler added errata NOP
  2439                           
  2440                           ;main.c: 227: }
  2441                           ;main.c: 228: sprintf(salida, "  canal 3: 0x%04X.\n\r", promedio3);
  2442  0013F2  0E28               	movlw	low _salida
  2443  0013F4  0100               	movlb	0	; () banked
  2444  0013F6  6FA5               	movwf	sprintf@sp& (0+255),b
  2445  0013F8  0E01               	movlw	high _salida
  2446  0013FA  0100               	movlb	0	; () banked
  2447  0013FC  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  2448  0013FE  0EA1               	movlw	low STR_5
  2449  001400  0100               	movlb	0	; () banked
  2450  001402  6FA7               	movwf	sprintf@f& (0+255),b
  2451  001404  0E7F               	movlw	high STR_5
  2452  001406  0100               	movlb	0	; () banked
  2453  001408  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  2454  00140A  C0DA  F0A9         	movff	_promedio3,?_sprintf+4
  2455  00140E  C0DB  F0AA         	movff	_promedio3+1,?_sprintf+5
  2456  001412  EC57  F000         	call	_sprintf	;wreg free
  2457                           
  2458                           ;main.c: 229: enviarTramaSE(salida);
  2459  001416  0E28               	movlw	low _salida
  2460  001418  6E22               	movwf	enviarTramaSE@datos,c
  2461  00141A  0E01               	movlw	high _salida
  2462  00141C  6E23               	movwf	enviarTramaSE@datos+1,c
  2463  00141E  ECDB  F016         	call	_enviarTramaSE	;wreg free
  2464                           
  2465                           ;main.c: 230: a = 0;
  2466  001422  0E00               	movlw	0
  2467  001424  0100               	movlb	0	; () banked
  2468  001426  6FC3               	movwf	(_a+1)& (0+255),b
  2469  001428  0E00               	movlw	0
  2470  00142A  6FC2               	movwf	_a& (0+255),b
  2471  00142C                     l5302:
  2472  00142C  FFFF               	dw	65535	; assembler added errata NOP
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;main.c: 231: }
  2476                           ;main.c: 232: visualizacion = 0;
  2477  00142E  0E00               	movlw	0
  2478  001430  0100               	movlb	0	; () banked
  2479  001432  6FE5               	movwf	(_visualizacion+1)& (0+255),b
  2480  001434  0E00               	movlw	0
  2481  001436  6FE4               	movwf	_visualizacion& (0+255),b
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;main.c: 233: h0 = 0;
  2485  001438  0E00               	movlw	0
  2486  00143A  0100               	movlb	0	; () banked
  2487  00143C  6FCD               	movwf	(_h0+1)& (0+255),b
  2488  00143E  0E00               	movlw	0
  2489  001440  6FCC               	movwf	_h0& (0+255),b
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;main.c: 234: suma0 = 0;
  2493  001442  0E00               	movlw	0
  2494  001444  6E4F               	movwf	_suma0+1,c
  2495  001446  0E00               	movlw	0
  2496  001448  6E4E               	movwf	_suma0,c
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;main.c: 235: h1 = 0;
  2500  00144A  0E00               	movlw	0
  2501  00144C  0100               	movlb	0	; () banked
  2502  00144E  6FCF               	movwf	(_h1+1)& (0+255),b
  2503  001450  0E00               	movlw	0
  2504  001452  6FCE               	movwf	_h1& (0+255),b
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;main.c: 236: suma1 = 0;
  2508  001454  0E00               	movlw	0
  2509  001456  6E51               	movwf	_suma1+1,c
  2510  001458  0E00               	movlw	0
  2511  00145A  6E50               	movwf	_suma1,c
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;main.c: 237: h2 = 0;
  2515  00145C  0E00               	movlw	0
  2516  00145E  0100               	movlb	0	; () banked
  2517  001460  6FD1               	movwf	(_h2+1)& (0+255),b
  2518  001462  0E00               	movlw	0
  2519  001464  6FD0               	movwf	_h2& (0+255),b
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;main.c: 238: suma2 = 0;
  2523  001466  0E00               	movlw	0
  2524  001468  6E53               	movwf	_suma2+1,c
  2525  00146A  0E00               	movlw	0
  2526  00146C  6E52               	movwf	_suma2,c
  2527  00146E                     l5316:
  2528  00146E  FFFF               	dw	65535	; assembler added errata NOP
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;main.c: 239: }
  2532                           ;main.c: 240: }
  2533                           ;main.c: 241: if (RAPIDO == 0) {
  2534  001470  5057               	movf	_RAPIDO,w,c
  2535  001472  1058               	iorwf	_RAPIDO+1,w,c
  2536  001474  A4D8               	btfss	status,2,c
  2537  001476  D4BB               	goto	l5108
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;main.c: 242: modoestado = 0;
  2541  001478  0E00               	movlw	0
  2542  00147A  6E47               	movwf	_modoestado+1,c
  2543  00147C  0E00               	movlw	0
  2544  00147E  6E46               	movwf	_modoestado,c
  2545                           
  2546                           ;main.c: 243: ADCON0bits.CHS = 0b011;
  2547  001480  50C2               	movf	4034,w,c	;volatile
  2548  001482  0BC7               	andlw	-57
  2549  001484  0918               	iorlw	24
  2550  001486  6EC2               	movwf	4034,c	;volatile
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;main.c: 244: if (muestreo == 1) {
  2554  001488  0448               	decf	_muestreo,w,c
  2555  00148A  1049               	iorwf	_muestreo+1,w,c
  2556  00148C  A4D8               	btfss	status,2,c
  2557  00148E  D4AF               	goto	l5108
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;main.c: 245: ADCON0bits.GODONE = 1;
  2561  001490  84C2               	bsf	4034,2,c	;volatile
  2562  001492                     l5324:
  2563  001492  FFFF               	dw	65535	; assembler added errata NOP
  2564  001494  503E               	movf	_conversionadc,w,c
  2565  001496  103F               	iorwf	_conversionadc+1,w,c
  2566  001498  B4D8               	btfsc	status,2,c
  2567  00149A  D7FB               	goto	l5324
  2568                           
  2569                           ;main.c: 247: }
  2570                           ;main.c: 248: sprintf(salida, "%d", resultadoadc);
  2571  00149C  0E28               	movlw	low _salida
  2572  00149E  0100               	movlb	0	; () banked
  2573  0014A0  6FA5               	movwf	sprintf@sp& (0+255),b
  2574  0014A2  0E01               	movlw	high _salida
  2575  0014A4  0100               	movlb	0	; () banked
  2576  0014A6  6FA6               	movwf	(sprintf@sp+1)& (0+255),b
  2577  0014A8  0EFC               	movlw	low STR_1
  2578  0014AA  0100               	movlb	0	; () banked
  2579  0014AC  6FA7               	movwf	sprintf@f& (0+255),b
  2580  0014AE  0E7F               	movlw	high STR_1
  2581  0014B0  0100               	movlb	0	; () banked
  2582  0014B2  6FA8               	movwf	(sprintf@f+1)& (0+255),b
  2583  0014B4  C04C  F0A9         	movff	_resultadoadc,?_sprintf+4
  2584  0014B8  C04D  F0AA         	movff	_resultadoadc+1,?_sprintf+5
  2585  0014BC  EC57  F000         	call	_sprintf	;wreg free
  2586                           
  2587                           ;main.c: 249: enviarTrama(salida);
  2588  0014C0  0E28               	movlw	low _salida
  2589  0014C2  6E22               	movwf	enviarTrama@datos,c
  2590  0014C4  0E01               	movlw	high _salida
  2591  0014C6  6E23               	movwf	enviarTrama@datos+1,c
  2592  0014C8  EC5B  F015         	call	_enviarTrama	;wreg free
  2593                           
  2594                           ;main.c: 250: conversionadc = 0;
  2595  0014CC  0E00               	movlw	0
  2596  0014CE  6E3F               	movwf	_conversionadc+1,c
  2597  0014D0  0E00               	movlw	0
  2598  0014D2  6E3E               	movwf	_conversionadc,c
  2599                           
  2600                           ;main.c: 251: muestreo = 0;
  2601  0014D4  0E00               	movlw	0
  2602  0014D6  6E49               	movwf	_muestreo+1,c
  2603  0014D8  0E00               	movlw	0
  2604  0014DA  6E48               	movwf	_muestreo,c
  2605  0014DC  D488               	goto	l5108
  2606  0014DE                     __end_of_main:
  2607                           	opt stack 0
  2608                           tblptru	equ	0xFF8
  2609                           tblptrh	equ	0xFF7
  2610                           tblptrl	equ	0xFF6
  2611                           tablat	equ	0xFF5
  2612                           postinc0	equ	0xFEE
  2613                           wreg	equ	0xFE8
  2614                           postdec1	equ	0xFE5
  2615                           fsr1l	equ	0xFE1
  2616                           indf2	equ	0xFDF
  2617                           fsr2h	equ	0xFDA
  2618                           fsr2l	equ	0xFD9
  2619                           status	equ	0xFD8
  2620                           
  2621 ;; *************** function _strcmp *****************
  2622 ;; Defined at:
  2623 ;;		line 33 in file "/opt/microchip/xc8/v1.38/sources/common/strcmp.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;  s1              2   33[COMRAM] PTR const unsigned char 
  2626 ;;		 -> comando(25), 
  2627 ;;  s2              2   35[COMRAM] PTR const unsigned char 
  2628 ;;		 -> INFO(5), VISUALIZACION3(15), VISUALIZACION2(15), VISUALIZACION1(15), 
  2629 ;;		 -> MUESTREO3(10), MUESTREO2(10), MUESTREO1(10), MODORAPIDO(11), 
  2630 ;;		 -> MODONORMAL(11), 
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  r               1   38[COMRAM] char 
  2633 ;; Return value:  Size  Location     Type
  2634 ;;                  2   33[COMRAM] int 
  2635 ;; Registers used:
  2636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2637 ;; Tracked objects:
  2638 ;;		On entry : 0/0
  2639 ;;		On exit  : 0/0
  2640 ;;		Unchanged: 0/0
  2641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2642 ;;      Params:         4       0       0       0       0       0       0
  2643 ;;      Locals:         1       0       0       0       0       0       0
  2644 ;;      Temps:          1       0       0       0       0       0       0
  2645 ;;      Totals:         6       0       0       0       0       0       0
  2646 ;;Total ram usage:        6 bytes
  2647 ;; Hardware stack levels used:    1
  2648 ;; Hardware stack levels required when called:    2
  2649 ;; This function calls:
  2650 ;;		Nothing
  2651 ;; This function is called by:
  2652 ;;		_main
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           	psect	text1
  2657  002CD2                     __ptext1:
  2658                           	opt stack 0
  2659  002CD2                     _strcmp:
  2660                           	opt stack 0
  2661  002CD2  FFFF               	dw	65535	; assembler added errata NOP
  2662                           
  2663                           ;incstack = 0
  2664  002CD4  D005               	goto	l3310
  2665  002CD6                     l3308:
  2666  002CD6  FFFF               	dw	65535	; assembler added errata NOP
  2667  002CD8  4A22               	infsnz	strcmp@s1,f,c
  2668  002CDA  2A23               	incf	strcmp@s1+1,f,c
  2669  002CDC  4A24               	infsnz	strcmp@s2,f,c
  2670  002CDE  2A25               	incf	strcmp@s2+1,f,c
  2671  002CE0                     l3310:
  2672  002CE0  FFFF               	dw	65535	; assembler added errata NOP
  2673  002CE2  C022  FFD9         	movff	strcmp@s1,fsr2l
  2674  002CE6  C023  FFDA         	movff	strcmp@s1+1,fsr2h
  2675  002CEA  50DF               	movf	indf2,w,c
  2676  002CEC  6E26               	movwf	??_strcmp& (0+255),c
  2677  002CEE  C024  FFF6         	movff	strcmp@s2,tblptrl
  2678  002CF2  C025  FFF7         	movff	strcmp@s2+1,tblptrh
  2679  002CF6                     	if	0	;tblptru may be non-zero
  2680  002CF6                     	endif
  2681  002CF6                     	if	0	;tblptru may be non-zero
  2682  002CF6                     	endif
  2683  002CF6  0008               	tblrd		*
  2684  002CF8  FFFF               	dw	65535	; errata NOP
  2685  002CFA  50F5               	movf	tablat,w,c
  2686  002CFC  0800               	sublw	0
  2687  002CFE  2426               	addwf	??_strcmp,w,c
  2688  002D00  6E27               	movwf	strcmp@r,c
  2689  002D02  5027               	movf	strcmp@r,w,c
  2690  002D04  A4D8               	btfss	status,2,c
  2691  002D06  D007               	goto	l3314
  2692  002D08  C022  FFD9         	movff	strcmp@s1,fsr2l
  2693  002D0C  C023  FFDA         	movff	strcmp@s1+1,fsr2h
  2694  002D10  50DF               	movf	indf2,w,c
  2695  002D12  A4D8               	btfss	status,2,c
  2696  002D14  D7E0               	goto	l3308
  2697  002D16                     l3314:
  2698  002D16  FFFF               	dw	65535	; assembler added errata NOP
  2699  002D18  5027               	movf	strcmp@r,w,c
  2700  002D1A  6E22               	movwf	?_strcmp,c
  2701  002D1C  6A23               	clrf	?_strcmp+1,c
  2702  002D1E  BE22               	btfsc	?_strcmp,7,c
  2703  002D20  0623               	decf	?_strcmp+1,f,c
  2704  002D22  0012               	return		;funcret
  2705  002D24  FFFF               	dw	65535	; errata NOP
  2706  002D26                     __end_of_strcmp:
  2707                           	opt stack 0
  2708                           tblptru	equ	0xFF8
  2709                           tblptrh	equ	0xFF7
  2710                           tblptrl	equ	0xFF6
  2711                           tablat	equ	0xFF5
  2712                           postinc0	equ	0xFEE
  2713                           wreg	equ	0xFE8
  2714                           postdec1	equ	0xFE5
  2715                           fsr1l	equ	0xFE1
  2716                           indf2	equ	0xFDF
  2717                           fsr2h	equ	0xFDA
  2718                           fsr2l	equ	0xFD9
  2719                           status	equ	0xFD8
  2720                           
  2721 ;; *************** function _sprintf *****************
  2722 ;; Defined at:
  2723 ;;		line 492 in file "/opt/microchip/xc8/v1.38/sources/common/doprnt.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;  sp              2   37[BANK0 ] PTR unsigned char 
  2726 ;;		 -> salida(30), 
  2727 ;;  f               2   39[BANK0 ] PTR const unsigned char 
  2728 ;;		 -> STR_6(3), STR_5(21), STR_4(16), STR_3(21), 
  2729 ;;		 -> STR_2(16), STR_1(3), 
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;  idx             1    3[BANK1 ] unsigned char 
  2732 ;;  val             4   16[BANK1 ] unsigned long 
  2733 ;;  tmpval          4    8[BANK1 ] struct .
  2734 ;;  fval            3   22[BANK1 ] struct .
  2735 ;;  cp              3    0        PTR const unsigned char 
  2736 ;;  flag            2   20[BANK1 ] unsigned short 
  2737 ;;  exp             2   14[BANK1 ] int 
  2738 ;;  width           2   12[BANK1 ] int 
  2739 ;;  prec            2    6[BANK1 ] int 
  2740 ;;  ap              2    4[BANK1 ] PTR void [1]
  2741 ;;		 -> ?_sprintf(2), 
  2742 ;;  len             2    0        unsigned int 
  2743 ;;  c               1   25[BANK1 ] char 
  2744 ;;  d               1    0        unsigned char 
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  2   37[BANK0 ] int 
  2747 ;; Registers used:
  2748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2754 ;;      Params:         0       7       0       0       0       0       0
  2755 ;;      Locals:         0       0      26       0       0       0       0
  2756 ;;      Temps:          0       6       0       0       0       0       0
  2757 ;;      Totals:         0      13      26       0       0       0       0
  2758 ;;Total ram usage:       39 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    5
  2761 ;; This function calls:
  2762 ;;		___awdiv
  2763 ;;		___ftadd
  2764 ;;		___ftge
  2765 ;;		___ftmul
  2766 ;;		___ftneg
  2767 ;;		___ftsub
  2768 ;;		___fttol
  2769 ;;		___lldiv
  2770 ;;		___llmod
  2771 ;;		___lltoft
  2772 ;;		___wmul
  2773 ;;		__div_to_l_
  2774 ;;		__tdiv_to_l_
  2775 ;;		_fround
  2776 ;;		_isdigit
  2777 ;;		_scale
  2778 ;; This function is called by:
  2779 ;;		_main
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           	psect	text2
  2784  0000AE                     __ptext2:
  2785                           	opt stack 0
  2786  0000AE                     _sprintf:
  2787                           	opt stack 0
  2788  0000AE  FFFF               	dw	65535	; assembler added errata NOP
  2789                           
  2790                           ;doprnt.c: 494: va_list ap;
  2791                           ;doprnt.c: 499: signed char c;
  2792                           ;doprnt.c: 501: int width;
  2793                           ;doprnt.c: 504: int prec;
  2794                           ;doprnt.c: 508: unsigned short flag;
  2795                           ;doprnt.c: 515: char d;
  2796                           ;doprnt.c: 516: double fval;
  2797                           ;doprnt.c: 517: int exp;
  2798                           ;doprnt.c: 523: union {
  2799                           ;doprnt.c: 524: unsigned long vd;
  2800                           ;doprnt.c: 525: double integ;
  2801                           ;doprnt.c: 526: } tmpval;
  2802                           ;doprnt.c: 528: unsigned long val;
  2803                           ;doprnt.c: 529: unsigned len;
  2804                           ;doprnt.c: 530: const char * cp;
  2805                           ;doprnt.c: 533: *ap = __va_start();
  2806                           
  2807                           ;incstack = 0
  2808  0000B0  0EA9               	movlw	low (?_sprintf+4)
  2809  0000B2  0101               	movlb	1	; () banked
  2810  0000B4  6F63               	movwf	sprintf@ap& (0+255),b
  2811  0000B6  0E00               	movlw	high (?_sprintf+4)
  2812  0000B8  0101               	movlb	1	; () banked
  2813  0000BA  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  2814                           
  2815                           ;doprnt.c: 536: while(c = *f++) {
  2816  0000BC  EFD2  F006         	goto	l4952
  2817  0000C0                     l4634:
  2818  0000C0  FFFF               	dw	65535	; assembler added errata NOP
  2819                           
  2820                           ; BSR set to: 1
  2821                           ;doprnt.c: 538: if(c != '%')
  2822  0000C2  0E25               	movlw	37
  2823  0000C4  0101               	movlb	1	; () banked
  2824  0000C6  1978               	xorwf	sprintf@c& (0+255),w,b
  2825  0000C8  B4D8               	btfsc	status,2,c
  2826  0000CA  D00B               	goto	l4640
  2827                           
  2828                           ; BSR set to: 1
  2829                           ;doprnt.c: 540: {
  2830                           ;doprnt.c: 541: ((*sp++ = (c)));
  2831  0000CC  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  2832  0000D0  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  2833  0000D4  C178  FFDF         	movff	sprintf@c,indf2
  2834                           
  2835                           ; BSR set to: 1
  2836  0000D8  0100               	movlb	0	; () banked
  2837  0000DA  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  2838  0000DC  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  2839                           
  2840                           ;doprnt.c: 542: continue;
  2841  0000DE  EFD2  F006         	goto	l4952
  2842  0000E2                     l4640:
  2843  0000E2  FFFF               	dw	65535	; assembler added errata NOP
  2844                           
  2845                           ;doprnt.c: 543: }
  2846                           ;doprnt.c: 546: width = 0;
  2847  0000E4  0E00               	movlw	0
  2848  0000E6  0101               	movlb	1	; () banked
  2849  0000E8  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  2850  0000EA  0E00               	movlw	0
  2851  0000EC  6F6B               	movwf	sprintf@width& (0+255),b
  2852                           
  2853                           ;doprnt.c: 548: flag = 0;
  2854  0000EE  0E00               	movlw	0
  2855  0000F0  0101               	movlb	1	; () banked
  2856  0000F2  6F74               	movwf	(sprintf@flag+1)& (0+255),b
  2857  0000F4  0E00               	movlw	0
  2858  0000F6  6F73               	movwf	sprintf@flag& (0+255),b
  2859                           
  2860                           ; BSR set to: 1
  2861                           ;doprnt.c: 551: switch(*f) {
  2862                           
  2863                           ;doprnt.c: 550: for(;;) {
  2864  0000F8  D006               	goto	l4646
  2865  0000FA                     l4642:
  2866  0000FA  FFFF               	dw	65535	; assembler added errata NOP
  2867                           
  2868                           ;doprnt.c: 580: flag |= 0x04;
  2869  0000FC  0101               	movlb	1	; () banked
  2870  0000FE  8573               	bsf	sprintf@flag& (0+255),2,b
  2871                           
  2872                           ;doprnt.c: 581: f++;
  2873  000100  0100               	movlb	0	; () banked
  2874  000102  4BA7               	infsnz	sprintf@f& (0+255),f,b
  2875  000104  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  2876  000106                     l4646:
  2877  000106  FFFF               	dw	65535	; assembler added errata NOP
  2878  000108  C0A7  FFF6         	movff	sprintf@f,tblptrl
  2879  00010C  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  2880  000110                     	if	0	;tblptru may be non-zero
  2881  000110                     	endif
  2882  000110                     	if	0	;tblptru may be non-zero
  2883  000110                     	endif
  2884  000110  0008               	tblrd		*
  2885  000112  FFFF               	dw	65535	; errata NOP
  2886  000114  50F5               	movf	tablat,w,c
  2887                           
  2888                           ; Switch size 1, requested type "space"
  2889                           ; Number of cases is 1, Range of values is 48 to 48
  2890                           ; switch strategies available:
  2891                           ; Name         Instructions Cycles
  2892                           ; simple_byte            4     3 (average)
  2893                           ;	Chosen strategy is simple_byte
  2894  000116  0A30               	xorlw	48	; case 48
  2895  000118  B4D8               	btfsc	status,2,c
  2896  00011A  D7EF               	goto	l4642
  2897                           
  2898                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2899                           
  2900                           ;doprnt.c: 586: }
  2901                           
  2902                           ;doprnt.c: 585: break;
  2903  00011C  C0A7  FFF6         	movff	sprintf@f,tblptrl
  2904  000120  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  2905  000124                     	if	0	;tblptru may be non-zero
  2906  000124                     	endif
  2907  000124                     	if	0	;tblptru may be non-zero
  2908  000124                     	endif
  2909  000124  0008               	tblrd		*
  2910  000126  FFFF               	dw	65535	; errata NOP
  2911  000128  50F5               	movf	tablat,w,c
  2912  00012A  EC1E  F017         	call	_isdigit
  2913  00012E  A0D8               	btfss	status,0,c
  2914  000130  D04B               	goto	l4666
  2915                           
  2916                           ;doprnt.c: 598: width = 0;
  2917  000132  0E00               	movlw	0
  2918  000134  0101               	movlb	1	; () banked
  2919  000136  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  2920  000138  0E00               	movlw	0
  2921  00013A  6F6B               	movwf	sprintf@width& (0+255),b
  2922  00013C                     l4652:
  2923  00013C  FFFF               	dw	65535	; assembler added errata NOP
  2924                           
  2925                           ;doprnt.c: 600: width *= 10;
  2926  00013E  C16B  F030         	movff	sprintf@width,___wmul@multiplier
  2927  000142  C16C  F031         	movff	sprintf@width+1,___wmul@multiplier+1
  2928  000146  0E00               	movlw	0
  2929  000148  6E33               	movwf	___wmul@multiplicand+1,c
  2930  00014A  0E0A               	movlw	10
  2931  00014C  6E32               	movwf	___wmul@multiplicand,c
  2932  00014E  ECF4  F016         	call	___wmul	;wreg free
  2933  000152  C030  F16B         	movff	?___wmul,sprintf@width
  2934  000156  C031  F16C         	movff	?___wmul+1,sprintf@width+1
  2935                           
  2936                           ;doprnt.c: 601: width += *f++ - '0';
  2937  00015A  0ED0               	movlw	208
  2938  00015C  0100               	movlb	0	; () banked
  2939  00015E  6FAC               	movwf	??_sprintf& (0+255),b
  2940  000160  0EFF               	movlw	255
  2941  000162  0100               	movlb	0	; () banked
  2942  000164  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  2943  000166  C0A7  FFF6         	movff	sprintf@f,tblptrl
  2944  00016A  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  2945  00016E                     	if	0	;tblptru may be non-zero
  2946  00016E                     	endif
  2947  00016E                     	if	0	;tblptru may be non-zero
  2948  00016E                     	endif
  2949  00016E  0008               	tblrd		*
  2950  000170  FFFF               	dw	65535	; errata NOP
  2951  000172  50F5               	movf	tablat,w,c
  2952  000174  0100               	movlb	0	; () banked
  2953  000176  6FAE               	movwf	(??_sprintf+2)& (0+255),b
  2954  000178  6BAF               	clrf	(??_sprintf+3)& (0+255),b
  2955  00017A  0100               	movlb	0	; () banked
  2956  00017C  51AC               	movf	??_sprintf& (0+255),w,b
  2957  00017E  0100               	movlb	0	; () banked
  2958  000180  27AE               	addwf	(??_sprintf+2)& (0+255),f,b
  2959  000182  0100               	movlb	0	; () banked
  2960  000184  51AD               	movf	(??_sprintf+1)& (0+255),w,b
  2961  000186  0100               	movlb	0	; () banked
  2962  000188  23AF               	addwfc	(??_sprintf+3)& (0+255),f,b
  2963  00018A  0100               	movlb	0	; () banked
  2964  00018C  51AE               	movf	(??_sprintf+2)& (0+255),w,b
  2965  00018E  0101               	movlb	1	; () banked
  2966  000190  276B               	addwf	sprintf@width& (0+255),f,b
  2967  000192  0100               	movlb	0	; () banked
  2968  000194  51AF               	movf	(??_sprintf+3)& (0+255),w,b
  2969  000196  0101               	movlb	1	; () banked
  2970  000198  236C               	addwfc	(sprintf@width+1)& (0+255),f,b
  2971                           
  2972                           ; BSR set to: 1
  2973  00019A  0100               	movlb	0	; () banked
  2974  00019C  4BA7               	infsnz	sprintf@f& (0+255),f,b
  2975  00019E  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2979  0001A0  C0A7  FFF6         	movff	sprintf@f,tblptrl
  2980  0001A4  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  2981  0001A8                     	if	0	;tblptru may be non-zero
  2982  0001A8                     	endif
  2983  0001A8                     	if	0	;tblptru may be non-zero
  2984  0001A8                     	endif
  2985  0001A8  0008               	tblrd		*
  2986  0001AA  FFFF               	dw	65535	; errata NOP
  2987  0001AC  50F5               	movf	tablat,w,c
  2988  0001AE  EC1E  F017         	call	_isdigit
  2989  0001B2  A0D8               	btfss	status,0,c
  2990  0001B4  D009               	goto	l4666
  2991  0001B6  D7C2               	goto	l4652
  2992  0001B8                     l4660:
  2993  0001B8  FFFF               	dw	65535	; assembler added errata NOP
  2994                           
  2995                           ;doprnt.c: 663: flag |= 0x400;
  2996  0001BA  0101               	movlb	1	; () banked
  2997  0001BC  8574               	bsf	(sprintf@flag+1)& (0+255),2,b
  2998                           
  2999                           ; BSR set to: 1
  3000                           ;doprnt.c: 698: case 'i':
  3001                           ;doprnt.c: 699: break;
  3002                           
  3003                           ; BSR set to: 1
  3004                           
  3005                           ;doprnt.c: 697: case 'd':
  3006                           
  3007                           ;doprnt.c: 664: break;
  3008  0001BE  D027               	goto	l4668
  3009  0001C0                     l4662:
  3010  0001C0  FFFF               	dw	65535	; assembler added errata NOP
  3011                           
  3012                           ; BSR set to: 1
  3013                           ;doprnt.c: 718: case 'x':
  3014                           ;doprnt.c: 721: flag |= 0x80;
  3015  0001C2  0101               	movlb	1	; () banked
  3016  0001C4  8F73               	bsf	sprintf@flag& (0+255),7,b
  3017                           
  3018                           ;doprnt.c: 723: break;
  3019  0001C6  D023               	goto	l4668
  3020  0001C8                     l4666:
  3021  0001C8  FFFF               	dw	65535	; assembler added errata NOP
  3022  0001CA  C0A7  FFF6         	movff	sprintf@f,tblptrl
  3023  0001CE  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  3024  0001D2  0100               	movlb	0	; () banked
  3025  0001D4  4BA7               	infsnz	sprintf@f& (0+255),f,b
  3026  0001D6  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  3027  0001D8                     	if	0	;tblptru may be non-zero
  3028  0001D8                     	endif
  3029  0001D8                     	if	0	;tblptru may be non-zero
  3030  0001D8                     	endif
  3031  0001D8  0008               	tblrd		*
  3032  0001DA  FFFF               	dw	65535	; errata NOP
  3033  0001DC  CFF5 F178          	movff	tablat,sprintf@c
  3034  0001E0  0101               	movlb	1	; () banked
  3035  0001E2  5178               	movf	sprintf@c& (0+255),w,b
  3036                           
  3037                           ; Switch size 1, requested type "space"
  3038                           ; Number of cases is 6, Range of values is 0 to 120
  3039                           ; switch strategies available:
  3040                           ; Name         Instructions Cycles
  3041                           ; simple_byte           19    10 (average)
  3042                           ;	Chosen strategy is simple_byte
  3043  0001E4  0A00               	xorlw	0	; case 0
  3044  0001E6  B4D8               	btfsc	status,2,c
  3045  0001E8  EFE3  F006         	goto	l4954
  3046  0001EC  0A58               	xorlw	88	; case 88
  3047  0001EE  B4D8               	btfsc	status,2,c
  3048  0001F0  D7E7               	goto	l4662
  3049  0001F2  0A3C               	xorlw	60	; case 100
  3050  0001F4  B4D8               	btfsc	status,2,c
  3051  0001F6  D00B               	goto	l4668
  3052  0001F8  0A02               	xorlw	2	; case 102
  3053  0001FA  B4D8               	btfsc	status,2,c
  3054  0001FC  D7DD               	goto	l4660
  3055  0001FE  0A0F               	xorlw	15	; case 105
  3056  000200  B4D8               	btfsc	status,2,c
  3057  000202  D005               	goto	l4668
  3058  000204  0A11               	xorlw	17	; case 120
  3059  000206  B4D8               	btfsc	status,2,c
  3060  000208  D7DB               	goto	l4662
  3061  00020A  EFD2  F006         	goto	l4952
  3062  00020E                     l4668:
  3063  00020E  FFFF               	dw	65535	; assembler added errata NOP
  3064                           
  3065                           ; BSR set to: 1
  3066                           ;doprnt.c: 825: if(flag & (0x700)) {
  3067  000210  0E07               	movlw	7
  3068  000212  0101               	movlb	1	; () banked
  3069  000214  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  3070  000216  B4D8               	btfsc	status,2,c
  3071  000218  D3D3               	goto	l429
  3072                           
  3073                           ; BSR set to: 1
  3074                           ;doprnt.c: 829: prec = 6;
  3075  00021A  0E00               	movlw	0
  3076  00021C  0101               	movlb	1	; () banked
  3077  00021E  6F66               	movwf	(sprintf@prec+1)& (0+255),b
  3078  000220  0E06               	movlw	6
  3079  000222  6F65               	movwf	sprintf@prec& (0+255),b
  3080                           
  3081                           ; BSR set to: 1
  3082                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3083  000224  C163  FFD9         	movff	sprintf@ap,fsr2l
  3084  000228  C164  FFDA         	movff	sprintf@ap+1,fsr2h
  3085  00022C  CFDE F175          	movff	postinc2,sprintf@fval
  3086  000230  CFDE F176          	movff	postinc2,sprintf@fval+1
  3087  000234  CFDD F177          	movff	postdec2,sprintf@fval+2
  3088                           
  3089                           ; BSR set to: 1
  3090  000238  0E03               	movlw	3
  3091  00023A  0101               	movlb	1	; () banked
  3092  00023C  2763               	addwf	sprintf@ap& (0+255),f,b
  3093  00023E  0E00               	movlw	0
  3094  000240  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3095                           
  3096                           ; BSR set to: 1
  3097                           ;doprnt.c: 831: if(fval < 0.0) {
  3098  000242  0101               	movlb	1	; () banked
  3099  000244  AF77               	btfss	(sprintf@fval+2)& (0+255),7,b
  3100  000246  D011               	goto	l4682
  3101                           
  3102                           ; BSR set to: 1
  3103                           ;doprnt.c: 832: fval = -fval;
  3104  000248  C175  F022         	movff	sprintf@fval,___ftneg@f1
  3105  00024C  C176  F023         	movff	sprintf@fval+1,___ftneg@f1+1
  3106  000250  C177  F024         	movff	sprintf@fval+2,___ftneg@f1+2
  3107  000254  EC09  F017         	call	___ftneg	;wreg free
  3108  000258  C022  F175         	movff	?___ftneg,sprintf@fval
  3109  00025C  C023  F176         	movff	?___ftneg+1,sprintf@fval+1
  3110  000260  C024  F177         	movff	?___ftneg+2,sprintf@fval+2
  3111                           
  3112                           ;doprnt.c: 833: flag |= 0x03;
  3113  000264  0E03               	movlw	3
  3114  000266  0101               	movlb	1	; () banked
  3115  000268  1373               	iorwf	sprintf@flag& (0+255),f,b
  3116  00026A                     l4682:
  3117  00026A  FFFF               	dw	65535	; assembler added errata NOP
  3118                           
  3119                           ; BSR set to: 1
  3120                           ;doprnt.c: 834: }
  3121                           ;doprnt.c: 835: exp = 0;
  3122  00026C  0E00               	movlw	0
  3123  00026E  0101               	movlb	1	; () banked
  3124  000270  6F6E               	movwf	(sprintf@exp+1)& (0+255),b
  3125  000272  0E00               	movlw	0
  3126  000274  6F6D               	movwf	sprintf@exp& (0+255),b
  3127                           
  3128                           ; BSR set to: 1
  3129                           ;doprnt.c: 836: if( fval!=0) {
  3130  000276  0101               	movlb	1	; () banked
  3131  000278  5175               	movf	sprintf@fval& (0+255),w,b
  3132  00027A  0101               	movlb	1	; () banked
  3133  00027C  1176               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3134  00027E  0101               	movlb	1	; () banked
  3135  000280  1177               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3136  000282  B4D8               	btfsc	status,2,c
  3137  000284  D095               	goto	l4710
  3138                           
  3139                           ; BSR set to: 1
  3140                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3141  000286  0E82               	movlw	130
  3142  000288  0100               	movlb	0	; () banked
  3143  00028A  6FAC               	movwf	??_sprintf& (0+255),b
  3144  00028C  0EFF               	movlw	255
  3145  00028E  0100               	movlb	0	; () banked
  3146  000290  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  3147  000292  C175  F0AE         	movff	sprintf@fval,??_sprintf+2
  3148  000296  C176  F0AF         	movff	sprintf@fval+1,??_sprintf+3
  3149  00029A  C177  F0B0         	movff	sprintf@fval+2,??_sprintf+4
  3150  00029E  C178  F0B1         	movff	sprintf@fval+3,??_sprintf+5
  3151  0002A2  0E10               	movlw	16
  3152  0002A4  D007               	goto	u5490
  3153  0002A6                     u5495:
  3154  0002A6  FFFF               	dw	65535	; assembler added errata NOP
  3155  0002A8  0100               	movlb	0	; () banked
  3156  0002AA  90D8               	bcf	status,0,c
  3157  0002AC  33B1               	rrcf	(??_sprintf+5)& (0+255),f,b
  3158  0002AE  33B0               	rrcf	(??_sprintf+4)& (0+255),f,b
  3159  0002B0  33AF               	rrcf	(??_sprintf+3)& (0+255),f,b
  3160  0002B2  33AE               	rrcf	(??_sprintf+2)& (0+255),f,b
  3161  0002B4                     u5490:
  3162  0002B4  FFFF               	dw	65535	; assembler added errata NOP
  3163  0002B6  2EE8               	decfsz	wreg,f,c
  3164  0002B8  D7F6               	goto	u5495
  3165  0002BA  0100               	movlb	0	; () banked
  3166  0002BC  51AE               	movf	(??_sprintf+2)& (0+255),w,b
  3167  0002BE  0100               	movlb	0	; () banked
  3168  0002C0  25AC               	addwf	??_sprintf& (0+255),w,b
  3169  0002C2  0101               	movlb	1	; () banked
  3170  0002C4  6F6D               	movwf	sprintf@exp& (0+255),b
  3171  0002C6  0E00               	movlw	0
  3172  0002C8  0100               	movlb	0	; () banked
  3173  0002CA  21AD               	addwfc	(??_sprintf+1)& (0+255),w,b
  3174  0002CC  0101               	movlb	1	; () banked
  3175  0002CE  6F6E               	movwf	(sprintf@exp+1)& (0+255),b
  3176                           
  3177                           ; BSR set to: 1
  3178                           ;doprnt.c: 838: exp--;
  3179  0002D0  0101               	movlb	1	; () banked
  3180  0002D2  076D               	decf	sprintf@exp& (0+255),f,b
  3181  0002D4  A0D8               	btfss	status,0,c
  3182  0002D6  076E               	decf	(sprintf@exp+1)& (0+255),f,b
  3183                           
  3184                           ; BSR set to: 1
  3185                           ;doprnt.c: 839: exp *= 3;
  3186  0002D8  C16D  F030         	movff	sprintf@exp,___wmul@multiplier
  3187  0002DC  C16E  F031         	movff	sprintf@exp+1,___wmul@multiplier+1
  3188  0002E0  0E00               	movlw	0
  3189  0002E2  6E33               	movwf	___wmul@multiplicand+1,c
  3190  0002E4  0E03               	movlw	3
  3191  0002E6  6E32               	movwf	___wmul@multiplicand,c
  3192  0002E8  ECF4  F016         	call	___wmul	;wreg free
  3193  0002EC  C030  F16D         	movff	?___wmul,sprintf@exp
  3194  0002F0  C031  F16E         	movff	?___wmul+1,sprintf@exp+1
  3195                           
  3196                           ;doprnt.c: 840: exp /= 10;
  3197  0002F4  C16D  F028         	movff	sprintf@exp,___awdiv@dividend
  3198  0002F8  C16E  F029         	movff	sprintf@exp+1,___awdiv@dividend+1
  3199  0002FC  0E00               	movlw	0
  3200  0002FE  6E2B               	movwf	___awdiv@divisor+1,c
  3201  000300  0E0A               	movlw	10
  3202  000302  6E2A               	movwf	___awdiv@divisor,c
  3203  000304  EC85  F014         	call	___awdiv	;wreg free
  3204  000308  C028  F16D         	movff	?___awdiv,sprintf@exp
  3205  00030C  C029  F16E         	movff	?___awdiv+1,sprintf@exp+1
  3206                           
  3207                           ;doprnt.c: 841: if(exp < 0)
  3208  000310  0101               	movlb	1	; () banked
  3209  000312  AF6E               	btfss	(sprintf@exp+1)& (0+255),7,b
  3210  000314  D004               	goto	l4698
  3211                           
  3212                           ; BSR set to: 1
  3213                           ;doprnt.c: 842: exp--;
  3214  000316  0101               	movlb	1	; () banked
  3215  000318  076D               	decf	sprintf@exp& (0+255),f,b
  3216  00031A  A0D8               	btfss	status,0,c
  3217  00031C  076E               	decf	(sprintf@exp+1)& (0+255),f,b
  3218  00031E                     l4698:
  3219  00031E  FFFF               	dw	65535	; assembler added errata NOP
  3220                           
  3221                           ; BSR set to: 1
  3222                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3223  000320  0101               	movlb	1	; () banked
  3224  000322  516D               	movf	sprintf@exp& (0+255),w,b
  3225  000324  0800               	sublw	0
  3226  000326  EC6F  F00A         	call	_scale
  3227  00032A  C089  F167         	movff	?_scale,sprintf@tmpval
  3228  00032E  C08A  F168         	movff	?_scale+1,sprintf@tmpval+1
  3229  000332  C08B  F169         	movff	?_scale+2,sprintf@tmpval+2
  3230                           
  3231                           ;doprnt.c: 847: tmpval.integ *= fval;
  3232  000336  C167  F036         	movff	sprintf@tmpval,___ftmul@f1
  3233  00033A  C168  F037         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3234  00033E  C169  F038         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3235  000342  C175  F039         	movff	sprintf@fval,___ftmul@f2
  3236  000346  C176  F03A         	movff	sprintf@fval+1,___ftmul@f2+1
  3237  00034A  C177  F03B         	movff	sprintf@fval+2,___ftmul@f2+2
  3238  00034E  ECCD  F011         	call	___ftmul	;wreg free
  3239  000352  C036  F167         	movff	?___ftmul,sprintf@tmpval
  3240  000356  C037  F168         	movff	?___ftmul+1,sprintf@tmpval+1
  3241  00035A  C038  F169         	movff	?___ftmul+2,sprintf@tmpval+2
  3242                           
  3243                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3244  00035E  C167  F022         	movff	sprintf@tmpval,___ftge@ff1
  3245  000362  C168  F023         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3246  000366  C169  F024         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3247  00036A  0E00               	movlw	0
  3248  00036C  6E25               	movwf	___ftge@ff2,c
  3249  00036E  0E80               	movlw	128
  3250  000370  6E26               	movwf	___ftge@ff2+1,c
  3251  000372  0E3F               	movlw	63
  3252  000374  6E27               	movwf	___ftge@ff2+2,c
  3253  000376  EC37  F014         	call	___ftge	;wreg free
  3254  00037A  B0D8               	btfsc	status,0,c
  3255  00037C  D005               	goto	l4706
  3256                           
  3257                           ;doprnt.c: 849: exp--;
  3258  00037E  0101               	movlb	1	; () banked
  3259  000380  076D               	decf	sprintf@exp& (0+255),f,b
  3260  000382  A0D8               	btfss	status,0,c
  3261  000384  076E               	decf	(sprintf@exp+1)& (0+255),f,b
  3262  000386  D014               	goto	l4710
  3263  000388                     l4706:
  3264  000388  FFFF               	dw	65535	; assembler added errata NOP
  3265                           
  3266                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3267  00038A  C167  F022         	movff	sprintf@tmpval,___ftge@ff1
  3268  00038E  C168  F023         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3269  000392  C169  F024         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3270  000396  0E00               	movlw	0
  3271  000398  6E25               	movwf	___ftge@ff2,c
  3272  00039A  0E20               	movlw	32
  3273  00039C  6E26               	movwf	___ftge@ff2+1,c
  3274  00039E  0E41               	movlw	65
  3275  0003A0  6E27               	movwf	___ftge@ff2+2,c
  3276  0003A2  EC37  F014         	call	___ftge	;wreg free
  3277  0003A6  A0D8               	btfss	status,0,c
  3278  0003A8  D003               	goto	l4710
  3279                           
  3280                           ;doprnt.c: 851: exp++;
  3281  0003AA  0101               	movlb	1	; () banked
  3282  0003AC  4B6D               	infsnz	sprintf@exp& (0+255),f,b
  3283  0003AE  2B6E               	incf	(sprintf@exp+1)& (0+255),f,b
  3284  0003B0                     l4710:
  3285  0003B0  FFFF               	dw	65535	; assembler added errata NOP
  3286                           
  3287                           ;doprnt.c: 852: }
  3288                           ;doprnt.c: 1112: if(prec <= 12)
  3289  0003B2  0101               	movlb	1	; () banked
  3290  0003B4  BF66               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3291  0003B6  D008               	goto	l4712
  3292  0003B8  0101               	movlb	1	; () banked
  3293  0003BA  5166               	movf	(sprintf@prec+1)& (0+255),w,b
  3294  0003BC  E11E               	bnz	l4714
  3295  0003BE  0E0D               	movlw	13
  3296  0003C0  0101               	movlb	1	; () banked
  3297  0003C2  5D65               	subwf	sprintf@prec& (0+255),w,b
  3298  0003C4  B0D8               	btfsc	status,0,c
  3299  0003C6  D019               	goto	l4714
  3300  0003C8                     l4712:
  3301  0003C8  FFFF               	dw	65535	; assembler added errata NOP
  3302                           
  3303                           ; BSR set to: 1
  3304                           ;doprnt.c: 1113: fval += fround(prec);
  3305  0003CA  C175  F093         	movff	sprintf@fval,___ftadd@f1
  3306  0003CE  C176  F094         	movff	sprintf@fval+1,___ftadd@f1+1
  3307  0003D2  C177  F095         	movff	sprintf@fval+2,___ftadd@f1+2
  3308  0003D6  0101               	movlb	1	; () banked
  3309  0003D8  5165               	movf	sprintf@prec& (0+255),w,b
  3310  0003DA  ECE8  F00D         	call	_fround
  3311  0003DE  C089  F096         	movff	?_fround,___ftadd@f2
  3312  0003E2  C08A  F097         	movff	?_fround+1,___ftadd@f2+1
  3313  0003E6  C08B  F098         	movff	?_fround+2,___ftadd@f2+2
  3314  0003EA  ECA0  F00C         	call	___ftadd	;wreg free
  3315  0003EE  C093  F175         	movff	?___ftadd,sprintf@fval
  3316  0003F2  C094  F176         	movff	?___ftadd+1,sprintf@fval+1
  3317  0003F6  C095  F177         	movff	?___ftadd+2,sprintf@fval+2
  3318  0003FA                     l4714:
  3319  0003FA  FFFF               	dw	65535	; assembler added errata NOP
  3320                           
  3321                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3322  0003FC  0101               	movlb	1	; () banked
  3323  0003FE  BF6E               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3324  000400  D008               	goto	l4716
  3325  000402  0101               	movlb	1	; () banked
  3326  000404  516E               	movf	(sprintf@exp+1)& (0+255),w,b
  3327  000406  E12B               	bnz	l4722
  3328  000408  0E0A               	movlw	10
  3329  00040A  0101               	movlb	1	; () banked
  3330  00040C  5D6D               	subwf	sprintf@exp& (0+255),w,b
  3331  00040E  B0D8               	btfsc	status,0,c
  3332  000410  D026               	goto	l4722
  3333  000412                     l4716:
  3334  000412  FFFF               	dw	65535	; assembler added errata NOP
  3335                           
  3336                           ; BSR set to: 1
  3337  000414  0101               	movlb	1	; () banked
  3338  000416  5175               	movf	sprintf@fval& (0+255),w,b
  3339  000418  0101               	movlb	1	; () banked
  3340  00041A  1176               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3341  00041C  0101               	movlb	1	; () banked
  3342  00041E  1177               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3343  000420  B4D8               	btfsc	status,2,c
  3344  000422  D062               	goto	l4736
  3345                           
  3346                           ; BSR set to: 1
  3347  000424  C175  F090         	movff	sprintf@fval,___fttol@f1
  3348  000428  C176  F091         	movff	sprintf@fval+1,___fttol@f1+1
  3349  00042C  C177  F092         	movff	sprintf@fval+2,___fttol@f1+2
  3350  000430  EC99  F010         	call	___fttol	;wreg free
  3351  000434  0100               	movlb	0	; () banked
  3352  000436  5190               	movf	?___fttol& (0+255),w,b
  3353  000438  0100               	movlb	0	; () banked
  3354  00043A  1191               	iorwf	(?___fttol+1)& (0+255),w,b
  3355  00043C  0100               	movlb	0	; () banked
  3356  00043E  1192               	iorwf	(?___fttol+2)& (0+255),w,b
  3357  000440  0100               	movlb	0	; () banked
  3358  000442  1193               	iorwf	(?___fttol+3)& (0+255),w,b
  3359  000444  A4D8               	btfss	status,2,c
  3360  000446  D050               	goto	l4736
  3361                           
  3362                           ; BSR set to: 0
  3363  000448  0101               	movlb	1	; () banked
  3364  00044A  BF6E               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3365  00044C  D04D               	goto	l4736
  3366  00044E  0101               	movlb	1	; () banked
  3367  000450  516E               	movf	(sprintf@exp+1)& (0+255),w,b
  3368  000452  E105               	bnz	l4722
  3369  000454  0E02               	movlw	2
  3370  000456  0101               	movlb	1	; () banked
  3371  000458  5D6D               	subwf	sprintf@exp& (0+255),w,b
  3372  00045A  A0D8               	btfss	status,0,c
  3373  00045C  D045               	goto	l4736
  3374  00045E                     l4722:
  3375  00045E  FFFF               	dw	65535	; assembler added errata NOP
  3376                           
  3377                           ; BSR set to: 1
  3378                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3379  000460  C167  F022         	movff	sprintf@tmpval,___ftge@ff1
  3380  000464  C168  F023         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3381  000468  C169  F024         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3382  00046C  0E70               	movlw	112
  3383  00046E  6E25               	movwf	___ftge@ff2,c
  3384  000470  0E89               	movlw	137
  3385  000472  6E26               	movwf	___ftge@ff2+1,c
  3386  000474  0E40               	movlw	64
  3387  000476  6E27               	movwf	___ftge@ff2+2,c
  3388  000478  EC37  F014         	call	___ftge	;wreg free
  3389  00047C  B0D8               	btfsc	status,0,c
  3390  00047E  D003               	goto	l4726
  3391                           
  3392                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3393  000480  0101               	movlb	1	; () banked
  3394  000482  0EF7               	movlw	247
  3395  000484  D003               	goto	L2
  3396  000486                     l4726:
  3397  000486  FFFF               	dw	65535	; assembler added errata NOP
  3398                           
  3399                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3400  000488  0101               	movlb	1	; () banked
  3401  00048A  0EF8               	movlw	248
  3402  00048C                     L2:
  3403  00048C  FFFF               	dw	65535	; assembler added errata NOP
  3404  00048E  276D               	addwf	sprintf@exp& (0+255),f,b
  3405  000490  0EFF               	movlw	255
  3406  000492  236E               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3407                           
  3408                           ; BSR set to: 1
  3409                           ;doprnt.c: 1124: }
  3410                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3411                           
  3412                           ; BSR set to: 1
  3413  000494  0101               	movlb	1	; () banked
  3414  000496  516D               	movf	sprintf@exp& (0+255),w,b
  3415  000498  EC6F  F00A         	call	_scale
  3416  00049C  C089  F167         	movff	?_scale,sprintf@tmpval
  3417  0004A0  C08A  F168         	movff	?_scale+1,sprintf@tmpval+1
  3418  0004A4  C08B  F169         	movff	?_scale+2,sprintf@tmpval+2
  3419                           
  3420                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3421  0004A8  C175  F022         	movff	sprintf@fval,__tdiv_to_l_@f1
  3422  0004AC  C176  F023         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3423  0004B0  C177  F024         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3424  0004B4  C167  F025         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3425  0004B8  C168  F026         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3426  0004BC  C169  F027         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3427  0004C0  EC65  F012         	call	__tdiv_to_l_	;wreg free
  3428  0004C4  C022  F16F         	movff	?__tdiv_to_l_,sprintf@val
  3429  0004C8  C023  F170         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3430  0004CC  C024  F171         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3431  0004D0  C025  F172         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3432                           
  3433                           ;doprnt.c: 1129: fval = 0.0;
  3434  0004D4  0E00               	movlw	0
  3435  0004D6  0101               	movlb	1	; () banked
  3436  0004D8  6F75               	movwf	sprintf@fval& (0+255),b
  3437  0004DA  0E00               	movlw	0
  3438  0004DC  0101               	movlb	1	; () banked
  3439  0004DE  6F76               	movwf	(sprintf@fval+1)& (0+255),b
  3440  0004E0  0E00               	movlw	0
  3441  0004E2  0101               	movlb	1	; () banked
  3442  0004E4  6F77               	movwf	(sprintf@fval+2)& (0+255),b
  3443                           
  3444                           ;doprnt.c: 1130: } else {
  3445  0004E6  D034               	goto	l4740
  3446  0004E8                     l4736:
  3447  0004E8  FFFF               	dw	65535	; assembler added errata NOP
  3448                           
  3449                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3450  0004EA  C175  F090         	movff	sprintf@fval,___fttol@f1
  3451  0004EE  C176  F091         	movff	sprintf@fval+1,___fttol@f1+1
  3452  0004F2  C177  F092         	movff	sprintf@fval+2,___fttol@f1+2
  3453  0004F6  EC99  F010         	call	___fttol	;wreg free
  3454  0004FA  C090  F16F         	movff	?___fttol,sprintf@val
  3455  0004FE  C091  F170         	movff	?___fttol+1,sprintf@val+1
  3456  000502  C092  F171         	movff	?___fttol+2,sprintf@val+2
  3457  000506  C093  F172         	movff	?___fttol+3,sprintf@val+3
  3458                           
  3459                           ;doprnt.c: 1132: fval -= (double)val;
  3460  00050A  C175  F09F         	movff	sprintf@fval,___ftsub@f1
  3461  00050E  C176  F0A0         	movff	sprintf@fval+1,___ftsub@f1+1
  3462  000512  C177  F0A1         	movff	sprintf@fval+2,___ftsub@f1+2
  3463  000516  C16F  F02A         	movff	sprintf@val,___lltoft@c
  3464  00051A  C170  F02B         	movff	sprintf@val+1,___lltoft@c+1
  3465  00051E  C171  F02C         	movff	sprintf@val+2,___lltoft@c+2
  3466  000522  C172  F02D         	movff	sprintf@val+3,___lltoft@c+3
  3467  000526  EC0A  F016         	call	___lltoft	;wreg free
  3468  00052A  C02A  F0A2         	movff	?___lltoft,___ftsub@f2
  3469  00052E  C02B  F0A3         	movff	?___lltoft+1,___ftsub@f2+1
  3470  000532  C02C  F0A4         	movff	?___lltoft+2,___ftsub@f2+2
  3471  000536  EC93  F016         	call	___ftsub	;wreg free
  3472  00053A  C09F  F175         	movff	?___ftsub,sprintf@fval
  3473  00053E  C0A0  F176         	movff	?___ftsub+1,sprintf@fval+1
  3474  000542  C0A1  F177         	movff	?___ftsub+2,sprintf@fval+2
  3475                           
  3476                           ;doprnt.c: 1133: exp = 0;
  3477  000546  0E00               	movlw	0
  3478  000548  0101               	movlb	1	; () banked
  3479  00054A  6F6E               	movwf	(sprintf@exp+1)& (0+255),b
  3480  00054C  0E00               	movlw	0
  3481  00054E  6F6D               	movwf	sprintf@exp& (0+255),b
  3482  000550                     l4740:
  3483  000550  FFFF               	dw	65535	; assembler added errata NOP
  3484                           
  3485                           ; BSR set to: 1
  3486                           ;doprnt.c: 1134: }
  3487                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3488  000552  0E01               	movlw	1
  3489  000554  0101               	movlb	1	; () banked
  3490  000556  6F78               	movwf	sprintf@c& (0+255),b
  3491  000558                     l4742:
  3492  000558  FFFF               	dw	65535	; assembler added errata NOP
  3493                           
  3494                           ; BSR set to: 1
  3495  00055A  0E0A               	movlw	10
  3496  00055C  0101               	movlb	1	; () banked
  3497  00055E  1978               	xorwf	sprintf@c& (0+255),w,b
  3498  000560  B4D8               	btfsc	status,2,c
  3499  000562  D022               	goto	l4754
  3500                           
  3501                           ; BSR set to: 1
  3502                           ;doprnt.c: 1137: if(val < dpowers[c])
  3503                           
  3504                           ; BSR set to: 1
  3505                           
  3506                           ; BSR set to: 1
  3507  000564  0101               	movlb	1	; () banked
  3508  000566  5178               	movf	sprintf@c& (0+255),w,b
  3509  000568  0D04               	mullw	4
  3510  00056A  0E0B               	movlw	low _dpowers
  3511  00056C  24F3               	addwf	prodl,w,c
  3512  00056E  6EF6               	movwf	tblptrl,c
  3513  000570  0E7E               	movlw	high _dpowers
  3514  000572  20F4               	addwfc	prodh,w,c
  3515  000574  6EF7               	movwf	tblptrh,c
  3516  000576                     	if	0	;There are less than 3 active tblptr bytes
  3517  000576                     	endif
  3518  000576  0009               	tblrd		*+
  3519  000578  FFFF               	dw	65535	; errata NOP
  3520  00057A  50F5               	movf	tablat,w,c
  3521  00057C  0101               	movlb	1	; () banked
  3522  00057E  5D6F               	subwf	sprintf@val& (0+255),w,b
  3523  000580  0009               	tblrd		*+
  3524  000582  FFFF               	dw	65535	; errata NOP
  3525  000584  50F5               	movf	tablat,w,c
  3526  000586  0101               	movlb	1	; () banked
  3527  000588  5970               	subwfb	(sprintf@val+1)& (0+255),w,b
  3528  00058A  0009               	tblrd		*+
  3529  00058C  FFFF               	dw	65535	; errata NOP
  3530  00058E  50F5               	movf	tablat,w,c
  3531  000590  0101               	movlb	1	; () banked
  3532  000592  5971               	subwfb	(sprintf@val+2)& (0+255),w,b
  3533  000594  0009               	tblrd		*+
  3534  000596  FFFF               	dw	65535	; errata NOP
  3535  000598  50F5               	movf	tablat,w,c
  3536  00059A  0101               	movlb	1	; () banked
  3537  00059C  5972               	subwfb	(sprintf@val+3)& (0+255),w,b
  3538  00059E  A0D8               	btfss	status,0,c
  3539  0005A0  D003               	goto	l4754
  3540                           
  3541                           ; BSR set to: 1
  3542                           
  3543                           ; BSR set to: 1
  3544                           
  3545                           ; BSR set to: 1
  3546                           ;doprnt.c: 1138: break;
  3547  0005A2  0101               	movlb	1	; () banked
  3548  0005A4  2B78               	incf	sprintf@c& (0+255),f,b
  3549  0005A6  D7D8               	goto	l4742
  3550  0005A8                     l4754:
  3551  0005A8  FFFF               	dw	65535	; assembler added errata NOP
  3552                           
  3553                           ; BSR set to: 1
  3554                           ;doprnt.c: 1142: width -= prec + c + exp;
  3555  0005AA  C178  F0AC         	movff	sprintf@c,??_sprintf
  3556  0005AE  0100               	movlb	0	; () banked
  3557  0005B0  6BAD               	clrf	(??_sprintf+1)& (0+255),b
  3558  0005B2  BFAC               	btfsc	??_sprintf& (0+255),7,b
  3559  0005B4  07AD               	decf	(??_sprintf+1)& (0+255),f,b
  3560  0005B6  0101               	movlb	1	; () banked
  3561  0005B8  5165               	movf	sprintf@prec& (0+255),w,b
  3562  0005BA  0100               	movlb	0	; () banked
  3563  0005BC  27AC               	addwf	??_sprintf& (0+255),f,b
  3564  0005BE  0101               	movlb	1	; () banked
  3565  0005C0  5166               	movf	(sprintf@prec+1)& (0+255),w,b
  3566  0005C2  0100               	movlb	0	; () banked
  3567  0005C4  23AD               	addwfc	(??_sprintf+1)& (0+255),f,b
  3568  0005C6  0101               	movlb	1	; () banked
  3569  0005C8  516D               	movf	sprintf@exp& (0+255),w,b
  3570  0005CA  0100               	movlb	0	; () banked
  3571  0005CC  27AC               	addwf	??_sprintf& (0+255),f,b
  3572  0005CE  0101               	movlb	1	; () banked
  3573  0005D0  516E               	movf	(sprintf@exp+1)& (0+255),w,b
  3574  0005D2  0100               	movlb	0	; () banked
  3575  0005D4  23AD               	addwfc	(??_sprintf+1)& (0+255),f,b
  3576  0005D6  0100               	movlb	0	; () banked
  3577  0005D8  51AC               	movf	??_sprintf& (0+255),w,b
  3578  0005DA  0101               	movlb	1	; () banked
  3579  0005DC  5F6B               	subwf	sprintf@width& (0+255),f,b
  3580  0005DE  0100               	movlb	0	; () banked
  3581  0005E0  51AD               	movf	(??_sprintf+1)& (0+255),w,b
  3582  0005E2  0101               	movlb	1	; () banked
  3583  0005E4  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  3584                           
  3585                           ;doprnt.c: 1143: if(
  3586                           ;doprnt.c: 1147: prec)
  3587  0005E6  0101               	movlb	1	; () banked
  3588  0005E8  5165               	movf	sprintf@prec& (0+255),w,b
  3589  0005EA  0101               	movlb	1	; () banked
  3590  0005EC  1166               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3591  0005EE  B4D8               	btfsc	status,2,c
  3592  0005F0  D004               	goto	l4758
  3593                           
  3594                           ; BSR set to: 1
  3595                           ;doprnt.c: 1148: width--;
  3596  0005F2  0101               	movlb	1	; () banked
  3597  0005F4  076B               	decf	sprintf@width& (0+255),f,b
  3598  0005F6  A0D8               	btfss	status,0,c
  3599  0005F8  076C               	decf	(sprintf@width+1)& (0+255),f,b
  3600  0005FA                     l4758:
  3601  0005FA  FFFF               	dw	65535	; assembler added errata NOP
  3602                           
  3603                           ; BSR set to: 1
  3604                           ;doprnt.c: 1149: if(flag & 0x03)
  3605  0005FC  0E03               	movlw	3
  3606  0005FE  0101               	movlb	1	; () banked
  3607  000600  1573               	andwf	sprintf@flag& (0+255),w,b
  3608  000602  0100               	movlb	0	; () banked
  3609  000604  6FAC               	movwf	??_sprintf& (0+255),b
  3610  000606  0E00               	movlw	0
  3611  000608  0101               	movlb	1	; () banked
  3612  00060A  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  3613  00060C  0100               	movlb	0	; () banked
  3614  00060E  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  3615  000610  0100               	movlb	0	; () banked
  3616  000612  51AC               	movf	??_sprintf& (0+255),w,b
  3617  000614  0100               	movlb	0	; () banked
  3618  000616  11AD               	iorwf	(??_sprintf+1)& (0+255),w,b
  3619  000618  B4D8               	btfsc	status,2,c
  3620  00061A  D004               	goto	l4762
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;doprnt.c: 1150: width--;
  3624  00061C  0101               	movlb	1	; () banked
  3625  00061E  076B               	decf	sprintf@width& (0+255),f,b
  3626  000620  A0D8               	btfss	status,0,c
  3627  000622  076C               	decf	(sprintf@width+1)& (0+255),f,b
  3628  000624                     l4762:
  3629  000624  FFFF               	dw	65535	; assembler added errata NOP
  3630                           
  3631                           ;doprnt.c: 1153: if(flag & 0x04) {
  3632  000626  0101               	movlb	1	; () banked
  3633  000628  A573               	btfss	sprintf@flag& (0+255),2,b
  3634  00062A  D042               	goto	l4784
  3635                           
  3636                           ; BSR set to: 1
  3637                           ;doprnt.c: 1157: if(flag & 0x03)
  3638  00062C  0E03               	movlw	3
  3639  00062E  0101               	movlb	1	; () banked
  3640  000630  1573               	andwf	sprintf@flag& (0+255),w,b
  3641  000632  0100               	movlb	0	; () banked
  3642  000634  6FAC               	movwf	??_sprintf& (0+255),b
  3643  000636  0E00               	movlw	0
  3644  000638  0101               	movlb	1	; () banked
  3645  00063A  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  3646  00063C  0100               	movlb	0	; () banked
  3647  00063E  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  3648  000640  0100               	movlb	0	; () banked
  3649  000642  51AC               	movf	??_sprintf& (0+255),w,b
  3650  000644  0100               	movlb	0	; () banked
  3651  000646  11AD               	iorwf	(??_sprintf+1)& (0+255),w,b
  3652  000648  B4D8               	btfsc	status,2,c
  3653  00064A  D018               	goto	l4776
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  3657  00064C  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3658  000650  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3659  000654  0E2D               	movlw	45
  3660  000656  6EDF               	movwf	indf2,c
  3661                           
  3662                           ; BSR set to: 0
  3663  000658  0100               	movlb	0	; () banked
  3664  00065A  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3665  00065C  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;doprnt.c: 1168: while(width > 0) {
  3669  00065E  D00E               	goto	l4776
  3670  000660                     l4770:
  3671  000660  FFFF               	dw	65535	; assembler added errata NOP
  3672                           
  3673                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  3674  000662  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3675  000666  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3676  00066A  0E30               	movlw	48
  3677  00066C  6EDF               	movwf	indf2,c
  3678  00066E  0100               	movlb	0	; () banked
  3679  000670  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3680  000672  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;doprnt.c: 1170: width--;
  3684  000674  0101               	movlb	1	; () banked
  3685  000676  076B               	decf	sprintf@width& (0+255),f,b
  3686  000678  A0D8               	btfss	status,0,c
  3687  00067A  076C               	decf	(sprintf@width+1)& (0+255),f,b
  3688  00067C                     l4776:
  3689  00067C  FFFF               	dw	65535	; assembler added errata NOP
  3690  00067E  0101               	movlb	1	; () banked
  3691  000680  BF6C               	btfsc	(sprintf@width+1)& (0+255),7,b
  3692  000682  D08D               	goto	l4800
  3693  000684  0101               	movlb	1	; () banked
  3694  000686  516C               	movf	(sprintf@width+1)& (0+255),w,b
  3695  000688  E1EB               	bnz	l4770
  3696  00068A  0101               	movlb	1	; () banked
  3697  00068C  056B               	decf	sprintf@width& (0+255),w,b
  3698  00068E  A0D8               	btfss	status,0,c
  3699  000690  D086               	goto	l4800
  3700  000692  D7E6               	goto	l4770
  3701  000694                     l4778:
  3702  000694  FFFF               	dw	65535	; assembler added errata NOP
  3703                           
  3704                           ; BSR set to: 1
  3705                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3706  000696  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3707  00069A  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3708  00069E  0E20               	movlw	32
  3709  0006A0  6EDF               	movwf	indf2,c
  3710                           
  3711                           ; BSR set to: 1
  3712  0006A2  0100               	movlb	0	; () banked
  3713  0006A4  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3714  0006A6  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;doprnt.c: 1182: width--;
  3718  0006A8  0101               	movlb	1	; () banked
  3719  0006AA  076B               	decf	sprintf@width& (0+255),f,b
  3720  0006AC  A0D8               	btfss	status,0,c
  3721  0006AE  076C               	decf	(sprintf@width+1)& (0+255),f,b
  3722  0006B0                     l4784:
  3723  0006B0  FFFF               	dw	65535	; assembler added errata NOP
  3724                           
  3725                           ; BSR set to: 1
  3726  0006B2  0101               	movlb	1	; () banked
  3727  0006B4  BF6C               	btfsc	(sprintf@width+1)& (0+255),7,b
  3728  0006B6  D007               	goto	l4786
  3729  0006B8  0101               	movlb	1	; () banked
  3730  0006BA  516C               	movf	(sprintf@width+1)& (0+255),w,b
  3731  0006BC  E1EB               	bnz	l4778
  3732  0006BE  0101               	movlb	1	; () banked
  3733  0006C0  056B               	decf	sprintf@width& (0+255),w,b
  3734  0006C2  B0D8               	btfsc	status,0,c
  3735  0006C4  D7E7               	goto	l4778
  3736  0006C6                     l4786:
  3737  0006C6  FFFF               	dw	65535	; assembler added errata NOP
  3738                           
  3739                           ; BSR set to: 1
  3740                           ;doprnt.c: 1183: }
  3741                           ;doprnt.c: 1188: if(flag & 0x03)
  3742  0006C8  0E03               	movlw	3
  3743  0006CA  0101               	movlb	1	; () banked
  3744  0006CC  1573               	andwf	sprintf@flag& (0+255),w,b
  3745  0006CE  0100               	movlb	0	; () banked
  3746  0006D0  6FAC               	movwf	??_sprintf& (0+255),b
  3747  0006D2  0E00               	movlw	0
  3748  0006D4  0101               	movlb	1	; () banked
  3749  0006D6  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  3750  0006D8  0100               	movlb	0	; () banked
  3751  0006DA  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  3752  0006DC  0100               	movlb	0	; () banked
  3753  0006DE  51AC               	movf	??_sprintf& (0+255),w,b
  3754  0006E0  0100               	movlb	0	; () banked
  3755  0006E2  11AD               	iorwf	(??_sprintf+1)& (0+255),w,b
  3756  0006E4  B4D8               	btfsc	status,2,c
  3757  0006E6  D05B               	goto	l4800
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3761  0006E8  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3762  0006EC  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3763  0006F0  0E2D               	movlw	45
  3764  0006F2  D052               	goto	L3
  3765  0006F4                     l4790:
  3766  0006F4  FFFF               	dw	65535	; assembler added errata NOP
  3767                           
  3768                           ; BSR set to: 0
  3769  0006F6  0100               	movlb	0	; () banked
  3770  0006F8  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3771  0006FA  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;doprnt.c: 1195: }
  3775                           ;doprnt.c: 1196: while(c--) {
  3776                           
  3777                           ; BSR set to: 0
  3778  0006FC  D050               	goto	l4800
  3779  0006FE                     l4792:
  3780  0006FE  FFFF               	dw	65535	; assembler added errata NOP
  3781                           
  3782                           ;doprnt.c: 1200: {
  3783                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3784  000700  C16F  F022         	movff	sprintf@val,___lldiv@dividend
  3785  000704  C170  F023         	movff	sprintf@val+1,___lldiv@dividend+1
  3786  000708  C171  F024         	movff	sprintf@val+2,___lldiv@dividend+2
  3787  00070C  C172  F025         	movff	sprintf@val+3,___lldiv@dividend+3
  3788  000710  0101               	movlb	1	; () banked
  3789  000712  5178               	movf	sprintf@c& (0+255),w,b
  3790  000714  0D04               	mullw	4
  3791  000716  0E0B               	movlw	low _dpowers
  3792  000718  24F3               	addwf	prodl,w,c
  3793  00071A  6EF6               	movwf	tblptrl,c
  3794  00071C  0E7E               	movlw	high _dpowers
  3795  00071E  20F4               	addwfc	prodh,w,c
  3796  000720  6EF7               	movwf	tblptrh,c
  3797  000722                     	if	0	;There are less than 3 active tblptr bytes
  3798  000722                     	endif
  3799  000722  0009               	tblrd		*+
  3800  000724  FFFF               	dw	65535	; errata NOP
  3801  000726  CFF5 F026          	movff	tablat,___lldiv@divisor
  3802  00072A  0009               	tblrd		*+
  3803  00072C  FFFF               	dw	65535	; errata NOP
  3804  00072E  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  3805  000732  0009               	tblrd		*+
  3806  000734  FFFF               	dw	65535	; errata NOP
  3807  000736  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  3808  00073A  000A               	tblrd		*-
  3809  00073C  FFFF               	dw	65535	; errata NOP
  3810  00073E  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  3811  000742  ECD1  F014         	call	___lldiv	;wreg free
  3812  000746  C022  F167         	movff	?___lldiv,sprintf@tmpval
  3813  00074A  C023  F168         	movff	?___lldiv+1,sprintf@tmpval+1
  3814  00074E  C024  F169         	movff	?___lldiv+2,sprintf@tmpval+2
  3815  000752  C025  F16A         	movff	?___lldiv+3,sprintf@tmpval+3
  3816                           
  3817                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3818  000756  C167  F02F         	movff	sprintf@tmpval,___llmod@dividend
  3819  00075A  C168  F030         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3820  00075E  C169  F031         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3821  000762  C16A  F032         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3822  000766  0E0A               	movlw	10
  3823  000768  6E33               	movwf	___llmod@divisor,c
  3824  00076A  0E00               	movlw	0
  3825  00076C  6E34               	movwf	___llmod@divisor+1,c
  3826  00076E  0E00               	movlw	0
  3827  000770  6E35               	movwf	___llmod@divisor+2,c
  3828  000772  0E00               	movlw	0
  3829  000774  6E36               	movwf	___llmod@divisor+3,c
  3830  000776  EC97  F015         	call	___llmod	;wreg free
  3831  00077A  C02F  F167         	movff	?___llmod,sprintf@tmpval
  3832  00077E  C030  F168         	movff	?___llmod+1,sprintf@tmpval+1
  3833  000782  C031  F169         	movff	?___llmod+2,sprintf@tmpval+2
  3834  000786  C032  F16A         	movff	?___llmod+3,sprintf@tmpval+3
  3835                           
  3836                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3837  00078A  0101               	movlb	1	; () banked
  3838  00078C  5167               	movf	sprintf@tmpval& (0+255),w,b
  3839  00078E  0F30               	addlw	48
  3840  000790  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3841  000794  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3842  000798                     L3:
  3843  000798  FFFF               	dw	65535	; assembler added errata NOP
  3844  00079A  6EDF               	movwf	indf2,c
  3845  00079C  D7AB               	goto	l4790
  3846  00079E                     l4800:
  3847  00079E  FFFF               	dw	65535	; assembler added errata NOP
  3848  0007A0  0101               	movlb	1	; () banked
  3849  0007A2  0778               	decf	sprintf@c& (0+255),f,b
  3850  0007A4  0101               	movlb	1	; () banked
  3851  0007A6  2978               	incf	sprintf@c& (0+255),w,b
  3852  0007A8  B4D8               	btfsc	status,2,c
  3853  0007AA  D00F               	goto	l4808
  3854  0007AC  D7A8               	goto	l4792
  3855  0007AE                     l4802:
  3856  0007AE  FFFF               	dw	65535	; assembler added errata NOP
  3857                           
  3858                           ; BSR set to: 1
  3859                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3860  0007B0  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3861  0007B4  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3862  0007B8  0E30               	movlw	48
  3863  0007BA  6EDF               	movwf	indf2,c
  3864                           
  3865                           ; BSR set to: 1
  3866  0007BC  0100               	movlb	0	; () banked
  3867  0007BE  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3868  0007C0  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;doprnt.c: 1209: exp--;
  3872  0007C2  0101               	movlb	1	; () banked
  3873  0007C4  076D               	decf	sprintf@exp& (0+255),f,b
  3874  0007C6  A0D8               	btfss	status,0,c
  3875  0007C8  076E               	decf	(sprintf@exp+1)& (0+255),f,b
  3876  0007CA                     l4808:
  3877  0007CA  FFFF               	dw	65535	; assembler added errata NOP
  3878                           
  3879                           ; BSR set to: 1
  3880  0007CC  0101               	movlb	1	; () banked
  3881  0007CE  BF6E               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3882  0007D0  D007               	goto	l4810
  3883  0007D2  0101               	movlb	1	; () banked
  3884  0007D4  516E               	movf	(sprintf@exp+1)& (0+255),w,b
  3885  0007D6  E1EB               	bnz	l4802
  3886  0007D8  0101               	movlb	1	; () banked
  3887  0007DA  056D               	decf	sprintf@exp& (0+255),w,b
  3888  0007DC  B0D8               	btfsc	status,0,c
  3889  0007DE  D7E7               	goto	l4802
  3890  0007E0                     l4810:
  3891  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  3892                           
  3893                           ; BSR set to: 1
  3894                           ;doprnt.c: 1210: }
  3895                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3896  0007E2  0101               	movlb	1	; () banked
  3897  0007E4  BF66               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3898  0007E6  D00C               	goto	l468
  3899  0007E8  0101               	movlb	1	; () banked
  3900  0007EA  5166               	movf	(sprintf@prec+1)& (0+255),w,b
  3901  0007EC  E105               	bnz	u5710
  3902  0007EE  0E09               	movlw	9
  3903  0007F0  0101               	movlb	1	; () banked
  3904  0007F2  5D65               	subwf	sprintf@prec& (0+255),w,b
  3905  0007F4  A0D8               	btfss	status,0,c
  3906  0007F6  D004               	goto	l468
  3907  0007F8                     u5710:
  3908                           
  3909                           ; BSR set to: 1
  3910                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3911  0007F8  0E08               	movlw	8
  3912  0007FA  0101               	movlb	1	; () banked
  3913  0007FC  6F78               	movwf	sprintf@c& (0+255),b
  3914  0007FE  D003               	goto	l4814
  3915  000800                     l468:
  3916  000800  FFFF               	dw	65535	; assembler added errata NOP
  3917                           
  3918                           ; BSR set to: 1
  3919                           ;doprnt.c: 1213: else
  3920                           ;doprnt.c: 1214: c = prec;
  3921  000802  C165  F178         	movff	sprintf@prec,sprintf@c
  3922  000806                     l4814:
  3923  000806  FFFF               	dw	65535	; assembler added errata NOP
  3924                           
  3925                           ; BSR set to: 1
  3926                           ;doprnt.c: 1215: prec -= c;
  3927  000808  0101               	movlb	1	; () banked
  3928  00080A  5178               	movf	sprintf@c& (0+255),w,b
  3929  00080C  0101               	movlb	1	; () banked
  3930  00080E  5F65               	subwf	sprintf@prec& (0+255),f,b
  3931  000810  0E00               	movlw	0
  3932  000812  0101               	movlb	1	; () banked
  3933  000814  BF78               	btfsc	sprintf@c& (0+255),7,b
  3934  000816  0EFF               	movlw	255
  3935  000818  0101               	movlb	1	; () banked
  3936  00081A  5B66               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3937                           
  3938                           ; BSR set to: 1
  3939                           ;doprnt.c: 1219: if(c)
  3940  00081C  0101               	movlb	1	; () banked
  3941  00081E  5178               	movf	sprintf@c& (0+255),w,b
  3942  000820  0101               	movlb	1	; () banked
  3943  000822  B4D8               	btfsc	status,2,c
  3944  000824  D009               	goto	l4822
  3945                           
  3946                           ; BSR set to: 1
  3947                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3948  000826  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  3949  00082A  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  3950  00082E  0E2E               	movlw	46
  3951  000830  6EDF               	movwf	indf2,c
  3952                           
  3953                           ; BSR set to: 1
  3954  000832  0100               	movlb	0	; () banked
  3955  000834  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  3956  000836  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  3957  000838                     l4822:
  3958  000838  FFFF               	dw	65535	; assembler added errata NOP
  3959                           
  3960                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3961  00083A  0101               	movlb	1	; () banked
  3962  00083C  5178               	movf	sprintf@c& (0+255),w,b
  3963  00083E  EC6F  F00A         	call	_scale
  3964  000842  C089  F15F         	movff	?_scale,_sprintf$2073
  3965  000846  C08A  F160         	movff	?_scale+1,_sprintf$2073+1
  3966  00084A  C08B  F161         	movff	?_scale+2,_sprintf$2073+2
  3967                           
  3968                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3969  00084E  C175  F039         	movff	sprintf@fval,___ftmul@f2
  3970  000852  C176  F03A         	movff	sprintf@fval+1,___ftmul@f2+1
  3971  000856  C177  F03B         	movff	sprintf@fval+2,___ftmul@f2+2
  3972  00085A  C15F  F036         	movff	_sprintf$2073,___ftmul@f1
  3973  00085E  C160  F037         	movff	_sprintf$2073+1,___ftmul@f1+1
  3974  000862  C161  F038         	movff	_sprintf$2073+2,___ftmul@f1+2
  3975  000866  ECCD  F011         	call	___ftmul	;wreg free
  3976  00086A  C036  F090         	movff	?___ftmul,___fttol@f1
  3977  00086E  C037  F091         	movff	?___ftmul+1,___fttol@f1+1
  3978  000872  C038  F092         	movff	?___ftmul+2,___fttol@f1+2
  3979  000876  EC99  F010         	call	___fttol	;wreg free
  3980  00087A  C090  F16F         	movff	?___fttol,sprintf@val
  3981  00087E  C091  F170         	movff	?___fttol+1,sprintf@val+1
  3982  000882  C092  F171         	movff	?___fttol+2,sprintf@val+2
  3983  000886  C093  F172         	movff	?___fttol+3,sprintf@val+3
  3984                           
  3985                           ;doprnt.c: 1228: while(c--) {
  3986  00088A  D07C               	goto	l4836
  3987  00088C                     l4826:
  3988  00088C  FFFF               	dw	65535	; assembler added errata NOP
  3989                           
  3990                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3991  00088E  C16F  F022         	movff	sprintf@val,___lldiv@dividend
  3992  000892  C170  F023         	movff	sprintf@val+1,___lldiv@dividend+1
  3993  000896  C171  F024         	movff	sprintf@val+2,___lldiv@dividend+2
  3994  00089A  C172  F025         	movff	sprintf@val+3,___lldiv@dividend+3
  3995  00089E  0101               	movlb	1	; () banked
  3996  0008A0  5178               	movf	sprintf@c& (0+255),w,b
  3997  0008A2  0D04               	mullw	4
  3998  0008A4  0E0B               	movlw	low _dpowers
  3999  0008A6  24F3               	addwf	prodl,w,c
  4000  0008A8  6EF6               	movwf	tblptrl,c
  4001  0008AA  0E7E               	movlw	high _dpowers
  4002  0008AC  20F4               	addwfc	prodh,w,c
  4003  0008AE  6EF7               	movwf	tblptrh,c
  4004  0008B0                     	if	0	;There are less than 3 active tblptr bytes
  4005  0008B0                     	endif
  4006  0008B0  0009               	tblrd		*+
  4007  0008B2  FFFF               	dw	65535	; errata NOP
  4008  0008B4  CFF5 F026          	movff	tablat,___lldiv@divisor
  4009  0008B8  0009               	tblrd		*+
  4010  0008BA  FFFF               	dw	65535	; errata NOP
  4011  0008BC  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  4012  0008C0  0009               	tblrd		*+
  4013  0008C2  FFFF               	dw	65535	; errata NOP
  4014  0008C4  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  4015  0008C8  000A               	tblrd		*-
  4016  0008CA  FFFF               	dw	65535	; errata NOP
  4017  0008CC  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  4018  0008D0  ECD1  F014         	call	___lldiv	;wreg free
  4019  0008D4  C022  F167         	movff	?___lldiv,sprintf@tmpval
  4020  0008D8  C023  F168         	movff	?___lldiv+1,sprintf@tmpval+1
  4021  0008DC  C024  F169         	movff	?___lldiv+2,sprintf@tmpval+2
  4022  0008E0  C025  F16A         	movff	?___lldiv+3,sprintf@tmpval+3
  4023                           
  4024                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4025  0008E4  C167  F02F         	movff	sprintf@tmpval,___llmod@dividend
  4026  0008E8  C168  F030         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4027  0008EC  C169  F031         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4028  0008F0  C16A  F032         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4029  0008F4  0E0A               	movlw	10
  4030  0008F6  6E33               	movwf	___llmod@divisor,c
  4031  0008F8  0E00               	movlw	0
  4032  0008FA  6E34               	movwf	___llmod@divisor+1,c
  4033  0008FC  0E00               	movlw	0
  4034  0008FE  6E35               	movwf	___llmod@divisor+2,c
  4035  000900  0E00               	movlw	0
  4036  000902  6E36               	movwf	___llmod@divisor+3,c
  4037  000904  EC97  F015         	call	___llmod	;wreg free
  4038  000908  C02F  F167         	movff	?___llmod,sprintf@tmpval
  4039  00090C  C030  F168         	movff	?___llmod+1,sprintf@tmpval+1
  4040  000910  C031  F169         	movff	?___llmod+2,sprintf@tmpval+2
  4041  000914  C032  F16A         	movff	?___llmod+3,sprintf@tmpval+3
  4042                           
  4043                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4044  000918  0101               	movlb	1	; () banked
  4045  00091A  5167               	movf	sprintf@tmpval& (0+255),w,b
  4046  00091C  0F30               	addlw	48
  4047  00091E  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4048  000922  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4049  000926  6EDF               	movwf	indf2,c
  4050                           
  4051                           ; BSR set to: 1
  4052  000928  0100               	movlb	0	; () banked
  4053  00092A  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4054  00092C  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;doprnt.c: 1232: val %= dpowers[c];
  4058  00092E  C16F  F02F         	movff	sprintf@val,___llmod@dividend
  4059  000932  C170  F030         	movff	sprintf@val+1,___llmod@dividend+1
  4060  000936  C171  F031         	movff	sprintf@val+2,___llmod@dividend+2
  4061  00093A  C172  F032         	movff	sprintf@val+3,___llmod@dividend+3
  4062  00093E  0101               	movlb	1	; () banked
  4063  000940  5178               	movf	sprintf@c& (0+255),w,b
  4064  000942  0D04               	mullw	4
  4065  000944  0E0B               	movlw	low _dpowers
  4066  000946  24F3               	addwf	prodl,w,c
  4067  000948  6EF6               	movwf	tblptrl,c
  4068  00094A  0E7E               	movlw	high _dpowers
  4069  00094C  20F4               	addwfc	prodh,w,c
  4070  00094E  6EF7               	movwf	tblptrh,c
  4071  000950                     	if	0	;There are less than 3 active tblptr bytes
  4072  000950                     	endif
  4073  000950  0009               	tblrd		*+
  4074  000952  FFFF               	dw	65535	; errata NOP
  4075  000954  CFF5 F033          	movff	tablat,___llmod@divisor
  4076  000958  0009               	tblrd		*+
  4077  00095A  FFFF               	dw	65535	; errata NOP
  4078  00095C  CFF5 F034          	movff	tablat,___llmod@divisor+1
  4079  000960  0009               	tblrd		*+
  4080  000962  FFFF               	dw	65535	; errata NOP
  4081  000964  CFF5 F035          	movff	tablat,___llmod@divisor+2
  4082  000968  000A               	tblrd		*-
  4083  00096A  FFFF               	dw	65535	; errata NOP
  4084  00096C  CFF5 F036          	movff	tablat,___llmod@divisor+3
  4085  000970  EC97  F015         	call	___llmod	;wreg free
  4086  000974  C02F  F16F         	movff	?___llmod,sprintf@val
  4087  000978  C030  F170         	movff	?___llmod+1,sprintf@val+1
  4088  00097C  C031  F171         	movff	?___llmod+2,sprintf@val+2
  4089  000980  C032  F172         	movff	?___llmod+3,sprintf@val+3
  4090  000984                     l4836:
  4091  000984  FFFF               	dw	65535	; assembler added errata NOP
  4092  000986  0101               	movlb	1	; () banked
  4093  000988  0778               	decf	sprintf@c& (0+255),f,b
  4094  00098A  0101               	movlb	1	; () banked
  4095  00098C  2978               	incf	sprintf@c& (0+255),w,b
  4096  00098E  B4D8               	btfsc	status,2,c
  4097  000990  D00F               	goto	l4844
  4098  000992  D77C               	goto	l4826
  4099  000994                     l4838:
  4100  000994  FFFF               	dw	65535	; assembler added errata NOP
  4101                           
  4102                           ; BSR set to: 1
  4103                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4104  000996  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4105  00099A  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4106  00099E  0E30               	movlw	48
  4107  0009A0  6EDF               	movwf	indf2,c
  4108                           
  4109                           ; BSR set to: 1
  4110  0009A2  0100               	movlb	0	; () banked
  4111  0009A4  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4112  0009A6  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;doprnt.c: 1237: prec--;
  4116  0009A8  0101               	movlb	1	; () banked
  4117  0009AA  0765               	decf	sprintf@prec& (0+255),f,b
  4118  0009AC  A0D8               	btfss	status,0,c
  4119  0009AE  0766               	decf	(sprintf@prec+1)& (0+255),f,b
  4120  0009B0                     l4844:
  4121  0009B0  FFFF               	dw	65535	; assembler added errata NOP
  4122                           
  4123                           ; BSR set to: 1
  4124  0009B2  0101               	movlb	1	; () banked
  4125  0009B4  5165               	movf	sprintf@prec& (0+255),w,b
  4126  0009B6  0101               	movlb	1	; () banked
  4127  0009B8  1166               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4128  0009BA  B4D8               	btfsc	status,2,c
  4129  0009BC  D1F3               	goto	l4952
  4130  0009BE  D7EA               	goto	l4838
  4131  0009C0                     l429:
  4132  0009C0  FFFF               	dw	65535	; assembler added errata NOP
  4133                           
  4134                           ; BSR set to: 1
  4135                           ;doprnt.c: 1246: }
  4136                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4137  0009C2  0101               	movlb	1	; () banked
  4138  0009C4  BF73               	btfsc	sprintf@flag& (0+255),7,b
  4139  0009C6  D023               	goto	l4856
  4140                           
  4141                           ; BSR set to: 1
  4142                           ;doprnt.c: 1253: {
  4143                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4144  0009C8  C163  FFD9         	movff	sprintf@ap,fsr2l
  4145  0009CC  C164  FFDA         	movff	sprintf@ap+1,fsr2h
  4146  0009D0  CFDE F16F          	movff	postinc2,sprintf@val
  4147  0009D4  CFDD F170          	movff	postdec2,sprintf@val+1
  4148  0009D8  0101               	movlb	1	; () banked
  4149  0009DA  0E00               	movlw	0
  4150  0009DC  BF70               	btfsc	(sprintf@val+1)& (0+255),7,b
  4151  0009DE  0EFF               	movlw	-1
  4152  0009E0  6F71               	movwf	(sprintf@val+2)& (0+255),b
  4153  0009E2  6F72               	movwf	(sprintf@val+3)& (0+255),b
  4154                           
  4155                           ; BSR set to: 1
  4156  0009E4  0E02               	movlw	2
  4157  0009E6  0101               	movlb	1	; () banked
  4158  0009E8  2763               	addwf	sprintf@ap& (0+255),f,b
  4159  0009EA  0E00               	movlw	0
  4160  0009EC  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4161                           
  4162                           ; BSR set to: 1
  4163                           ;doprnt.c: 1261: if((long)val < 0) {
  4164  0009EE  0101               	movlb	1	; () banked
  4165  0009F0  AF72               	btfss	(sprintf@val+3)& (0+255),7,b
  4166  0009F2  D07B               	goto	l4890
  4167                           
  4168                           ; BSR set to: 1
  4169                           ;doprnt.c: 1262: flag |= 0x03;
  4170  0009F4  0E03               	movlw	3
  4171  0009F6  0101               	movlb	1	; () banked
  4172  0009F8  1373               	iorwf	sprintf@flag& (0+255),f,b
  4173                           
  4174                           ; BSR set to: 1
  4175                           ;doprnt.c: 1263: val = -val;
  4176  0009FA  0101               	movlb	1	; () banked
  4177  0009FC  1F72               	comf	(sprintf@val+3)& (0+255),f,b
  4178  0009FE  1F71               	comf	(sprintf@val+2)& (0+255),f,b
  4179  000A00  1F70               	comf	(sprintf@val+1)& (0+255),f,b
  4180  000A02  6D6F               	negf	sprintf@val& (0+255),b
  4181  000A04  0E00               	movlw	0
  4182  000A06  2370               	addwfc	(sprintf@val+1)& (0+255),f,b
  4183  000A08  2371               	addwfc	(sprintf@val+2)& (0+255),f,b
  4184  000A0A  2372               	addwfc	(sprintf@val+3)& (0+255),f,b
  4185                           
  4186                           ; BSR set to: 1
  4187                           ;doprnt.c: 1264: }
  4188                           ;doprnt.c: 1266: }
  4189  000A0C  D06E               	goto	l4890
  4190  000A0E                     l4856:
  4191  000A0E  FFFF               	dw	65535	; assembler added errata NOP
  4192                           
  4193                           ; BSR set to: 1
  4194                           ;doprnt.c: 1268: else
  4195                           ;doprnt.c: 1273: {
  4196                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4197  000A10  C163  FFD9         	movff	sprintf@ap,fsr2l
  4198  000A14  C164  FFDA         	movff	sprintf@ap+1,fsr2h
  4199  000A18  CFDE F0AC          	movff	postinc2,??_sprintf
  4200  000A1C  CFDD F0AD          	movff	postdec2,??_sprintf+1
  4201  000A20  C0AC  F16F         	movff	??_sprintf,sprintf@val
  4202  000A24  C0AD  F170         	movff	??_sprintf+1,sprintf@val+1
  4203  000A28  0101               	movlb	1	; () banked
  4204  000A2A  6B71               	clrf	(sprintf@val+2)& (0+255),b
  4205  000A2C  6B72               	clrf	(sprintf@val+3)& (0+255),b
  4206                           
  4207                           ; BSR set to: 1
  4208  000A2E  0E02               	movlw	2
  4209  000A30  0101               	movlb	1	; () banked
  4210  000A32  2763               	addwf	sprintf@ap& (0+255),f,b
  4211  000A34  0E00               	movlw	0
  4212  000A36  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4213                           
  4214                           ; BSR set to: 1
  4215                           ;doprnt.c: 1287: }
  4216                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4217  000A38  D058               	goto	l4890
  4218  000A3A                     l4860:
  4219  000A3A  FFFF               	dw	65535	; assembler added errata NOP
  4220                           
  4221                           ; BSR set to: 1
  4222                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4223  000A3C  0E01               	movlw	1
  4224  000A3E  0101               	movlb	1	; () banked
  4225  000A40  6F78               	movwf	sprintf@c& (0+255),b
  4226  000A42                     l4862:
  4227  000A42  FFFF               	dw	65535	; assembler added errata NOP
  4228                           
  4229                           ; BSR set to: 1
  4230  000A44  0E0A               	movlw	10
  4231  000A46  0101               	movlb	1	; () banked
  4232  000A48  1978               	xorwf	sprintf@c& (0+255),w,b
  4233  000A4A  B4D8               	btfsc	status,2,c
  4234  000A4C  D058               	goto	l4892
  4235                           
  4236                           ; BSR set to: 1
  4237                           ;doprnt.c: 1306: if(val < dpowers[c])
  4238                           
  4239                           ; BSR set to: 1
  4240                           
  4241                           ; BSR set to: 1
  4242  000A4E  0101               	movlb	1	; () banked
  4243  000A50  5178               	movf	sprintf@c& (0+255),w,b
  4244  000A52  0D04               	mullw	4
  4245  000A54  0E0B               	movlw	low _dpowers
  4246  000A56  24F3               	addwf	prodl,w,c
  4247  000A58  6EF6               	movwf	tblptrl,c
  4248  000A5A  0E7E               	movlw	high _dpowers
  4249  000A5C  20F4               	addwfc	prodh,w,c
  4250  000A5E  6EF7               	movwf	tblptrh,c
  4251  000A60                     	if	0	;There are less than 3 active tblptr bytes
  4252  000A60                     	endif
  4253  000A60  0009               	tblrd		*+
  4254  000A62  FFFF               	dw	65535	; errata NOP
  4255  000A64  50F5               	movf	tablat,w,c
  4256  000A66  0101               	movlb	1	; () banked
  4257  000A68  5D6F               	subwf	sprintf@val& (0+255),w,b
  4258  000A6A  0009               	tblrd		*+
  4259  000A6C  FFFF               	dw	65535	; errata NOP
  4260  000A6E  50F5               	movf	tablat,w,c
  4261  000A70  0101               	movlb	1	; () banked
  4262  000A72  5970               	subwfb	(sprintf@val+1)& (0+255),w,b
  4263  000A74  0009               	tblrd		*+
  4264  000A76  FFFF               	dw	65535	; errata NOP
  4265  000A78  50F5               	movf	tablat,w,c
  4266  000A7A  0101               	movlb	1	; () banked
  4267  000A7C  5971               	subwfb	(sprintf@val+2)& (0+255),w,b
  4268  000A7E  0009               	tblrd		*+
  4269  000A80  FFFF               	dw	65535	; errata NOP
  4270  000A82  50F5               	movf	tablat,w,c
  4271  000A84  0101               	movlb	1	; () banked
  4272  000A86  5972               	subwfb	(sprintf@val+3)& (0+255),w,b
  4273  000A88  A0D8               	btfss	status,0,c
  4274  000A8A  D039               	goto	l4892
  4275                           
  4276                           ; BSR set to: 1
  4277                           
  4278                           ; BSR set to: 1
  4279                           
  4280                           ; BSR set to: 1
  4281                           ;doprnt.c: 1307: break;
  4282  000A8C  0101               	movlb	1	; () banked
  4283  000A8E  2B78               	incf	sprintf@c& (0+255),f,b
  4284  000A90  D7D8               	goto	l4862
  4285  000A92                     l4874:
  4286  000A92  FFFF               	dw	65535	; assembler added errata NOP
  4287                           
  4288                           ; BSR set to: 1
  4289                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4290  000A94  0E01               	movlw	1
  4291  000A96  0101               	movlb	1	; () banked
  4292  000A98  6F78               	movwf	sprintf@c& (0+255),b
  4293  000A9A                     l4876:
  4294  000A9A  FFFF               	dw	65535	; assembler added errata NOP
  4295                           
  4296                           ; BSR set to: 1
  4297  000A9C  0E08               	movlw	8
  4298  000A9E  0101               	movlb	1	; () banked
  4299  000AA0  1978               	xorwf	sprintf@c& (0+255),w,b
  4300  000AA2  B4D8               	btfsc	status,2,c
  4301  000AA4  D02C               	goto	l4892
  4302                           
  4303                           ; BSR set to: 1
  4304                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4305                           
  4306                           ; BSR set to: 1
  4307                           
  4308                           ; BSR set to: 1
  4309  000AA6  0101               	movlb	1	; () banked
  4310  000AA8  5178               	movf	sprintf@c& (0+255),w,b
  4311  000AAA  0D04               	mullw	4
  4312  000AAC  0E81               	movlw	low _hexpowers
  4313  000AAE  24F3               	addwf	prodl,w,c
  4314  000AB0  6EF6               	movwf	tblptrl,c
  4315  000AB2  0E7E               	movlw	high _hexpowers
  4316  000AB4  20F4               	addwfc	prodh,w,c
  4317  000AB6  6EF7               	movwf	tblptrh,c
  4318  000AB8                     	if	0	;There are less than 3 active tblptr bytes
  4319  000AB8                     	endif
  4320  000AB8  0009               	tblrd		*+
  4321  000ABA  FFFF               	dw	65535	; errata NOP
  4322  000ABC  50F5               	movf	tablat,w,c
  4323  000ABE  0101               	movlb	1	; () banked
  4324  000AC0  5D6F               	subwf	sprintf@val& (0+255),w,b
  4325  000AC2  0009               	tblrd		*+
  4326  000AC4  FFFF               	dw	65535	; errata NOP
  4327  000AC6  50F5               	movf	tablat,w,c
  4328  000AC8  0101               	movlb	1	; () banked
  4329  000ACA  5970               	subwfb	(sprintf@val+1)& (0+255),w,b
  4330  000ACC  0009               	tblrd		*+
  4331  000ACE  FFFF               	dw	65535	; errata NOP
  4332  000AD0  50F5               	movf	tablat,w,c
  4333  000AD2  0101               	movlb	1	; () banked
  4334  000AD4  5971               	subwfb	(sprintf@val+2)& (0+255),w,b
  4335  000AD6  0009               	tblrd		*+
  4336  000AD8  FFFF               	dw	65535	; errata NOP
  4337  000ADA  50F5               	movf	tablat,w,c
  4338  000ADC  0101               	movlb	1	; () banked
  4339  000ADE  5972               	subwfb	(sprintf@val+3)& (0+255),w,b
  4340  000AE0  A0D8               	btfss	status,0,c
  4341  000AE2  D00D               	goto	l4892
  4342                           
  4343                           ; BSR set to: 1
  4344                           
  4345                           ; BSR set to: 1
  4346                           
  4347                           ; BSR set to: 1
  4348                           ;doprnt.c: 1318: break;
  4349  000AE4  0101               	movlb	1	; () banked
  4350  000AE6  2B78               	incf	sprintf@c& (0+255),f,b
  4351  000AE8  D7D8               	goto	l4876
  4352  000AEA                     l4890:
  4353  000AEA  FFFF               	dw	65535	; assembler added errata NOP
  4354                           
  4355                           ; BSR set to: 1
  4356  000AEC  0101               	movlb	1	; () banked
  4357  000AEE  5173               	movf	sprintf@flag& (0+255),w,b
  4358  000AF0  0B80               	andlw	128
  4359                           
  4360                           ; Switch size 1, requested type "space"
  4361                           ; Number of cases is 2, Range of values is 0 to 128
  4362                           ; switch strategies available:
  4363                           ; Name         Instructions Cycles
  4364                           ; simple_byte            7     4 (average)
  4365                           ;	Chosen strategy is simple_byte
  4366  000AF2  0A00               	xorlw	0	; case 0
  4367  000AF4  B4D8               	btfsc	status,2,c
  4368  000AF6  D7A1               	goto	l4860
  4369  000AF8  0A80               	xorlw	128	; case 128
  4370  000AFA  B4D8               	btfsc	status,2,c
  4371  000AFC  D7CA               	goto	l4874
  4372  000AFE                     l4892:
  4373  000AFE  FFFF               	dw	65535	; assembler added errata NOP
  4374                           
  4375                           ; BSR set to: 1
  4376                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4377  000B00  0101               	movlb	1	; () banked
  4378  000B02  516B               	movf	sprintf@width& (0+255),w,b
  4379  000B04  0101               	movlb	1	; () banked
  4380  000B06  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  4381  000B08  B4D8               	btfsc	status,2,c
  4382  000B0A  D014               	goto	l4898
  4383                           
  4384                           ; BSR set to: 1
  4385  000B0C  0E03               	movlw	3
  4386  000B0E  0101               	movlb	1	; () banked
  4387  000B10  1573               	andwf	sprintf@flag& (0+255),w,b
  4388  000B12  0100               	movlb	0	; () banked
  4389  000B14  6FAC               	movwf	??_sprintf& (0+255),b
  4390  000B16  0E00               	movlw	0
  4391  000B18  0101               	movlb	1	; () banked
  4392  000B1A  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  4393  000B1C  0100               	movlb	0	; () banked
  4394  000B1E  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  4395  000B20  0100               	movlb	0	; () banked
  4396  000B22  51AC               	movf	??_sprintf& (0+255),w,b
  4397  000B24  0100               	movlb	0	; () banked
  4398  000B26  11AD               	iorwf	(??_sprintf+1)& (0+255),w,b
  4399  000B28  B4D8               	btfsc	status,2,c
  4400  000B2A  D004               	goto	l4898
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;doprnt.c: 1346: width--;
  4404  000B2C  0101               	movlb	1	; () banked
  4405  000B2E  076B               	decf	sprintf@width& (0+255),f,b
  4406  000B30  A0D8               	btfss	status,0,c
  4407  000B32  076C               	decf	(sprintf@width+1)& (0+255),f,b
  4408  000B34                     l4898:
  4409  000B34  FFFF               	dw	65535	; assembler added errata NOP
  4410                           
  4411                           ;doprnt.c: 1381: if(width > c)
  4412  000B36  0E80               	movlw	128
  4413  000B38  0101               	movlb	1	; () banked
  4414  000B3A  BF78               	btfsc	sprintf@c& (0+255),7,b
  4415  000B3C  0E7F               	movlw	127
  4416  000B3E  0100               	movlb	0	; () banked
  4417  000B40  6FAC               	movwf	??_sprintf& (0+255),b
  4418  000B42  0101               	movlb	1	; () banked
  4419  000B44  516B               	movf	sprintf@width& (0+255),w,b
  4420  000B46  0101               	movlb	1	; () banked
  4421  000B48  5D78               	subwf	sprintf@c& (0+255),w,b
  4422  000B4A  0101               	movlb	1	; () banked
  4423  000B4C  516C               	movf	(sprintf@width+1)& (0+255),w,b
  4424  000B4E  0A80               	xorlw	128
  4425  000B50  0100               	movlb	0	; () banked
  4426  000B52  59AC               	subwfb	??_sprintf& (0+255),w,b
  4427  000B54  B0D8               	btfsc	status,0,c
  4428  000B56  D00B               	goto	l4902
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;doprnt.c: 1382: width -= c;
  4432  000B58  0101               	movlb	1	; () banked
  4433  000B5A  5178               	movf	sprintf@c& (0+255),w,b
  4434  000B5C  0101               	movlb	1	; () banked
  4435  000B5E  5F6B               	subwf	sprintf@width& (0+255),f,b
  4436  000B60  0E00               	movlw	0
  4437  000B62  0101               	movlb	1	; () banked
  4438  000B64  BF78               	btfsc	sprintf@c& (0+255),7,b
  4439  000B66  0EFF               	movlw	255
  4440  000B68  0101               	movlb	1	; () banked
  4441  000B6A  5B6C               	subwfb	(sprintf@width+1)& (0+255),f,b
  4442  000B6C  D006               	goto	l4904
  4443  000B6E                     l4902:
  4444  000B6E  FFFF               	dw	65535	; assembler added errata NOP
  4445                           
  4446                           ;doprnt.c: 1383: else
  4447                           ;doprnt.c: 1384: width = 0;
  4448  000B70  0E00               	movlw	0
  4449  000B72  0101               	movlb	1	; () banked
  4450  000B74  6F6C               	movwf	(sprintf@width+1)& (0+255),b
  4451  000B76  0E00               	movlw	0
  4452  000B78  6F6B               	movwf	sprintf@width& (0+255),b
  4453  000B7A                     l4904:
  4454  000B7A  FFFF               	dw	65535	; assembler added errata NOP
  4455                           
  4456                           ; BSR set to: 1
  4457                           ;doprnt.c: 1387: if(flag & 0x04) {
  4458  000B7C  0101               	movlb	1	; () banked
  4459  000B7E  A573               	btfss	sprintf@flag& (0+255),2,b
  4460  000B80  D02E               	goto	l4920
  4461                           
  4462                           ; BSR set to: 1
  4463                           ;doprnt.c: 1392: if(flag & 0x03)
  4464  000B82  0E03               	movlw	3
  4465  000B84  0101               	movlb	1	; () banked
  4466  000B86  1573               	andwf	sprintf@flag& (0+255),w,b
  4467  000B88  0100               	movlb	0	; () banked
  4468  000B8A  6FAC               	movwf	??_sprintf& (0+255),b
  4469  000B8C  0E00               	movlw	0
  4470  000B8E  0101               	movlb	1	; () banked
  4471  000B90  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  4472  000B92  0100               	movlb	0	; () banked
  4473  000B94  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  4474  000B96  0100               	movlb	0	; () banked
  4475  000B98  51AC               	movf	??_sprintf& (0+255),w,b
  4476  000B9A  0100               	movlb	0	; () banked
  4477  000B9C  11AD               	iorwf	(??_sprintf+1)& (0+255),w,b
  4478  000B9E  B4D8               	btfsc	status,2,c
  4479  000BA0  D009               	goto	l4912
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4483  000BA2  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4484  000BA6  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4485  000BAA  0E2D               	movlw	45
  4486  000BAC  6EDF               	movwf	indf2,c
  4487                           
  4488                           ; BSR set to: 0
  4489  000BAE  0100               	movlb	0	; () banked
  4490  000BB0  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4491  000BB2  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4492  000BB4                     l4912:
  4493  000BB4  FFFF               	dw	65535	; assembler added errata NOP
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;doprnt.c: 1415: if(width)
  4497  000BB6  0101               	movlb	1	; () banked
  4498  000BB8  516B               	movf	sprintf@width& (0+255),w,b
  4499  000BBA  0101               	movlb	1	; () banked
  4500  000BBC  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  4501  000BBE  B4D8               	btfsc	status,2,c
  4502  000BC0  D043               	goto	l4934
  4503                           
  4504                           ; BSR set to: 1
  4505                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4506                           
  4507                           ; BSR set to: 1
  4508                           
  4509                           ;doprnt.c: 1416: do
  4510  000BC2  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4511  000BC6  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4512  000BCA  0E30               	movlw	48
  4513  000BCC  6EDF               	movwf	indf2,c
  4514                           
  4515                           ; BSR set to: 1
  4516  000BCE  0100               	movlb	0	; () banked
  4517  000BD0  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4518  000BD2  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;doprnt.c: 1418: while(--width);
  4522  000BD4  0101               	movlb	1	; () banked
  4523  000BD6  076B               	decf	sprintf@width& (0+255),f,b
  4524  000BD8  A0D8               	btfss	status,0,c
  4525  000BDA  076C               	decf	(sprintf@width+1)& (0+255),f,b
  4526  000BDC  D7EB               	goto	l4912
  4527  000BDE                     l4920:
  4528  000BDE  FFFF               	dw	65535	; assembler added errata NOP
  4529                           
  4530                           ; BSR set to: 1
  4531                           ;doprnt.c: 1422: {
  4532                           ;doprnt.c: 1424: if(width
  4533                           ;doprnt.c: 1428: )
  4534  000BE0  0101               	movlb	1	; () banked
  4535  000BE2  516B               	movf	sprintf@width& (0+255),w,b
  4536  000BE4  0101               	movlb	1	; () banked
  4537  000BE6  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  4538  000BE8  B4D8               	btfsc	status,2,c
  4539  000BEA  D014               	goto	l4928
  4540  000BEC                     l4922:
  4541  000BEC  FFFF               	dw	65535	; assembler added errata NOP
  4542                           
  4543                           ; BSR set to: 1
  4544                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4545  000BEE  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4546  000BF2  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4547  000BF6  0E20               	movlw	32
  4548  000BF8  6EDF               	movwf	indf2,c
  4549                           
  4550                           ; BSR set to: 1
  4551  000BFA  0100               	movlb	0	; () banked
  4552  000BFC  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4553  000BFE  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;doprnt.c: 1431: while(--width);
  4557  000C00  0101               	movlb	1	; () banked
  4558  000C02  076B               	decf	sprintf@width& (0+255),f,b
  4559  000C04  A0D8               	btfss	status,0,c
  4560  000C06  076C               	decf	(sprintf@width+1)& (0+255),f,b
  4561  000C08  0101               	movlb	1	; () banked
  4562  000C0A  516B               	movf	sprintf@width& (0+255),w,b
  4563  000C0C  0101               	movlb	1	; () banked
  4564  000C0E  116C               	iorwf	(sprintf@width+1)& (0+255),w,b
  4565  000C10  A4D8               	btfss	status,2,c
  4566  000C12  D7EC               	goto	l4922
  4567  000C14                     l4928:
  4568  000C14  FFFF               	dw	65535	; assembler added errata NOP
  4569                           
  4570                           ; BSR set to: 1
  4571                           ;doprnt.c: 1438: if(flag & 0x03)
  4572  000C16  0E03               	movlw	3
  4573  000C18  0101               	movlb	1	; () banked
  4574  000C1A  1573               	andwf	sprintf@flag& (0+255),w,b
  4575  000C1C  0100               	movlb	0	; () banked
  4576  000C1E  6FAC               	movwf	??_sprintf& (0+255),b
  4577  000C20  0E00               	movlw	0
  4578  000C22  0101               	movlb	1	; () banked
  4579  000C24  1574               	andwf	(sprintf@flag+1)& (0+255),w,b
  4580  000C26  0100               	movlb	0	; () banked
  4581  000C28  6FAD               	movwf	(??_sprintf+1)& (0+255),b
  4582  000C2A  0100               	movlb	0	; () banked
  4583  000C2C  51AC               	movf	??_sprintf& (0+255),w,b
  4584  000C2E  0100               	movlb	0	; () banked
  4585  000C30  11AD               	iorwf	(??_sprintf+1)& (0+255),w,b
  4586  000C32  B4D8               	btfsc	status,2,c
  4587  000C34  D009               	goto	l4934
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4591  000C36  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4592  000C3A  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4593  000C3E  0E2D               	movlw	45
  4594  000C40  6EDF               	movwf	indf2,c
  4595                           
  4596                           ; BSR set to: 0
  4597  000C42  0100               	movlb	0	; () banked
  4598  000C44  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4599  000C46  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4600  000C48                     l4934:
  4601  000C48  FFFF               	dw	65535	; assembler added errata NOP
  4602                           
  4603                           ;doprnt.c: 1469: }
  4604                           ;doprnt.c: 1472: prec = c;
  4605  000C4A  0101               	movlb	1	; () banked
  4606  000C4C  5178               	movf	sprintf@c& (0+255),w,b
  4607  000C4E  0101               	movlb	1	; () banked
  4608  000C50  6F65               	movwf	sprintf@prec& (0+255),b
  4609  000C52  6B66               	clrf	(sprintf@prec+1)& (0+255),b
  4610  000C54  BF65               	btfsc	sprintf@prec& (0+255),7,b
  4611  000C56  0766               	decf	(sprintf@prec+1)& (0+255),f,b
  4612                           
  4613                           ;doprnt.c: 1474: while(prec--) {
  4614  000C58  D099               	goto	l4950
  4615  000C5A                     l4936:
  4616  000C5A  FFFF               	dw	65535	; assembler added errata NOP
  4617                           
  4618                           ; BSR set to: 1
  4619                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4620  000C5C  C165  F0AC         	movff	sprintf@prec,??_sprintf
  4621  000C60  C166  F0AD         	movff	sprintf@prec+1,??_sprintf+1
  4622  000C64  0100               	movlb	0	; () banked
  4623  000C66  90D8               	bcf	status,0,c
  4624  000C68  37AC               	rlcf	??_sprintf& (0+255),f,b
  4625  000C6A  37AD               	rlcf	(??_sprintf+1)& (0+255),f,b
  4626  000C6C  0100               	movlb	0	; () banked
  4627  000C6E  90D8               	bcf	status,0,c
  4628  000C70  37AC               	rlcf	??_sprintf& (0+255),f,b
  4629  000C72  37AD               	rlcf	(??_sprintf+1)& (0+255),f,b
  4630  000C74  0E0B               	movlw	low _dpowers
  4631  000C76  0100               	movlb	0	; () banked
  4632  000C78  25AC               	addwf	??_sprintf& (0+255),w,b
  4633  000C7A  6EF6               	movwf	tblptrl,c
  4634  000C7C  0E7E               	movlw	high _dpowers
  4635  000C7E  21AD               	addwfc	(??_sprintf+1)& (0+255),w,b
  4636  000C80  6EF7               	movwf	tblptrh,c
  4637  000C82                     	if	0	;There are less than 3 active tblptr bytes
  4638  000C82                     	endif
  4639  000C82  0009               	tblrd		*+
  4640  000C84  FFFF               	dw	65535	; errata NOP
  4641  000C86  CFF5 F026          	movff	tablat,___lldiv@divisor
  4642  000C8A  0009               	tblrd		*+
  4643  000C8C  FFFF               	dw	65535	; errata NOP
  4644  000C8E  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  4645  000C92  0009               	tblrd		*+
  4646  000C94  FFFF               	dw	65535	; errata NOP
  4647  000C96  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  4648  000C9A  000A               	tblrd		*-
  4649  000C9C  FFFF               	dw	65535	; errata NOP
  4650  000C9E  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  4651  000CA2  C16F  F022         	movff	sprintf@val,___lldiv@dividend
  4652  000CA6  C170  F023         	movff	sprintf@val+1,___lldiv@dividend+1
  4653  000CAA  C171  F024         	movff	sprintf@val+2,___lldiv@dividend+2
  4654  000CAE  C172  F025         	movff	sprintf@val+3,___lldiv@dividend+3
  4655  000CB2  ECD1  F014         	call	___lldiv	;wreg free
  4656  000CB6  C022  F02F         	movff	?___lldiv,___llmod@dividend
  4657  000CBA  C023  F030         	movff	?___lldiv+1,___llmod@dividend+1
  4658  000CBE  C024  F031         	movff	?___lldiv+2,___llmod@dividend+2
  4659  000CC2  C025  F032         	movff	?___lldiv+3,___llmod@dividend+3
  4660  000CC6  0E0A               	movlw	10
  4661  000CC8  6E33               	movwf	___llmod@divisor,c
  4662  000CCA  0E00               	movlw	0
  4663  000CCC  6E34               	movwf	___llmod@divisor+1,c
  4664  000CCE  0E00               	movlw	0
  4665  000CD0  6E35               	movwf	___llmod@divisor+2,c
  4666  000CD2  0E00               	movlw	0
  4667  000CD4  6E36               	movwf	___llmod@divisor+3,c
  4668  000CD6  EC97  F015         	call	___llmod	;wreg free
  4669  000CDA  502F               	movf	?___llmod,w,c
  4670  000CDC  0F30               	addlw	48
  4671  000CDE  0101               	movlb	1	; () banked
  4672  000CE0  6F78               	movwf	sprintf@c& (0+255),b
  4673                           
  4674                           ;doprnt.c: 1491: break;
  4675  000CE2  D04A               	goto	l4946
  4676  000CE4                     l4938:
  4677  000CE4  FFFF               	dw	65535	; assembler added errata NOP
  4678                           
  4679                           ; BSR set to: 1
  4680                           ;doprnt.c: 1499: {
  4681                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4682  000CE6  C16F  F022         	movff	sprintf@val,___lldiv@dividend
  4683  000CEA  C170  F023         	movff	sprintf@val+1,___lldiv@dividend+1
  4684  000CEE  C171  F024         	movff	sprintf@val+2,___lldiv@dividend+2
  4685  000CF2  C172  F025         	movff	sprintf@val+3,___lldiv@dividend+3
  4686  000CF6  C165  F0AC         	movff	sprintf@prec,??_sprintf
  4687  000CFA  C166  F0AD         	movff	sprintf@prec+1,??_sprintf+1
  4688  000CFE  0100               	movlb	0	; () banked
  4689  000D00  90D8               	bcf	status,0,c
  4690  000D02  37AC               	rlcf	??_sprintf& (0+255),f,b
  4691  000D04  37AD               	rlcf	(??_sprintf+1)& (0+255),f,b
  4692  000D06  0100               	movlb	0	; () banked
  4693  000D08  90D8               	bcf	status,0,c
  4694  000D0A  37AC               	rlcf	??_sprintf& (0+255),f,b
  4695  000D0C  37AD               	rlcf	(??_sprintf+1)& (0+255),f,b
  4696  000D0E  0E81               	movlw	low _hexpowers
  4697  000D10  0100               	movlb	0	; () banked
  4698  000D12  25AC               	addwf	??_sprintf& (0+255),w,b
  4699  000D14  6EF6               	movwf	tblptrl,c
  4700  000D16  0E7E               	movlw	high _hexpowers
  4701  000D18  21AD               	addwfc	(??_sprintf+1)& (0+255),w,b
  4702  000D1A  6EF7               	movwf	tblptrh,c
  4703  000D1C                     	if	0	;There are less than 3 active tblptr bytes
  4704  000D1C                     	endif
  4705  000D1C  0009               	tblrd		*+
  4706  000D1E  FFFF               	dw	65535	; errata NOP
  4707  000D20  CFF5 F026          	movff	tablat,___lldiv@divisor
  4708  000D24  0009               	tblrd		*+
  4709  000D26  FFFF               	dw	65535	; errata NOP
  4710  000D28  CFF5 F027          	movff	tablat,___lldiv@divisor+1
  4711  000D2C  0009               	tblrd		*+
  4712  000D2E  FFFF               	dw	65535	; errata NOP
  4713  000D30  CFF5 F028          	movff	tablat,___lldiv@divisor+2
  4714  000D34  000A               	tblrd		*-
  4715  000D36  FFFF               	dw	65535	; errata NOP
  4716  000D38  CFF5 F029          	movff	tablat,___lldiv@divisor+3
  4717  000D3C  ECD1  F014         	call	___lldiv	;wreg free
  4718  000D40  5022               	movf	?___lldiv,w,c
  4719  000D42  0B0F               	andlw	15
  4720  000D44  0101               	movlb	1	; () banked
  4721  000D46  6F62               	movwf	sprintf@idx& (0+255),b
  4722                           
  4723                           ; BSR set to: 1
  4724                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  4725  000D48  0101               	movlb	1	; () banked
  4726  000D4A  5162               	movf	sprintf@idx& (0+255),w,b
  4727  000D4C  0D01               	mullw	1
  4728  000D4E  0ECB               	movlw	low STR_7
  4729  000D50  24F3               	addwf	prodl,w,c
  4730  000D52  6EF6               	movwf	tblptrl,c
  4731  000D54  0E7F               	movlw	high STR_7
  4732  000D56  20F4               	addwfc	prodh,w,c
  4733  000D58  6EF7               	movwf	tblptrh,c
  4734  000D5A                     	if	0	;There are less than 3 active tblptr bytes
  4735  000D5A                     	endif
  4736  000D5A  0008               	tblrd		*
  4737  000D5C  FFFF               	dw	65535	; errata NOP
  4738  000D5E  CFF5 F178          	movff	tablat,sprintf@c
  4739                           
  4740                           ; BSR set to: 1
  4741                           ;doprnt.c: 1523: }
  4742                           
  4743                           ;doprnt.c: 1508: }
  4744                           ;doprnt.c: 1510: break;
  4745  000D62  D00A               	goto	l4946
  4746  000D64                     l4944:
  4747  000D64  FFFF               	dw	65535	; assembler added errata NOP
  4748                           
  4749                           ; BSR set to: 1
  4750  000D66  0101               	movlb	1	; () banked
  4751  000D68  5173               	movf	sprintf@flag& (0+255),w,b
  4752  000D6A  0B80               	andlw	128
  4753                           
  4754                           ; Switch size 1, requested type "space"
  4755                           ; Number of cases is 2, Range of values is 0 to 128
  4756                           ; switch strategies available:
  4757                           ; Name         Instructions Cycles
  4758                           ; simple_byte            7     4 (average)
  4759                           ;	Chosen strategy is simple_byte
  4760  000D6C  0A00               	xorlw	0	; case 0
  4761  000D6E  B4D8               	btfsc	status,2,c
  4762  000D70  D774               	goto	l4936
  4763  000D72  0A80               	xorlw	128	; case 128
  4764  000D74  B4D8               	btfsc	status,2,c
  4765  000D76  D7B6               	goto	l4938
  4766  000D78                     l4946:
  4767  000D78  FFFF               	dw	65535	; assembler added errata NOP
  4768                           
  4769                           ; BSR set to: 1
  4770                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4771  000D7A  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4772  000D7E  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4773  000D82  C178  FFDF         	movff	sprintf@c,indf2
  4774                           
  4775                           ; BSR set to: 1
  4776  000D86  0100               	movlb	0	; () banked
  4777  000D88  4BA5               	infsnz	sprintf@sp& (0+255),f,b
  4778  000D8A  2BA6               	incf	(sprintf@sp+1)& (0+255),f,b
  4779  000D8C                     l4950:
  4780  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  4781  000D8E  0101               	movlb	1	; () banked
  4782  000D90  0765               	decf	sprintf@prec& (0+255),f,b
  4783  000D92  A0D8               	btfss	status,0,c
  4784  000D94  0766               	decf	(sprintf@prec+1)& (0+255),f,b
  4785  000D96  0101               	movlb	1	; () banked
  4786  000D98  2965               	incf	sprintf@prec& (0+255),w,b
  4787  000D9A  E1E4               	bnz	l4944
  4788  000D9C  0101               	movlb	1	; () banked
  4789  000D9E  2966               	incf	(sprintf@prec+1)& (0+255),w,b
  4790  000DA0  A4D8               	btfss	status,2,c
  4791  000DA2  D7E0               	goto	l4944
  4792  000DA4                     l4952:
  4793  000DA4  FFFF               	dw	65535	; assembler added errata NOP
  4794  000DA6  C0A7  FFF6         	movff	sprintf@f,tblptrl
  4795  000DAA  C0A8  FFF7         	movff	sprintf@f+1,tblptrh
  4796  000DAE  0100               	movlb	0	; () banked
  4797  000DB0  4BA7               	infsnz	sprintf@f& (0+255),f,b
  4798  000DB2  2BA8               	incf	(sprintf@f+1)& (0+255),f,b
  4799  000DB4                     	if	0	;tblptru may be non-zero
  4800  000DB4                     	endif
  4801  000DB4                     	if	0	;tblptru may be non-zero
  4802  000DB4                     	endif
  4803  000DB4  0008               	tblrd		*
  4804  000DB6  FFFF               	dw	65535	; errata NOP
  4805  000DB8  CFF5 F178          	movff	tablat,sprintf@c
  4806  000DBC  0101               	movlb	1	; () banked
  4807  000DBE  5178               	movf	sprintf@c& (0+255),w,b
  4808  000DC0  A4D8               	btfss	status,2,c
  4809  000DC2  EF60  F000         	goto	l4634
  4810  000DC6                     l4954:
  4811  000DC6  FFFF               	dw	65535	; assembler added errata NOP
  4812                           
  4813                           ;doprnt.c: 1538: *sp = 0;
  4814  000DC8  C0A5  FFD9         	movff	sprintf@sp,fsr2l
  4815  000DCC  C0A6  FFDA         	movff	sprintf@sp+1,fsr2h
  4816  000DD0  0E00               	movlw	0
  4817  000DD2  6EDF               	movwf	indf2,c
  4818                           
  4819                           ;doprnt.c: 1540: return 0;
  4820                           ;	Return value of _sprintf is never used
  4821  000DD4  0012               	return		;funcret
  4822  000DD6  FFFF               	dw	65535	; errata NOP
  4823  000DD8                     __end_of_sprintf:
  4824                           	opt stack 0
  4825                           tblptru	equ	0xFF8
  4826                           tblptrh	equ	0xFF7
  4827                           tblptrl	equ	0xFF6
  4828                           tablat	equ	0xFF5
  4829                           prodh	equ	0xFF4
  4830                           prodl	equ	0xFF3
  4831                           postinc0	equ	0xFEE
  4832                           wreg	equ	0xFE8
  4833                           postdec1	equ	0xFE5
  4834                           fsr1l	equ	0xFE1
  4835                           indf2	equ	0xFDF
  4836                           postinc2	equ	0xFDE
  4837                           postdec2	equ	0xFDD
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function _scale *****************
  4843 ;; Defined at:
  4844 ;;		line 425 in file "/opt/microchip/xc8/v1.38/sources/common/doprnt.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  scl             1    wreg     char 
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  scl             1   15[BANK0 ] char 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  3    9[BANK0 ] char 
  4851 ;; Registers used:
  4852 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4858 ;;      Params:         0       3       0       0       0       0       0
  4859 ;;      Locals:         0       4       0       0       0       0       0
  4860 ;;      Temps:          0       0       0       0       0       0       0
  4861 ;;      Totals:         0       7       0       0       0       0       0
  4862 ;;Total ram usage:        7 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    4
  4865 ;; This function calls:
  4866 ;;		___awdiv
  4867 ;;		___awmod
  4868 ;;		___ftmul
  4869 ;;		___wmul
  4870 ;; This function is called by:
  4871 ;;		_sprintf
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text3
  4876  0014DE                     __ptext3:
  4877                           	opt stack 0
  4878  0014DE                     _scale:
  4879                           	opt stack 0
  4880  0014DE  FFFF               	dw	65535	; assembler added errata NOP
  4881                           
  4882                           ;incstack = 0
  4883                           ;scale@scl stored from wreg
  4884  0014E0  0100               	movlb	0	; () banked
  4885  0014E2  6F8F               	movwf	scale@scl& (0+255),b
  4886                           
  4887                           ;doprnt.c: 428: if(scl < 0) {
  4888  0014E4  0100               	movlb	0	; () banked
  4889  0014E6  AF8F               	btfss	scale@scl& (0+255),7,b
  4890  0014E8  D110               	goto	l4362
  4891                           
  4892                           ; BSR set to: 0
  4893                           ;doprnt.c: 429: scl = -scl;
  4894  0014EA  0100               	movlb	0	; () banked
  4895  0014EC  6D8F               	negf	scale@scl& (0+255),b
  4896                           
  4897                           ;doprnt.c: 430: if(scl>=110)
  4898  0014EE  0100               	movlb	0	; () banked
  4899  0014F0  518F               	movf	scale@scl& (0+255),w,b
  4900  0014F2  0A80               	xorlw	128
  4901  0014F4  0F12               	addlw	-238
  4902  0014F6  A0D8               	btfss	status,0,c
  4903  0014F8  D097               	goto	l4352
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4907  0014FA  0E00               	movlw	0
  4908  0014FC  6E33               	movwf	___wmul@multiplicand+1,c
  4909  0014FE  0E03               	movlw	3
  4910  001500  6E32               	movwf	___wmul@multiplicand,c
  4911  001502  0E00               	movlw	0
  4912  001504  6E2B               	movwf	___awdiv@divisor+1,c
  4913  001506  0E0A               	movlw	10
  4914  001508  6E2A               	movwf	___awdiv@divisor,c
  4915  00150A  0E00               	movlw	0
  4916  00150C  6E25               	movwf	___awmod@divisor+1,c
  4917  00150E  0E64               	movlw	100
  4918  001510  6E24               	movwf	___awmod@divisor,c
  4919  001512  0100               	movlb	0	; () banked
  4920  001514  518F               	movf	scale@scl& (0+255),w,b
  4921  001516  6E22               	movwf	___awmod@dividend,c
  4922  001518  6A23               	clrf	___awmod@dividend+1,c
  4923  00151A  BE22               	btfsc	___awmod@dividend,7,c
  4924  00151C  0623               	decf	___awmod@dividend+1,f,c
  4925  00151E  EC19  F015         	call	___awmod	;wreg free
  4926  001522  C022  F028         	movff	?___awmod,___awdiv@dividend
  4927  001526  C023  F029         	movff	?___awmod+1,___awdiv@dividend+1
  4928  00152A  EC85  F014         	call	___awdiv	;wreg free
  4929  00152E  0E09               	movlw	9
  4930  001530  2428               	addwf	?___awdiv,w,c
  4931  001532  6E30               	movwf	___wmul@multiplier,c
  4932  001534  0E00               	movlw	0
  4933  001536  2029               	addwfc	?___awdiv+1,w,c
  4934  001538  6E31               	movwf	___wmul@multiplier+1,c
  4935  00153A  ECF4  F016         	call	___wmul	;wreg free
  4936  00153E  0E33               	movlw	low __npowers_
  4937  001540  2430               	addwf	?___wmul,w,c
  4938  001542  6EF6               	movwf	tblptrl,c
  4939  001544  0E7E               	movlw	high __npowers_
  4940  001546  2031               	addwfc	?___wmul+1,w,c
  4941  001548  6EF7               	movwf	tblptrh,c
  4942  00154A                     	if	0	;There are less than 3 active tblptr bytes
  4943  00154A                     	endif
  4944  00154A  0009               	tblrd		*+
  4945  00154C  FFFF               	dw	65535	; errata NOP
  4946  00154E  CFF5 F039          	movff	tablat,___ftmul@f2
  4947  001552  0009               	tblrd		*+
  4948  001554  FFFF               	dw	65535	; errata NOP
  4949  001556  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  4950  00155A  000A               	tblrd		*-
  4951  00155C  FFFF               	dw	65535	; errata NOP
  4952  00155E  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  4953  001562  0E00               	movlw	0
  4954  001564  6E2B               	movwf	___awdiv@divisor+1,c
  4955  001566  0E64               	movlw	100
  4956  001568  6E2A               	movwf	___awdiv@divisor,c
  4957  00156A  0100               	movlb	0	; () banked
  4958  00156C  518F               	movf	scale@scl& (0+255),w,b
  4959  00156E  6E28               	movwf	___awdiv@dividend,c
  4960  001570  6A29               	clrf	___awdiv@dividend+1,c
  4961  001572  BE28               	btfsc	___awdiv@dividend,7,c
  4962  001574  0629               	decf	___awdiv@dividend+1,f,c
  4963  001576  EC85  F014         	call	___awdiv	;wreg free
  4964  00157A  0E12               	movlw	18
  4965  00157C  2428               	addwf	?___awdiv,w,c
  4966  00157E  6E30               	movwf	___wmul@multiplier,c
  4967  001580  0E00               	movlw	0
  4968  001582  2029               	addwfc	?___awdiv+1,w,c
  4969  001584  6E31               	movwf	___wmul@multiplier+1,c
  4970  001586  0E00               	movlw	0
  4971  001588  6E33               	movwf	___wmul@multiplicand+1,c
  4972  00158A  0E03               	movlw	3
  4973  00158C  6E32               	movwf	___wmul@multiplicand,c
  4974  00158E  ECF4  F016         	call	___wmul	;wreg free
  4975  001592  0E33               	movlw	low __npowers_
  4976  001594  2430               	addwf	?___wmul,w,c
  4977  001596  6EF6               	movwf	tblptrl,c
  4978  001598  0E7E               	movlw	high __npowers_
  4979  00159A  2031               	addwfc	?___wmul+1,w,c
  4980  00159C  6EF7               	movwf	tblptrh,c
  4981  00159E                     	if	0	;There are less than 3 active tblptr bytes
  4982  00159E                     	endif
  4983  00159E  0009               	tblrd		*+
  4984  0015A0  FFFF               	dw	65535	; errata NOP
  4985  0015A2  CFF5 F036          	movff	tablat,___ftmul@f1
  4986  0015A6  0009               	tblrd		*+
  4987  0015A8  FFFF               	dw	65535	; errata NOP
  4988  0015AA  CFF5 F037          	movff	tablat,___ftmul@f1+1
  4989  0015AE  000A               	tblrd		*-
  4990  0015B0  FFFF               	dw	65535	; errata NOP
  4991  0015B2  CFF5 F038          	movff	tablat,___ftmul@f1+2
  4992  0015B6  ECCD  F011         	call	___ftmul	;wreg free
  4993  0015BA  C036  F08C         	movff	?___ftmul,_scale$2072
  4994  0015BE  C037  F08D         	movff	?___ftmul+1,_scale$2072+1
  4995  0015C2  C038  F08E         	movff	?___ftmul+2,_scale$2072+2
  4996                           
  4997                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4998  0015C6  C08C  F036         	movff	_scale$2072,___ftmul@f1
  4999  0015CA  C08D  F037         	movff	_scale$2072+1,___ftmul@f1+1
  5000  0015CE  C08E  F038         	movff	_scale$2072+2,___ftmul@f1+2
  5001  0015D2  0E00               	movlw	0
  5002  0015D4  6E33               	movwf	___wmul@multiplicand+1,c
  5003  0015D6  0E03               	movlw	3
  5004  0015D8  6E32               	movwf	___wmul@multiplicand,c
  5005  0015DA  0E00               	movlw	0
  5006  0015DC  6E25               	movwf	___awmod@divisor+1,c
  5007  0015DE  0E0A               	movlw	10
  5008  0015E0  6E24               	movwf	___awmod@divisor,c
  5009  0015E2  0100               	movlb	0	; () banked
  5010  0015E4  518F               	movf	scale@scl& (0+255),w,b
  5011  0015E6  6E22               	movwf	___awmod@dividend,c
  5012  0015E8  6A23               	clrf	___awmod@dividend+1,c
  5013  0015EA  BE22               	btfsc	___awmod@dividend,7,c
  5014  0015EC  0623               	decf	___awmod@dividend+1,f,c
  5015  0015EE  EC19  F015         	call	___awmod	;wreg free
  5016  0015F2  C022  F030         	movff	?___awmod,___wmul@multiplier
  5017  0015F6  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  5018  0015FA  ECF4  F016         	call	___wmul	;wreg free
  5019  0015FE  0E33               	movlw	low __npowers_
  5020  001600  2430               	addwf	?___wmul,w,c
  5021  001602  6EF6               	movwf	tblptrl,c
  5022  001604  0E7E               	movlw	high __npowers_
  5023  001606  2031               	addwfc	?___wmul+1,w,c
  5024  001608  6EF7               	movwf	tblptrh,c
  5025  00160A                     	if	0	;There are less than 3 active tblptr bytes
  5026  00160A                     	endif
  5027  00160A  0009               	tblrd		*+
  5028  00160C  FFFF               	dw	65535	; errata NOP
  5029  00160E  CFF5 F039          	movff	tablat,___ftmul@f2
  5030  001612  0009               	tblrd		*+
  5031  001614  FFFF               	dw	65535	; errata NOP
  5032  001616  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5033  00161A  000A               	tblrd		*-
  5034  00161C  FFFF               	dw	65535	; errata NOP
  5035  00161E  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5036  001622  ECCD  F011         	call	___ftmul	;wreg free
  5037  001626  D16A               	goto	L7
  5038  001628                     l4352:
  5039  001628  FFFF               	dw	65535	; assembler added errata NOP
  5040                           
  5041                           ;doprnt.c: 432: else if(scl > 10)
  5042  00162A  0100               	movlb	0	; () banked
  5043  00162C  518F               	movf	scale@scl& (0+255),w,b
  5044  00162E  0A80               	xorlw	128
  5045  001630  0F75               	addlw	-139
  5046  001632  A0D8               	btfss	status,0,c
  5047  001634  D055               	goto	l4358
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5051  001636  0E00               	movlw	0
  5052  001638  6E2B               	movwf	___awdiv@divisor+1,c
  5053  00163A  0E0A               	movlw	10
  5054  00163C  6E2A               	movwf	___awdiv@divisor,c
  5055  00163E  0100               	movlb	0	; () banked
  5056  001640  518F               	movf	scale@scl& (0+255),w,b
  5057  001642  6E28               	movwf	___awdiv@dividend,c
  5058  001644  6A29               	clrf	___awdiv@dividend+1,c
  5059  001646  BE28               	btfsc	___awdiv@dividend,7,c
  5060  001648  0629               	decf	___awdiv@dividend+1,f,c
  5061  00164A  EC85  F014         	call	___awdiv	;wreg free
  5062  00164E  0E09               	movlw	9
  5063  001650  2428               	addwf	?___awdiv,w,c
  5064  001652  6E30               	movwf	___wmul@multiplier,c
  5065  001654  0E00               	movlw	0
  5066  001656  2029               	addwfc	?___awdiv+1,w,c
  5067  001658  6E31               	movwf	___wmul@multiplier+1,c
  5068  00165A  0E00               	movlw	0
  5069  00165C  6E33               	movwf	___wmul@multiplicand+1,c
  5070  00165E  0E03               	movlw	3
  5071  001660  6E32               	movwf	___wmul@multiplicand,c
  5072  001662  ECF4  F016         	call	___wmul	;wreg free
  5073  001666  0E33               	movlw	low __npowers_
  5074  001668  2430               	addwf	?___wmul,w,c
  5075  00166A  6EF6               	movwf	tblptrl,c
  5076  00166C  0E7E               	movlw	high __npowers_
  5077  00166E  2031               	addwfc	?___wmul+1,w,c
  5078  001670  6EF7               	movwf	tblptrh,c
  5079  001672                     	if	0	;There are less than 3 active tblptr bytes
  5080  001672                     	endif
  5081  001672  0009               	tblrd		*+
  5082  001674  FFFF               	dw	65535	; errata NOP
  5083  001676  CFF5 F036          	movff	tablat,___ftmul@f1
  5084  00167A  0009               	tblrd		*+
  5085  00167C  FFFF               	dw	65535	; errata NOP
  5086  00167E  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5087  001682  000A               	tblrd		*-
  5088  001684  FFFF               	dw	65535	; errata NOP
  5089  001686  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5090  00168A  0E00               	movlw	0
  5091  00168C  6E33               	movwf	___wmul@multiplicand+1,c
  5092  00168E  0E03               	movlw	3
  5093  001690  6E32               	movwf	___wmul@multiplicand,c
  5094  001692  0E00               	movlw	0
  5095  001694  6E25               	movwf	___awmod@divisor+1,c
  5096  001696  0E0A               	movlw	10
  5097  001698  6E24               	movwf	___awmod@divisor,c
  5098  00169A  0100               	movlb	0	; () banked
  5099  00169C  518F               	movf	scale@scl& (0+255),w,b
  5100  00169E  6E22               	movwf	___awmod@dividend,c
  5101  0016A0  6A23               	clrf	___awmod@dividend+1,c
  5102  0016A2  BE22               	btfsc	___awmod@dividend,7,c
  5103  0016A4  0623               	decf	___awmod@dividend+1,f,c
  5104  0016A6  EC19  F015         	call	___awmod	;wreg free
  5105  0016AA  C022  F030         	movff	?___awmod,___wmul@multiplier
  5106  0016AE  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  5107  0016B2  ECF4  F016         	call	___wmul	;wreg free
  5108  0016B6  0E33               	movlw	low __npowers_
  5109  0016B8  2430               	addwf	?___wmul,w,c
  5110  0016BA  6EF6               	movwf	tblptrl,c
  5111  0016BC  0E7E               	movlw	high __npowers_
  5112  0016BE  2031               	addwfc	?___wmul+1,w,c
  5113  0016C0  6EF7               	movwf	tblptrh,c
  5114  0016C2                     	if	0	;There are less than 3 active tblptr bytes
  5115  0016C2                     	endif
  5116  0016C2  0009               	tblrd		*+
  5117  0016C4  FFFF               	dw	65535	; errata NOP
  5118  0016C6  CFF5 F039          	movff	tablat,___ftmul@f2
  5119  0016CA  0009               	tblrd		*+
  5120  0016CC  FFFF               	dw	65535	; errata NOP
  5121  0016CE  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5122  0016D2  000A               	tblrd		*-
  5123  0016D4  FFFF               	dw	65535	; errata NOP
  5124  0016D6  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5125  0016DA  ECCD  F011         	call	___ftmul	;wreg free
  5126  0016DE  D10E               	goto	L7
  5127  0016E0                     l4358:
  5128  0016E0  FFFF               	dw	65535	; assembler added errata NOP
  5129                           
  5130                           ;doprnt.c: 434: return _npowers_[scl];
  5131  0016E2  0100               	movlb	0	; () banked
  5132  0016E4  518F               	movf	scale@scl& (0+255),w,b
  5133  0016E6  0D03               	mullw	3
  5134  0016E8  0E33               	movlw	low __npowers_
  5135  0016EA  24F3               	addwf	prodl,w,c
  5136  0016EC  6EF6               	movwf	tblptrl,c
  5137  0016EE  0E7E               	movlw	high __npowers_
  5138  0016F0  20F4               	addwfc	prodh,w,c
  5139  0016F2  6EF7               	movwf	tblptrh,c
  5140  0016F4                     	if	0	;There are less than 3 active tblptr bytes
  5141  0016F4                     	endif
  5142  0016F4  0009               	tblrd		*+
  5143  0016F6  FFFF               	dw	65535	; errata NOP
  5144  0016F8  CFF5 F089          	movff	tablat,?_scale
  5145  0016FC  0009               	tblrd		*+
  5146  0016FE  FFFF               	dw	65535	; errata NOP
  5147  001700  CFF5 F08A          	movff	tablat,?_scale+1
  5148  001704  000A               	tblrd		*-
  5149  001706  FFFF               	dw	65535	; errata NOP
  5150  001708  D115               	goto	L6
  5151  00170A                     l4362:
  5152  00170A  FFFF               	dw	65535	; assembler added errata NOP
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;doprnt.c: 435: }
  5156                           ;doprnt.c: 436: if(scl>=110)
  5157  00170C  0100               	movlb	0	; () banked
  5158  00170E  518F               	movf	scale@scl& (0+255),w,b
  5159  001710  0A80               	xorlw	128
  5160  001712  0F12               	addlw	-238
  5161  001714  A0D8               	btfss	status,0,c
  5162  001716  D097               	goto	l4370
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5166  001718  0E00               	movlw	0
  5167  00171A  6E33               	movwf	___wmul@multiplicand+1,c
  5168  00171C  0E03               	movlw	3
  5169  00171E  6E32               	movwf	___wmul@multiplicand,c
  5170  001720  0E00               	movlw	0
  5171  001722  6E2B               	movwf	___awdiv@divisor+1,c
  5172  001724  0E0A               	movlw	10
  5173  001726  6E2A               	movwf	___awdiv@divisor,c
  5174  001728  0E00               	movlw	0
  5175  00172A  6E25               	movwf	___awmod@divisor+1,c
  5176  00172C  0E64               	movlw	100
  5177  00172E  6E24               	movwf	___awmod@divisor,c
  5178  001730  0100               	movlb	0	; () banked
  5179  001732  518F               	movf	scale@scl& (0+255),w,b
  5180  001734  6E22               	movwf	___awmod@dividend,c
  5181  001736  6A23               	clrf	___awmod@dividend+1,c
  5182  001738  BE22               	btfsc	___awmod@dividend,7,c
  5183  00173A  0623               	decf	___awmod@dividend+1,f,c
  5184  00173C  EC19  F015         	call	___awmod	;wreg free
  5185  001740  C022  F028         	movff	?___awmod,___awdiv@dividend
  5186  001744  C023  F029         	movff	?___awmod+1,___awdiv@dividend+1
  5187  001748  EC85  F014         	call	___awdiv	;wreg free
  5188  00174C  0E09               	movlw	9
  5189  00174E  2428               	addwf	?___awdiv,w,c
  5190  001750  6E30               	movwf	___wmul@multiplier,c
  5191  001752  0E00               	movlw	0
  5192  001754  2029               	addwfc	?___awdiv+1,w,c
  5193  001756  6E31               	movwf	___wmul@multiplier+1,c
  5194  001758  ECF4  F016         	call	___wmul	;wreg free
  5195  00175C  0E5A               	movlw	low __powers_
  5196  00175E  2430               	addwf	?___wmul,w,c
  5197  001760  6EF6               	movwf	tblptrl,c
  5198  001762  0E7E               	movlw	high __powers_
  5199  001764  2031               	addwfc	?___wmul+1,w,c
  5200  001766  6EF7               	movwf	tblptrh,c
  5201  001768                     	if	0	;There are less than 3 active tblptr bytes
  5202  001768                     	endif
  5203  001768  0009               	tblrd		*+
  5204  00176A  FFFF               	dw	65535	; errata NOP
  5205  00176C  CFF5 F039          	movff	tablat,___ftmul@f2
  5206  001770  0009               	tblrd		*+
  5207  001772  FFFF               	dw	65535	; errata NOP
  5208  001774  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5209  001778  000A               	tblrd		*-
  5210  00177A  FFFF               	dw	65535	; errata NOP
  5211  00177C  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5212  001780  0E00               	movlw	0
  5213  001782  6E2B               	movwf	___awdiv@divisor+1,c
  5214  001784  0E64               	movlw	100
  5215  001786  6E2A               	movwf	___awdiv@divisor,c
  5216  001788  0100               	movlb	0	; () banked
  5217  00178A  518F               	movf	scale@scl& (0+255),w,b
  5218  00178C  6E28               	movwf	___awdiv@dividend,c
  5219  00178E  6A29               	clrf	___awdiv@dividend+1,c
  5220  001790  BE28               	btfsc	___awdiv@dividend,7,c
  5221  001792  0629               	decf	___awdiv@dividend+1,f,c
  5222  001794  EC85  F014         	call	___awdiv	;wreg free
  5223  001798  0E12               	movlw	18
  5224  00179A  2428               	addwf	?___awdiv,w,c
  5225  00179C  6E30               	movwf	___wmul@multiplier,c
  5226  00179E  0E00               	movlw	0
  5227  0017A0  2029               	addwfc	?___awdiv+1,w,c
  5228  0017A2  6E31               	movwf	___wmul@multiplier+1,c
  5229  0017A4  0E00               	movlw	0
  5230  0017A6  6E33               	movwf	___wmul@multiplicand+1,c
  5231  0017A8  0E03               	movlw	3
  5232  0017AA  6E32               	movwf	___wmul@multiplicand,c
  5233  0017AC  ECF4  F016         	call	___wmul	;wreg free
  5234  0017B0  0E5A               	movlw	low __powers_
  5235  0017B2  2430               	addwf	?___wmul,w,c
  5236  0017B4  6EF6               	movwf	tblptrl,c
  5237  0017B6  0E7E               	movlw	high __powers_
  5238  0017B8  2031               	addwfc	?___wmul+1,w,c
  5239  0017BA  6EF7               	movwf	tblptrh,c
  5240  0017BC                     	if	0	;There are less than 3 active tblptr bytes
  5241  0017BC                     	endif
  5242  0017BC  0009               	tblrd		*+
  5243  0017BE  FFFF               	dw	65535	; errata NOP
  5244  0017C0  CFF5 F036          	movff	tablat,___ftmul@f1
  5245  0017C4  0009               	tblrd		*+
  5246  0017C6  FFFF               	dw	65535	; errata NOP
  5247  0017C8  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5248  0017CC  000A               	tblrd		*-
  5249  0017CE  FFFF               	dw	65535	; errata NOP
  5250  0017D0  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5251  0017D4  ECCD  F011         	call	___ftmul	;wreg free
  5252  0017D8  C036  F08C         	movff	?___ftmul,_scale$2072
  5253  0017DC  C037  F08D         	movff	?___ftmul+1,_scale$2072+1
  5254  0017E0  C038  F08E         	movff	?___ftmul+2,_scale$2072+2
  5255                           
  5256                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5257  0017E4  C08C  F036         	movff	_scale$2072,___ftmul@f1
  5258  0017E8  C08D  F037         	movff	_scale$2072+1,___ftmul@f1+1
  5259  0017EC  C08E  F038         	movff	_scale$2072+2,___ftmul@f1+2
  5260  0017F0  0E00               	movlw	0
  5261  0017F2  6E33               	movwf	___wmul@multiplicand+1,c
  5262  0017F4  0E03               	movlw	3
  5263  0017F6  6E32               	movwf	___wmul@multiplicand,c
  5264  0017F8  0E00               	movlw	0
  5265  0017FA  6E25               	movwf	___awmod@divisor+1,c
  5266  0017FC  0E0A               	movlw	10
  5267  0017FE  6E24               	movwf	___awmod@divisor,c
  5268  001800  0100               	movlb	0	; () banked
  5269  001802  518F               	movf	scale@scl& (0+255),w,b
  5270  001804  6E22               	movwf	___awmod@dividend,c
  5271  001806  6A23               	clrf	___awmod@dividend+1,c
  5272  001808  BE22               	btfsc	___awmod@dividend,7,c
  5273  00180A  0623               	decf	___awmod@dividend+1,f,c
  5274  00180C  EC19  F015         	call	___awmod	;wreg free
  5275  001810  C022  F030         	movff	?___awmod,___wmul@multiplier
  5276  001814  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  5277  001818  ECF4  F016         	call	___wmul	;wreg free
  5278  00181C  0E5A               	movlw	low __powers_
  5279  00181E  2430               	addwf	?___wmul,w,c
  5280  001820  6EF6               	movwf	tblptrl,c
  5281  001822  0E7E               	movlw	high __powers_
  5282  001824  2031               	addwfc	?___wmul+1,w,c
  5283  001826  6EF7               	movwf	tblptrh,c
  5284  001828                     	if	0	;There are less than 3 active tblptr bytes
  5285  001828                     	endif
  5286  001828  0009               	tblrd		*+
  5287  00182A  FFFF               	dw	65535	; errata NOP
  5288  00182C  CFF5 F039          	movff	tablat,___ftmul@f2
  5289  001830  0009               	tblrd		*+
  5290  001832  FFFF               	dw	65535	; errata NOP
  5291  001834  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5292  001838  000A               	tblrd		*-
  5293  00183A  FFFF               	dw	65535	; errata NOP
  5294  00183C  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5295  001840  ECCD  F011         	call	___ftmul	;wreg free
  5296  001844  D05B               	goto	L7
  5297  001846                     l4370:
  5298  001846  FFFF               	dw	65535	; assembler added errata NOP
  5299                           
  5300                           ;doprnt.c: 438: else if(scl > 10)
  5301  001848  0100               	movlb	0	; () banked
  5302  00184A  518F               	movf	scale@scl& (0+255),w,b
  5303  00184C  0A80               	xorlw	128
  5304  00184E  0F75               	addlw	-139
  5305  001850  A0D8               	btfss	status,0,c
  5306  001852  D05C               	goto	l4376
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5310  001854  0E00               	movlw	0
  5311  001856  6E2B               	movwf	___awdiv@divisor+1,c
  5312  001858  0E0A               	movlw	10
  5313  00185A  6E2A               	movwf	___awdiv@divisor,c
  5314  00185C  0100               	movlb	0	; () banked
  5315  00185E  518F               	movf	scale@scl& (0+255),w,b
  5316  001860  6E28               	movwf	___awdiv@dividend,c
  5317  001862  6A29               	clrf	___awdiv@dividend+1,c
  5318  001864  BE28               	btfsc	___awdiv@dividend,7,c
  5319  001866  0629               	decf	___awdiv@dividend+1,f,c
  5320  001868  EC85  F014         	call	___awdiv	;wreg free
  5321  00186C  0E09               	movlw	9
  5322  00186E  2428               	addwf	?___awdiv,w,c
  5323  001870  6E30               	movwf	___wmul@multiplier,c
  5324  001872  0E00               	movlw	0
  5325  001874  2029               	addwfc	?___awdiv+1,w,c
  5326  001876  6E31               	movwf	___wmul@multiplier+1,c
  5327  001878  0E00               	movlw	0
  5328  00187A  6E33               	movwf	___wmul@multiplicand+1,c
  5329  00187C  0E03               	movlw	3
  5330  00187E  6E32               	movwf	___wmul@multiplicand,c
  5331  001880  ECF4  F016         	call	___wmul	;wreg free
  5332  001884  0E5A               	movlw	low __powers_
  5333  001886  2430               	addwf	?___wmul,w,c
  5334  001888  6EF6               	movwf	tblptrl,c
  5335  00188A  0E7E               	movlw	high __powers_
  5336  00188C  2031               	addwfc	?___wmul+1,w,c
  5337  00188E  6EF7               	movwf	tblptrh,c
  5338  001890                     	if	0	;There are less than 3 active tblptr bytes
  5339  001890                     	endif
  5340  001890  0009               	tblrd		*+
  5341  001892  FFFF               	dw	65535	; errata NOP
  5342  001894  CFF5 F036          	movff	tablat,___ftmul@f1
  5343  001898  0009               	tblrd		*+
  5344  00189A  FFFF               	dw	65535	; errata NOP
  5345  00189C  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5346  0018A0  000A               	tblrd		*-
  5347  0018A2  FFFF               	dw	65535	; errata NOP
  5348  0018A4  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5349  0018A8  0E00               	movlw	0
  5350  0018AA  6E33               	movwf	___wmul@multiplicand+1,c
  5351  0018AC  0E03               	movlw	3
  5352  0018AE  6E32               	movwf	___wmul@multiplicand,c
  5353  0018B0  0E00               	movlw	0
  5354  0018B2  6E25               	movwf	___awmod@divisor+1,c
  5355  0018B4  0E0A               	movlw	10
  5356  0018B6  6E24               	movwf	___awmod@divisor,c
  5357  0018B8  0100               	movlb	0	; () banked
  5358  0018BA  518F               	movf	scale@scl& (0+255),w,b
  5359  0018BC  6E22               	movwf	___awmod@dividend,c
  5360  0018BE  6A23               	clrf	___awmod@dividend+1,c
  5361  0018C0  BE22               	btfsc	___awmod@dividend,7,c
  5362  0018C2  0623               	decf	___awmod@dividend+1,f,c
  5363  0018C4  EC19  F015         	call	___awmod	;wreg free
  5364  0018C8  C022  F030         	movff	?___awmod,___wmul@multiplier
  5365  0018CC  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  5366  0018D0  ECF4  F016         	call	___wmul	;wreg free
  5367  0018D4  0E5A               	movlw	low __powers_
  5368  0018D6  2430               	addwf	?___wmul,w,c
  5369  0018D8  6EF6               	movwf	tblptrl,c
  5370  0018DA  0E7E               	movlw	high __powers_
  5371  0018DC  2031               	addwfc	?___wmul+1,w,c
  5372  0018DE  6EF7               	movwf	tblptrh,c
  5373  0018E0                     	if	0	;There are less than 3 active tblptr bytes
  5374  0018E0                     	endif
  5375  0018E0  0009               	tblrd		*+
  5376  0018E2  FFFF               	dw	65535	; errata NOP
  5377  0018E4  CFF5 F039          	movff	tablat,___ftmul@f2
  5378  0018E8  0009               	tblrd		*+
  5379  0018EA  FFFF               	dw	65535	; errata NOP
  5380  0018EC  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5381  0018F0  000A               	tblrd		*-
  5382  0018F2  FFFF               	dw	65535	; errata NOP
  5383  0018F4  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5384  0018F8  ECCD  F011         	call	___ftmul	;wreg free
  5385  0018FC                     L7:
  5386  0018FC  FFFF               	dw	65535	; assembler added errata NOP
  5387  0018FE  C036  F089         	movff	?___ftmul,?_scale
  5388  001902  C037  F08A         	movff	?___ftmul+1,?_scale+1
  5389  001906  C038  F08B         	movff	?___ftmul+2,?_scale+2
  5390  00190A  D017               	goto	l399
  5391  00190C                     l4376:
  5392  00190C  FFFF               	dw	65535	; assembler added errata NOP
  5393                           
  5394                           ;doprnt.c: 440: return _powers_[scl];
  5395  00190E  0100               	movlb	0	; () banked
  5396  001910  518F               	movf	scale@scl& (0+255),w,b
  5397  001912  0D03               	mullw	3
  5398  001914  0E5A               	movlw	low __powers_
  5399  001916  24F3               	addwf	prodl,w,c
  5400  001918  6EF6               	movwf	tblptrl,c
  5401  00191A  0E7E               	movlw	high __powers_
  5402  00191C  20F4               	addwfc	prodh,w,c
  5403  00191E  6EF7               	movwf	tblptrh,c
  5404  001920                     	if	0	;There are less than 3 active tblptr bytes
  5405  001920                     	endif
  5406  001920  0009               	tblrd		*+
  5407  001922  FFFF               	dw	65535	; errata NOP
  5408  001924  CFF5 F089          	movff	tablat,?_scale
  5409  001928  0009               	tblrd		*+
  5410  00192A  FFFF               	dw	65535	; errata NOP
  5411  00192C  CFF5 F08A          	movff	tablat,?_scale+1
  5412  001930  000A               	tblrd		*-
  5413  001932  FFFF               	dw	65535	; errata NOP
  5414  001934                     L6:
  5415  001934  FFFF               	dw	65535	; assembler added errata NOP
  5416  001936  CFF5 F08B          	movff	tablat,?_scale+2
  5417  00193A                     l399:
  5418  00193A  FFFF               	dw	65535	; assembler added errata NOP
  5419  00193C  0012               	return		;funcret
  5420  00193E  FFFF               	dw	65535	; errata NOP
  5421  001940                     __end_of_scale:
  5422                           	opt stack 0
  5423                           tblptru	equ	0xFF8
  5424                           tblptrh	equ	0xFF7
  5425                           tblptrl	equ	0xFF6
  5426                           tablat	equ	0xFF5
  5427                           prodh	equ	0xFF4
  5428                           prodl	equ	0xFF3
  5429                           postinc0	equ	0xFEE
  5430                           wreg	equ	0xFE8
  5431                           postdec1	equ	0xFE5
  5432                           fsr1l	equ	0xFE1
  5433                           indf2	equ	0xFDF
  5434                           postinc2	equ	0xFDE
  5435                           postdec2	equ	0xFDD
  5436                           fsr2h	equ	0xFDA
  5437                           fsr2l	equ	0xFD9
  5438                           status	equ	0xFD8
  5439                           
  5440 ;; *************** function _isdigit *****************
  5441 ;; Defined at:
  5442 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/isdigit.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;  c               1    wreg     unsigned char 
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;  c               1   35[COMRAM] unsigned char 
  5447 ;; Return value:  Size  Location     Type
  5448 ;;		None               void
  5449 ;; Registers used:
  5450 ;;		wreg, status,2, status,0
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5456 ;;      Params:         0       0       0       0       0       0       0
  5457 ;;      Locals:         2       0       0       0       0       0       0
  5458 ;;      Temps:          1       0       0       0       0       0       0
  5459 ;;      Totals:         3       0       0       0       0       0       0
  5460 ;;Total ram usage:        3 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    2
  5463 ;; This function calls:
  5464 ;;		Nothing
  5465 ;; This function is called by:
  5466 ;;		_sprintf
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           	psect	text4
  5471  002E3C                     __ptext4:
  5472                           	opt stack 0
  5473  002E3C                     _isdigit:
  5474                           	opt stack 0
  5475  002E3C  FFFF               	dw	65535	; assembler added errata NOP
  5476                           
  5477                           ;incstack = 0
  5478                           ;isdigit@c stored from wreg
  5479  002E3E  6E24               	movwf	isdigit@c,c
  5480  002E40  0E00               	movlw	0
  5481  002E42  6E23               	movwf	_isdigit$1743,c
  5482  002E44  0E3A               	movlw	58
  5483  002E46  6024               	cpfslt	isdigit@c,c
  5484  002E48  D005               	goto	l4388
  5485  002E4A  0E2F               	movlw	47
  5486  002E4C  6424               	cpfsgt	isdigit@c,c
  5487  002E4E  D002               	goto	l4388
  5488  002E50  0E01               	movlw	1
  5489  002E52  6E23               	movwf	_isdigit$1743,c
  5490  002E54                     l4388:
  5491  002E54  FFFF               	dw	65535	; assembler added errata NOP
  5492  002E56  C023  F022         	movff	_isdigit$1743,??_isdigit
  5493  002E5A  3022               	rrcf	??_isdigit,w,c
  5494  002E5C  0012               	return		;funcret
  5495  002E5E  FFFF               	dw	65535	; errata NOP
  5496  002E60                     __end_of_isdigit:
  5497                           	opt stack 0
  5498                           tblptru	equ	0xFF8
  5499                           tblptrh	equ	0xFF7
  5500                           tblptrl	equ	0xFF6
  5501                           tablat	equ	0xFF5
  5502                           prodh	equ	0xFF4
  5503                           prodl	equ	0xFF3
  5504                           postinc0	equ	0xFEE
  5505                           wreg	equ	0xFE8
  5506                           postdec1	equ	0xFE5
  5507                           fsr1l	equ	0xFE1
  5508                           indf2	equ	0xFDF
  5509                           postinc2	equ	0xFDE
  5510                           postdec2	equ	0xFDD
  5511                           fsr2h	equ	0xFDA
  5512                           fsr2l	equ	0xFD9
  5513                           status	equ	0xFD8
  5514                           
  5515 ;; *************** function _fround *****************
  5516 ;; Defined at:
  5517 ;;		line 409 in file "/opt/microchip/xc8/v1.38/sources/common/doprnt.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;  prec            1    wreg     unsigned char 
  5520 ;; Auto vars:     Size  Location     Type
  5521 ;;  prec            1   18[BANK0 ] unsigned char 
  5522 ;; Return value:  Size  Location     Type
  5523 ;;                  3    9[BANK0 ] unsigned char 
  5524 ;; Registers used:
  5525 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5526 ;; Tracked objects:
  5527 ;;		On entry : 0/0
  5528 ;;		On exit  : 0/0
  5529 ;;		Unchanged: 0/0
  5530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5531 ;;      Params:         0       3       0       0       0       0       0
  5532 ;;      Locals:         0       7       0       0       0       0       0
  5533 ;;      Temps:          0       0       0       0       0       0       0
  5534 ;;      Totals:         0      10       0       0       0       0       0
  5535 ;;Total ram usage:       10 bytes
  5536 ;; Hardware stack levels used:    1
  5537 ;; Hardware stack levels required when called:    4
  5538 ;; This function calls:
  5539 ;;		___awdiv
  5540 ;;		___awmod
  5541 ;;		___ftmul
  5542 ;;		___wmul
  5543 ;; This function is called by:
  5544 ;;		_sprintf
  5545 ;; This function uses a non-reentrant model
  5546 ;;
  5547                           
  5548                           	psect	text5
  5549  001BD0                     __ptext5:
  5550                           	opt stack 0
  5551  001BD0                     _fround:
  5552                           	opt stack 0
  5553  001BD0  FFFF               	dw	65535	; assembler added errata NOP
  5554                           
  5555                           ;incstack = 0
  5556                           ;fround@prec stored from wreg
  5557  001BD2  0100               	movlb	0	; () banked
  5558  001BD4  6F92               	movwf	fround@prec& (0+255),b
  5559                           
  5560                           ;doprnt.c: 413: if(prec>=110)
  5561  001BD6  0E6D               	movlw	109
  5562  001BD8  0100               	movlb	0	; () banked
  5563  001BDA  6592               	cpfsgt	fround@prec& (0+255),b
  5564  001BDC  D0A2               	goto	l4330
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5568  001BDE  0E00               	movlw	0
  5569  001BE0  6E33               	movwf	___wmul@multiplicand+1,c
  5570  001BE2  0E03               	movlw	3
  5571  001BE4  6E32               	movwf	___wmul@multiplicand,c
  5572  001BE6  0E00               	movlw	0
  5573  001BE8  6E2B               	movwf	___awdiv@divisor+1,c
  5574  001BEA  0E0A               	movlw	10
  5575  001BEC  6E2A               	movwf	___awdiv@divisor,c
  5576  001BEE  0E00               	movlw	0
  5577  001BF0  6E25               	movwf	___awmod@divisor+1,c
  5578  001BF2  0E64               	movlw	100
  5579  001BF4  6E24               	movwf	___awmod@divisor,c
  5580  001BF6  C092  F022         	movff	fround@prec,___awmod@dividend
  5581  001BFA  6A23               	clrf	___awmod@dividend+1,c
  5582  001BFC  EC19  F015         	call	___awmod	;wreg free
  5583  001C00  C022  F028         	movff	?___awmod,___awdiv@dividend
  5584  001C04  C023  F029         	movff	?___awmod+1,___awdiv@dividend+1
  5585  001C08  EC85  F014         	call	___awdiv	;wreg free
  5586  001C0C  0E09               	movlw	9
  5587  001C0E  2428               	addwf	?___awdiv,w,c
  5588  001C10  6E30               	movwf	___wmul@multiplier,c
  5589  001C12  0E00               	movlw	0
  5590  001C14  2029               	addwfc	?___awdiv+1,w,c
  5591  001C16  6E31               	movwf	___wmul@multiplier+1,c
  5592  001C18  ECF4  F016         	call	___wmul	;wreg free
  5593  001C1C  0E33               	movlw	low __npowers_
  5594  001C1E  2430               	addwf	?___wmul,w,c
  5595  001C20  6EF6               	movwf	tblptrl,c
  5596  001C22  0E7E               	movlw	high __npowers_
  5597  001C24  2031               	addwfc	?___wmul+1,w,c
  5598  001C26  6EF7               	movwf	tblptrh,c
  5599  001C28                     	if	0	;There are less than 3 active tblptr bytes
  5600  001C28                     	endif
  5601  001C28  0009               	tblrd		*+
  5602  001C2A  FFFF               	dw	65535	; errata NOP
  5603  001C2C  CFF5 F039          	movff	tablat,___ftmul@f2
  5604  001C30  0009               	tblrd		*+
  5605  001C32  FFFF               	dw	65535	; errata NOP
  5606  001C34  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5607  001C38  000A               	tblrd		*-
  5608  001C3A  FFFF               	dw	65535	; errata NOP
  5609  001C3C  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5610  001C40  0E00               	movlw	0
  5611  001C42  6E2B               	movwf	___awdiv@divisor+1,c
  5612  001C44  0E64               	movlw	100
  5613  001C46  6E2A               	movwf	___awdiv@divisor,c
  5614  001C48  C092  F028         	movff	fround@prec,___awdiv@dividend
  5615  001C4C  6A29               	clrf	___awdiv@dividend+1,c
  5616  001C4E  EC85  F014         	call	___awdiv	;wreg free
  5617  001C52  0E12               	movlw	18
  5618  001C54  2428               	addwf	?___awdiv,w,c
  5619  001C56  6E30               	movwf	___wmul@multiplier,c
  5620  001C58  0E00               	movlw	0
  5621  001C5A  2029               	addwfc	?___awdiv+1,w,c
  5622  001C5C  6E31               	movwf	___wmul@multiplier+1,c
  5623  001C5E  0E00               	movlw	0
  5624  001C60  6E33               	movwf	___wmul@multiplicand+1,c
  5625  001C62  0E03               	movlw	3
  5626  001C64  6E32               	movwf	___wmul@multiplicand,c
  5627  001C66  ECF4  F016         	call	___wmul	;wreg free
  5628  001C6A  0E33               	movlw	low __npowers_
  5629  001C6C  2430               	addwf	?___wmul,w,c
  5630  001C6E  6EF6               	movwf	tblptrl,c
  5631  001C70  0E7E               	movlw	high __npowers_
  5632  001C72  2031               	addwfc	?___wmul+1,w,c
  5633  001C74  6EF7               	movwf	tblptrh,c
  5634  001C76                     	if	0	;There are less than 3 active tblptr bytes
  5635  001C76                     	endif
  5636  001C76  0009               	tblrd		*+
  5637  001C78  FFFF               	dw	65535	; errata NOP
  5638  001C7A  CFF5 F036          	movff	tablat,___ftmul@f1
  5639  001C7E  0009               	tblrd		*+
  5640  001C80  FFFF               	dw	65535	; errata NOP
  5641  001C82  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5642  001C86  000A               	tblrd		*-
  5643  001C88  FFFF               	dw	65535	; errata NOP
  5644  001C8A  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5645  001C8E  ECCD  F011         	call	___ftmul	;wreg free
  5646  001C92  C036  F08F         	movff	?___ftmul,_fround$2070
  5647  001C96  C037  F090         	movff	?___ftmul+1,_fround$2070+1
  5648  001C9A  C038  F091         	movff	?___ftmul+2,_fround$2070+2
  5649                           
  5650                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5651  001C9E  0E00               	movlw	0
  5652  001CA0  6E33               	movwf	___wmul@multiplicand+1,c
  5653  001CA2  0E03               	movlw	3
  5654  001CA4  6E32               	movwf	___wmul@multiplicand,c
  5655  001CA6  0E00               	movlw	0
  5656  001CA8  6E25               	movwf	___awmod@divisor+1,c
  5657  001CAA  0E0A               	movlw	10
  5658  001CAC  6E24               	movwf	___awmod@divisor,c
  5659  001CAE  C092  F022         	movff	fround@prec,___awmod@dividend
  5660  001CB2  6A23               	clrf	___awmod@dividend+1,c
  5661  001CB4  EC19  F015         	call	___awmod	;wreg free
  5662  001CB8  C022  F030         	movff	?___awmod,___wmul@multiplier
  5663  001CBC  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  5664  001CC0  ECF4  F016         	call	___wmul	;wreg free
  5665  001CC4  0E33               	movlw	low __npowers_
  5666  001CC6  2430               	addwf	?___wmul,w,c
  5667  001CC8  6EF6               	movwf	tblptrl,c
  5668  001CCA  0E7E               	movlw	high __npowers_
  5669  001CCC  2031               	addwfc	?___wmul+1,w,c
  5670  001CCE  6EF7               	movwf	tblptrh,c
  5671  001CD0                     	if	0	;There are less than 3 active tblptr bytes
  5672  001CD0                     	endif
  5673  001CD0  0009               	tblrd		*+
  5674  001CD2  FFFF               	dw	65535	; errata NOP
  5675  001CD4  CFF5 F039          	movff	tablat,___ftmul@f2
  5676  001CD8  0009               	tblrd		*+
  5677  001CDA  FFFF               	dw	65535	; errata NOP
  5678  001CDC  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5679  001CE0  000A               	tblrd		*-
  5680  001CE2  FFFF               	dw	65535	; errata NOP
  5681  001CE4  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5682  001CE8  C08F  F036         	movff	_fround$2070,___ftmul@f1
  5683  001CEC  C090  F037         	movff	_fround$2070+1,___ftmul@f1+1
  5684  001CF0  C091  F038         	movff	_fround$2070+2,___ftmul@f1+2
  5685  001CF4  ECCD  F011         	call	___ftmul	;wreg free
  5686  001CF8  C036  F08C         	movff	?___ftmul,_fround$2071
  5687  001CFC  C037  F08D         	movff	?___ftmul+1,_fround$2071+1
  5688  001D00  C038  F08E         	movff	?___ftmul+2,_fround$2071+2
  5689                           
  5690                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5691  001D04  C08C  F036         	movff	_fround$2071,___ftmul@f1
  5692  001D08  C08D  F037         	movff	_fround$2071+1,___ftmul@f1+1
  5693  001D0C  C08E  F038         	movff	_fround$2071+2,___ftmul@f1+2
  5694  001D10  0E00               	movlw	0
  5695  001D12  6E39               	movwf	___ftmul@f2,c
  5696  001D14  0E00               	movlw	0
  5697  001D16  6E3A               	movwf	___ftmul@f2+1,c
  5698  001D18  0E3F               	movlw	63
  5699  001D1A  6E3B               	movwf	___ftmul@f2+2,c
  5700  001D1C  ECCD  F011         	call	___ftmul	;wreg free
  5701  001D20  D086               	goto	L9
  5702  001D22                     l4330:
  5703  001D22  FFFF               	dw	65535	; assembler added errata NOP
  5704                           
  5705                           ;doprnt.c: 415: else if(prec > 10)
  5706  001D24  0E0A               	movlw	10
  5707  001D26  0100               	movlb	0	; () banked
  5708  001D28  6592               	cpfsgt	fround@prec& (0+255),b
  5709  001D2A  D063               	goto	l4338
  5710                           
  5711                           ; BSR set to: 0
  5712                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5713  001D2C  0E00               	movlw	0
  5714  001D2E  6E33               	movwf	___wmul@multiplicand+1,c
  5715  001D30  0E03               	movlw	3
  5716  001D32  6E32               	movwf	___wmul@multiplicand,c
  5717  001D34  0E00               	movlw	0
  5718  001D36  6E25               	movwf	___awmod@divisor+1,c
  5719  001D38  0E0A               	movlw	10
  5720  001D3A  6E24               	movwf	___awmod@divisor,c
  5721  001D3C  C092  F022         	movff	fround@prec,___awmod@dividend
  5722  001D40  6A23               	clrf	___awmod@dividend+1,c
  5723  001D42  EC19  F015         	call	___awmod	;wreg free
  5724  001D46  C022  F030         	movff	?___awmod,___wmul@multiplier
  5725  001D4A  C023  F031         	movff	?___awmod+1,___wmul@multiplier+1
  5726  001D4E  ECF4  F016         	call	___wmul	;wreg free
  5727  001D52  0E33               	movlw	low __npowers_
  5728  001D54  2430               	addwf	?___wmul,w,c
  5729  001D56  6EF6               	movwf	tblptrl,c
  5730  001D58  0E7E               	movlw	high __npowers_
  5731  001D5A  2031               	addwfc	?___wmul+1,w,c
  5732  001D5C  6EF7               	movwf	tblptrh,c
  5733  001D5E                     	if	0	;There are less than 3 active tblptr bytes
  5734  001D5E                     	endif
  5735  001D5E  0009               	tblrd		*+
  5736  001D60  FFFF               	dw	65535	; errata NOP
  5737  001D62  CFF5 F039          	movff	tablat,___ftmul@f2
  5738  001D66  0009               	tblrd		*+
  5739  001D68  FFFF               	dw	65535	; errata NOP
  5740  001D6A  CFF5 F03A          	movff	tablat,___ftmul@f2+1
  5741  001D6E  000A               	tblrd		*-
  5742  001D70  FFFF               	dw	65535	; errata NOP
  5743  001D72  CFF5 F03B          	movff	tablat,___ftmul@f2+2
  5744  001D76  0E00               	movlw	0
  5745  001D78  6E2B               	movwf	___awdiv@divisor+1,c
  5746  001D7A  0E0A               	movlw	10
  5747  001D7C  6E2A               	movwf	___awdiv@divisor,c
  5748  001D7E  C092  F028         	movff	fround@prec,___awdiv@dividend
  5749  001D82  6A29               	clrf	___awdiv@dividend+1,c
  5750  001D84  EC85  F014         	call	___awdiv	;wreg free
  5751  001D88  0E09               	movlw	9
  5752  001D8A  2428               	addwf	?___awdiv,w,c
  5753  001D8C  6E30               	movwf	___wmul@multiplier,c
  5754  001D8E  0E00               	movlw	0
  5755  001D90  2029               	addwfc	?___awdiv+1,w,c
  5756  001D92  6E31               	movwf	___wmul@multiplier+1,c
  5757  001D94  0E00               	movlw	0
  5758  001D96  6E33               	movwf	___wmul@multiplicand+1,c
  5759  001D98  0E03               	movlw	3
  5760  001D9A  6E32               	movwf	___wmul@multiplicand,c
  5761  001D9C  ECF4  F016         	call	___wmul	;wreg free
  5762  001DA0  0E33               	movlw	low __npowers_
  5763  001DA2  2430               	addwf	?___wmul,w,c
  5764  001DA4  6EF6               	movwf	tblptrl,c
  5765  001DA6  0E7E               	movlw	high __npowers_
  5766  001DA8  2031               	addwfc	?___wmul+1,w,c
  5767  001DAA  6EF7               	movwf	tblptrh,c
  5768  001DAC                     	if	0	;There are less than 3 active tblptr bytes
  5769  001DAC                     	endif
  5770  001DAC  0009               	tblrd		*+
  5771  001DAE  FFFF               	dw	65535	; errata NOP
  5772  001DB0  CFF5 F036          	movff	tablat,___ftmul@f1
  5773  001DB4  0009               	tblrd		*+
  5774  001DB6  FFFF               	dw	65535	; errata NOP
  5775  001DB8  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5776  001DBC  000A               	tblrd		*-
  5777  001DBE  FFFF               	dw	65535	; errata NOP
  5778  001DC0  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5779  001DC4  ECCD  F011         	call	___ftmul	;wreg free
  5780  001DC8  C036  F08F         	movff	?___ftmul,_fround$2070
  5781  001DCC  C037  F090         	movff	?___ftmul+1,_fround$2070+1
  5782  001DD0  C038  F091         	movff	?___ftmul+2,_fround$2070+2
  5783                           
  5784                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5785  001DD4  C08F  F036         	movff	_fround$2070,___ftmul@f1
  5786  001DD8  C090  F037         	movff	_fround$2070+1,___ftmul@f1+1
  5787  001DDC  C091  F038         	movff	_fround$2070+2,___ftmul@f1+2
  5788  001DE0  0E00               	movlw	0
  5789  001DE2  6E39               	movwf	___ftmul@f2,c
  5790  001DE4  0E00               	movlw	0
  5791  001DE6  6E3A               	movwf	___ftmul@f2+1,c
  5792  001DE8  0E3F               	movlw	63
  5793  001DEA  6E3B               	movwf	___ftmul@f2+2,c
  5794  001DEC  ECCD  F011         	call	___ftmul	;wreg free
  5795  001DF0  D01E               	goto	L9
  5796  001DF2                     l4338:
  5797  001DF2  FFFF               	dw	65535	; assembler added errata NOP
  5798                           
  5799                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5800  001DF4  0100               	movlb	0	; () banked
  5801  001DF6  5192               	movf	fround@prec& (0+255),w,b
  5802  001DF8  0D03               	mullw	3
  5803  001DFA  0E33               	movlw	low __npowers_
  5804  001DFC  24F3               	addwf	prodl,w,c
  5805  001DFE  6EF6               	movwf	tblptrl,c
  5806  001E00  0E7E               	movlw	high __npowers_
  5807  001E02  20F4               	addwfc	prodh,w,c
  5808  001E04  6EF7               	movwf	tblptrh,c
  5809  001E06                     	if	0	;There are less than 3 active tblptr bytes
  5810  001E06                     	endif
  5811  001E06  0009               	tblrd		*+
  5812  001E08  FFFF               	dw	65535	; errata NOP
  5813  001E0A  CFF5 F036          	movff	tablat,___ftmul@f1
  5814  001E0E  0009               	tblrd		*+
  5815  001E10  FFFF               	dw	65535	; errata NOP
  5816  001E12  CFF5 F037          	movff	tablat,___ftmul@f1+1
  5817  001E16  000A               	tblrd		*-
  5818  001E18  FFFF               	dw	65535	; errata NOP
  5819  001E1A  CFF5 F038          	movff	tablat,___ftmul@f1+2
  5820  001E1E  0E00               	movlw	0
  5821  001E20  6E39               	movwf	___ftmul@f2,c
  5822  001E22  0E00               	movlw	0
  5823  001E24  6E3A               	movwf	___ftmul@f2+1,c
  5824  001E26  0E3F               	movlw	63
  5825  001E28  6E3B               	movwf	___ftmul@f2+2,c
  5826  001E2A  ECCD  F011         	call	___ftmul	;wreg free
  5827  001E2E                     L9:
  5828  001E2E  FFFF               	dw	65535	; assembler added errata NOP
  5829  001E30  C036  F089         	movff	?___ftmul,?_fround
  5830  001E34  C037  F08A         	movff	?___ftmul+1,?_fround+1
  5831  001E38  C038  F08B         	movff	?___ftmul+2,?_fround+2
  5832  001E3C  0012               	return		;funcret
  5833  001E3E  FFFF               	dw	65535	; errata NOP
  5834  001E40                     __end_of_fround:
  5835                           	opt stack 0
  5836                           tblptru	equ	0xFF8
  5837                           tblptrh	equ	0xFF7
  5838                           tblptrl	equ	0xFF6
  5839                           tablat	equ	0xFF5
  5840                           prodh	equ	0xFF4
  5841                           prodl	equ	0xFF3
  5842                           postinc0	equ	0xFEE
  5843                           wreg	equ	0xFE8
  5844                           postdec1	equ	0xFE5
  5845                           fsr1l	equ	0xFE1
  5846                           indf2	equ	0xFDF
  5847                           postinc2	equ	0xFDE
  5848                           postdec2	equ	0xFDD
  5849                           fsr2h	equ	0xFDA
  5850                           fsr2l	equ	0xFD9
  5851                           status	equ	0xFD8
  5852                           
  5853 ;; *************** function ___wmul *****************
  5854 ;; Defined at:
  5855 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul16.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  multiplier      2   47[COMRAM] unsigned int 
  5858 ;;  multiplicand    2   49[COMRAM] unsigned int 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  product         2   51[COMRAM] unsigned int 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  2   47[COMRAM] unsigned int 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0, prodl, prodh
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5870 ;;      Params:         4       0       0       0       0       0       0
  5871 ;;      Locals:         2       0       0       0       0       0       0
  5872 ;;      Temps:          0       0       0       0       0       0       0
  5873 ;;      Totals:         6       0       0       0       0       0       0
  5874 ;;Total ram usage:        6 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    2
  5877 ;; This function calls:
  5878 ;;		Nothing
  5879 ;; This function is called by:
  5880 ;;		_main
  5881 ;;		_fround
  5882 ;;		_scale
  5883 ;;		_sprintf
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text6
  5888  002DE8                     __ptext6:
  5889                           	opt stack 0
  5890  002DE8                     ___wmul:
  5891                           	opt stack 0
  5892  002DE8  FFFF               	dw	65535	; assembler added errata NOP
  5893                           
  5894                           ;incstack = 0
  5895  002DEA  5030               	movf	___wmul@multiplier,w,c
  5896  002DEC  0232               	mulwf	___wmul@multiplicand,c
  5897  002DEE  CFF3 F034          	movff	prodl,___wmul@product
  5898  002DF2  CFF4 F035          	movff	prodh,___wmul@product+1
  5899  002DF6  5030               	movf	___wmul@multiplier,w,c
  5900  002DF8  0233               	mulwf	___wmul@multiplicand+1,c
  5901  002DFA  50F3               	movf	prodl,w,c
  5902  002DFC  2635               	addwf	___wmul@product+1,f,c
  5903  002DFE  5031               	movf	___wmul@multiplier+1,w,c
  5904  002E00  0232               	mulwf	___wmul@multiplicand,c
  5905  002E02  50F3               	movf	prodl,w,c
  5906  002E04  2635               	addwf	___wmul@product+1,f,c
  5907  002E06  C034  F030         	movff	___wmul@product,?___wmul
  5908  002E0A  C035  F031         	movff	___wmul@product+1,?___wmul+1
  5909  002E0E  0012               	return		;funcret
  5910  002E10  FFFF               	dw	65535	; errata NOP
  5911  002E12                     __end_of___wmul:
  5912                           	opt stack 0
  5913                           tblptru	equ	0xFF8
  5914                           tblptrh	equ	0xFF7
  5915                           tblptrl	equ	0xFF6
  5916                           tablat	equ	0xFF5
  5917                           prodh	equ	0xFF4
  5918                           prodl	equ	0xFF3
  5919                           postinc0	equ	0xFEE
  5920                           wreg	equ	0xFE8
  5921                           postdec1	equ	0xFE5
  5922                           fsr1l	equ	0xFE1
  5923                           indf2	equ	0xFDF
  5924                           postinc2	equ	0xFDE
  5925                           postdec2	equ	0xFDD
  5926                           fsr2h	equ	0xFDA
  5927                           fsr2l	equ	0xFD9
  5928                           status	equ	0xFD8
  5929                           
  5930 ;; *************** function ___ftmul *****************
  5931 ;; Defined at:
  5932 ;;		line 62 in file "/opt/microchip/xc8/v1.38/sources/common/ftmul.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;  f1              3   53[COMRAM] float 
  5935 ;;  f2              3   56[COMRAM] float 
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
  5938 ;;  sign            1    8[BANK0 ] unsigned char 
  5939 ;;  cntr            1    7[BANK0 ] unsigned char 
  5940 ;;  exp             1    3[BANK0 ] unsigned char 
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  3   53[COMRAM] float 
  5943 ;; Registers used:
  5944 ;;		wreg, status,2, status,0, cstack
  5945 ;; Tracked objects:
  5946 ;;		On entry : 0/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5950 ;;      Params:         6       0       0       0       0       0       0
  5951 ;;      Locals:         0       6       0       0       0       0       0
  5952 ;;      Temps:          0       3       0       0       0       0       0
  5953 ;;      Totals:         6       9       0       0       0       0       0
  5954 ;;Total ram usage:       15 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:    3
  5957 ;; This function calls:
  5958 ;;		___ftpack
  5959 ;; This function is called by:
  5960 ;;		_main
  5961 ;;		_fround
  5962 ;;		_scale
  5963 ;;		_sprintf
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text7
  5968  00239A                     __ptext7:
  5969                           	opt stack 0
  5970  00239A                     ___ftmul:
  5971                           	opt stack 0
  5972  00239A  FFFF               	dw	65535	; assembler added errata NOP
  5973                           
  5974                           ;incstack = 0
  5975  00239C  C038  F080         	movff	___ftmul@f1+2,??___ftmul
  5976  0023A0  0100               	movlb	0	; () banked
  5977  0023A2  6B81               	clrf	(??___ftmul+1)& (0+255),b
  5978  0023A4  6B82               	clrf	(??___ftmul+2)& (0+255),b
  5979  0023A6  3437               	rlcf	___ftmul@f1+1,w,c
  5980  0023A8  0100               	movlb	0	; () banked
  5981  0023AA  3780               	rlcf	??___ftmul& (0+255),f,b
  5982  0023AC  E301               	bnc	u4801
  5983  0023AE  8181               	bsf	(??___ftmul+1)& (0+255),0,b
  5984  0023B0                     u4801:
  5985  0023B0  0100               	movlb	0	; () banked
  5986  0023B2  5180               	movf	??___ftmul& (0+255),w,b
  5987  0023B4  0100               	movlb	0	; () banked
  5988  0023B6  6F83               	movwf	___ftmul@exp& (0+255),b
  5989  0023B8  0100               	movlb	0	; () banked
  5990  0023BA  5183               	movf	___ftmul@exp& (0+255),w,b
  5991  0023BC  B4D8               	btfsc	status,2,c
  5992  0023BE  D012               	goto	l4200
  5993                           
  5994                           ; BSR set to: 0
  5995                           
  5996                           ; BSR set to: 0
  5997                           
  5998                           ; BSR set to: 0
  5999                           
  6000                           ; BSR set to: 0
  6001  0023C0  C03B  F080         	movff	___ftmul@f2+2,??___ftmul
  6002  0023C4  0100               	movlb	0	; () banked
  6003  0023C6  6B81               	clrf	(??___ftmul+1)& (0+255),b
  6004  0023C8  6B82               	clrf	(??___ftmul+2)& (0+255),b
  6005  0023CA  343A               	rlcf	___ftmul@f2+1,w,c
  6006  0023CC  0100               	movlb	0	; () banked
  6007  0023CE  3780               	rlcf	??___ftmul& (0+255),f,b
  6008  0023D0  E301               	bnc	u4821
  6009  0023D2  8181               	bsf	(??___ftmul+1)& (0+255),0,b
  6010  0023D4                     u4821:
  6011  0023D4  0100               	movlb	0	; () banked
  6012  0023D6  5180               	movf	??___ftmul& (0+255),w,b
  6013  0023D8  0100               	movlb	0	; () banked
  6014  0023DA  6F88               	movwf	___ftmul@sign& (0+255),b
  6015  0023DC  0100               	movlb	0	; () banked
  6016  0023DE  5188               	movf	___ftmul@sign& (0+255),w,b
  6017  0023E0  A4D8               	btfss	status,2,c
  6018  0023E2  D008               	goto	l4204
  6019  0023E4                     l4200:
  6020  0023E4  FFFF               	dw	65535	; assembler added errata NOP
  6021                           
  6022                           ; BSR set to: 0
  6023  0023E6  0E00               	movlw	0
  6024  0023E8  6E36               	movwf	?___ftmul,c
  6025  0023EA  0E00               	movlw	0
  6026  0023EC  6E37               	movwf	?___ftmul+1,c
  6027  0023EE  0E00               	movlw	0
  6028  0023F0  6E38               	movwf	?___ftmul+2,c
  6029                           
  6030                           ; BSR set to: 0
  6031  0023F2  D068               	goto	l840
  6032  0023F4                     l4204:
  6033  0023F4  FFFF               	dw	65535	; assembler added errata NOP
  6034                           
  6035                           ; BSR set to: 0
  6036  0023F6  0100               	movlb	0	; () banked
  6037  0023F8  5188               	movf	___ftmul@sign& (0+255),w,b
  6038  0023FA  0F7B               	addlw	123
  6039  0023FC  0100               	movlb	0	; () banked
  6040  0023FE  2783               	addwf	___ftmul@exp& (0+255),f,b
  6041                           
  6042                           ; BSR set to: 0
  6043  002400  C038  F088         	movff	___ftmul@f1+2,___ftmul@sign
  6044  002404  503B               	movf	___ftmul@f2+2,w,c
  6045  002406  0100               	movlb	0	; () banked
  6046  002408  1B88               	xorwf	___ftmul@sign& (0+255),f,b
  6047  00240A  0E80               	movlw	128
  6048  00240C  0100               	movlb	0	; () banked
  6049  00240E  1788               	andwf	___ftmul@sign& (0+255),f,b
  6050                           
  6051                           ; BSR set to: 0
  6052  002410  8E37               	bsf	___ftmul@f1+1,7,c
  6053                           
  6054                           ; BSR set to: 0
  6055  002412  8E3A               	bsf	___ftmul@f2+1,7,c
  6056                           
  6057                           ; BSR set to: 0
  6058  002414  0EFF               	movlw	255
  6059  002416  1639               	andwf	___ftmul@f2,f,c
  6060  002418  0EFF               	movlw	255
  6061  00241A  163A               	andwf	___ftmul@f2+1,f,c
  6062  00241C  0E00               	movlw	0
  6063  00241E  163B               	andwf	___ftmul@f2+2,f,c
  6064                           
  6065                           ; BSR set to: 0
  6066  002420  0E00               	movlw	0
  6067  002422  0100               	movlb	0	; () banked
  6068  002424  6F84               	movwf	___ftmul@f3_as_product& (0+255),b
  6069  002426  0E00               	movlw	0
  6070  002428  0100               	movlb	0	; () banked
  6071  00242A  6F85               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6072  00242C  0E00               	movlw	0
  6073  00242E  0100               	movlb	0	; () banked
  6074  002430  6F86               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6075                           
  6076                           ; BSR set to: 0
  6077  002432  0E07               	movlw	7
  6078  002434  0100               	movlb	0	; () banked
  6079  002436  6F87               	movwf	___ftmul@cntr& (0+255),b
  6080  002438                     l4218:
  6081  002438  FFFF               	dw	65535	; assembler added errata NOP
  6082                           
  6083                           ; BSR set to: 0
  6084  00243A  A036               	btfss	___ftmul@f1,0,c
  6085  00243C  D009               	goto	l4222
  6086                           
  6087                           ; BSR set to: 0
  6088  00243E  5039               	movf	___ftmul@f2,w,c
  6089  002440  0100               	movlb	0	; () banked
  6090  002442  2784               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6091  002444  503A               	movf	___ftmul@f2+1,w,c
  6092  002446  0100               	movlb	0	; () banked
  6093  002448  2385               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6094  00244A  503B               	movf	___ftmul@f2+2,w,c
  6095  00244C  0100               	movlb	0	; () banked
  6096  00244E  2386               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6097  002450                     l4222:
  6098  002450  FFFF               	dw	65535	; assembler added errata NOP
  6099                           
  6100                           ; BSR set to: 0
  6101  002452  90D8               	bcf	status,0,c
  6102  002454  3238               	rrcf	___ftmul@f1+2,f,c
  6103  002456  3237               	rrcf	___ftmul@f1+1,f,c
  6104  002458  3236               	rrcf	___ftmul@f1,f,c
  6105  00245A  90D8               	bcf	status,0,c
  6106  00245C  3639               	rlcf	___ftmul@f2,f,c
  6107  00245E  363A               	rlcf	___ftmul@f2+1,f,c
  6108  002460  363B               	rlcf	___ftmul@f2+2,f,c
  6109                           
  6110                           ; BSR set to: 0
  6111  002462  0100               	movlb	0	; () banked
  6112  002464  2F87               	decfsz	___ftmul@cntr& (0+255),f,b
  6113  002466  D7E8               	goto	l4218
  6114                           
  6115                           ; BSR set to: 0
  6116                           
  6117                           ; BSR set to: 0
  6118  002468  0E09               	movlw	9
  6119  00246A  0100               	movlb	0	; () banked
  6120  00246C  6F87               	movwf	___ftmul@cntr& (0+255),b
  6121  00246E                     l4228:
  6122  00246E  FFFF               	dw	65535	; assembler added errata NOP
  6123                           
  6124                           ; BSR set to: 0
  6125  002470  A036               	btfss	___ftmul@f1,0,c
  6126  002472  D009               	goto	l4232
  6127                           
  6128                           ; BSR set to: 0
  6129  002474  5039               	movf	___ftmul@f2,w,c
  6130  002476  0100               	movlb	0	; () banked
  6131  002478  2784               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6132  00247A  503A               	movf	___ftmul@f2+1,w,c
  6133  00247C  0100               	movlb	0	; () banked
  6134  00247E  2385               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6135  002480  503B               	movf	___ftmul@f2+2,w,c
  6136  002482  0100               	movlb	0	; () banked
  6137  002484  2386               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6138  002486                     l4232:
  6139  002486  FFFF               	dw	65535	; assembler added errata NOP
  6140                           
  6141                           ; BSR set to: 0
  6142  002488  90D8               	bcf	status,0,c
  6143  00248A  3238               	rrcf	___ftmul@f1+2,f,c
  6144  00248C  3237               	rrcf	___ftmul@f1+1,f,c
  6145  00248E  3236               	rrcf	___ftmul@f1,f,c
  6146  002490  0100               	movlb	0	; () banked
  6147  002492  90D8               	bcf	status,0,c
  6148  002494  3386               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6149  002496  3385               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6150  002498  3384               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6151                           
  6152                           ; BSR set to: 0
  6153  00249A  0100               	movlb	0	; () banked
  6154  00249C  2F87               	decfsz	___ftmul@cntr& (0+255),f,b
  6155  00249E  D7E7               	goto	l4228
  6156                           
  6157                           ; BSR set to: 0
  6158                           
  6159                           ; BSR set to: 0
  6160  0024A0  C084  F022         	movff	___ftmul@f3_as_product,___ftpack@arg
  6161  0024A4  C085  F023         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6162  0024A8  C086  F024         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6163  0024AC  C083  F025         	movff	___ftmul@exp,___ftpack@exp
  6164  0024B0  C088  F026         	movff	___ftmul@sign,___ftpack@sign
  6165  0024B4  ECD5  F013         	call	___ftpack	;wreg free
  6166  0024B8  C022  F036         	movff	?___ftpack,?___ftmul
  6167  0024BC  C023  F037         	movff	?___ftpack+1,?___ftmul+1
  6168  0024C0  C024  F038         	movff	?___ftpack+2,?___ftmul+2
  6169  0024C4                     l840:
  6170  0024C4  FFFF               	dw	65535	; assembler added errata NOP
  6171  0024C6  0012               	return		;funcret
  6172  0024C8  FFFF               	dw	65535	; errata NOP
  6173  0024CA                     __end_of___ftmul:
  6174                           	opt stack 0
  6175                           tblptru	equ	0xFF8
  6176                           tblptrh	equ	0xFF7
  6177                           tblptrl	equ	0xFF6
  6178                           tablat	equ	0xFF5
  6179                           prodh	equ	0xFF4
  6180                           prodl	equ	0xFF3
  6181                           postinc0	equ	0xFEE
  6182                           wreg	equ	0xFE8
  6183                           postdec1	equ	0xFE5
  6184                           fsr1l	equ	0xFE1
  6185                           indf2	equ	0xFDF
  6186                           postinc2	equ	0xFDE
  6187                           postdec2	equ	0xFDD
  6188                           fsr2h	equ	0xFDA
  6189                           fsr2l	equ	0xFD9
  6190                           status	equ	0xFD8
  6191                           
  6192 ;; *************** function ___awmod *****************
  6193 ;; Defined at:
  6194 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/awmod.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;  dividend        2   33[COMRAM] int 
  6197 ;;  divisor         2   35[COMRAM] int 
  6198 ;; Auto vars:     Size  Location     Type
  6199 ;;  sign            1   38[COMRAM] unsigned char 
  6200 ;;  counter         1   37[COMRAM] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  2   33[COMRAM] int 
  6203 ;; Registers used:
  6204 ;;		wreg, status,2, status,0
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6210 ;;      Params:         4       0       0       0       0       0       0
  6211 ;;      Locals:         2       0       0       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0
  6213 ;;      Totals:         6       0       0       0       0       0       0
  6214 ;;Total ram usage:        6 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    2
  6217 ;; This function calls:
  6218 ;;		Nothing
  6219 ;; This function is called by:
  6220 ;;		_fround
  6221 ;;		_scale
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           	psect	text8
  6226  002A32                     __ptext8:
  6227                           	opt stack 0
  6228  002A32                     ___awmod:
  6229                           	opt stack 0
  6230  002A32  FFFF               	dw	65535	; assembler added errata NOP
  6231                           
  6232                           ;incstack = 0
  6233  002A34  0E00               	movlw	0
  6234  002A36  6E27               	movwf	___awmod@sign,c
  6235  002A38  AE23               	btfss	___awmod@dividend+1,7,c
  6236  002A3A  D006               	goto	l4292
  6237  002A3C  6C22               	negf	___awmod@dividend,c
  6238  002A3E  1E23               	comf	___awmod@dividend+1,f,c
  6239  002A40  B0D8               	btfsc	status,0,c
  6240  002A42  2A23               	incf	___awmod@dividend+1,f,c
  6241  002A44  0E01               	movlw	1
  6242  002A46  6E27               	movwf	___awmod@sign,c
  6243  002A48                     l4292:
  6244  002A48  FFFF               	dw	65535	; assembler added errata NOP
  6245  002A4A  AE25               	btfss	___awmod@divisor+1,7,c
  6246  002A4C  D004               	goto	l4296
  6247  002A4E  6C24               	negf	___awmod@divisor,c
  6248  002A50  1E25               	comf	___awmod@divisor+1,f,c
  6249  002A52  B0D8               	btfsc	status,0,c
  6250  002A54  2A25               	incf	___awmod@divisor+1,f,c
  6251  002A56                     l4296:
  6252  002A56  FFFF               	dw	65535	; assembler added errata NOP
  6253  002A58  5024               	movf	___awmod@divisor,w,c
  6254  002A5A  1025               	iorwf	___awmod@divisor+1,w,c
  6255  002A5C  B4D8               	btfsc	status,2,c
  6256  002A5E  D01C               	goto	l4312
  6257  002A60  0E01               	movlw	1
  6258  002A62  6E26               	movwf	___awmod@counter,c
  6259  002A64  D005               	goto	l4302
  6260  002A66                     l4300:
  6261  002A66  FFFF               	dw	65535	; assembler added errata NOP
  6262  002A68  90D8               	bcf	status,0,c
  6263  002A6A  3624               	rlcf	___awmod@divisor,f,c
  6264  002A6C  3625               	rlcf	___awmod@divisor+1,f,c
  6265  002A6E  2A26               	incf	___awmod@counter,f,c
  6266  002A70                     l4302:
  6267  002A70  FFFF               	dw	65535	; assembler added errata NOP
  6268  002A72  AE25               	btfss	___awmod@divisor+1,7,c
  6269  002A74  D7F8               	goto	l4300
  6270  002A76                     l4304:
  6271  002A76  FFFF               	dw	65535	; assembler added errata NOP
  6272  002A78  5024               	movf	___awmod@divisor,w,c
  6273  002A7A  5C22               	subwf	___awmod@dividend,w,c
  6274  002A7C  5025               	movf	___awmod@divisor+1,w,c
  6275  002A7E  5823               	subwfb	___awmod@dividend+1,w,c
  6276  002A80  A0D8               	btfss	status,0,c
  6277  002A82  D004               	goto	l4308
  6278  002A84  5024               	movf	___awmod@divisor,w,c
  6279  002A86  5E22               	subwf	___awmod@dividend,f,c
  6280  002A88  5025               	movf	___awmod@divisor+1,w,c
  6281  002A8A  5A23               	subwfb	___awmod@dividend+1,f,c
  6282  002A8C                     l4308:
  6283  002A8C  FFFF               	dw	65535	; assembler added errata NOP
  6284  002A8E  90D8               	bcf	status,0,c
  6285  002A90  3225               	rrcf	___awmod@divisor+1,f,c
  6286  002A92  3224               	rrcf	___awmod@divisor,f,c
  6287  002A94  2E26               	decfsz	___awmod@counter,f,c
  6288  002A96  D7EF               	goto	l4304
  6289  002A98                     l4312:
  6290  002A98  FFFF               	dw	65535	; assembler added errata NOP
  6291  002A9A  5027               	movf	___awmod@sign,w,c
  6292  002A9C  B4D8               	btfsc	status,2,c
  6293  002A9E  D004               	goto	l4316
  6294  002AA0  6C22               	negf	___awmod@dividend,c
  6295  002AA2  1E23               	comf	___awmod@dividend+1,f,c
  6296  002AA4  B0D8               	btfsc	status,0,c
  6297  002AA6  2A23               	incf	___awmod@dividend+1,f,c
  6298  002AA8                     l4316:
  6299  002AA8  FFFF               	dw	65535	; assembler added errata NOP
  6300  002AAA  C022  F022         	movff	___awmod@dividend,?___awmod
  6301  002AAE  C023  F023         	movff	___awmod@dividend+1,?___awmod+1
  6302  002AB2  0012               	return		;funcret
  6303  002AB4  FFFF               	dw	65535	; errata NOP
  6304  002AB6                     __end_of___awmod:
  6305                           	opt stack 0
  6306                           tblptru	equ	0xFF8
  6307                           tblptrh	equ	0xFF7
  6308                           tblptrl	equ	0xFF6
  6309                           tablat	equ	0xFF5
  6310                           prodh	equ	0xFF4
  6311                           prodl	equ	0xFF3
  6312                           postinc0	equ	0xFEE
  6313                           wreg	equ	0xFE8
  6314                           postdec1	equ	0xFE5
  6315                           fsr1l	equ	0xFE1
  6316                           indf2	equ	0xFDF
  6317                           postinc2	equ	0xFDE
  6318                           postdec2	equ	0xFDD
  6319                           fsr2h	equ	0xFDA
  6320                           fsr2l	equ	0xFD9
  6321                           status	equ	0xFD8
  6322                           
  6323 ;; *************** function __tdiv_to_l_ *****************
  6324 ;; Defined at:
  6325 ;;		line 60 in file "/opt/microchip/xc8/v1.38/sources/common/ftdivl.c"
  6326 ;; Parameters:    Size  Location     Type
  6327 ;;  f1              3   33[COMRAM] float 
  6328 ;;  f2              3   36[COMRAM] float 
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;  quot            4   42[COMRAM] unsigned long 
  6331 ;;  exp1            1   47[COMRAM] unsigned char 
  6332 ;;  cntr            1   46[COMRAM] unsigned char 
  6333 ;; Return value:  Size  Location     Type
  6334 ;;                  4   33[COMRAM] unsigned long 
  6335 ;; Registers used:
  6336 ;;		wreg, status,2, status,0
  6337 ;; Tracked objects:
  6338 ;;		On entry : 0/0
  6339 ;;		On exit  : 0/0
  6340 ;;		Unchanged: 0/0
  6341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6342 ;;      Params:         6       0       0       0       0       0       0
  6343 ;;      Locals:         6       0       0       0       0       0       0
  6344 ;;      Temps:          3       0       0       0       0       0       0
  6345 ;;      Totals:        15       0       0       0       0       0       0
  6346 ;;Total ram usage:       15 bytes
  6347 ;; Hardware stack levels used:    1
  6348 ;; Hardware stack levels required when called:    2
  6349 ;; This function calls:
  6350 ;;		Nothing
  6351 ;; This function is called by:
  6352 ;;		_sprintf
  6353 ;; This function uses a non-reentrant model
  6354 ;;
  6355                           
  6356                           	psect	text9
  6357  0024CA                     __ptext9:
  6358                           	opt stack 0
  6359  0024CA                     __tdiv_to_l_:
  6360                           	opt stack 0
  6361  0024CA  FFFF               	dw	65535	; assembler added errata NOP
  6362                           
  6363                           ;incstack = 0
  6364  0024CC  C024  F028         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6365  0024D0  6A29               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6366  0024D2  6A2A               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6367  0024D4  3423               	rlcf	__tdiv_to_l_@f1+1,w,c
  6368  0024D6  3628               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6369  0024D8  E301               	bnc	u5071
  6370  0024DA  8029               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6371  0024DC                     u5071:
  6372  0024DC  5028               	movf	??__tdiv_to_l_,w,c
  6373  0024DE  6E30               	movwf	__tdiv_to_l_@exp1,c
  6374  0024E0  5030               	movf	__tdiv_to_l_@exp1,w,c
  6375  0024E2  B4D8               	btfsc	status,2,c
  6376  0024E4  D05A               	goto	l4440
  6377  0024E6  C027  F028         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6378  0024EA  6A29               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6379  0024EC  6A2A               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6380  0024EE  3426               	rlcf	__tdiv_to_l_@f2+1,w,c
  6381  0024F0  3628               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6382  0024F2  E301               	bnc	u5091
  6383  0024F4  8029               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6384  0024F6                     u5091:
  6385  0024F6  5028               	movf	??__tdiv_to_l_,w,c
  6386  0024F8  6E2F               	movwf	__tdiv_to_l_@cntr,c
  6387  0024FA  502F               	movf	__tdiv_to_l_@cntr,w,c
  6388  0024FC  B4D8               	btfsc	status,2,c
  6389  0024FE  D04D               	goto	l4440
  6390  002500  8E23               	bsf	__tdiv_to_l_@f1+1,7,c
  6391  002502  0EFF               	movlw	255
  6392  002504  1622               	andwf	__tdiv_to_l_@f1,f,c
  6393  002506  0EFF               	movlw	255
  6394  002508  1623               	andwf	__tdiv_to_l_@f1+1,f,c
  6395  00250A  0E00               	movlw	0
  6396  00250C  1624               	andwf	__tdiv_to_l_@f1+2,f,c
  6397  00250E  8E26               	bsf	__tdiv_to_l_@f2+1,7,c
  6398  002510  0EFF               	movlw	255
  6399  002512  1625               	andwf	__tdiv_to_l_@f2,f,c
  6400  002514  0EFF               	movlw	255
  6401  002516  1626               	andwf	__tdiv_to_l_@f2+1,f,c
  6402  002518  0E00               	movlw	0
  6403  00251A  1627               	andwf	__tdiv_to_l_@f2+2,f,c
  6404  00251C  0E00               	movlw	0
  6405  00251E  6E2B               	movwf	__tdiv_to_l_@quot,c
  6406  002520  0E00               	movlw	0
  6407  002522  6E2C               	movwf	__tdiv_to_l_@quot+1,c
  6408  002524  0E00               	movlw	0
  6409  002526  6E2D               	movwf	__tdiv_to_l_@quot+2,c
  6410  002528  0E00               	movlw	0
  6411  00252A  6E2E               	movwf	__tdiv_to_l_@quot+3,c
  6412  00252C  0E7F               	movlw	127
  6413  00252E  5E30               	subwf	__tdiv_to_l_@exp1,f,c
  6414  002530  502F               	movf	__tdiv_to_l_@cntr,w,c
  6415  002532  0F98               	addlw	152
  6416  002534  5E30               	subwf	__tdiv_to_l_@exp1,f,c
  6417  002536  0E18               	movlw	24
  6418  002538  6E2F               	movwf	__tdiv_to_l_@cntr,c
  6419  00253A                     l818:
  6420  00253A  FFFF               	dw	65535	; assembler added errata NOP
  6421  00253C  90D8               	bcf	status,0,c
  6422  00253E  362B               	rlcf	__tdiv_to_l_@quot,f,c
  6423  002540  362C               	rlcf	__tdiv_to_l_@quot+1,f,c
  6424  002542  362D               	rlcf	__tdiv_to_l_@quot+2,f,c
  6425  002544  362E               	rlcf	__tdiv_to_l_@quot+3,f,c
  6426  002546  5025               	movf	__tdiv_to_l_@f2,w,c
  6427  002548  5C22               	subwf	__tdiv_to_l_@f1,w,c
  6428  00254A  5026               	movf	__tdiv_to_l_@f2+1,w,c
  6429  00254C  5823               	subwfb	__tdiv_to_l_@f1+1,w,c
  6430  00254E  5027               	movf	__tdiv_to_l_@f2+2,w,c
  6431  002550  5824               	subwfb	__tdiv_to_l_@f1+2,w,c
  6432  002552  A0D8               	btfss	status,0,c
  6433  002554  D007               	goto	l819
  6434  002556  5025               	movf	__tdiv_to_l_@f2,w,c
  6435  002558  5E22               	subwf	__tdiv_to_l_@f1,f,c
  6436  00255A  5026               	movf	__tdiv_to_l_@f2+1,w,c
  6437  00255C  5A23               	subwfb	__tdiv_to_l_@f1+1,f,c
  6438  00255E  5027               	movf	__tdiv_to_l_@f2+2,w,c
  6439  002560  5A24               	subwfb	__tdiv_to_l_@f1+2,f,c
  6440  002562  802B               	bsf	__tdiv_to_l_@quot,0,c
  6441  002564                     l819:
  6442  002564  FFFF               	dw	65535	; assembler added errata NOP
  6443  002566  90D8               	bcf	status,0,c
  6444  002568  3622               	rlcf	__tdiv_to_l_@f1,f,c
  6445  00256A  3623               	rlcf	__tdiv_to_l_@f1+1,f,c
  6446  00256C  3624               	rlcf	__tdiv_to_l_@f1+2,f,c
  6447  00256E  2E2F               	decfsz	__tdiv_to_l_@cntr,f,c
  6448  002570  D7E4               	goto	l818
  6449  002572  AE30               	btfss	__tdiv_to_l_@exp1,7,c
  6450  002574  D00E               	goto	l4438
  6451  002576  5030               	movf	__tdiv_to_l_@exp1,w,c
  6452  002578  0A80               	xorlw	128
  6453  00257A  0F97               	addlw	151
  6454  00257C  A0D8               	btfss	status,0,c
  6455  00257E  D00D               	goto	l4440
  6456  002580                     l4434:
  6457  002580  FFFF               	dw	65535	; assembler added errata NOP
  6458  002582  90D8               	bcf	status,0,c
  6459  002584  322E               	rrcf	__tdiv_to_l_@quot+3,f,c
  6460  002586  322D               	rrcf	__tdiv_to_l_@quot+2,f,c
  6461  002588  322C               	rrcf	__tdiv_to_l_@quot+1,f,c
  6462  00258A  322B               	rrcf	__tdiv_to_l_@quot,f,c
  6463  00258C  3E30               	incfsz	__tdiv_to_l_@exp1,f,c
  6464  00258E  D7F8               	goto	l4434
  6465  002590  D019               	goto	l825
  6466  002592                     l4438:
  6467  002592  FFFF               	dw	65535	; assembler added errata NOP
  6468  002594  0E17               	movlw	23
  6469  002596  6430               	cpfsgt	__tdiv_to_l_@exp1,c
  6470  002598  D011               	goto	l4446
  6471  00259A                     l4440:
  6472  00259A  FFFF               	dw	65535	; assembler added errata NOP
  6473  00259C  0E00               	movlw	0
  6474  00259E  6E22               	movwf	?__tdiv_to_l_,c
  6475  0025A0  0E00               	movlw	0
  6476  0025A2  6E23               	movwf	?__tdiv_to_l_+1,c
  6477  0025A4  0E00               	movlw	0
  6478  0025A6  6E24               	movwf	?__tdiv_to_l_+2,c
  6479  0025A8  0E00               	movlw	0
  6480  0025AA  6E25               	movwf	?__tdiv_to_l_+3,c
  6481  0025AC  D014               	goto	l816
  6482  0025AE                     l4444:
  6483  0025AE  FFFF               	dw	65535	; assembler added errata NOP
  6484  0025B0  90D8               	bcf	status,0,c
  6485  0025B2  362B               	rlcf	__tdiv_to_l_@quot,f,c
  6486  0025B4  362C               	rlcf	__tdiv_to_l_@quot+1,f,c
  6487  0025B6  362D               	rlcf	__tdiv_to_l_@quot+2,f,c
  6488  0025B8  362E               	rlcf	__tdiv_to_l_@quot+3,f,c
  6489  0025BA  0630               	decf	__tdiv_to_l_@exp1,f,c
  6490  0025BC                     l4446:
  6491  0025BC  FFFF               	dw	65535	; assembler added errata NOP
  6492  0025BE  5030               	movf	__tdiv_to_l_@exp1,w,c
  6493  0025C0  A4D8               	btfss	status,2,c
  6494  0025C2  D7F5               	goto	l4444
  6495  0025C4                     l825:
  6496  0025C4  FFFF               	dw	65535	; assembler added errata NOP
  6497  0025C6  C02B  F022         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6498  0025CA  C02C  F023         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6499  0025CE  C02D  F024         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6500  0025D2  C02E  F025         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6501  0025D6                     l816:
  6502  0025D6  FFFF               	dw	65535	; assembler added errata NOP
  6503  0025D8  0012               	return		;funcret
  6504  0025DA  FFFF               	dw	65535	; errata NOP
  6505  0025DC                     __end_of__tdiv_to_l_:
  6506                           	opt stack 0
  6507                           tblptru	equ	0xFF8
  6508                           tblptrh	equ	0xFF7
  6509                           tblptrl	equ	0xFF6
  6510                           tablat	equ	0xFF5
  6511                           prodh	equ	0xFF4
  6512                           prodl	equ	0xFF3
  6513                           postinc0	equ	0xFEE
  6514                           wreg	equ	0xFE8
  6515                           postdec1	equ	0xFE5
  6516                           fsr1l	equ	0xFE1
  6517                           indf2	equ	0xFDF
  6518                           postinc2	equ	0xFDE
  6519                           postdec2	equ	0xFDD
  6520                           fsr2h	equ	0xFDA
  6521                           fsr2l	equ	0xFD9
  6522                           status	equ	0xFD8
  6523                           
  6524 ;; *************** function __div_to_l_ *****************
  6525 ;; Defined at:
  6526 ;;		line 60 in file "/opt/microchip/xc8/v1.38/sources/common/fldivl.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;  f1              3   33[COMRAM] unsigned long 
  6529 ;;  f2              3   36[COMRAM] unsigned long 
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;  quot            4   39[COMRAM] unsigned long 
  6532 ;;  exp1            1   44[COMRAM] unsigned char 
  6533 ;;  cntr            1   43[COMRAM] unsigned char 
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  4   33[COMRAM] unsigned long 
  6536 ;; Registers used:
  6537 ;;		wreg, status,2, status,0
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6543 ;;      Params:         6       0       0       0       0       0       0
  6544 ;;      Locals:         6       0       0       0       0       0       0
  6545 ;;      Temps:          0       0       0       0       0       0       0
  6546 ;;      Totals:        12       0       0       0       0       0       0
  6547 ;;Total ram usage:       12 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    2
  6550 ;; This function calls:
  6551 ;;		Nothing
  6552 ;; This function is called by:
  6553 ;;		_sprintf
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           	psect	text10
  6558  0025DC                     __ptext10:
  6559                           	opt stack 0
  6560  0025DC                     __div_to_l_:
  6561                           	opt stack 0
  6562  0025DC  FFFF               	dw	65535	; assembler added errata NOP
  6563                           
  6564                           ;incstack = 0
  6565  0025DE  3424               	rlcf	__div_to_l_@f1+2,w,c
  6566  0025E0  3425               	rlcf	__div_to_l_@f1+3,w,c
  6567  0025E2  6E2D               	movwf	__div_to_l_@exp1,c
  6568  0025E4  502D               	movf	__div_to_l_@exp1,w,c
  6569  0025E6  B4D8               	btfsc	status,2,c
  6570  0025E8  D05C               	goto	l4500
  6571  0025EA  3427               	rlcf	__div_to_l_@f2+2,w,c
  6572  0025EC  3428               	rlcf	__div_to_l_@f2+3,w,c
  6573  0025EE  6E2C               	movwf	__div_to_l_@cntr,c
  6574  0025F0  502C               	movf	__div_to_l_@cntr,w,c
  6575  0025F2  B4D8               	btfsc	status,2,c
  6576  0025F4  D056               	goto	l4500
  6577  0025F6  8E24               	bsf	__div_to_l_@f1+2,7,c
  6578  0025F8  0EFF               	movlw	255
  6579  0025FA  1622               	andwf	__div_to_l_@f1,f,c
  6580  0025FC  0EFF               	movlw	255
  6581  0025FE  1623               	andwf	__div_to_l_@f1+1,f,c
  6582  002600  0EFF               	movlw	255
  6583  002602  1624               	andwf	__div_to_l_@f1+2,f,c
  6584  002604  0E00               	movlw	0
  6585  002606  1625               	andwf	__div_to_l_@f1+3,f,c
  6586  002608  8E27               	bsf	__div_to_l_@f2+2,7,c
  6587  00260A  0EFF               	movlw	255
  6588  00260C  1625               	andwf	__div_to_l_@f2,f,c
  6589  00260E  0EFF               	movlw	255
  6590  002610  1626               	andwf	__div_to_l_@f2+1,f,c
  6591  002612  0EFF               	movlw	255
  6592  002614  1627               	andwf	__div_to_l_@f2+2,f,c
  6593  002616  0E00               	movlw	0
  6594  002618  1628               	andwf	__div_to_l_@f2+3,f,c
  6595  00261A  0E00               	movlw	0
  6596  00261C  6E28               	movwf	__div_to_l_@quot,c
  6597  00261E  0E00               	movlw	0
  6598  002620  6E29               	movwf	__div_to_l_@quot+1,c
  6599  002622  0E00               	movlw	0
  6600  002624  6E2A               	movwf	__div_to_l_@quot+2,c
  6601  002626  0E00               	movlw	0
  6602  002628  6E2B               	movwf	__div_to_l_@quot+3,c
  6603  00262A  0E7F               	movlw	127
  6604  00262C  5E2D               	subwf	__div_to_l_@exp1,f,c
  6605  00262E  502C               	movf	__div_to_l_@cntr,w,c
  6606  002630  0FA0               	addlw	160
  6607  002632  5E2D               	subwf	__div_to_l_@exp1,f,c
  6608  002634  0E20               	movlw	32
  6609  002636  6E2C               	movwf	__div_to_l_@cntr,c
  6610  002638                     l4474:
  6611  002638  FFFF               	dw	65535	; assembler added errata NOP
  6612  00263A  90D8               	bcf	status,0,c
  6613  00263C  3628               	rlcf	__div_to_l_@quot,f,c
  6614  00263E  3629               	rlcf	__div_to_l_@quot+1,f,c
  6615  002640  362A               	rlcf	__div_to_l_@quot+2,f,c
  6616  002642  362B               	rlcf	__div_to_l_@quot+3,f,c
  6617  002644  5025               	movf	__div_to_l_@f2,w,c
  6618  002646  5C22               	subwf	__div_to_l_@f1,w,c
  6619  002648  5026               	movf	__div_to_l_@f2+1,w,c
  6620  00264A  5823               	subwfb	__div_to_l_@f1+1,w,c
  6621  00264C  5027               	movf	__div_to_l_@f2+2,w,c
  6622  00264E  5824               	subwfb	__div_to_l_@f1+2,w,c
  6623  002650  5028               	movf	__div_to_l_@f2+3,w,c
  6624  002652  5825               	subwfb	__div_to_l_@f1+3,w,c
  6625  002654  A0D8               	btfss	status,0,c
  6626  002656  D009               	goto	l4482
  6627  002658  5025               	movf	__div_to_l_@f2,w,c
  6628  00265A  5E22               	subwf	__div_to_l_@f1,f,c
  6629  00265C  5026               	movf	__div_to_l_@f2+1,w,c
  6630  00265E  5A23               	subwfb	__div_to_l_@f1+1,f,c
  6631  002660  5027               	movf	__div_to_l_@f2+2,w,c
  6632  002662  5A24               	subwfb	__div_to_l_@f1+2,f,c
  6633  002664  5028               	movf	__div_to_l_@f2+3,w,c
  6634  002666  5A25               	subwfb	__div_to_l_@f1+3,f,c
  6635  002668  8028               	bsf	__div_to_l_@quot,0,c
  6636  00266A                     l4482:
  6637  00266A  FFFF               	dw	65535	; assembler added errata NOP
  6638  00266C  90D8               	bcf	status,0,c
  6639  00266E  3622               	rlcf	__div_to_l_@f1,f,c
  6640  002670  3623               	rlcf	__div_to_l_@f1+1,f,c
  6641  002672  3624               	rlcf	__div_to_l_@f1+2,f,c
  6642  002674  3625               	rlcf	__div_to_l_@f1+3,f,c
  6643  002676  2E2C               	decfsz	__div_to_l_@cntr,f,c
  6644  002678  D7DF               	goto	l4474
  6645  00267A  AE2D               	btfss	__div_to_l_@exp1,7,c
  6646  00267C  D00E               	goto	l4498
  6647  00267E  502D               	movf	__div_to_l_@exp1,w,c
  6648  002680  0A80               	xorlw	128
  6649  002682  0F9F               	addlw	159
  6650  002684  A0D8               	btfss	status,0,c
  6651  002686  D00D               	goto	l4500
  6652  002688                     l4494:
  6653  002688  FFFF               	dw	65535	; assembler added errata NOP
  6654  00268A  90D8               	bcf	status,0,c
  6655  00268C  322B               	rrcf	__div_to_l_@quot+3,f,c
  6656  00268E  322A               	rrcf	__div_to_l_@quot+2,f,c
  6657  002690  3229               	rrcf	__div_to_l_@quot+1,f,c
  6658  002692  3228               	rrcf	__div_to_l_@quot,f,c
  6659  002694  3E2D               	incfsz	__div_to_l_@exp1,f,c
  6660  002696  D7F8               	goto	l4494
  6661  002698  D019               	goto	l721
  6662  00269A                     l4498:
  6663  00269A  FFFF               	dw	65535	; assembler added errata NOP
  6664  00269C  0E1F               	movlw	31
  6665  00269E  642D               	cpfsgt	__div_to_l_@exp1,c
  6666  0026A0  D011               	goto	l4506
  6667  0026A2                     l4500:
  6668  0026A2  FFFF               	dw	65535	; assembler added errata NOP
  6669  0026A4  0E00               	movlw	0
  6670  0026A6  6E22               	movwf	?__div_to_l_,c
  6671  0026A8  0E00               	movlw	0
  6672  0026AA  6E23               	movwf	?__div_to_l_+1,c
  6673  0026AC  0E00               	movlw	0
  6674  0026AE  6E24               	movwf	?__div_to_l_+2,c
  6675  0026B0  0E00               	movlw	0
  6676  0026B2  6E25               	movwf	?__div_to_l_+3,c
  6677  0026B4  D014               	goto	l712
  6678  0026B6                     l4504:
  6679  0026B6  FFFF               	dw	65535	; assembler added errata NOP
  6680  0026B8  90D8               	bcf	status,0,c
  6681  0026BA  3628               	rlcf	__div_to_l_@quot,f,c
  6682  0026BC  3629               	rlcf	__div_to_l_@quot+1,f,c
  6683  0026BE  362A               	rlcf	__div_to_l_@quot+2,f,c
  6684  0026C0  362B               	rlcf	__div_to_l_@quot+3,f,c
  6685  0026C2  062D               	decf	__div_to_l_@exp1,f,c
  6686  0026C4                     l4506:
  6687  0026C4  FFFF               	dw	65535	; assembler added errata NOP
  6688  0026C6  502D               	movf	__div_to_l_@exp1,w,c
  6689  0026C8  A4D8               	btfss	status,2,c
  6690  0026CA  D7F5               	goto	l4504
  6691  0026CC                     l721:
  6692  0026CC  FFFF               	dw	65535	; assembler added errata NOP
  6693  0026CE  C028  F022         	movff	__div_to_l_@quot,?__div_to_l_
  6694  0026D2  C029  F023         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6695  0026D6  C02A  F024         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6696  0026DA  C02B  F025         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6697  0026DE                     l712:
  6698  0026DE  FFFF               	dw	65535	; assembler added errata NOP
  6699  0026E0  0012               	return		;funcret
  6700  0026E2  FFFF               	dw	65535	; errata NOP
  6701  0026E4                     __end_of__div_to_l_:
  6702                           	opt stack 0
  6703                           tblptru	equ	0xFF8
  6704                           tblptrh	equ	0xFF7
  6705                           tblptrl	equ	0xFF6
  6706                           tablat	equ	0xFF5
  6707                           prodh	equ	0xFF4
  6708                           prodl	equ	0xFF3
  6709                           postinc0	equ	0xFEE
  6710                           wreg	equ	0xFE8
  6711                           postdec1	equ	0xFE5
  6712                           fsr1l	equ	0xFE1
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           fsr2h	equ	0xFDA
  6717                           fsr2l	equ	0xFD9
  6718                           status	equ	0xFD8
  6719                           
  6720 ;; *************** function ___lltoft *****************
  6721 ;; Defined at:
  6722 ;;		line 35 in file "/opt/microchip/xc8/v1.38/sources/common/lltoft.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;  c               4   41[COMRAM] unsigned long 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;  exp             1   49[COMRAM] unsigned char 
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  3   41[COMRAM] float 
  6729 ;; Registers used:
  6730 ;;		wreg, status,2, status,0, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6736 ;;      Params:         4       0       0       0       0       0       0
  6737 ;;      Locals:         1       0       0       0       0       0       0
  6738 ;;      Temps:          4       0       0       0       0       0       0
  6739 ;;      Totals:         9       0       0       0       0       0       0
  6740 ;;Total ram usage:        9 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    3
  6743 ;; This function calls:
  6744 ;;		___ftpack
  6745 ;; This function is called by:
  6746 ;;		_sprintf
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text11
  6751  002C14                     __ptext11:
  6752                           	opt stack 0
  6753  002C14                     ___lltoft:
  6754                           	opt stack 0
  6755  002C14  FFFF               	dw	65535	; assembler added errata NOP
  6756                           
  6757                           ;incstack = 0
  6758  002C16  0E8E               	movlw	142
  6759  002C18  6E32               	movwf	___lltoft@exp,c
  6760  002C1A  D007               	goto	l4626
  6761  002C1C                     l4624:
  6762  002C1C  FFFF               	dw	65535	; assembler added errata NOP
  6763  002C1E  90D8               	bcf	status,0,c
  6764  002C20  322D               	rrcf	___lltoft@c+3,f,c
  6765  002C22  322C               	rrcf	___lltoft@c+2,f,c
  6766  002C24  322B               	rrcf	___lltoft@c+1,f,c
  6767  002C26  322A               	rrcf	___lltoft@c,f,c
  6768  002C28  2A32               	incf	___lltoft@exp,f,c
  6769  002C2A                     l4626:
  6770  002C2A  FFFF               	dw	65535	; assembler added errata NOP
  6771  002C2C  0E00               	movlw	0
  6772  002C2E  142A               	andwf	___lltoft@c,w,c
  6773  002C30  6E2E               	movwf	??___lltoft& (0+255),c
  6774  002C32  0E00               	movlw	0
  6775  002C34  142B               	andwf	___lltoft@c+1,w,c
  6776  002C36  6E2F               	movwf	(??___lltoft+1)& (0+255),c
  6777  002C38  0E00               	movlw	0
  6778  002C3A  142C               	andwf	___lltoft@c+2,w,c
  6779  002C3C  6E30               	movwf	(??___lltoft+2)& (0+255),c
  6780  002C3E  0EFF               	movlw	255
  6781  002C40  142D               	andwf	___lltoft@c+3,w,c
  6782  002C42  6E31               	movwf	(??___lltoft+3)& (0+255),c
  6783  002C44  502E               	movf	??___lltoft,w,c
  6784  002C46  102F               	iorwf	??___lltoft+1,w,c
  6785  002C48  1030               	iorwf	??___lltoft+2,w,c
  6786  002C4A  1031               	iorwf	??___lltoft+3,w,c
  6787  002C4C  A4D8               	btfss	status,2,c
  6788  002C4E  D7E6               	goto	l4624
  6789  002C50  C02A  F022         	movff	___lltoft@c,___ftpack@arg
  6790  002C54  C02B  F023         	movff	___lltoft@c+1,___ftpack@arg+1
  6791  002C58  C02C  F024         	movff	___lltoft@c+2,___ftpack@arg+2
  6792  002C5C  C032  F025         	movff	___lltoft@exp,___ftpack@exp
  6793  002C60  0E00               	movlw	0
  6794  002C62  6E26               	movwf	___ftpack@sign,c
  6795  002C64  ECD5  F013         	call	___ftpack	;wreg free
  6796  002C68  C022  F02A         	movff	?___ftpack,?___lltoft
  6797  002C6C  C023  F02B         	movff	?___ftpack+1,?___lltoft+1
  6798  002C70  C024  F02C         	movff	?___ftpack+2,?___lltoft+2
  6799  002C74  0012               	return		;funcret
  6800  002C76  FFFF               	dw	65535	; errata NOP
  6801  002C78                     __end_of___lltoft:
  6802                           	opt stack 0
  6803                           tblptru	equ	0xFF8
  6804                           tblptrh	equ	0xFF7
  6805                           tblptrl	equ	0xFF6
  6806                           tablat	equ	0xFF5
  6807                           prodh	equ	0xFF4
  6808                           prodl	equ	0xFF3
  6809                           postinc0	equ	0xFEE
  6810                           wreg	equ	0xFE8
  6811                           postdec1	equ	0xFE5
  6812                           fsr1l	equ	0xFE1
  6813                           indf2	equ	0xFDF
  6814                           postinc2	equ	0xFDE
  6815                           postdec2	equ	0xFDD
  6816                           fsr2h	equ	0xFDA
  6817                           fsr2l	equ	0xFD9
  6818                           status	equ	0xFD8
  6819                           
  6820 ;; *************** function ___llmod *****************
  6821 ;; Defined at:
  6822 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/llmod.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;  dividend        4   46[COMRAM] unsigned long 
  6825 ;;  divisor         4   50[COMRAM] unsigned long 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  counter         1   54[COMRAM] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  4   46[COMRAM] unsigned long 
  6830 ;; Registers used:
  6831 ;;		wreg, status,2, status,0
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6837 ;;      Params:         8       0       0       0       0       0       0
  6838 ;;      Locals:         1       0       0       0       0       0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0
  6840 ;;      Totals:         9       0       0       0       0       0       0
  6841 ;;Total ram usage:        9 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    2
  6844 ;; This function calls:
  6845 ;;		Nothing
  6846 ;; This function is called by:
  6847 ;;		_sprintf
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text12
  6852  002B2E                     __ptext12:
  6853                           	opt stack 0
  6854  002B2E                     ___llmod:
  6855                           	opt stack 0
  6856  002B2E  FFFF               	dw	65535	; assembler added errata NOP
  6857                           
  6858                           ;incstack = 0
  6859  002B30  5033               	movf	___llmod@divisor,w,c
  6860  002B32  1034               	iorwf	___llmod@divisor+1,w,c
  6861  002B34  1035               	iorwf	___llmod@divisor+2,w,c
  6862  002B36  1036               	iorwf	___llmod@divisor+3,w,c
  6863  002B38  B4D8               	btfsc	status,2,c
  6864  002B3A  D028               	goto	l910
  6865  002B3C  0E01               	movlw	1
  6866  002B3E  6E37               	movwf	___llmod@counter,c
  6867  002B40  D007               	goto	l4612
  6868  002B42                     l4610:
  6869  002B42  FFFF               	dw	65535	; assembler added errata NOP
  6870  002B44  90D8               	bcf	status,0,c
  6871  002B46  3633               	rlcf	___llmod@divisor,f,c
  6872  002B48  3634               	rlcf	___llmod@divisor+1,f,c
  6873  002B4A  3635               	rlcf	___llmod@divisor+2,f,c
  6874  002B4C  3636               	rlcf	___llmod@divisor+3,f,c
  6875  002B4E  2A37               	incf	___llmod@counter,f,c
  6876  002B50                     l4612:
  6877  002B50  FFFF               	dw	65535	; assembler added errata NOP
  6878  002B52  AE36               	btfss	___llmod@divisor+3,7,c
  6879  002B54  D7F6               	goto	l4610
  6880  002B56                     l4614:
  6881  002B56  FFFF               	dw	65535	; assembler added errata NOP
  6882  002B58  5033               	movf	___llmod@divisor,w,c
  6883  002B5A  5C2F               	subwf	___llmod@dividend,w,c
  6884  002B5C  5034               	movf	___llmod@divisor+1,w,c
  6885  002B5E  5830               	subwfb	___llmod@dividend+1,w,c
  6886  002B60  5035               	movf	___llmod@divisor+2,w,c
  6887  002B62  5831               	subwfb	___llmod@dividend+2,w,c
  6888  002B64  5036               	movf	___llmod@divisor+3,w,c
  6889  002B66  5832               	subwfb	___llmod@dividend+3,w,c
  6890  002B68  A0D8               	btfss	status,0,c
  6891  002B6A  D008               	goto	l4618
  6892  002B6C  5033               	movf	___llmod@divisor,w,c
  6893  002B6E  5E2F               	subwf	___llmod@dividend,f,c
  6894  002B70  5034               	movf	___llmod@divisor+1,w,c
  6895  002B72  5A30               	subwfb	___llmod@dividend+1,f,c
  6896  002B74  5035               	movf	___llmod@divisor+2,w,c
  6897  002B76  5A31               	subwfb	___llmod@dividend+2,f,c
  6898  002B78  5036               	movf	___llmod@divisor+3,w,c
  6899  002B7A  5A32               	subwfb	___llmod@dividend+3,f,c
  6900  002B7C                     l4618:
  6901  002B7C  FFFF               	dw	65535	; assembler added errata NOP
  6902  002B7E  90D8               	bcf	status,0,c
  6903  002B80  3236               	rrcf	___llmod@divisor+3,f,c
  6904  002B82  3235               	rrcf	___llmod@divisor+2,f,c
  6905  002B84  3234               	rrcf	___llmod@divisor+1,f,c
  6906  002B86  3233               	rrcf	___llmod@divisor,f,c
  6907  002B88  2E37               	decfsz	___llmod@counter,f,c
  6908  002B8A  D7E5               	goto	l4614
  6909  002B8C                     l910:
  6910  002B8C  FFFF               	dw	65535	; assembler added errata NOP
  6911  002B8E  C02F  F02F         	movff	___llmod@dividend,?___llmod
  6912  002B92  C030  F030         	movff	___llmod@dividend+1,?___llmod+1
  6913  002B96  C031  F031         	movff	___llmod@dividend+2,?___llmod+2
  6914  002B9A  C032  F032         	movff	___llmod@dividend+3,?___llmod+3
  6915  002B9E  0012               	return		;funcret
  6916  002BA0  FFFF               	dw	65535	; errata NOP
  6917  002BA2                     __end_of___llmod:
  6918                           	opt stack 0
  6919                           tblptru	equ	0xFF8
  6920                           tblptrh	equ	0xFF7
  6921                           tblptrl	equ	0xFF6
  6922                           tablat	equ	0xFF5
  6923                           prodh	equ	0xFF4
  6924                           prodl	equ	0xFF3
  6925                           postinc0	equ	0xFEE
  6926                           wreg	equ	0xFE8
  6927                           postdec1	equ	0xFE5
  6928                           fsr1l	equ	0xFE1
  6929                           indf2	equ	0xFDF
  6930                           postinc2	equ	0xFDE
  6931                           postdec2	equ	0xFDD
  6932                           fsr2h	equ	0xFDA
  6933                           fsr2l	equ	0xFD9
  6934                           status	equ	0xFD8
  6935                           
  6936 ;; *************** function ___lldiv *****************
  6937 ;; Defined at:
  6938 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/lldiv.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;  dividend        4   33[COMRAM] unsigned long 
  6941 ;;  divisor         4   37[COMRAM] unsigned long 
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  quotient        4   41[COMRAM] unsigned long 
  6944 ;;  counter         1   45[COMRAM] unsigned char 
  6945 ;; Return value:  Size  Location     Type
  6946 ;;                  4   33[COMRAM] unsigned long 
  6947 ;; Registers used:
  6948 ;;		wreg, status,2, status,0
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6954 ;;      Params:         8       0       0       0       0       0       0
  6955 ;;      Locals:         5       0       0       0       0       0       0
  6956 ;;      Temps:          0       0       0       0       0       0       0
  6957 ;;      Totals:        13       0       0       0       0       0       0
  6958 ;;Total ram usage:       13 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:    2
  6961 ;; This function calls:
  6962 ;;		Nothing
  6963 ;; This function is called by:
  6964 ;;		_sprintf
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           	psect	text13
  6969  0029A2                     __ptext13:
  6970                           	opt stack 0
  6971  0029A2                     ___lldiv:
  6972                           	opt stack 0
  6973  0029A2  FFFF               	dw	65535	; assembler added errata NOP
  6974                           
  6975                           ;incstack = 0
  6976  0029A4  0E00               	movlw	0
  6977  0029A6  6E2A               	movwf	___lldiv@quotient,c
  6978  0029A8  0E00               	movlw	0
  6979  0029AA  6E2B               	movwf	___lldiv@quotient+1,c
  6980  0029AC  0E00               	movlw	0
  6981  0029AE  6E2C               	movwf	___lldiv@quotient+2,c
  6982  0029B0  0E00               	movlw	0
  6983  0029B2  6E2D               	movwf	___lldiv@quotient+3,c
  6984  0029B4  5026               	movf	___lldiv@divisor,w,c
  6985  0029B6  1027               	iorwf	___lldiv@divisor+1,w,c
  6986  0029B8  1028               	iorwf	___lldiv@divisor+2,w,c
  6987  0029BA  1029               	iorwf	___lldiv@divisor+3,w,c
  6988  0029BC  B4D8               	btfsc	status,2,c
  6989  0029BE  D02E               	goto	l900
  6990  0029C0  0E01               	movlw	1
  6991  0029C2  6E2E               	movwf	___lldiv@counter,c
  6992  0029C4  D007               	goto	l4592
  6993  0029C6                     l4590:
  6994  0029C6  FFFF               	dw	65535	; assembler added errata NOP
  6995  0029C8  90D8               	bcf	status,0,c
  6996  0029CA  3626               	rlcf	___lldiv@divisor,f,c
  6997  0029CC  3627               	rlcf	___lldiv@divisor+1,f,c
  6998  0029CE  3628               	rlcf	___lldiv@divisor+2,f,c
  6999  0029D0  3629               	rlcf	___lldiv@divisor+3,f,c
  7000  0029D2  2A2E               	incf	___lldiv@counter,f,c
  7001  0029D4                     l4592:
  7002  0029D4  FFFF               	dw	65535	; assembler added errata NOP
  7003  0029D6  AE29               	btfss	___lldiv@divisor+3,7,c
  7004  0029D8  D7F6               	goto	l4590
  7005  0029DA                     l4594:
  7006  0029DA  FFFF               	dw	65535	; assembler added errata NOP
  7007  0029DC  90D8               	bcf	status,0,c
  7008  0029DE  362A               	rlcf	___lldiv@quotient,f,c
  7009  0029E0  362B               	rlcf	___lldiv@quotient+1,f,c
  7010  0029E2  362C               	rlcf	___lldiv@quotient+2,f,c
  7011  0029E4  362D               	rlcf	___lldiv@quotient+3,f,c
  7012  0029E6  5026               	movf	___lldiv@divisor,w,c
  7013  0029E8  5C22               	subwf	___lldiv@dividend,w,c
  7014  0029EA  5027               	movf	___lldiv@divisor+1,w,c
  7015  0029EC  5823               	subwfb	___lldiv@dividend+1,w,c
  7016  0029EE  5028               	movf	___lldiv@divisor+2,w,c
  7017  0029F0  5824               	subwfb	___lldiv@dividend+2,w,c
  7018  0029F2  5029               	movf	___lldiv@divisor+3,w,c
  7019  0029F4  5825               	subwfb	___lldiv@dividend+3,w,c
  7020  0029F6  A0D8               	btfss	status,0,c
  7021  0029F8  D009               	goto	l4602
  7022  0029FA  5026               	movf	___lldiv@divisor,w,c
  7023  0029FC  5E22               	subwf	___lldiv@dividend,f,c
  7024  0029FE  5027               	movf	___lldiv@divisor+1,w,c
  7025  002A00  5A23               	subwfb	___lldiv@dividend+1,f,c
  7026  002A02  5028               	movf	___lldiv@divisor+2,w,c
  7027  002A04  5A24               	subwfb	___lldiv@dividend+2,f,c
  7028  002A06  5029               	movf	___lldiv@divisor+3,w,c
  7029  002A08  5A25               	subwfb	___lldiv@dividend+3,f,c
  7030  002A0A  802A               	bsf	___lldiv@quotient,0,c
  7031  002A0C                     l4602:
  7032  002A0C  FFFF               	dw	65535	; assembler added errata NOP
  7033  002A0E  90D8               	bcf	status,0,c
  7034  002A10  3229               	rrcf	___lldiv@divisor+3,f,c
  7035  002A12  3228               	rrcf	___lldiv@divisor+2,f,c
  7036  002A14  3227               	rrcf	___lldiv@divisor+1,f,c
  7037  002A16  3226               	rrcf	___lldiv@divisor,f,c
  7038  002A18  2E2E               	decfsz	___lldiv@counter,f,c
  7039  002A1A  D7DF               	goto	l4594
  7040  002A1C                     l900:
  7041  002A1C  FFFF               	dw	65535	; assembler added errata NOP
  7042  002A1E  C02A  F022         	movff	___lldiv@quotient,?___lldiv
  7043  002A22  C02B  F023         	movff	___lldiv@quotient+1,?___lldiv+1
  7044  002A26  C02C  F024         	movff	___lldiv@quotient+2,?___lldiv+2
  7045  002A2A  C02D  F025         	movff	___lldiv@quotient+3,?___lldiv+3
  7046  002A2E  0012               	return		;funcret
  7047  002A30  FFFF               	dw	65535	; errata NOP
  7048  002A32                     __end_of___lldiv:
  7049                           	opt stack 0
  7050                           tblptru	equ	0xFF8
  7051                           tblptrh	equ	0xFF7
  7052                           tblptrl	equ	0xFF6
  7053                           tablat	equ	0xFF5
  7054                           prodh	equ	0xFF4
  7055                           prodl	equ	0xFF3
  7056                           postinc0	equ	0xFEE
  7057                           wreg	equ	0xFE8
  7058                           postdec1	equ	0xFE5
  7059                           fsr1l	equ	0xFE1
  7060                           indf2	equ	0xFDF
  7061                           postinc2	equ	0xFDE
  7062                           postdec2	equ	0xFDD
  7063                           fsr2h	equ	0xFDA
  7064                           fsr2l	equ	0xFD9
  7065                           status	equ	0xFD8
  7066                           
  7067 ;; *************** function ___fttol *****************
  7068 ;; Defined at:
  7069 ;;		line 44 in file "/opt/microchip/xc8/v1.38/sources/common/fttol.c"
  7070 ;; Parameters:    Size  Location     Type
  7071 ;;  f1              3   16[BANK0 ] float 
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;  lval            4   26[BANK0 ] unsigned long 
  7074 ;;  exp1            1   30[BANK0 ] unsigned char 
  7075 ;;  sign1           1   25[BANK0 ] unsigned char 
  7076 ;; Return value:  Size  Location     Type
  7077 ;;                  4   16[BANK0 ] long 
  7078 ;; Registers used:
  7079 ;;		wreg, status,2, status,0
  7080 ;; Tracked objects:
  7081 ;;		On entry : 0/0
  7082 ;;		On exit  : 0/0
  7083 ;;		Unchanged: 0/0
  7084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7085 ;;      Params:         0       4       0       0       0       0       0
  7086 ;;      Locals:         0       6       0       0       0       0       0
  7087 ;;      Temps:          0       5       0       0       0       0       0
  7088 ;;      Totals:         0      15       0       0       0       0       0
  7089 ;;Total ram usage:       15 bytes
  7090 ;; Hardware stack levels used:    1
  7091 ;; Hardware stack levels required when called:    2
  7092 ;; This function calls:
  7093 ;;		Nothing
  7094 ;; This function is called by:
  7095 ;;		_sprintf
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           	psect	text14
  7100  002132                     __ptext14:
  7101                           	opt stack 0
  7102  002132                     ___fttol:
  7103                           	opt stack 0
  7104  002132  FFFF               	dw	65535	; assembler added errata NOP
  7105                           
  7106                           ;incstack = 0
  7107  002134  C092  F094         	movff	___fttol@f1+2,??___fttol
  7108  002138  0100               	movlb	0	; () banked
  7109  00213A  6B95               	clrf	(??___fttol+1)& (0+255),b
  7110  00213C  6B96               	clrf	(??___fttol+2)& (0+255),b
  7111  00213E  0100               	movlb	0	; () banked
  7112  002140  3591               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7113  002142  0100               	movlb	0	; () banked
  7114  002144  3794               	rlcf	??___fttol& (0+255),f,b
  7115  002146  E301               	bnc	u5281
  7116  002148  8195               	bsf	(??___fttol+1)& (0+255),0,b
  7117  00214A                     u5281:
  7118  00214A  0100               	movlb	0	; () banked
  7119  00214C  5194               	movf	??___fttol& (0+255),w,b
  7120  00214E  0100               	movlb	0	; () banked
  7121  002150  6F9E               	movwf	___fttol@exp1& (0+255),b
  7122  002152  0100               	movlb	0	; () banked
  7123  002154  519E               	movf	___fttol@exp1& (0+255),w,b
  7124  002156  B4D8               	btfsc	status,2,c
  7125  002158  D051               	goto	l4568
  7126                           
  7127                           ; BSR set to: 0
  7128                           
  7129                           ; BSR set to: 0
  7130                           
  7131                           ; BSR set to: 0
  7132                           
  7133                           ; BSR set to: 0
  7134  00215A  0E17               	movlw	23
  7135  00215C  0100               	movlb	0	; () banked
  7136  00215E  6F94               	movwf	??___fttol& (0+255),b
  7137  002160  C090  F095         	movff	___fttol@f1,??___fttol+1
  7138  002164  C091  F096         	movff	___fttol@f1+1,??___fttol+2
  7139  002168  C092  F097         	movff	___fttol@f1+2,??___fttol+3
  7140  00216C  0100               	movlb	0	; () banked
  7141  00216E  2994               	incf	??___fttol& (0+255),w,b
  7142  002170  0100               	movlb	0	; () banked
  7143  002172  6F98               	movwf	(??___fttol+4)& (0+255),b
  7144  002174  D006               	goto	u5300
  7145  002176                     u5305:
  7146  002176  FFFF               	dw	65535	; assembler added errata NOP
  7147  002178  0100               	movlb	0	; () banked
  7148  00217A  90D8               	bcf	status,0,c
  7149  00217C  3397               	rrcf	(??___fttol+3)& (0+255),f,b
  7150  00217E  3396               	rrcf	(??___fttol+2)& (0+255),f,b
  7151  002180  3395               	rrcf	(??___fttol+1)& (0+255),f,b
  7152  002182                     u5300:
  7153  002182  FFFF               	dw	65535	; assembler added errata NOP
  7154  002184  0100               	movlb	0	; () banked
  7155  002186  2F98               	decfsz	(??___fttol+4)& (0+255),f,b
  7156  002188  D7F6               	goto	u5305
  7157  00218A  0100               	movlb	0	; () banked
  7158  00218C  5195               	movf	(??___fttol+1)& (0+255),w,b
  7159  00218E  0100               	movlb	0	; () banked
  7160  002190  6F99               	movwf	___fttol@sign1& (0+255),b
  7161                           
  7162                           ; BSR set to: 0
  7163  002192  0100               	movlb	0	; () banked
  7164  002194  8F91               	bsf	(___fttol@f1+1)& (0+255),7,b
  7165                           
  7166                           ; BSR set to: 0
  7167  002196  0EFF               	movlw	255
  7168  002198  0100               	movlb	0	; () banked
  7169  00219A  1790               	andwf	___fttol@f1& (0+255),f,b
  7170  00219C  0EFF               	movlw	255
  7171  00219E  0100               	movlb	0	; () banked
  7172  0021A0  1791               	andwf	(___fttol@f1+1)& (0+255),f,b
  7173  0021A2  0E00               	movlw	0
  7174  0021A4  0100               	movlb	0	; () banked
  7175  0021A6  1792               	andwf	(___fttol@f1+2)& (0+255),f,b
  7176                           
  7177                           ; BSR set to: 0
  7178  0021A8  0100               	movlb	0	; () banked
  7179  0021AA  5190               	movf	___fttol@f1& (0+255),w,b
  7180  0021AC  0100               	movlb	0	; () banked
  7181  0021AE  6F9A               	movwf	___fttol@lval& (0+255),b
  7182  0021B0  0100               	movlb	0	; () banked
  7183  0021B2  5191               	movf	(___fttol@f1+1)& (0+255),w,b
  7184  0021B4  0100               	movlb	0	; () banked
  7185  0021B6  6F9B               	movwf	(___fttol@lval+1)& (0+255),b
  7186  0021B8  0100               	movlb	0	; () banked
  7187  0021BA  5192               	movf	(___fttol@f1+2)& (0+255),w,b
  7188  0021BC  0100               	movlb	0	; () banked
  7189  0021BE  6F9C               	movwf	(___fttol@lval+2)& (0+255),b
  7190  0021C0  0100               	movlb	0	; () banked
  7191  0021C2  6B9D               	clrf	(___fttol@lval+3)& (0+255),b
  7192                           
  7193                           ; BSR set to: 0
  7194  0021C4  0E8E               	movlw	142
  7195  0021C6  0100               	movlb	0	; () banked
  7196  0021C8  5F9E               	subwf	___fttol@exp1& (0+255),f,b
  7197                           
  7198                           ; BSR set to: 0
  7199  0021CA  0100               	movlb	0	; () banked
  7200  0021CC  AF9E               	btfss	___fttol@exp1& (0+255),7,b
  7201  0021CE  D011               	goto	l4566
  7202                           
  7203                           ; BSR set to: 0
  7204  0021D0  0100               	movlb	0	; () banked
  7205  0021D2  519E               	movf	___fttol@exp1& (0+255),w,b
  7206  0021D4  0A80               	xorlw	128
  7207  0021D6  0F8F               	addlw	143
  7208  0021D8  A0D8               	btfss	status,0,c
  7209  0021DA  D010               	goto	l4568
  7210  0021DC                     l4562:
  7211  0021DC  FFFF               	dw	65535	; assembler added errata NOP
  7212                           
  7213                           ; BSR set to: 0
  7214  0021DE  0100               	movlb	0	; () banked
  7215  0021E0  90D8               	bcf	status,0,c
  7216  0021E2  339D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7217  0021E4  339C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7218  0021E6  339B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7219  0021E8  339A               	rrcf	___fttol@lval& (0+255),f,b
  7220                           
  7221                           ; BSR set to: 0
  7222  0021EA  0100               	movlb	0	; () banked
  7223  0021EC  3F9E               	incfsz	___fttol@exp1& (0+255),f,b
  7224  0021EE  D7F6               	goto	l4562
  7225                           
  7226                           ; BSR set to: 0
  7227  0021F0  D01F               	goto	l4576
  7228  0021F2                     l4566:
  7229  0021F2  FFFF               	dw	65535	; assembler added errata NOP
  7230                           
  7231                           ; BSR set to: 0
  7232  0021F4  0E17               	movlw	23
  7233  0021F6  0100               	movlb	0	; () banked
  7234  0021F8  659E               	cpfsgt	___fttol@exp1& (0+255),b
  7235  0021FA  D014               	goto	l4574
  7236  0021FC                     l4568:
  7237  0021FC  FFFF               	dw	65535	; assembler added errata NOP
  7238                           
  7239                           ; BSR set to: 0
  7240  0021FE  0E00               	movlw	0
  7241  002200  0100               	movlb	0	; () banked
  7242  002202  6F90               	movwf	?___fttol& (0+255),b
  7243  002204  0E00               	movlw	0
  7244  002206  6F91               	movwf	(?___fttol+1)& (0+255),b
  7245  002208  0E00               	movlw	0
  7246  00220A  6F92               	movwf	(?___fttol+2)& (0+255),b
  7247  00220C  0E00               	movlw	0
  7248  00220E  6F93               	movwf	(?___fttol+3)& (0+255),b
  7249                           
  7250                           ; BSR set to: 0
  7251  002210  D027               	goto	l861
  7252  002212                     l4572:
  7253  002212  FFFF               	dw	65535	; assembler added errata NOP
  7254                           
  7255                           ; BSR set to: 0
  7256  002214  0100               	movlb	0	; () banked
  7257  002216  90D8               	bcf	status,0,c
  7258  002218  379A               	rlcf	___fttol@lval& (0+255),f,b
  7259  00221A  379B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7260  00221C  379C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7261  00221E  379D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7262  002220  0100               	movlb	0	; () banked
  7263  002222  079E               	decf	___fttol@exp1& (0+255),f,b
  7264  002224                     l4574:
  7265  002224  FFFF               	dw	65535	; assembler added errata NOP
  7266                           
  7267                           ; BSR set to: 0
  7268  002226  0100               	movlb	0	; () banked
  7269  002228  519E               	movf	___fttol@exp1& (0+255),w,b
  7270  00222A  0100               	movlb	0	; () banked
  7271  00222C  A4D8               	btfss	status,2,c
  7272  00222E  D7F1               	goto	l4572
  7273  002230                     l4576:
  7274  002230  FFFF               	dw	65535	; assembler added errata NOP
  7275                           
  7276                           ; BSR set to: 0
  7277  002232  0100               	movlb	0	; () banked
  7278  002234  5199               	movf	___fttol@sign1& (0+255),w,b
  7279  002236  0100               	movlb	0	; () banked
  7280  002238  B4D8               	btfsc	status,2,c
  7281  00223A  D009               	goto	l4580
  7282                           
  7283                           ; BSR set to: 0
  7284  00223C  0100               	movlb	0	; () banked
  7285  00223E  1F9D               	comf	(___fttol@lval+3)& (0+255),f,b
  7286  002240  1F9C               	comf	(___fttol@lval+2)& (0+255),f,b
  7287  002242  1F9B               	comf	(___fttol@lval+1)& (0+255),f,b
  7288  002244  6D9A               	negf	___fttol@lval& (0+255),b
  7289  002246  0E00               	movlw	0
  7290  002248  239B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7291  00224A  239C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7292  00224C  239D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7293  00224E                     l4580:
  7294  00224E  FFFF               	dw	65535	; assembler added errata NOP
  7295                           
  7296                           ; BSR set to: 0
  7297  002250  C09A  F090         	movff	___fttol@lval,?___fttol
  7298  002254  C09B  F091         	movff	___fttol@lval+1,?___fttol+1
  7299  002258  C09C  F092         	movff	___fttol@lval+2,?___fttol+2
  7300  00225C  C09D  F093         	movff	___fttol@lval+3,?___fttol+3
  7301  002260                     l861:
  7302  002260  FFFF               	dw	65535	; assembler added errata NOP
  7303                           
  7304                           ; BSR set to: 0
  7305  002262  0012               	return		;funcret
  7306  002264  FFFF               	dw	65535	; errata NOP
  7307  002266                     __end_of___fttol:
  7308                           	opt stack 0
  7309                           tblptru	equ	0xFF8
  7310                           tblptrh	equ	0xFF7
  7311                           tblptrl	equ	0xFF6
  7312                           tablat	equ	0xFF5
  7313                           prodh	equ	0xFF4
  7314                           prodl	equ	0xFF3
  7315                           postinc0	equ	0xFEE
  7316                           wreg	equ	0xFE8
  7317                           postdec1	equ	0xFE5
  7318                           fsr1l	equ	0xFE1
  7319                           indf2	equ	0xFDF
  7320                           postinc2	equ	0xFDE
  7321                           postdec2	equ	0xFDD
  7322                           fsr2h	equ	0xFDA
  7323                           fsr2l	equ	0xFD9
  7324                           status	equ	0xFD8
  7325                           
  7326 ;; *************** function ___ftsub *****************
  7327 ;; Defined at:
  7328 ;;		line 20 in file "/opt/microchip/xc8/v1.38/sources/common/ftsub.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;  f1              3   31[BANK0 ] float 
  7331 ;;  f2              3   34[BANK0 ] float 
  7332 ;; Auto vars:     Size  Location     Type
  7333 ;;		None
  7334 ;; Return value:  Size  Location     Type
  7335 ;;                  3   31[BANK0 ] float 
  7336 ;; Registers used:
  7337 ;;		wreg, status,2, status,0, cstack
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7343 ;;      Params:         0       6       0       0       0       0       0
  7344 ;;      Locals:         0       0       0       0       0       0       0
  7345 ;;      Temps:          0       0       0       0       0       0       0
  7346 ;;      Totals:         0       6       0       0       0       0       0
  7347 ;;Total ram usage:        6 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    4
  7350 ;; This function calls:
  7351 ;;		___ftadd
  7352 ;; This function is called by:
  7353 ;;		_sprintf
  7354 ;; This function uses a non-reentrant model
  7355 ;;
  7356                           
  7357                           	psect	text15
  7358  002D26                     __ptext15:
  7359                           	opt stack 0
  7360  002D26                     ___ftsub:
  7361                           	opt stack 0
  7362  002D26  FFFF               	dw	65535	; assembler added errata NOP
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;incstack = 0
  7366  002D28  0100               	movlb	0	; () banked
  7367  002D2A  51A2               	movf	___ftsub@f2& (0+255),w,b
  7368  002D2C  0100               	movlb	0	; () banked
  7369  002D2E  11A3               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7370  002D30  0100               	movlb	0	; () banked
  7371  002D32  11A4               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7372  002D34  B4D8               	btfsc	status,2,c
  7373  002D36  D009               	goto	l4512
  7374                           
  7375                           ; BSR set to: 0
  7376  002D38  0E00               	movlw	0
  7377  002D3A  0100               	movlb	0	; () banked
  7378  002D3C  1BA2               	xorwf	___ftsub@f2& (0+255),f,b
  7379  002D3E  0E00               	movlw	0
  7380  002D40  0100               	movlb	0	; () banked
  7381  002D42  1BA3               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7382  002D44  0E80               	movlw	128
  7383  002D46  0100               	movlb	0	; () banked
  7384  002D48  1BA4               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7385  002D4A                     l4512:
  7386  002D4A  FFFF               	dw	65535	; assembler added errata NOP
  7387                           
  7388                           ; BSR set to: 0
  7389  002D4C  C09F  F093         	movff	___ftsub@f1,___ftadd@f1
  7390  002D50  C0A0  F094         	movff	___ftsub@f1+1,___ftadd@f1+1
  7391  002D54  C0A1  F095         	movff	___ftsub@f1+2,___ftadd@f1+2
  7392  002D58  C0A2  F096         	movff	___ftsub@f2,___ftadd@f2
  7393  002D5C  C0A3  F097         	movff	___ftsub@f2+1,___ftadd@f2+1
  7394  002D60  C0A4  F098         	movff	___ftsub@f2+2,___ftadd@f2+2
  7395  002D64  ECA0  F00C         	call	___ftadd	;wreg free
  7396  002D68  C093  F09F         	movff	?___ftadd,?___ftsub
  7397  002D6C  C094  F0A0         	movff	?___ftadd+1,?___ftsub+1
  7398  002D70  C095  F0A1         	movff	?___ftadd+2,?___ftsub+2
  7399  002D74  0012               	return		;funcret
  7400  002D76  FFFF               	dw	65535	; errata NOP
  7401  002D78                     __end_of___ftsub:
  7402                           	opt stack 0
  7403                           tblptru	equ	0xFF8
  7404                           tblptrh	equ	0xFF7
  7405                           tblptrl	equ	0xFF6
  7406                           tablat	equ	0xFF5
  7407                           prodh	equ	0xFF4
  7408                           prodl	equ	0xFF3
  7409                           postinc0	equ	0xFEE
  7410                           wreg	equ	0xFE8
  7411                           postdec1	equ	0xFE5
  7412                           fsr1l	equ	0xFE1
  7413                           indf2	equ	0xFDF
  7414                           postinc2	equ	0xFDE
  7415                           postdec2	equ	0xFDD
  7416                           fsr2h	equ	0xFDA
  7417                           fsr2l	equ	0xFD9
  7418                           status	equ	0xFD8
  7419                           
  7420 ;; *************** function ___ftadd *****************
  7421 ;; Defined at:
  7422 ;;		line 86 in file "/opt/microchip/xc8/v1.38/sources/common/ftadd.c"
  7423 ;; Parameters:    Size  Location     Type
  7424 ;;  f1              3   19[BANK0 ] float 
  7425 ;;  f2              3   22[BANK0 ] float 
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;  exp1            1   30[BANK0 ] unsigned char 
  7428 ;;  exp2            1   29[BANK0 ] unsigned char 
  7429 ;;  sign            1   28[BANK0 ] unsigned char 
  7430 ;; Return value:  Size  Location     Type
  7431 ;;                  3   19[BANK0 ] float 
  7432 ;; Registers used:
  7433 ;;		wreg, status,2, status,0, cstack
  7434 ;; Tracked objects:
  7435 ;;		On entry : 0/0
  7436 ;;		On exit  : 0/0
  7437 ;;		Unchanged: 0/0
  7438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7439 ;;      Params:         0       6       0       0       0       0       0
  7440 ;;      Locals:         0       3       0       0       0       0       0
  7441 ;;      Temps:          0       3       0       0       0       0       0
  7442 ;;      Totals:         0      12       0       0       0       0       0
  7443 ;;Total ram usage:       12 bytes
  7444 ;; Hardware stack levels used:    1
  7445 ;; Hardware stack levels required when called:    3
  7446 ;; This function calls:
  7447 ;;		___ftpack
  7448 ;; This function is called by:
  7449 ;;		_sprintf
  7450 ;;		___ftsub
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           	psect	text16
  7455  001940                     __ptext16:
  7456                           	opt stack 0
  7457  001940                     ___ftadd:
  7458                           	opt stack 0
  7459  001940  FFFF               	dw	65535	; assembler added errata NOP
  7460                           
  7461                           ;incstack = 0
  7462  001942  C095  F099         	movff	___ftadd@f1+2,??___ftadd
  7463  001946  0100               	movlb	0	; () banked
  7464  001948  6B9A               	clrf	(??___ftadd+1)& (0+255),b
  7465  00194A  6B9B               	clrf	(??___ftadd+2)& (0+255),b
  7466  00194C  0100               	movlb	0	; () banked
  7467  00194E  3594               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7468  001950  0100               	movlb	0	; () banked
  7469  001952  3799               	rlcf	??___ftadd& (0+255),f,b
  7470  001954  E301               	bnc	u4591
  7471  001956  819A               	bsf	(??___ftadd+1)& (0+255),0,b
  7472  001958                     u4591:
  7473  001958  0100               	movlb	0	; () banked
  7474  00195A  5199               	movf	??___ftadd& (0+255),w,b
  7475  00195C  0100               	movlb	0	; () banked
  7476  00195E  6F9E               	movwf	___ftadd@exp1& (0+255),b
  7477  001960  C098  F099         	movff	___ftadd@f2+2,??___ftadd
  7478  001964  0100               	movlb	0	; () banked
  7479  001966  6B9A               	clrf	(??___ftadd+1)& (0+255),b
  7480  001968  6B9B               	clrf	(??___ftadd+2)& (0+255),b
  7481  00196A  0100               	movlb	0	; () banked
  7482  00196C  3597               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7483  00196E  0100               	movlb	0	; () banked
  7484  001970  3799               	rlcf	??___ftadd& (0+255),f,b
  7485  001972  E301               	bnc	u4601
  7486  001974  819A               	bsf	(??___ftadd+1)& (0+255),0,b
  7487  001976                     u4601:
  7488  001976  0100               	movlb	0	; () banked
  7489  001978  5199               	movf	??___ftadd& (0+255),w,b
  7490  00197A  0100               	movlb	0	; () banked
  7491  00197C  6F9D               	movwf	___ftadd@exp2& (0+255),b
  7492                           
  7493                           ; BSR set to: 0
  7494  00197E  0100               	movlb	0	; () banked
  7495  001980  519E               	movf	___ftadd@exp1& (0+255),w,b
  7496  001982  0100               	movlb	0	; () banked
  7497  001984  B4D8               	btfsc	status,2,c
  7498  001986  D011               	goto	l776
  7499                           
  7500                           ; BSR set to: 0
  7501  001988  0100               	movlb	0	; () banked
  7502  00198A  519D               	movf	___ftadd@exp2& (0+255),w,b
  7503  00198C  0100               	movlb	0	; () banked
  7504  00198E  5D9E               	subwf	___ftadd@exp1& (0+255),w,b
  7505  001990  B0D8               	btfsc	status,0,c
  7506  001992  D013               	goto	l4130
  7507                           
  7508                           ; BSR set to: 0
  7509  001994  0100               	movlb	0	; () banked
  7510  001996  519E               	movf	___ftadd@exp1& (0+255),w,b
  7511  001998  0800               	sublw	0
  7512  00199A  0100               	movlb	0	; () banked
  7513  00199C  259D               	addwf	___ftadd@exp2& (0+255),w,b
  7514  00199E  0100               	movlb	0	; () banked
  7515  0019A0  6F99               	movwf	??___ftadd& (0+255),b
  7516  0019A2  0E18               	movlw	24
  7517  0019A4  0100               	movlb	0	; () banked
  7518  0019A6  6599               	cpfsgt	??___ftadd& (0+255),b
  7519  0019A8  D008               	goto	l4130
  7520  0019AA                     l776:
  7521  0019AA  FFFF               	dw	65535	; assembler added errata NOP
  7522                           
  7523                           ; BSR set to: 0
  7524  0019AC  C096  F093         	movff	___ftadd@f2,?___ftadd
  7525  0019B0  C097  F094         	movff	___ftadd@f2+1,?___ftadd+1
  7526  0019B4  C098  F095         	movff	___ftadd@f2+2,?___ftadd+2
  7527  0019B8  D108               	goto	l777
  7528  0019BA                     l4130:
  7529  0019BA  FFFF               	dw	65535	; assembler added errata NOP
  7530                           
  7531                           ; BSR set to: 0
  7532  0019BC  0100               	movlb	0	; () banked
  7533  0019BE  519D               	movf	___ftadd@exp2& (0+255),w,b
  7534  0019C0  0100               	movlb	0	; () banked
  7535  0019C2  B4D8               	btfsc	status,2,c
  7536  0019C4  D011               	goto	l780
  7537                           
  7538                           ; BSR set to: 0
  7539  0019C6  0100               	movlb	0	; () banked
  7540  0019C8  519E               	movf	___ftadd@exp1& (0+255),w,b
  7541  0019CA  0100               	movlb	0	; () banked
  7542  0019CC  5D9D               	subwf	___ftadd@exp2& (0+255),w,b
  7543  0019CE  B0D8               	btfsc	status,0,c
  7544  0019D0  D013               	goto	l4136
  7545                           
  7546                           ; BSR set to: 0
  7547  0019D2  0100               	movlb	0	; () banked
  7548  0019D4  519D               	movf	___ftadd@exp2& (0+255),w,b
  7549  0019D6  0800               	sublw	0
  7550  0019D8  0100               	movlb	0	; () banked
  7551  0019DA  259E               	addwf	___ftadd@exp1& (0+255),w,b
  7552  0019DC  0100               	movlb	0	; () banked
  7553  0019DE  6F99               	movwf	??___ftadd& (0+255),b
  7554  0019E0  0E18               	movlw	24
  7555  0019E2  0100               	movlb	0	; () banked
  7556  0019E4  6599               	cpfsgt	??___ftadd& (0+255),b
  7557  0019E6  D008               	goto	l4136
  7558  0019E8                     l780:
  7559  0019E8  FFFF               	dw	65535	; assembler added errata NOP
  7560                           
  7561                           ; BSR set to: 0
  7562  0019EA  C093  F093         	movff	___ftadd@f1,?___ftadd
  7563  0019EE  C094  F094         	movff	___ftadd@f1+1,?___ftadd+1
  7564  0019F2  C095  F095         	movff	___ftadd@f1+2,?___ftadd+2
  7565  0019F6  D0E9               	goto	l777
  7566  0019F8                     l4136:
  7567  0019F8  FFFF               	dw	65535	; assembler added errata NOP
  7568                           
  7569                           ; BSR set to: 0
  7570  0019FA  0E06               	movlw	6
  7571  0019FC  0100               	movlb	0	; () banked
  7572  0019FE  6F9C               	movwf	___ftadd@sign& (0+255),b
  7573                           
  7574                           ; BSR set to: 0
  7575  001A00  0100               	movlb	0	; () banked
  7576  001A02  AF95               	btfss	(___ftadd@f1+2)& (0+255),7,b
  7577  001A04  D002               	goto	l4142
  7578                           
  7579                           ; BSR set to: 0
  7580  001A06  0100               	movlb	0	; () banked
  7581  001A08  8F9C               	bsf	___ftadd@sign& (0+255),7,b
  7582  001A0A                     l4142:
  7583  001A0A  FFFF               	dw	65535	; assembler added errata NOP
  7584                           
  7585                           ; BSR set to: 0
  7586  001A0C  0100               	movlb	0	; () banked
  7587  001A0E  AF98               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7588  001A10  D002               	goto	l782
  7589                           
  7590                           ; BSR set to: 0
  7591  001A12  0100               	movlb	0	; () banked
  7592  001A14  8D9C               	bsf	___ftadd@sign& (0+255),6,b
  7593  001A16                     l782:
  7594  001A16  FFFF               	dw	65535	; assembler added errata NOP
  7595                           
  7596                           ; BSR set to: 0
  7597  001A18  0100               	movlb	0	; () banked
  7598  001A1A  8F94               	bsf	(___ftadd@f1+1)& (0+255),7,b
  7599                           
  7600                           ; BSR set to: 0
  7601  001A1C  0EFF               	movlw	255
  7602  001A1E  0100               	movlb	0	; () banked
  7603  001A20  1793               	andwf	___ftadd@f1& (0+255),f,b
  7604  001A22  0EFF               	movlw	255
  7605  001A24  0100               	movlb	0	; () banked
  7606  001A26  1794               	andwf	(___ftadd@f1+1)& (0+255),f,b
  7607  001A28  0E00               	movlw	0
  7608  001A2A  0100               	movlb	0	; () banked
  7609  001A2C  1795               	andwf	(___ftadd@f1+2)& (0+255),f,b
  7610  001A2E  0100               	movlb	0	; () banked
  7611  001A30  8F97               	bsf	(___ftadd@f2+1)& (0+255),7,b
  7612                           
  7613                           ; BSR set to: 0
  7614  001A32  0EFF               	movlw	255
  7615  001A34  0100               	movlb	0	; () banked
  7616  001A36  1796               	andwf	___ftadd@f2& (0+255),f,b
  7617  001A38  0EFF               	movlw	255
  7618  001A3A  0100               	movlb	0	; () banked
  7619  001A3C  1797               	andwf	(___ftadd@f2+1)& (0+255),f,b
  7620  001A3E  0E00               	movlw	0
  7621  001A40  0100               	movlb	0	; () banked
  7622  001A42  1798               	andwf	(___ftadd@f2+2)& (0+255),f,b
  7623                           
  7624                           ; BSR set to: 0
  7625  001A44  0100               	movlb	0	; () banked
  7626  001A46  519D               	movf	___ftadd@exp2& (0+255),w,b
  7627  001A48  0100               	movlb	0	; () banked
  7628  001A4A  5D9E               	subwf	___ftadd@exp1& (0+255),w,b
  7629  001A4C  B0D8               	btfsc	status,0,c
  7630  001A4E  D028               	goto	l4162
  7631  001A50                     l4152:
  7632  001A50  FFFF               	dw	65535	; assembler added errata NOP
  7633                           
  7634                           ; BSR set to: 0
  7635  001A52  0100               	movlb	0	; () banked
  7636  001A54  90D8               	bcf	status,0,c
  7637  001A56  3796               	rlcf	___ftadd@f2& (0+255),f,b
  7638  001A58  3797               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  7639  001A5A  3798               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  7640  001A5C  0100               	movlb	0	; () banked
  7641  001A5E  079D               	decf	___ftadd@exp2& (0+255),f,b
  7642                           
  7643                           ; BSR set to: 0
  7644  001A60  0100               	movlb	0	; () banked
  7645  001A62  519E               	movf	___ftadd@exp1& (0+255),w,b
  7646  001A64  0100               	movlb	0	; () banked
  7647  001A66  199D               	xorwf	___ftadd@exp2& (0+255),w,b
  7648  001A68  B4D8               	btfsc	status,2,c
  7649  001A6A  D012               	goto	l4160
  7650                           
  7651                           ; BSR set to: 0
  7652  001A6C  0100               	movlb	0	; () banked
  7653  001A6E  079C               	decf	___ftadd@sign& (0+255),f,b
  7654  001A70  C09C  F099         	movff	___ftadd@sign,??___ftadd
  7655  001A74  0E07               	movlw	7
  7656  001A76  0100               	movlb	0	; () banked
  7657  001A78  1799               	andwf	??___ftadd& (0+255),f,b
  7658  001A7A  B4D8               	btfsc	status,2,c
  7659  001A7C  D009               	goto	l4160
  7660  001A7E  D7E8               	goto	l4152
  7661  001A80                     l4158:
  7662  001A80  FFFF               	dw	65535	; assembler added errata NOP
  7663                           
  7664                           ; BSR set to: 0
  7665  001A82  0100               	movlb	0	; () banked
  7666  001A84  90D8               	bcf	status,0,c
  7667  001A86  3395               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  7668  001A88  3394               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  7669  001A8A  3393               	rrcf	___ftadd@f1& (0+255),f,b
  7670  001A8C  0100               	movlb	0	; () banked
  7671  001A8E  2B9E               	incf	___ftadd@exp1& (0+255),f,b
  7672  001A90                     l4160:
  7673  001A90  FFFF               	dw	65535	; assembler added errata NOP
  7674                           
  7675                           ; BSR set to: 0
  7676  001A92  0100               	movlb	0	; () banked
  7677  001A94  519D               	movf	___ftadd@exp2& (0+255),w,b
  7678  001A96  0100               	movlb	0	; () banked
  7679  001A98  199E               	xorwf	___ftadd@exp1& (0+255),w,b
  7680  001A9A  B4D8               	btfsc	status,2,c
  7681  001A9C  D02F               	goto	l791
  7682  001A9E  D7F0               	goto	l4158
  7683  001AA0                     l4162:
  7684  001AA0  FFFF               	dw	65535	; assembler added errata NOP
  7685                           
  7686                           ; BSR set to: 0
  7687  001AA2  0100               	movlb	0	; () banked
  7688  001AA4  519E               	movf	___ftadd@exp1& (0+255),w,b
  7689  001AA6  0100               	movlb	0	; () banked
  7690  001AA8  5D9D               	subwf	___ftadd@exp2& (0+255),w,b
  7691  001AAA  B0D8               	btfsc	status,0,c
  7692  001AAC  D027               	goto	l791
  7693  001AAE                     l4164:
  7694  001AAE  FFFF               	dw	65535	; assembler added errata NOP
  7695                           
  7696                           ; BSR set to: 0
  7697  001AB0  0100               	movlb	0	; () banked
  7698  001AB2  90D8               	bcf	status,0,c
  7699  001AB4  3793               	rlcf	___ftadd@f1& (0+255),f,b
  7700  001AB6  3794               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  7701  001AB8  3795               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  7702  001ABA  0100               	movlb	0	; () banked
  7703  001ABC  079E               	decf	___ftadd@exp1& (0+255),f,b
  7704                           
  7705                           ; BSR set to: 0
  7706  001ABE  0100               	movlb	0	; () banked
  7707  001AC0  519E               	movf	___ftadd@exp1& (0+255),w,b
  7708  001AC2  0100               	movlb	0	; () banked
  7709  001AC4  199D               	xorwf	___ftadd@exp2& (0+255),w,b
  7710  001AC6  B4D8               	btfsc	status,2,c
  7711  001AC8  D012               	goto	l4172
  7712                           
  7713                           ; BSR set to: 0
  7714  001ACA  0100               	movlb	0	; () banked
  7715  001ACC  079C               	decf	___ftadd@sign& (0+255),f,b
  7716  001ACE  C09C  F099         	movff	___ftadd@sign,??___ftadd
  7717  001AD2  0E07               	movlw	7
  7718  001AD4  0100               	movlb	0	; () banked
  7719  001AD6  1799               	andwf	??___ftadd& (0+255),f,b
  7720  001AD8  B4D8               	btfsc	status,2,c
  7721  001ADA  D009               	goto	l4172
  7722  001ADC  D7E8               	goto	l4164
  7723  001ADE                     l4170:
  7724  001ADE  FFFF               	dw	65535	; assembler added errata NOP
  7725                           
  7726                           ; BSR set to: 0
  7727  001AE0  0100               	movlb	0	; () banked
  7728  001AE2  90D8               	bcf	status,0,c
  7729  001AE4  3398               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  7730  001AE6  3397               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  7731  001AE8  3396               	rrcf	___ftadd@f2& (0+255),f,b
  7732  001AEA  0100               	movlb	0	; () banked
  7733  001AEC  2B9D               	incf	___ftadd@exp2& (0+255),f,b
  7734  001AEE                     l4172:
  7735  001AEE  FFFF               	dw	65535	; assembler added errata NOP
  7736                           
  7737                           ; BSR set to: 0
  7738  001AF0  0100               	movlb	0	; () banked
  7739  001AF2  519D               	movf	___ftadd@exp2& (0+255),w,b
  7740  001AF4  0100               	movlb	0	; () banked
  7741  001AF6  199E               	xorwf	___ftadd@exp1& (0+255),w,b
  7742  001AF8  A4D8               	btfss	status,2,c
  7743  001AFA  D7F1               	goto	l4170
  7744  001AFC                     l791:
  7745  001AFC  FFFF               	dw	65535	; assembler added errata NOP
  7746                           
  7747                           ; BSR set to: 0
  7748  001AFE  0100               	movlb	0	; () banked
  7749  001B00  AF9C               	btfss	___ftadd@sign& (0+255),7,b
  7750  001B02  D012               	goto	l800
  7751                           
  7752                           ; BSR set to: 0
  7753  001B04  0EFF               	movlw	255
  7754  001B06  0100               	movlb	0	; () banked
  7755  001B08  1B93               	xorwf	___ftadd@f1& (0+255),f,b
  7756  001B0A  0EFF               	movlw	255
  7757  001B0C  0100               	movlb	0	; () banked
  7758  001B0E  1B94               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  7759  001B10  0EFF               	movlw	255
  7760  001B12  0100               	movlb	0	; () banked
  7761  001B14  1B95               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  7762  001B16  0E01               	movlw	1
  7763  001B18  0100               	movlb	0	; () banked
  7764  001B1A  2793               	addwf	___ftadd@f1& (0+255),f,b
  7765  001B1C  0E00               	movlw	0
  7766  001B1E  0100               	movlb	0	; () banked
  7767  001B20  2394               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  7768  001B22  0E00               	movlw	0
  7769  001B24  0100               	movlb	0	; () banked
  7770  001B26  2395               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  7771  001B28                     l800:
  7772  001B28  FFFF               	dw	65535	; assembler added errata NOP
  7773                           
  7774                           ; BSR set to: 0
  7775  001B2A  0100               	movlb	0	; () banked
  7776  001B2C  AD9C               	btfss	___ftadd@sign& (0+255),6,b
  7777  001B2E  D012               	goto	l4178
  7778                           
  7779                           ; BSR set to: 0
  7780  001B30  0EFF               	movlw	255
  7781  001B32  0100               	movlb	0	; () banked
  7782  001B34  1B96               	xorwf	___ftadd@f2& (0+255),f,b
  7783  001B36  0EFF               	movlw	255
  7784  001B38  0100               	movlb	0	; () banked
  7785  001B3A  1B97               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7786  001B3C  0EFF               	movlw	255
  7787  001B3E  0100               	movlb	0	; () banked
  7788  001B40  1B98               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7789  001B42  0E01               	movlw	1
  7790  001B44  0100               	movlb	0	; () banked
  7791  001B46  2796               	addwf	___ftadd@f2& (0+255),f,b
  7792  001B48  0E00               	movlw	0
  7793  001B4A  0100               	movlb	0	; () banked
  7794  001B4C  2397               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7795  001B4E  0E00               	movlw	0
  7796  001B50  0100               	movlb	0	; () banked
  7797  001B52  2398               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7798  001B54                     l4178:
  7799  001B54  FFFF               	dw	65535	; assembler added errata NOP
  7800                           
  7801                           ; BSR set to: 0
  7802  001B56  0E00               	movlw	0
  7803  001B58  0100               	movlb	0	; () banked
  7804  001B5A  6F9C               	movwf	___ftadd@sign& (0+255),b
  7805                           
  7806                           ; BSR set to: 0
  7807  001B5C  0100               	movlb	0	; () banked
  7808  001B5E  5193               	movf	___ftadd@f1& (0+255),w,b
  7809  001B60  0100               	movlb	0	; () banked
  7810  001B62  2796               	addwf	___ftadd@f2& (0+255),f,b
  7811  001B64  0100               	movlb	0	; () banked
  7812  001B66  5194               	movf	(___ftadd@f1+1)& (0+255),w,b
  7813  001B68  0100               	movlb	0	; () banked
  7814  001B6A  2397               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7815  001B6C  0100               	movlb	0	; () banked
  7816  001B6E  5195               	movf	(___ftadd@f1+2)& (0+255),w,b
  7817  001B70  0100               	movlb	0	; () banked
  7818  001B72  2398               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7819                           
  7820                           ; BSR set to: 0
  7821  001B74  0100               	movlb	0	; () banked
  7822  001B76  AF98               	btfss	(___ftadd@f2+2)& (0+255),7,b
  7823  001B78  D015               	goto	l4188
  7824                           
  7825                           ; BSR set to: 0
  7826  001B7A  0EFF               	movlw	255
  7827  001B7C  0100               	movlb	0	; () banked
  7828  001B7E  1B96               	xorwf	___ftadd@f2& (0+255),f,b
  7829  001B80  0EFF               	movlw	255
  7830  001B82  0100               	movlb	0	; () banked
  7831  001B84  1B97               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  7832  001B86  0EFF               	movlw	255
  7833  001B88  0100               	movlb	0	; () banked
  7834  001B8A  1B98               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  7835  001B8C  0E01               	movlw	1
  7836  001B8E  0100               	movlb	0	; () banked
  7837  001B90  2796               	addwf	___ftadd@f2& (0+255),f,b
  7838  001B92  0E00               	movlw	0
  7839  001B94  0100               	movlb	0	; () banked
  7840  001B96  2397               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  7841  001B98  0E00               	movlw	0
  7842  001B9A  0100               	movlb	0	; () banked
  7843  001B9C  2398               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  7844                           
  7845                           ; BSR set to: 0
  7846  001B9E  0E01               	movlw	1
  7847  001BA0  0100               	movlb	0	; () banked
  7848  001BA2  6F9C               	movwf	___ftadd@sign& (0+255),b
  7849  001BA4                     l4188:
  7850  001BA4  FFFF               	dw	65535	; assembler added errata NOP
  7851                           
  7852                           ; BSR set to: 0
  7853  001BA6  C096  F022         	movff	___ftadd@f2,___ftpack@arg
  7854  001BAA  C097  F023         	movff	___ftadd@f2+1,___ftpack@arg+1
  7855  001BAE  C098  F024         	movff	___ftadd@f2+2,___ftpack@arg+2
  7856  001BB2  C09E  F025         	movff	___ftadd@exp1,___ftpack@exp
  7857  001BB6  C09C  F026         	movff	___ftadd@sign,___ftpack@sign
  7858  001BBA  ECD5  F013         	call	___ftpack	;wreg free
  7859  001BBE  C022  F093         	movff	?___ftpack,?___ftadd
  7860  001BC2  C023  F094         	movff	?___ftpack+1,?___ftadd+1
  7861  001BC6  C024  F095         	movff	?___ftpack+2,?___ftadd+2
  7862  001BCA                     l777:
  7863  001BCA  FFFF               	dw	65535	; assembler added errata NOP
  7864  001BCC  0012               	return		;funcret
  7865  001BCE  FFFF               	dw	65535	; errata NOP
  7866  001BD0                     __end_of___ftadd:
  7867                           	opt stack 0
  7868                           tblptru	equ	0xFF8
  7869                           tblptrh	equ	0xFF7
  7870                           tblptrl	equ	0xFF6
  7871                           tablat	equ	0xFF5
  7872                           prodh	equ	0xFF4
  7873                           prodl	equ	0xFF3
  7874                           postinc0	equ	0xFEE
  7875                           wreg	equ	0xFE8
  7876                           postdec1	equ	0xFE5
  7877                           fsr1l	equ	0xFE1
  7878                           indf2	equ	0xFDF
  7879                           postinc2	equ	0xFDE
  7880                           postdec2	equ	0xFDD
  7881                           fsr2h	equ	0xFDA
  7882                           fsr2l	equ	0xFD9
  7883                           status	equ	0xFD8
  7884                           
  7885 ;; *************** function ___ftneg *****************
  7886 ;; Defined at:
  7887 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/ftneg.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;  f1              3   33[COMRAM] float 
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;		None
  7892 ;; Return value:  Size  Location     Type
  7893 ;;                  3   33[COMRAM] float 
  7894 ;; Registers used:
  7895 ;;		wreg, status,2, status,0
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7901 ;;      Params:         3       0       0       0       0       0       0
  7902 ;;      Locals:         0       0       0       0       0       0       0
  7903 ;;      Temps:          0       0       0       0       0       0       0
  7904 ;;      Totals:         3       0       0       0       0       0       0
  7905 ;;Total ram usage:        3 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; Hardware stack levels required when called:    2
  7908 ;; This function calls:
  7909 ;;		Nothing
  7910 ;; This function is called by:
  7911 ;;		_sprintf
  7912 ;; This function uses a non-reentrant model
  7913 ;;
  7914                           
  7915                           	psect	text17
  7916  002E12                     __ptext17:
  7917                           	opt stack 0
  7918  002E12                     ___ftneg:
  7919                           	opt stack 0
  7920  002E12  FFFF               	dw	65535	; assembler added errata NOP
  7921                           
  7922                           ;incstack = 0
  7923  002E14  5022               	movf	___ftneg@f1,w,c
  7924  002E16  1023               	iorwf	___ftneg@f1+1,w,c
  7925  002E18  1024               	iorwf	___ftneg@f1+2,w,c
  7926  002E1A  B4D8               	btfsc	status,2,c
  7927  002E1C  D006               	goto	l850
  7928  002E1E  0E00               	movlw	0
  7929  002E20  1A22               	xorwf	___ftneg@f1,f,c
  7930  002E22  0E00               	movlw	0
  7931  002E24  1A23               	xorwf	___ftneg@f1+1,f,c
  7932  002E26  0E80               	movlw	128
  7933  002E28  1A24               	xorwf	___ftneg@f1+2,f,c
  7934  002E2A                     l850:
  7935  002E2A  FFFF               	dw	65535	; assembler added errata NOP
  7936  002E2C  C022  F022         	movff	___ftneg@f1,?___ftneg
  7937  002E30  C023  F023         	movff	___ftneg@f1+1,?___ftneg+1
  7938  002E34  C024  F024         	movff	___ftneg@f1+2,?___ftneg+2
  7939  002E38  0012               	return		;funcret
  7940  002E3A  FFFF               	dw	65535	; errata NOP
  7941  002E3C                     __end_of___ftneg:
  7942                           	opt stack 0
  7943                           tblptru	equ	0xFF8
  7944                           tblptrh	equ	0xFF7
  7945                           tblptrl	equ	0xFF6
  7946                           tablat	equ	0xFF5
  7947                           prodh	equ	0xFF4
  7948                           prodl	equ	0xFF3
  7949                           postinc0	equ	0xFEE
  7950                           wreg	equ	0xFE8
  7951                           postdec1	equ	0xFE5
  7952                           fsr1l	equ	0xFE1
  7953                           indf2	equ	0xFDF
  7954                           postinc2	equ	0xFDE
  7955                           postdec2	equ	0xFDD
  7956                           fsr2h	equ	0xFDA
  7957                           fsr2l	equ	0xFD9
  7958                           status	equ	0xFD8
  7959                           
  7960 ;; *************** function ___ftge *****************
  7961 ;; Defined at:
  7962 ;;		line 4 in file "/opt/microchip/xc8/v1.38/sources/common/ftge.c"
  7963 ;; Parameters:    Size  Location     Type
  7964 ;;  ff1             3   33[COMRAM] float 
  7965 ;;  ff2             3   36[COMRAM] float 
  7966 ;; Auto vars:     Size  Location     Type
  7967 ;;		None
  7968 ;; Return value:  Size  Location     Type
  7969 ;;		None               void
  7970 ;; Registers used:
  7971 ;;		wreg, status,2, status,0
  7972 ;; Tracked objects:
  7973 ;;		On entry : 0/0
  7974 ;;		On exit  : 0/0
  7975 ;;		Unchanged: 0/0
  7976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7977 ;;      Params:         6       0       0       0       0       0       0
  7978 ;;      Locals:         0       0       0       0       0       0       0
  7979 ;;      Temps:          3       0       0       0       0       0       0
  7980 ;;      Totals:         9       0       0       0       0       0       0
  7981 ;;Total ram usage:        9 bytes
  7982 ;; Hardware stack levels used:    1
  7983 ;; Hardware stack levels required when called:    2
  7984 ;; This function calls:
  7985 ;;		Nothing
  7986 ;; This function is called by:
  7987 ;;		_sprintf
  7988 ;; This function uses a non-reentrant model
  7989 ;;
  7990                           
  7991                           	psect	text18
  7992  00286E                     __ptext18:
  7993                           	opt stack 0
  7994  00286E                     ___ftge:
  7995                           	opt stack 0
  7996  00286E  FFFF               	dw	65535	; assembler added errata NOP
  7997                           
  7998                           ;incstack = 0
  7999  002870  AE24               	btfss	___ftge@ff1+2,7,c
  8000  002872  D016               	goto	l4520
  8001  002874  C022  F028         	movff	___ftge@ff1,??___ftge
  8002  002878  C023  F029         	movff	___ftge@ff1+1,??___ftge+1
  8003  00287C  C024  F02A         	movff	___ftge@ff1+2,??___ftge+2
  8004  002880  1E28               	comf	??___ftge,f,c
  8005  002882  1E29               	comf	??___ftge+1,f,c
  8006  002884  1E2A               	comf	??___ftge+2,f,c
  8007  002886  2A28               	incf	??___ftge,f,c
  8008  002888  0E00               	movlw	0
  8009  00288A  2229               	addwfc	??___ftge+1,f,c
  8010  00288C  222A               	addwfc	??___ftge+2,f,c
  8011  00288E  0E00               	movlw	0
  8012  002890  2428               	addwf	??___ftge,w,c
  8013  002892  6E22               	movwf	___ftge@ff1,c
  8014  002894  0E00               	movlw	0
  8015  002896  2029               	addwfc	??___ftge+1,w,c
  8016  002898  6E23               	movwf	___ftge@ff1+1,c
  8017  00289A  0E80               	movlw	128
  8018  00289C  202A               	addwfc	??___ftge+2,w,c
  8019  00289E  6E24               	movwf	___ftge@ff1+2,c
  8020  0028A0                     l4520:
  8021  0028A0  FFFF               	dw	65535	; assembler added errata NOP
  8022  0028A2  AE27               	btfss	___ftge@ff2+2,7,c
  8023  0028A4  D016               	goto	l4524
  8024  0028A6  C025  F028         	movff	___ftge@ff2,??___ftge
  8025  0028AA  C026  F029         	movff	___ftge@ff2+1,??___ftge+1
  8026  0028AE  C027  F02A         	movff	___ftge@ff2+2,??___ftge+2
  8027  0028B2  1E28               	comf	??___ftge,f,c
  8028  0028B4  1E29               	comf	??___ftge+1,f,c
  8029  0028B6  1E2A               	comf	??___ftge+2,f,c
  8030  0028B8  2A28               	incf	??___ftge,f,c
  8031  0028BA  0E00               	movlw	0
  8032  0028BC  2229               	addwfc	??___ftge+1,f,c
  8033  0028BE  222A               	addwfc	??___ftge+2,f,c
  8034  0028C0  0E00               	movlw	0
  8035  0028C2  2428               	addwf	??___ftge,w,c
  8036  0028C4  6E25               	movwf	___ftge@ff2,c
  8037  0028C6  0E00               	movlw	0
  8038  0028C8  2029               	addwfc	??___ftge+1,w,c
  8039  0028CA  6E26               	movwf	___ftge@ff2+1,c
  8040  0028CC  0E80               	movlw	128
  8041  0028CE  202A               	addwfc	??___ftge+2,w,c
  8042  0028D0  6E27               	movwf	___ftge@ff2+2,c
  8043  0028D2                     l4524:
  8044  0028D2  FFFF               	dw	65535	; assembler added errata NOP
  8045  0028D4  0E00               	movlw	0
  8046  0028D6  1A22               	xorwf	___ftge@ff1,f,c
  8047  0028D8  0E00               	movlw	0
  8048  0028DA  1A23               	xorwf	___ftge@ff1+1,f,c
  8049  0028DC  0E80               	movlw	128
  8050  0028DE  1A24               	xorwf	___ftge@ff1+2,f,c
  8051  0028E0  0E00               	movlw	0
  8052  0028E2  1A25               	xorwf	___ftge@ff2,f,c
  8053  0028E4  0E00               	movlw	0
  8054  0028E6  1A26               	xorwf	___ftge@ff2+1,f,c
  8055  0028E8  0E80               	movlw	128
  8056  0028EA  1A27               	xorwf	___ftge@ff2+2,f,c
  8057  0028EC  5025               	movf	___ftge@ff2,w,c
  8058  0028EE  5C22               	subwf	___ftge@ff1,w,c
  8059  0028F0  5026               	movf	___ftge@ff2+1,w,c
  8060  0028F2  5823               	subwfb	___ftge@ff1+1,w,c
  8061  0028F4  5027               	movf	___ftge@ff2+2,w,c
  8062  0028F6  5824               	subwfb	___ftge@ff1+2,w,c
  8063  0028F8  B0D8               	btfsc	status,0,c
  8064  0028FA  D002               	goto	l4530
  8065  0028FC  90D8               	bcf	status,0,c
  8066  0028FE  D002               	goto	l834
  8067  002900                     l4530:
  8068  002900  FFFF               	dw	65535	; assembler added errata NOP
  8069  002902  80D8               	bsf	status,0,c
  8070  002904                     l834:
  8071  002904  FFFF               	dw	65535	; assembler added errata NOP
  8072  002906  0012               	return		;funcret
  8073  002908  FFFF               	dw	65535	; errata NOP
  8074  00290A                     __end_of___ftge:
  8075                           	opt stack 0
  8076                           tblptru	equ	0xFF8
  8077                           tblptrh	equ	0xFF7
  8078                           tblptrl	equ	0xFF6
  8079                           tablat	equ	0xFF5
  8080                           prodh	equ	0xFF4
  8081                           prodl	equ	0xFF3
  8082                           postinc0	equ	0xFEE
  8083                           wreg	equ	0xFE8
  8084                           postdec1	equ	0xFE5
  8085                           fsr1l	equ	0xFE1
  8086                           indf2	equ	0xFDF
  8087                           postinc2	equ	0xFDE
  8088                           postdec2	equ	0xFDD
  8089                           fsr2h	equ	0xFDA
  8090                           fsr2l	equ	0xFD9
  8091                           status	equ	0xFD8
  8092                           
  8093 ;; *************** function _ledestado *****************
  8094 ;; Defined at:
  8095 ;;		line 265 in file "main.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;  tiempoled       2   33[COMRAM] int 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;		None
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  1    wreg      void 
  8102 ;; Registers used:
  8103 ;;		wreg, status,2, status,0
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8109 ;;      Params:         2       0       0       0       0       0       0
  8110 ;;      Locals:         0       0       0       0       0       0       0
  8111 ;;      Temps:          1       0       0       0       0       0       0
  8112 ;;      Totals:         3       0       0       0       0       0       0
  8113 ;;Total ram usage:        3 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    2
  8116 ;; This function calls:
  8117 ;;		Nothing
  8118 ;; This function is called by:
  8119 ;;		_main
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           	psect	text19
  8124  002C78                     __ptext19:
  8125                           	opt stack 0
  8126  002C78                     _ledestado:
  8127                           	opt stack 0
  8128  002C78  FFFF               	dw	65535	; assembler added errata NOP
  8129                           
  8130                           ;main.c: 266: d++;
  8131                           
  8132                           ;incstack = 0
  8133  002C7A  0100               	movlb	0	; () banked
  8134  002C7C  4BC6               	infsnz	_d& (0+255),f,b
  8135  002C7E  2BC7               	incf	(_d+1)& (0+255),f,b
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;main.c: 267: if (d >= tiempoled) {
  8139  002C80  5022               	movf	ledestado@tiempoled,w,c
  8140  002C82  0100               	movlb	0	; () banked
  8141  002C84  5DC6               	subwf	_d& (0+255),w,b
  8142  002C86  0100               	movlb	0	; () banked
  8143  002C88  51C7               	movf	(_d+1)& (0+255),w,b
  8144  002C8A  0A80               	xorlw	128
  8145  002C8C  6E24               	movwf	??_ledestado& (0+255),c
  8146  002C8E  5023               	movf	ledestado@tiempoled+1,w,c
  8147  002C90  0A80               	xorlw	128
  8148  002C92  5824               	subwfb	??_ledestado& (0+255),w,c
  8149  002C94  A0D8               	btfss	status,0,c
  8150  002C96  D016               	goto	l3304
  8151                           
  8152                           ; BSR set to: 0
  8153                           ;main.c: 268: __nop();
  8154  002C98  F000               	nop	
  8155                           
  8156                           ;main.c: 269: LATBbits.LB7 = ~PORTBbits.RB7;
  8157  002C9A  AE81               	btfss	3969,7,c	;volatile
  8158  002C9C  D002               	goto	u3270
  8159  002C9E  0E01               	movlw	1
  8160  002CA0  D002               	goto	u3276
  8161  002CA2                     u3270:
  8162  002CA2  FFFF               	dw	65535	; assembler added errata NOP
  8163  002CA4  0E00               	movlw	0
  8164  002CA6                     u3276:
  8165  002CA6  FFFF               	dw	65535	; assembler added errata NOP
  8166  002CA8  0AFF               	xorlw	255
  8167  002CAA  6E24               	movwf	??_ledestado& (0+255),c
  8168  002CAC  3224               	rrcf	??_ledestado,f,c
  8169  002CAE  3224               	rrcf	??_ledestado,f,c
  8170  002CB0  508A               	movf	3978,w,c	;volatile
  8171  002CB2  1824               	xorwf	??_ledestado,w,c
  8172  002CB4  0B7F               	andlw	-129
  8173  002CB6  1824               	xorwf	??_ledestado,w,c
  8174  002CB8  6E8A               	movwf	3978,c	;volatile
  8175                           
  8176                           ;main.c: 270: d = 0;
  8177  002CBA  0E00               	movlw	0
  8178  002CBC  0100               	movlb	0	; () banked
  8179  002CBE  6FC7               	movwf	(_d+1)& (0+255),b
  8180  002CC0  0E00               	movlw	0
  8181  002CC2  6FC6               	movwf	_d& (0+255),b
  8182  002CC4                     l3304:
  8183  002CC4  FFFF               	dw	65535	; assembler added errata NOP
  8184                           
  8185                           ; BSR set to: 0
  8186                           ;main.c: 271: }
  8187                           ;main.c: 272: led = 0;
  8188  002CC6  0E00               	movlw	0
  8189  002CC8  6E45               	movwf	_led+1,c
  8190  002CCA  0E00               	movlw	0
  8191  002CCC  6E44               	movwf	_led,c
  8192                           
  8193                           ; BSR set to: 0
  8194  002CCE  0012               	return		;funcret
  8195  002CD0  FFFF               	dw	65535	; errata NOP
  8196  002CD2                     __end_of_ledestado:
  8197                           	opt stack 0
  8198                           tblptru	equ	0xFF8
  8199                           tblptrh	equ	0xFF7
  8200                           tblptrl	equ	0xFF6
  8201                           tablat	equ	0xFF5
  8202                           prodh	equ	0xFF4
  8203                           prodl	equ	0xFF3
  8204                           postinc0	equ	0xFEE
  8205                           wreg	equ	0xFE8
  8206                           postdec1	equ	0xFE5
  8207                           fsr1l	equ	0xFE1
  8208                           indf2	equ	0xFDF
  8209                           postinc2	equ	0xFDE
  8210                           postdec2	equ	0xFDD
  8211                           fsr2h	equ	0xFDA
  8212                           fsr2l	equ	0xFD9
  8213                           status	equ	0xFD8
  8214                           
  8215 ;; *************** function _enviarTramaSE *****************
  8216 ;; Defined at:
  8217 ;;		line 297 in file "main.c"
  8218 ;; Parameters:    Size  Location     Type
  8219 ;;  datos           2   33[COMRAM] PTR unsigned char 
  8220 ;;		 -> salida(30), 
  8221 ;; Auto vars:     Size  Location     Type
  8222 ;;		None
  8223 ;; Return value:  Size  Location     Type
  8224 ;;                  1    wreg      void 
  8225 ;; Registers used:
  8226 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8227 ;; Tracked objects:
  8228 ;;		On entry : 0/0
  8229 ;;		On exit  : 0/0
  8230 ;;		Unchanged: 0/0
  8231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8232 ;;      Params:         2       0       0       0       0       0       0
  8233 ;;      Locals:         0       0       0       0       0       0       0
  8234 ;;      Temps:          0       0       0       0       0       0       0
  8235 ;;      Totals:         2       0       0       0       0       0       0
  8236 ;;Total ram usage:        2 bytes
  8237 ;; Hardware stack levels used:    1
  8238 ;; Hardware stack levels required when called:    2
  8239 ;; This function calls:
  8240 ;;		Nothing
  8241 ;; This function is called by:
  8242 ;;		_main
  8243 ;; This function uses a non-reentrant model
  8244 ;;
  8245                           
  8246                           	psect	text20
  8247  002DB6                     __ptext20:
  8248                           	opt stack 0
  8249  002DB6                     _enviarTramaSE:
  8250                           	opt stack 0
  8251  002DB6  FFFF               	dw	65535	; assembler added errata NOP
  8252                           
  8253                           ;main.c: 301: while (*datos != 0) {
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;incstack = 0
  8257  002DB8  D00C               	goto	l3736
  8258  002DBA                     l3732:
  8259  002DBA  FFFF               	dw	65535	; assembler added errata NOP
  8260                           
  8261                           ;main.c: 302: TXREG = *datos;
  8262  002DBC  C022  FFD9         	movff	enviarTramaSE@datos,fsr2l
  8263  002DC0  C023  FFDA         	movff	enviarTramaSE@datos+1,fsr2h
  8264  002DC4  50DF               	movf	indf2,w,c
  8265  002DC6  6EAD               	movwf	4013,c	;volatile
  8266  002DC8                     l285:
  8267  002DC8  FFFF               	dw	65535	; assembler added errata NOP
  8268  002DCA  A2AC               	btfss	4012,1,c	;volatile
  8269  002DCC  D7FD               	goto	l285
  8270                           
  8271                           ;main.c: 304: *datos++;
  8272  002DCE  4A22               	infsnz	enviarTramaSE@datos,f,c
  8273  002DD0  2A23               	incf	enviarTramaSE@datos+1,f,c
  8274  002DD2                     l3736:
  8275  002DD2  FFFF               	dw	65535	; assembler added errata NOP
  8276  002DD4  C022  FFD9         	movff	enviarTramaSE@datos,fsr2l
  8277  002DD8  C023  FFDA         	movff	enviarTramaSE@datos+1,fsr2h
  8278  002DDC  50DF               	movf	indf2,w,c
  8279  002DDE  B4D8               	btfsc	status,2,c
  8280  002DE0  0012               	return		;funcret
  8281  002DE2  FFFF               	dw	65535	; assembler added errata NOP
  8282  002DE4  D7EA               	goto	l3732
  8283  002DE6  FFFF               	dw	65535	; errata NOP
  8284  002DE8                     __end_of_enviarTramaSE:
  8285                           	opt stack 0
  8286                           tblptru	equ	0xFF8
  8287                           tblptrh	equ	0xFF7
  8288                           tblptrl	equ	0xFF6
  8289                           tablat	equ	0xFF5
  8290                           prodh	equ	0xFF4
  8291                           prodl	equ	0xFF3
  8292                           postinc0	equ	0xFEE
  8293                           wreg	equ	0xFE8
  8294                           postdec1	equ	0xFE5
  8295                           fsr1l	equ	0xFE1
  8296                           indf2	equ	0xFDF
  8297                           postinc2	equ	0xFDE
  8298                           postdec2	equ	0xFDD
  8299                           fsr2h	equ	0xFDA
  8300                           fsr2l	equ	0xFD9
  8301                           status	equ	0xFD8
  8302                           
  8303 ;; *************** function _enviarTrama *****************
  8304 ;; Defined at:
  8305 ;;		line 279 in file "main.c"
  8306 ;; Parameters:    Size  Location     Type
  8307 ;;  datos           2   33[COMRAM] PTR unsigned char 
  8308 ;;		 -> visualizacionnoaplica(24), muestreonoaplica(19), estadoactualrapido(24), estadoactualnormal(24), 
  8309 ;;		 -> salida(30), noreconocido(22), saludo(31), comando(25), 
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;		None
  8312 ;; Return value:  Size  Location     Type
  8313 ;;                  1    wreg      void 
  8314 ;; Registers used:
  8315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  8316 ;; Tracked objects:
  8317 ;;		On entry : 0/0
  8318 ;;		On exit  : 0/0
  8319 ;;		Unchanged: 0/0
  8320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8321 ;;      Params:         2       0       0       0       0       0       0
  8322 ;;      Locals:         0       0       0       0       0       0       0
  8323 ;;      Temps:          0       0       0       0       0       0       0
  8324 ;;      Totals:         2       0       0       0       0       0       0
  8325 ;;Total ram usage:        2 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; Hardware stack levels required when called:    2
  8328 ;; This function calls:
  8329 ;;		Nothing
  8330 ;; This function is called by:
  8331 ;;		_main
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           	psect	text21
  8336  002AB6                     __ptext21:
  8337                           	opt stack 0
  8338  002AB6                     _enviarTrama:
  8339                           	opt stack 0
  8340  002AB6  FFFF               	dw	65535	; assembler added errata NOP
  8341                           
  8342                           ;main.c: 283: while (*datos != 0) {
  8343                           
  8344                           ;incstack = 0
  8345  002AB8  D018               	goto	l3288
  8346  002ABA                     l3284:
  8347  002ABA  FFFF               	dw	65535	; assembler added errata NOP
  8348                           
  8349                           ;main.c: 284: TXREG = *datos;
  8350  002ABC  C022  FFF6         	movff	enviarTrama@datos,tblptrl
  8351  002AC0  C023  FFF7         	movff	enviarTrama@datos+1,tblptrh
  8352  002AC4  6AF8               	clrf	tblptru,c
  8353  002AC6  0E05               	movlw	(high __ramtop+-1)
  8354  002AC8  64F7               	cpfsgt	tblptrh,c
  8355  002ACA  D004               	bra	u3207
  8356  002ACC  0008               	tblrd		*
  8357  002ACE  FFFF               	dw	65535	; errata NOP
  8358  002AD0  50F5               	movf	tablat,w,c
  8359  002AD2  D005               	bra	u3200
  8360  002AD4                     u3207:
  8361  002AD4  CFF6 FFE9          	movff	tblptrl,fsr0l
  8362  002AD8  CFF7 FFEA          	movff	tblptrh,fsr0h
  8363  002ADC  50EF               	movf	indf0,w,c
  8364  002ADE                     u3200:
  8365  002ADE  6EAD               	movwf	4013,c	;volatile
  8366  002AE0                     l270:
  8367  002AE0  FFFF               	dw	65535	; assembler added errata NOP
  8368  002AE2  A2AC               	btfss	4012,1,c	;volatile
  8369  002AE4  D7FD               	goto	l270
  8370                           
  8371                           ;main.c: 286: *datos++;
  8372  002AE6  4A22               	infsnz	enviarTrama@datos,f,c
  8373  002AE8  2A23               	incf	enviarTrama@datos+1,f,c
  8374  002AEA                     l3288:
  8375  002AEA  FFFF               	dw	65535	; assembler added errata NOP
  8376  002AEC  C022  FFF6         	movff	enviarTrama@datos,tblptrl
  8377  002AF0  C023  FFF7         	movff	enviarTrama@datos+1,tblptrh
  8378  002AF4  6AF8               	clrf	tblptru,c
  8379  002AF6  0E05               	movlw	(high __ramtop+-1)
  8380  002AF8  64F7               	cpfsgt	tblptrh,c
  8381  002AFA  D004               	bra	u3227
  8382  002AFC  0008               	tblrd		*
  8383  002AFE  FFFF               	dw	65535	; errata NOP
  8384  002B00  50F5               	movf	tablat,w,c
  8385  002B02  D005               	bra	u3220
  8386  002B04                     u3227:
  8387  002B04  CFF6 FFE9          	movff	tblptrl,fsr0l
  8388  002B08  CFF7 FFEA          	movff	tblptrh,fsr0h
  8389  002B0C  50EF               	movf	indf0,w,c
  8390  002B0E                     u3220:
  8391  002B0E  0900               	iorlw	0
  8392  002B10  A4D8               	btfss	status,2,c
  8393  002B12  D7D3               	goto	l3284
  8394                           
  8395                           ;main.c: 287: }
  8396                           ;main.c: 289: TXREG = 0x0A;
  8397  002B14  0E0A               	movlw	10
  8398  002B16  6EAD               	movwf	4013,c	;volatile
  8399  002B18                     l274:
  8400  002B18  FFFF               	dw	65535	; assembler added errata NOP
  8401  002B1A  A2AC               	btfss	4012,1,c	;volatile
  8402  002B1C  D7FD               	goto	l274
  8403                           
  8404                           ;main.c: 291: TXREG = 0x0D;
  8405  002B1E  0E0D               	movlw	13
  8406  002B20  6EAD               	movwf	4013,c	;volatile
  8407  002B22                     l277:
  8408  002B22  FFFF               	dw	65535	; assembler added errata NOP
  8409  002B24  B2AC               	btfsc	4012,1,c	;volatile
  8410  002B26  0012               	return		;funcret
  8411  002B28  FFFF               	dw	65535	; assembler added errata NOP
  8412  002B2A  D7FB               	goto	l277
  8413  002B2C  FFFF               	dw	65535	; errata NOP
  8414  002B2E                     __end_of_enviarTrama:
  8415                           	opt stack 0
  8416                           tblptru	equ	0xFF8
  8417                           tblptrh	equ	0xFF7
  8418                           tblptrl	equ	0xFF6
  8419                           tablat	equ	0xFF5
  8420                           prodh	equ	0xFF4
  8421                           prodl	equ	0xFF3
  8422                           indf0	equ	0xFEF
  8423                           postinc0	equ	0xFEE
  8424                           fsr0h	equ	0xFEA
  8425                           fsr0l	equ	0xFE9
  8426                           wreg	equ	0xFE8
  8427                           postdec1	equ	0xFE5
  8428                           fsr1l	equ	0xFE1
  8429                           indf2	equ	0xFDF
  8430                           postinc2	equ	0xFDE
  8431                           postdec2	equ	0xFDD
  8432                           fsr2h	equ	0xFDA
  8433                           fsr2l	equ	0xFD9
  8434                           status	equ	0xFD8
  8435                           
  8436 ;; *************** function _conversionADMues *****************
  8437 ;; Defined at:
  8438 ;;		line 313 in file "main.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;  canal           2   47[COMRAM] int 
  8441 ;; Auto vars:     Size  Location     Type
  8442 ;;  i               2   53[COMRAM] int 
  8443 ;;  i               2   51[COMRAM] int 
  8444 ;;  i               2   49[COMRAM] int 
  8445 ;; Return value:  Size  Location     Type
  8446 ;;                  2   47[COMRAM] int 
  8447 ;; Registers used:
  8448 ;;		wreg, status,2, status,0, cstack
  8449 ;; Tracked objects:
  8450 ;;		On entry : 0/0
  8451 ;;		On exit  : 0/0
  8452 ;;		Unchanged: 0/0
  8453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8454 ;;      Params:         2       0       0       0       0       0       0
  8455 ;;      Locals:         6       0       0       0       0       0       0
  8456 ;;      Temps:          0       0       0       0       0       0       0
  8457 ;;      Totals:         8       0       0       0       0       0       0
  8458 ;;Total ram usage:        8 bytes
  8459 ;; Hardware stack levels used:    1
  8460 ;; Hardware stack levels required when called:    3
  8461 ;; This function calls:
  8462 ;;		___awdiv
  8463 ;; This function is called by:
  8464 ;;		_main
  8465 ;; This function uses a non-reentrant model
  8466 ;;
  8467                           
  8468                           	psect	text22
  8469  001E40                     __ptext22:
  8470                           	opt stack 0
  8471  001E40                     _conversionADMues:
  8472                           	opt stack 0
  8473  001E40  FFFF               	dw	65535	; assembler added errata NOP
  8474                           
  8475                           ;main.c: 314: if (canal == 0) {
  8476                           
  8477                           ;incstack = 0
  8478  001E42  5030               	movf	conversionADMues@canal,w,c
  8479  001E44  1031               	iorwf	conversionADMues@canal+1,w,c
  8480  001E46  A4D8               	btfss	status,2,c
  8481  001E48  D041               	goto	l4988
  8482                           
  8483                           ;main.c: 315: ADCON0bits.CHS = 0b000;
  8484  001E4A  96C2               	bcf	4034,3,c	;volatile
  8485  001E4C  98C2               	bcf	4034,4,c	;volatile
  8486  001E4E  9AC2               	bcf	4034,5,c	;volatile
  8487                           
  8488                           ;main.c: 316: for (int i = 0; i < 20; i++) {
  8489  001E50  0E00               	movlw	0
  8490  001E52  6E33               	movwf	conversionADMues@i+1,c
  8491  001E54  0E00               	movlw	0
  8492  001E56  6E32               	movwf	conversionADMues@i,c
  8493  001E58  BE33               	btfsc	conversionADMues@i+1,7,c
  8494  001E5A  D007               	goto	l293
  8495  001E5C  5033               	movf	conversionADMues@i+1,w,c
  8496  001E5E  E10E               	bnz	l294
  8497  001E60  FFFF               	dw	65535	; assembler added errata NOP
  8498  001E62  0E14               	movlw	20
  8499  001E64  5C32               	subwf	conversionADMues@i,w,c
  8500  001E66  B0D8               	btfsc	status,0,c
  8501  001E68  D009               	goto	l294
  8502  001E6A                     l293:
  8503  001E6A  FFFF               	dw	65535	; assembler added errata NOP
  8504                           
  8505                           ;main.c: 317: __nop();
  8506  001E6C  F000               	nop	
  8507  001E6E  4A32               	infsnz	conversionADMues@i,f,c
  8508  001E70  2A33               	incf	conversionADMues@i+1,f,c
  8509  001E72  BE33               	btfsc	conversionADMues@i+1,7,c
  8510  001E74  D7FA               	goto	l293
  8511  001E76  5033               	movf	conversionADMues@i+1,w,c
  8512  001E78  E101               	bnz	u5970
  8513  001E7A  D7F2               	goto	L10
  8514  001E7C                     u5970:
  8515  001E7C                     l294:
  8516  001E7C  FFFF               	dw	65535	; assembler added errata NOP
  8517                           
  8518                           ;main.c: 318: }
  8519                           ;main.c: 319: ADCON0bits.GODONE = 1;
  8520  001E7E  84C2               	bsf	4034,2,c	;volatile
  8521                           
  8522                           ;main.c: 320: while (conversionadc == 0) {
  8523  001E80  D002               	goto	l4972
  8524  001E82                     l296:
  8525  001E82  FFFF               	dw	65535	; assembler added errata NOP
  8526                           
  8527                           ;main.c: 321: __nop();
  8528  001E84  F000               	nop	
  8529  001E86                     l4972:
  8530  001E86  FFFF               	dw	65535	; assembler added errata NOP
  8531  001E88  503E               	movf	_conversionadc,w,c
  8532  001E8A  103F               	iorwf	_conversionadc+1,w,c
  8533  001E8C  B4D8               	btfsc	status,2,c
  8534  001E8E  D7F9               	goto	l296
  8535                           
  8536                           ;main.c: 322: }
  8537                           ;main.c: 323: h0++;
  8538  001E90  0100               	movlb	0	; () banked
  8539  001E92  4BCC               	infsnz	_h0& (0+255),f,b
  8540  001E94  2BCD               	incf	(_h0+1)& (0+255),f,b
  8541                           
  8542                           ; BSR set to: 0
  8543                           ;main.c: 324: suma0 = suma0 + resultadoadc;
  8544  001E96  504C               	movf	_resultadoadc,w,c
  8545  001E98  244E               	addwf	_suma0,w,c
  8546  001E9A  6E4E               	movwf	_suma0,c
  8547  001E9C  504D               	movf	_resultadoadc+1,w,c
  8548  001E9E  204F               	addwfc	_suma0+1,w,c
  8549  001EA0  6E4F               	movwf	_suma0+1,c
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;main.c: 325: resultadoadc = 0;
  8553  001EA2  0E00               	movlw	0
  8554  001EA4  6E4D               	movwf	_resultadoadc+1,c
  8555  001EA6  0E00               	movlw	0
  8556  001EA8  6E4C               	movwf	_resultadoadc,c
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;main.c: 326: promedio = suma0 / h0;
  8560  001EAA  C04E  F028         	movff	_suma0,___awdiv@dividend
  8561  001EAE  C04F  F029         	movff	_suma0+1,___awdiv@dividend+1
  8562  001EB2  C0CC  F02A         	movff	_h0,___awdiv@divisor
  8563  001EB6  C0CD  F02B         	movff	_h0+1,___awdiv@divisor+1
  8564  001EBA  EC85  F014         	call	___awdiv	;wreg free
  8565  001EBE  D088               	goto	L14
  8566  001EC0                     l4982:
  8567  001EC0  FFFF               	dw	65535	; assembler added errata NOP
  8568                           
  8569                           ;main.c: 327: conversionadc = 0;
  8570  001EC2  0E00               	movlw	0
  8571  001EC4  6E3F               	movwf	_conversionadc+1,c
  8572  001EC6  0E00               	movlw	0
  8573  001EC8  6E3E               	movwf	_conversionadc,c
  8574  001ECA  D088               	goto	L15
  8575  001ECC                     l4988:
  8576  001ECC  FFFF               	dw	65535	; assembler added errata NOP
  8577                           
  8578                           ;main.c: 330: }
  8579                           ;main.c: 331: if (canal == 1) {
  8580  001ECE  0430               	decf	conversionADMues@canal,w,c
  8581  001ED0  1031               	iorwf	conversionADMues@canal+1,w,c
  8582  001ED2  A4D8               	btfss	status,2,c
  8583  001ED4  D03C               	goto	l5016
  8584                           
  8585                           ;main.c: 332: ADCON0bits.CHS = 0b001;
  8586  001ED6  50C2               	movf	4034,w,c	;volatile
  8587  001ED8  0BC7               	andlw	-57
  8588  001EDA  0908               	iorlw	8
  8589  001EDC  6EC2               	movwf	4034,c	;volatile
  8590                           
  8591                           ;main.c: 333: for (int i = 0; i < 20; i++) {
  8592  001EDE  0E00               	movlw	0
  8593  001EE0  6E35               	movwf	conversionADMues@i_608+1,c
  8594  001EE2  0E00               	movlw	0
  8595  001EE4  6E34               	movwf	conversionADMues@i_608,c
  8596  001EE6  BE35               	btfsc	conversionADMues@i_608+1,7,c
  8597  001EE8  D007               	goto	l300
  8598  001EEA  5035               	movf	conversionADMues@i_608+1,w,c
  8599  001EEC  E10E               	bnz	l301
  8600  001EEE  FFFF               	dw	65535	; assembler added errata NOP
  8601  001EF0  0E14               	movlw	20
  8602  001EF2  5C34               	subwf	conversionADMues@i_608,w,c
  8603  001EF4  B0D8               	btfsc	status,0,c
  8604  001EF6  D009               	goto	l301
  8605  001EF8                     l300:
  8606  001EF8  FFFF               	dw	65535	; assembler added errata NOP
  8607                           
  8608                           ;main.c: 334: __nop();
  8609  001EFA  F000               	nop	
  8610  001EFC  4A34               	infsnz	conversionADMues@i_608,f,c
  8611  001EFE  2A35               	incf	conversionADMues@i_608+1,f,c
  8612  001F00  BE35               	btfsc	conversionADMues@i_608+1,7,c
  8613  001F02  D7FA               	goto	l300
  8614  001F04  5035               	movf	conversionADMues@i_608+1,w,c
  8615  001F06  E101               	bnz	u6010
  8616  001F08  D7F2               	goto	L12
  8617  001F0A                     u6010:
  8618  001F0A                     l301:
  8619  001F0A  FFFF               	dw	65535	; assembler added errata NOP
  8620                           
  8621                           ;main.c: 335: }
  8622                           ;main.c: 336: ADCON0bits.GODONE = 1;
  8623  001F0C  84C2               	bsf	4034,2,c	;volatile
  8624                           
  8625                           ;main.c: 337: while (conversionadc == 0) {
  8626  001F0E  D002               	goto	l5000
  8627  001F10                     l303:
  8628  001F10  FFFF               	dw	65535	; assembler added errata NOP
  8629                           
  8630                           ;main.c: 338: __nop();
  8631  001F12  F000               	nop	
  8632  001F14                     l5000:
  8633  001F14  FFFF               	dw	65535	; assembler added errata NOP
  8634  001F16  503E               	movf	_conversionadc,w,c
  8635  001F18  103F               	iorwf	_conversionadc+1,w,c
  8636  001F1A  B4D8               	btfsc	status,2,c
  8637  001F1C  D7F9               	goto	l303
  8638                           
  8639                           ;main.c: 339: }
  8640                           ;main.c: 340: h1++;
  8641  001F1E  0100               	movlb	0	; () banked
  8642  001F20  4BCE               	infsnz	_h1& (0+255),f,b
  8643  001F22  2BCF               	incf	(_h1+1)& (0+255),f,b
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;main.c: 341: suma1 = suma1 + resultadoadc;
  8647  001F24  504C               	movf	_resultadoadc,w,c
  8648  001F26  2450               	addwf	_suma1,w,c
  8649  001F28  6E50               	movwf	_suma1,c
  8650  001F2A  504D               	movf	_resultadoadc+1,w,c
  8651  001F2C  2051               	addwfc	_suma1+1,w,c
  8652  001F2E  6E51               	movwf	_suma1+1,c
  8653                           
  8654                           ; BSR set to: 0
  8655                           ;main.c: 342: resultadoadc = 0;
  8656  001F30  0E00               	movlw	0
  8657  001F32  6E4D               	movwf	_resultadoadc+1,c
  8658  001F34  0E00               	movlw	0
  8659  001F36  6E4C               	movwf	_resultadoadc,c
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;main.c: 343: promedio = suma1 / h1;
  8663  001F38  C050  F028         	movff	_suma1,___awdiv@dividend
  8664  001F3C  C051  F029         	movff	_suma1+1,___awdiv@dividend+1
  8665  001F40  C0CE  F02A         	movff	_h1,___awdiv@divisor
  8666  001F44  C0CF  F02B         	movff	_h1+1,___awdiv@divisor+1
  8667  001F48  EC85  F014         	call	___awdiv	;wreg free
  8668  001F4C  D041               	goto	L14
  8669  001F4E                     l5016:
  8670  001F4E  FFFF               	dw	65535	; assembler added errata NOP
  8671                           
  8672                           ;main.c: 347: }
  8673                           ;main.c: 348: if (canal == 2) {
  8674  001F50  0E02               	movlw	2
  8675  001F52  1830               	xorwf	conversionADMues@canal,w,c
  8676  001F54  1031               	iorwf	conversionADMues@canal+1,w,c
  8677  001F56  A4D8               	btfss	status,2,c
  8678  001F58  D046               	goto	l298
  8679                           
  8680                           ;main.c: 349: ADCON0bits.CHS = 0b010;
  8681  001F5A  50C2               	movf	4034,w,c	;volatile
  8682  001F5C  0BC7               	andlw	-57
  8683  001F5E  0910               	iorlw	16
  8684  001F60  6EC2               	movwf	4034,c	;volatile
  8685                           
  8686                           ;main.c: 350: for (int i = 0; i < 20; i++) {
  8687  001F62  0E00               	movlw	0
  8688  001F64  6E37               	movwf	conversionADMues@i_609+1,c
  8689  001F66  0E00               	movlw	0
  8690  001F68  6E36               	movwf	conversionADMues@i_609,c
  8691  001F6A  BE37               	btfsc	conversionADMues@i_609+1,7,c
  8692  001F6C  D007               	goto	l306
  8693  001F6E  5037               	movf	conversionADMues@i_609+1,w,c
  8694  001F70  E10E               	bnz	l307
  8695  001F72  FFFF               	dw	65535	; assembler added errata NOP
  8696  001F74  0E14               	movlw	20
  8697  001F76  5C36               	subwf	conversionADMues@i_609,w,c
  8698  001F78  B0D8               	btfsc	status,0,c
  8699  001F7A  D009               	goto	l307
  8700  001F7C                     l306:
  8701  001F7C  FFFF               	dw	65535	; assembler added errata NOP
  8702                           
  8703                           ;main.c: 351: __nop();
  8704  001F7E  F000               	nop	
  8705  001F80  4A36               	infsnz	conversionADMues@i_609,f,c
  8706  001F82  2A37               	incf	conversionADMues@i_609+1,f,c
  8707  001F84  BE37               	btfsc	conversionADMues@i_609+1,7,c
  8708  001F86  D7FA               	goto	l306
  8709  001F88  5037               	movf	conversionADMues@i_609+1,w,c
  8710  001F8A  E101               	bnz	u6050
  8711  001F8C  D7F2               	goto	L13
  8712  001F8E                     u6050:
  8713  001F8E                     l307:
  8714  001F8E  FFFF               	dw	65535	; assembler added errata NOP
  8715                           
  8716                           ;main.c: 352: }
  8717                           ;main.c: 353: ADCON0bits.GODONE = 1;
  8718  001F90  84C2               	bsf	4034,2,c	;volatile
  8719                           
  8720                           ;main.c: 354: while (conversionadc == 0) {
  8721  001F92  D002               	goto	l5028
  8722  001F94                     l309:
  8723  001F94  FFFF               	dw	65535	; assembler added errata NOP
  8724                           
  8725                           ;main.c: 355: __nop();
  8726  001F96  F000               	nop	
  8727  001F98                     l5028:
  8728  001F98  FFFF               	dw	65535	; assembler added errata NOP
  8729  001F9A  503E               	movf	_conversionadc,w,c
  8730  001F9C  103F               	iorwf	_conversionadc+1,w,c
  8731  001F9E  B4D8               	btfsc	status,2,c
  8732  001FA0  D7F9               	goto	l309
  8733                           
  8734                           ;main.c: 356: }
  8735                           ;main.c: 357: h2++;
  8736  001FA2  0100               	movlb	0	; () banked
  8737  001FA4  4BD0               	infsnz	_h2& (0+255),f,b
  8738  001FA6  2BD1               	incf	(_h2+1)& (0+255),f,b
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;main.c: 358: suma2 = suma2 + resultadoadc;
  8742  001FA8  504C               	movf	_resultadoadc,w,c
  8743  001FAA  2452               	addwf	_suma2,w,c
  8744  001FAC  6E52               	movwf	_suma2,c
  8745  001FAE  504D               	movf	_resultadoadc+1,w,c
  8746  001FB0  2053               	addwfc	_suma2+1,w,c
  8747  001FB2  6E53               	movwf	_suma2+1,c
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;main.c: 359: resultadoadc = 0;
  8751  001FB4  0E00               	movlw	0
  8752  001FB6  6E4D               	movwf	_resultadoadc+1,c
  8753  001FB8  0E00               	movlw	0
  8754  001FBA  6E4C               	movwf	_resultadoadc,c
  8755                           
  8756                           ; BSR set to: 0
  8757                           ;main.c: 360: promedio = suma2 / h2;
  8758  001FBC  C052  F028         	movff	_suma2,___awdiv@dividend
  8759  001FC0  C053  F029         	movff	_suma2+1,___awdiv@dividend+1
  8760  001FC4  C0D0  F02A         	movff	_h2,___awdiv@divisor
  8761  001FC8  C0D1  F02B         	movff	_h2+1,___awdiv@divisor+1
  8762  001FCC  EC85  F014         	call	___awdiv	;wreg free
  8763  001FD0                     L14:
  8764  001FD0  FFFF               	dw	65535	; assembler added errata NOP
  8765  001FD2  C028  F04A         	movff	?___awdiv,_promedio
  8766  001FD6  C029  F04B         	movff	?___awdiv+1,_promedio+1
  8767  001FDA  D772               	goto	l4982
  8768  001FDC                     L15:
  8769  001FDC  FFFF               	dw	65535	; assembler added errata NOP
  8770                           
  8771                           ;main.c: 363: return promedio;
  8772                           
  8773                           ;main.c: 361: conversionadc = 0;
  8774  001FDE  C04A  F030         	movff	_promedio,?_conversionADMues
  8775  001FE2  C04B  F031         	movff	_promedio+1,?_conversionADMues+1
  8776  001FE6                     l298:
  8777  001FE6  FFFF               	dw	65535	; assembler added errata NOP
  8778  001FE8  0012               	return		;funcret
  8779  001FEA  FFFF               	dw	65535	; errata NOP
  8780  001FEC                     __end_of_conversionADMues:
  8781                           	opt stack 0
  8782                           tblptru	equ	0xFF8
  8783                           tblptrh	equ	0xFF7
  8784                           tblptrl	equ	0xFF6
  8785                           tablat	equ	0xFF5
  8786                           prodh	equ	0xFF4
  8787                           prodl	equ	0xFF3
  8788                           indf0	equ	0xFEF
  8789                           postinc0	equ	0xFEE
  8790                           fsr0h	equ	0xFEA
  8791                           fsr0l	equ	0xFE9
  8792                           wreg	equ	0xFE8
  8793                           postdec1	equ	0xFE5
  8794                           fsr1l	equ	0xFE1
  8795                           indf2	equ	0xFDF
  8796                           postinc2	equ	0xFDE
  8797                           postdec2	equ	0xFDD
  8798                           fsr2h	equ	0xFDA
  8799                           fsr2l	equ	0xFD9
  8800                           status	equ	0xFD8
  8801                           
  8802 ;; *************** function ___awdiv *****************
  8803 ;; Defined at:
  8804 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/awdiv.c"
  8805 ;; Parameters:    Size  Location     Type
  8806 ;;  dividend        2   39[COMRAM] int 
  8807 ;;  divisor         2   41[COMRAM] int 
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;  quotient        2   45[COMRAM] int 
  8810 ;;  sign            1   44[COMRAM] unsigned char 
  8811 ;;  counter         1   43[COMRAM] unsigned char 
  8812 ;; Return value:  Size  Location     Type
  8813 ;;                  2   39[COMRAM] int 
  8814 ;; Registers used:
  8815 ;;		wreg, status,2, status,0
  8816 ;; Tracked objects:
  8817 ;;		On entry : 0/0
  8818 ;;		On exit  : 0/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8821 ;;      Params:         4       0       0       0       0       0       0
  8822 ;;      Locals:         4       0       0       0       0       0       0
  8823 ;;      Temps:          0       0       0       0       0       0       0
  8824 ;;      Totals:         8       0       0       0       0       0       0
  8825 ;;Total ram usage:        8 bytes
  8826 ;; Hardware stack levels used:    1
  8827 ;; Hardware stack levels required when called:    2
  8828 ;; This function calls:
  8829 ;;		Nothing
  8830 ;; This function is called by:
  8831 ;;		_conversionADMues
  8832 ;;		_fround
  8833 ;;		_scale
  8834 ;;		_sprintf
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           	psect	text23
  8839  00290A                     __ptext23:
  8840                           	opt stack 0
  8841  00290A                     ___awdiv:
  8842                           	opt stack 0
  8843  00290A  FFFF               	dw	65535	; assembler added errata NOP
  8844                           
  8845                           ;incstack = 0
  8846  00290C  0E00               	movlw	0
  8847  00290E  6E2D               	movwf	___awdiv@sign,c
  8848  002910  AE2B               	btfss	___awdiv@divisor+1,7,c
  8849  002912  D006               	goto	l4248
  8850  002914  6C2A               	negf	___awdiv@divisor,c
  8851  002916  1E2B               	comf	___awdiv@divisor+1,f,c
  8852  002918  B0D8               	btfsc	status,0,c
  8853  00291A  2A2B               	incf	___awdiv@divisor+1,f,c
  8854  00291C  0E01               	movlw	1
  8855  00291E  6E2D               	movwf	___awdiv@sign,c
  8856  002920                     l4248:
  8857  002920  FFFF               	dw	65535	; assembler added errata NOP
  8858  002922  AE29               	btfss	___awdiv@dividend+1,7,c
  8859  002924  D006               	goto	l4254
  8860  002926  6C28               	negf	___awdiv@dividend,c
  8861  002928  1E29               	comf	___awdiv@dividend+1,f,c
  8862  00292A  B0D8               	btfsc	status,0,c
  8863  00292C  2A29               	incf	___awdiv@dividend+1,f,c
  8864  00292E  0E01               	movlw	1
  8865  002930  1A2D               	xorwf	___awdiv@sign,f,c
  8866  002932                     l4254:
  8867  002932  FFFF               	dw	65535	; assembler added errata NOP
  8868  002934  0E00               	movlw	0
  8869  002936  6E2F               	movwf	___awdiv@quotient+1,c
  8870  002938  0E00               	movlw	0
  8871  00293A  6E2E               	movwf	___awdiv@quotient,c
  8872  00293C  502A               	movf	___awdiv@divisor,w,c
  8873  00293E  102B               	iorwf	___awdiv@divisor+1,w,c
  8874  002940  B4D8               	btfsc	status,2,c
  8875  002942  D020               	goto	l4276
  8876  002944  0E01               	movlw	1
  8877  002946  6E2C               	movwf	___awdiv@counter,c
  8878  002948  D005               	goto	l4262
  8879  00294A                     l4260:
  8880  00294A  FFFF               	dw	65535	; assembler added errata NOP
  8881  00294C  90D8               	bcf	status,0,c
  8882  00294E  362A               	rlcf	___awdiv@divisor,f,c
  8883  002950  362B               	rlcf	___awdiv@divisor+1,f,c
  8884  002952  2A2C               	incf	___awdiv@counter,f,c
  8885  002954                     l4262:
  8886  002954  FFFF               	dw	65535	; assembler added errata NOP
  8887  002956  AE2B               	btfss	___awdiv@divisor+1,7,c
  8888  002958  D7F8               	goto	l4260
  8889  00295A                     l4264:
  8890  00295A  FFFF               	dw	65535	; assembler added errata NOP
  8891  00295C  90D8               	bcf	status,0,c
  8892  00295E  362E               	rlcf	___awdiv@quotient,f,c
  8893  002960  362F               	rlcf	___awdiv@quotient+1,f,c
  8894  002962  502A               	movf	___awdiv@divisor,w,c
  8895  002964  5C28               	subwf	___awdiv@dividend,w,c
  8896  002966  502B               	movf	___awdiv@divisor+1,w,c
  8897  002968  5829               	subwfb	___awdiv@dividend+1,w,c
  8898  00296A  A0D8               	btfss	status,0,c
  8899  00296C  D005               	goto	l4272
  8900  00296E  502A               	movf	___awdiv@divisor,w,c
  8901  002970  5E28               	subwf	___awdiv@dividend,f,c
  8902  002972  502B               	movf	___awdiv@divisor+1,w,c
  8903  002974  5A29               	subwfb	___awdiv@dividend+1,f,c
  8904  002976  802E               	bsf	___awdiv@quotient,0,c
  8905  002978                     l4272:
  8906  002978  FFFF               	dw	65535	; assembler added errata NOP
  8907  00297A  90D8               	bcf	status,0,c
  8908  00297C  322B               	rrcf	___awdiv@divisor+1,f,c
  8909  00297E  322A               	rrcf	___awdiv@divisor,f,c
  8910  002980  2E2C               	decfsz	___awdiv@counter,f,c
  8911  002982  D7EB               	goto	l4264
  8912  002984                     l4276:
  8913  002984  FFFF               	dw	65535	; assembler added errata NOP
  8914  002986  502D               	movf	___awdiv@sign,w,c
  8915  002988  B4D8               	btfsc	status,2,c
  8916  00298A  D004               	goto	l4280
  8917  00298C  6C2E               	negf	___awdiv@quotient,c
  8918  00298E  1E2F               	comf	___awdiv@quotient+1,f,c
  8919  002990  B0D8               	btfsc	status,0,c
  8920  002992  2A2F               	incf	___awdiv@quotient+1,f,c
  8921  002994                     l4280:
  8922  002994  FFFF               	dw	65535	; assembler added errata NOP
  8923  002996  C02E  F028         	movff	___awdiv@quotient,?___awdiv
  8924  00299A  C02F  F029         	movff	___awdiv@quotient+1,?___awdiv+1
  8925  00299E  0012               	return		;funcret
  8926  0029A0  FFFF               	dw	65535	; errata NOP
  8927  0029A2                     __end_of___awdiv:
  8928                           	opt stack 0
  8929                           tblptru	equ	0xFF8
  8930                           tblptrh	equ	0xFF7
  8931                           tblptrl	equ	0xFF6
  8932                           tablat	equ	0xFF5
  8933                           prodh	equ	0xFF4
  8934                           prodl	equ	0xFF3
  8935                           indf0	equ	0xFEF
  8936                           postinc0	equ	0xFEE
  8937                           fsr0h	equ	0xFEA
  8938                           fsr0l	equ	0xFE9
  8939                           wreg	equ	0xFE8
  8940                           postdec1	equ	0xFE5
  8941                           fsr1l	equ	0xFE1
  8942                           indf2	equ	0xFDF
  8943                           postinc2	equ	0xFDE
  8944                           postdec2	equ	0xFDD
  8945                           fsr2h	equ	0xFDA
  8946                           fsr2l	equ	0xFD9
  8947                           status	equ	0xFD8
  8948                           
  8949 ;; *************** function ___ftdiv *****************
  8950 ;; Defined at:
  8951 ;;		line 54 in file "/opt/microchip/xc8/v1.38/sources/common/ftdiv.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;  f1              3    9[BANK0 ] float 
  8954 ;;  f2              3   12[BANK0 ] float 
  8955 ;; Auto vars:     Size  Location     Type
  8956 ;;  f3              3   19[BANK0 ] float 
  8957 ;;  sign            1   23[BANK0 ] unsigned char 
  8958 ;;  exp             1   22[BANK0 ] unsigned char 
  8959 ;;  cntr            1   18[BANK0 ] unsigned char 
  8960 ;; Return value:  Size  Location     Type
  8961 ;;                  3    9[BANK0 ] float 
  8962 ;; Registers used:
  8963 ;;		wreg, status,2, status,0, cstack
  8964 ;; Tracked objects:
  8965 ;;		On entry : 0/0
  8966 ;;		On exit  : 0/0
  8967 ;;		Unchanged: 0/0
  8968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8969 ;;      Params:         0       6       0       0       0       0       0
  8970 ;;      Locals:         0       6       0       0       0       0       0
  8971 ;;      Temps:          0       3       0       0       0       0       0
  8972 ;;      Totals:         0      15       0       0       0       0       0
  8973 ;;Total ram usage:       15 bytes
  8974 ;; Hardware stack levels used:    1
  8975 ;; Hardware stack levels required when called:    3
  8976 ;; This function calls:
  8977 ;;		___ftpack
  8978 ;; This function is called by:
  8979 ;;		_main
  8980 ;; This function uses a non-reentrant model
  8981 ;;
  8982                           
  8983                           	psect	text24
  8984  001FEC                     __ptext24:
  8985                           	opt stack 0
  8986  001FEC                     ___ftdiv:
  8987                           	opt stack 0
  8988  001FEC  FFFF               	dw	65535	; assembler added errata NOP
  8989                           
  8990                           ;incstack = 0
  8991  001FEE  C08B  F08F         	movff	___ftdiv@f1+2,??___ftdiv
  8992  001FF2  0100               	movlb	0	; () banked
  8993  001FF4  6B90               	clrf	(??___ftdiv+1)& (0+255),b
  8994  001FF6  6B91               	clrf	(??___ftdiv+2)& (0+255),b
  8995  001FF8  0100               	movlb	0	; () banked
  8996  001FFA  358A               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  8997  001FFC  0100               	movlb	0	; () banked
  8998  001FFE  378F               	rlcf	??___ftdiv& (0+255),f,b
  8999  002000  E301               	bnc	u6071
  9000  002002  8190               	bsf	(??___ftdiv+1)& (0+255),0,b
  9001  002004                     u6071:
  9002  002004  0100               	movlb	0	; () banked
  9003  002006  518F               	movf	??___ftdiv& (0+255),w,b
  9004  002008  0100               	movlb	0	; () banked
  9005  00200A  6F96               	movwf	___ftdiv@exp& (0+255),b
  9006  00200C  0100               	movlb	0	; () banked
  9007  00200E  5196               	movf	___ftdiv@exp& (0+255),w,b
  9008  002010  B4D8               	btfsc	status,2,c
  9009  002012  D013               	goto	l5052
  9010                           
  9011                           ; BSR set to: 0
  9012                           
  9013                           ; BSR set to: 0
  9014                           
  9015                           ; BSR set to: 0
  9016                           
  9017                           ; BSR set to: 0
  9018  002014  C08E  F08F         	movff	___ftdiv@f2+2,??___ftdiv
  9019  002018  0100               	movlb	0	; () banked
  9020  00201A  6B90               	clrf	(??___ftdiv+1)& (0+255),b
  9021  00201C  6B91               	clrf	(??___ftdiv+2)& (0+255),b
  9022  00201E  0100               	movlb	0	; () banked
  9023  002020  358D               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  9024  002022  0100               	movlb	0	; () banked
  9025  002024  378F               	rlcf	??___ftdiv& (0+255),f,b
  9026  002026  E301               	bnc	u6091
  9027  002028  8190               	bsf	(??___ftdiv+1)& (0+255),0,b
  9028  00202A                     u6091:
  9029  00202A  0100               	movlb	0	; () banked
  9030  00202C  518F               	movf	??___ftdiv& (0+255),w,b
  9031  00202E  0100               	movlb	0	; () banked
  9032  002030  6F97               	movwf	___ftdiv@sign& (0+255),b
  9033  002032  0100               	movlb	0	; () banked
  9034  002034  5197               	movf	___ftdiv@sign& (0+255),w,b
  9035  002036  A4D8               	btfss	status,2,c
  9036  002038  D00B               	goto	l5056
  9037  00203A                     l5052:
  9038  00203A  FFFF               	dw	65535	; assembler added errata NOP
  9039                           
  9040                           ; BSR set to: 0
  9041  00203C  0E00               	movlw	0
  9042  00203E  0100               	movlb	0	; () banked
  9043  002040  6F89               	movwf	?___ftdiv& (0+255),b
  9044  002042  0E00               	movlw	0
  9045  002044  0100               	movlb	0	; () banked
  9046  002046  6F8A               	movwf	(?___ftdiv+1)& (0+255),b
  9047  002048  0E00               	movlw	0
  9048  00204A  0100               	movlb	0	; () banked
  9049  00204C  6F8B               	movwf	(?___ftdiv+2)& (0+255),b
  9050                           
  9051                           ; BSR set to: 0
  9052  00204E  D06E               	goto	l808
  9053  002050                     l5056:
  9054  002050  FFFF               	dw	65535	; assembler added errata NOP
  9055                           
  9056                           ; BSR set to: 0
  9057  002052  0E00               	movlw	0
  9058  002054  0100               	movlb	0	; () banked
  9059  002056  6F93               	movwf	___ftdiv@f3& (0+255),b
  9060  002058  0E00               	movlw	0
  9061  00205A  0100               	movlb	0	; () banked
  9062  00205C  6F94               	movwf	(___ftdiv@f3+1)& (0+255),b
  9063  00205E  0E00               	movlw	0
  9064  002060  0100               	movlb	0	; () banked
  9065  002062  6F95               	movwf	(___ftdiv@f3+2)& (0+255),b
  9066                           
  9067                           ; BSR set to: 0
  9068  002064  0100               	movlb	0	; () banked
  9069  002066  5197               	movf	___ftdiv@sign& (0+255),w,b
  9070  002068  0F89               	addlw	137
  9071  00206A  0100               	movlb	0	; () banked
  9072  00206C  5F96               	subwf	___ftdiv@exp& (0+255),f,b
  9073                           
  9074                           ; BSR set to: 0
  9075  00206E  C08B  F097         	movff	___ftdiv@f1+2,___ftdiv@sign
  9076                           
  9077                           ; BSR set to: 0
  9078  002072  0100               	movlb	0	; () banked
  9079  002074  518E               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9080  002076  0100               	movlb	0	; () banked
  9081  002078  1B97               	xorwf	___ftdiv@sign& (0+255),f,b
  9082                           
  9083                           ; BSR set to: 0
  9084  00207A  0E80               	movlw	128
  9085  00207C  0100               	movlb	0	; () banked
  9086  00207E  1797               	andwf	___ftdiv@sign& (0+255),f,b
  9087                           
  9088                           ; BSR set to: 0
  9089  002080  0100               	movlb	0	; () banked
  9090  002082  8F8A               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  9091                           
  9092                           ; BSR set to: 0
  9093  002084  0EFF               	movlw	255
  9094  002086  0100               	movlb	0	; () banked
  9095  002088  1789               	andwf	___ftdiv@f1& (0+255),f,b
  9096  00208A  0EFF               	movlw	255
  9097  00208C  0100               	movlb	0	; () banked
  9098  00208E  178A               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  9099  002090  0E00               	movlw	0
  9100  002092  0100               	movlb	0	; () banked
  9101  002094  178B               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  9102                           
  9103                           ; BSR set to: 0
  9104  002096  0100               	movlb	0	; () banked
  9105  002098  8F8D               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  9106                           
  9107                           ; BSR set to: 0
  9108  00209A  0EFF               	movlw	255
  9109  00209C  0100               	movlb	0	; () banked
  9110  00209E  178C               	andwf	___ftdiv@f2& (0+255),f,b
  9111  0020A0  0EFF               	movlw	255
  9112  0020A2  0100               	movlb	0	; () banked
  9113  0020A4  178D               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  9114  0020A6  0E00               	movlw	0
  9115  0020A8  0100               	movlb	0	; () banked
  9116  0020AA  178E               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  9117                           
  9118                           ; BSR set to: 0
  9119  0020AC  0E18               	movlw	24
  9120  0020AE  0100               	movlb	0	; () banked
  9121  0020B0  6F92               	movwf	___ftdiv@cntr& (0+255),b
  9122  0020B2                     l5076:
  9123  0020B2  FFFF               	dw	65535	; assembler added errata NOP
  9124                           
  9125                           ; BSR set to: 0
  9126  0020B4  0100               	movlb	0	; () banked
  9127  0020B6  90D8               	bcf	status,0,c
  9128  0020B8  3793               	rlcf	___ftdiv@f3& (0+255),f,b
  9129  0020BA  3794               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  9130  0020BC  3795               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  9131                           
  9132                           ; BSR set to: 0
  9133  0020BE  0100               	movlb	0	; () banked
  9134  0020C0  518C               	movf	___ftdiv@f2& (0+255),w,b
  9135  0020C2  0100               	movlb	0	; () banked
  9136  0020C4  5D89               	subwf	___ftdiv@f1& (0+255),w,b
  9137  0020C6  0100               	movlb	0	; () banked
  9138  0020C8  518D               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9139  0020CA  0100               	movlb	0	; () banked
  9140  0020CC  598A               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  9141  0020CE  0100               	movlb	0	; () banked
  9142  0020D0  518E               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9143  0020D2  0100               	movlb	0	; () banked
  9144  0020D4  598B               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  9145  0020D6  A0D8               	btfss	status,0,c
  9146  0020D8  D00E               	goto	l811
  9147                           
  9148                           ; BSR set to: 0
  9149  0020DA  0100               	movlb	0	; () banked
  9150  0020DC  518C               	movf	___ftdiv@f2& (0+255),w,b
  9151  0020DE  0100               	movlb	0	; () banked
  9152  0020E0  5F89               	subwf	___ftdiv@f1& (0+255),f,b
  9153  0020E2  0100               	movlb	0	; () banked
  9154  0020E4  518D               	movf	(___ftdiv@f2+1)& (0+255),w,b
  9155  0020E6  0100               	movlb	0	; () banked
  9156  0020E8  5B8A               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  9157  0020EA  0100               	movlb	0	; () banked
  9158  0020EC  518E               	movf	(___ftdiv@f2+2)& (0+255),w,b
  9159  0020EE  0100               	movlb	0	; () banked
  9160  0020F0  5B8B               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  9161                           
  9162                           ; BSR set to: 0
  9163  0020F2  0100               	movlb	0	; () banked
  9164  0020F4  8193               	bsf	___ftdiv@f3& (0+255),0,b
  9165  0020F6                     l811:
  9166  0020F6  FFFF               	dw	65535	; assembler added errata NOP
  9167                           
  9168                           ; BSR set to: 0
  9169  0020F8  0100               	movlb	0	; () banked
  9170  0020FA  90D8               	bcf	status,0,c
  9171  0020FC  3789               	rlcf	___ftdiv@f1& (0+255),f,b
  9172  0020FE  378A               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  9173  002100  378B               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  9174                           
  9175                           ; BSR set to: 0
  9176  002102  0100               	movlb	0	; () banked
  9177  002104  2F92               	decfsz	___ftdiv@cntr& (0+255),f,b
  9178  002106  D7D5               	goto	l5076
  9179                           
  9180                           ; BSR set to: 0
  9181                           
  9182                           ; BSR set to: 0
  9183  002108  C093  F022         	movff	___ftdiv@f3,___ftpack@arg
  9184  00210C  C094  F023         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9185  002110  C095  F024         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9186  002114  C096  F025         	movff	___ftdiv@exp,___ftpack@exp
  9187  002118  C097  F026         	movff	___ftdiv@sign,___ftpack@sign
  9188  00211C  ECD5  F013         	call	___ftpack	;wreg free
  9189  002120  C022  F089         	movff	?___ftpack,?___ftdiv
  9190  002124  C023  F08A         	movff	?___ftpack+1,?___ftdiv+1
  9191  002128  C024  F08B         	movff	?___ftpack+2,?___ftdiv+2
  9192  00212C                     l808:
  9193  00212C  FFFF               	dw	65535	; assembler added errata NOP
  9194  00212E  0012               	return		;funcret
  9195  002130  FFFF               	dw	65535	; errata NOP
  9196  002132                     __end_of___ftdiv:
  9197                           	opt stack 0
  9198                           tblptru	equ	0xFF8
  9199                           tblptrh	equ	0xFF7
  9200                           tblptrl	equ	0xFF6
  9201                           tablat	equ	0xFF5
  9202                           prodh	equ	0xFF4
  9203                           prodl	equ	0xFF3
  9204                           indf0	equ	0xFEF
  9205                           postinc0	equ	0xFEE
  9206                           fsr0h	equ	0xFEA
  9207                           fsr0l	equ	0xFE9
  9208                           wreg	equ	0xFE8
  9209                           postdec1	equ	0xFE5
  9210                           fsr1l	equ	0xFE1
  9211                           indf2	equ	0xFDF
  9212                           postinc2	equ	0xFDE
  9213                           postdec2	equ	0xFDD
  9214                           fsr2h	equ	0xFDA
  9215                           fsr2l	equ	0xFD9
  9216                           status	equ	0xFD8
  9217                           
  9218 ;; *************** function ___awtoft *****************
  9219 ;; Defined at:
  9220 ;;		line 32 in file "/opt/microchip/xc8/v1.38/sources/common/awtoft.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;  c               2   41[COMRAM] int 
  9223 ;; Auto vars:     Size  Location     Type
  9224 ;;  sign            1   44[COMRAM] unsigned char 
  9225 ;; Return value:  Size  Location     Type
  9226 ;;                  3   41[COMRAM] float 
  9227 ;; Registers used:
  9228 ;;		wreg, status,2, status,0, cstack
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9234 ;;      Params:         3       0       0       0       0       0       0
  9235 ;;      Locals:         1       0       0       0       0       0       0
  9236 ;;      Temps:          0       0       0       0       0       0       0
  9237 ;;      Totals:         4       0       0       0       0       0       0
  9238 ;;Total ram usage:        4 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; Hardware stack levels required when called:    3
  9241 ;; This function calls:
  9242 ;;		___ftpack
  9243 ;; This function is called by:
  9244 ;;		_main
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           	psect	text25
  9249  002D78                     __ptext25:
  9250                           	opt stack 0
  9251  002D78                     ___awtoft:
  9252                           	opt stack 0
  9253  002D78  FFFF               	dw	65535	; assembler added errata NOP
  9254                           
  9255                           ;incstack = 0
  9256  002D7A  0E00               	movlw	0
  9257  002D7C  6E2D               	movwf	___awtoft@sign,c
  9258  002D7E  AE2B               	btfss	___awtoft@c+1,7,c
  9259  002D80  D006               	goto	l5098
  9260  002D82  6C2A               	negf	___awtoft@c,c
  9261  002D84  1E2B               	comf	___awtoft@c+1,f,c
  9262  002D86  B0D8               	btfsc	status,0,c
  9263  002D88  2A2B               	incf	___awtoft@c+1,f,c
  9264  002D8A  0E01               	movlw	1
  9265  002D8C  6E2D               	movwf	___awtoft@sign,c
  9266  002D8E                     l5098:
  9267  002D8E  FFFF               	dw	65535	; assembler added errata NOP
  9268  002D90  C02A  F022         	movff	___awtoft@c,___ftpack@arg
  9269  002D94  C02B  F023         	movff	___awtoft@c+1,___ftpack@arg+1
  9270  002D98  6A24               	clrf	___ftpack@arg+2,c
  9271  002D9A  0E8E               	movlw	142
  9272  002D9C  6E25               	movwf	___ftpack@exp,c
  9273  002D9E  C02D  F026         	movff	___awtoft@sign,___ftpack@sign
  9274  002DA2  ECD5  F013         	call	___ftpack	;wreg free
  9275  002DA6  C022  F02A         	movff	?___ftpack,?___awtoft
  9276  002DAA  C023  F02B         	movff	?___ftpack+1,?___awtoft+1
  9277  002DAE  C024  F02C         	movff	?___ftpack+2,?___awtoft+2
  9278  002DB2  0012               	return		;funcret
  9279  002DB4  FFFF               	dw	65535	; errata NOP
  9280  002DB6                     __end_of___awtoft:
  9281                           	opt stack 0
  9282                           tblptru	equ	0xFF8
  9283                           tblptrh	equ	0xFF7
  9284                           tblptrl	equ	0xFF6
  9285                           tablat	equ	0xFF5
  9286                           prodh	equ	0xFF4
  9287                           prodl	equ	0xFF3
  9288                           indf0	equ	0xFEF
  9289                           postinc0	equ	0xFEE
  9290                           fsr0h	equ	0xFEA
  9291                           fsr0l	equ	0xFE9
  9292                           wreg	equ	0xFE8
  9293                           postdec1	equ	0xFE5
  9294                           fsr1l	equ	0xFE1
  9295                           indf2	equ	0xFDF
  9296                           postinc2	equ	0xFDE
  9297                           postdec2	equ	0xFDD
  9298                           fsr2h	equ	0xFDA
  9299                           fsr2l	equ	0xFD9
  9300                           status	equ	0xFD8
  9301                           
  9302 ;; *************** function ___ftpack *****************
  9303 ;; Defined at:
  9304 ;;		line 62 in file "/opt/microchip/xc8/v1.38/sources/common/float.c"
  9305 ;; Parameters:    Size  Location     Type
  9306 ;;  arg             3   33[COMRAM] unsigned um
  9307 ;;  exp             1   36[COMRAM] unsigned char 
  9308 ;;  sign            1   37[COMRAM] unsigned char 
  9309 ;; Auto vars:     Size  Location     Type
  9310 ;;		None
  9311 ;; Return value:  Size  Location     Type
  9312 ;;                  3   33[COMRAM] float 
  9313 ;; Registers used:
  9314 ;;		wreg, status,2, status,0
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9320 ;;      Params:         5       0       0       0       0       0       0
  9321 ;;      Locals:         0       0       0       0       0       0       0
  9322 ;;      Temps:          3       0       0       0       0       0       0
  9323 ;;      Totals:         8       0       0       0       0       0       0
  9324 ;;Total ram usage:        8 bytes
  9325 ;; Hardware stack levels used:    1
  9326 ;; Hardware stack levels required when called:    2
  9327 ;; This function calls:
  9328 ;;		Nothing
  9329 ;; This function is called by:
  9330 ;;		___awtoft
  9331 ;;		___ftadd
  9332 ;;		___ftdiv
  9333 ;;		___ftmul
  9334 ;;		___lltoft
  9335 ;; This function uses a non-reentrant model
  9336 ;;
  9337                           
  9338                           	psect	text26
  9339  0027AA                     __ptext26:
  9340                           	opt stack 0
  9341  0027AA                     ___ftpack:
  9342                           	opt stack 0
  9343  0027AA  FFFF               	dw	65535	; assembler added errata NOP
  9344                           
  9345                           ;incstack = 0
  9346  0027AC  5025               	movf	___ftpack@exp,w,c
  9347  0027AE  B4D8               	btfsc	status,2,c
  9348  0027B0  D005               	goto	l4084
  9349  0027B2  5022               	movf	___ftpack@arg,w,c
  9350  0027B4  1023               	iorwf	___ftpack@arg+1,w,c
  9351  0027B6  1024               	iorwf	___ftpack@arg+2,w,c
  9352  0027B8  A4D8               	btfss	status,2,c
  9353  0027BA  D00E               	goto	l4090
  9354  0027BC                     l4084:
  9355  0027BC  FFFF               	dw	65535	; assembler added errata NOP
  9356  0027BE  0E00               	movlw	0
  9357  0027C0  6E22               	movwf	?___ftpack,c
  9358  0027C2  0E00               	movlw	0
  9359  0027C4  6E23               	movwf	?___ftpack+1,c
  9360  0027C6  0E00               	movlw	0
  9361  0027C8  6E24               	movwf	?___ftpack+2,c
  9362  0027CA  D04E               	goto	l742
  9363  0027CC                     l4088:
  9364  0027CC  FFFF               	dw	65535	; assembler added errata NOP
  9365  0027CE  2A25               	incf	___ftpack@exp,f,c
  9366  0027D0  90D8               	bcf	status,0,c
  9367  0027D2  3224               	rrcf	___ftpack@arg+2,f,c
  9368  0027D4  3223               	rrcf	___ftpack@arg+1,f,c
  9369  0027D6  3222               	rrcf	___ftpack@arg,f,c
  9370  0027D8                     l4090:
  9371  0027D8  FFFF               	dw	65535	; assembler added errata NOP
  9372  0027DA  0E00               	movlw	0
  9373  0027DC  1422               	andwf	___ftpack@arg,w,c
  9374  0027DE  6E27               	movwf	??___ftpack& (0+255),c
  9375  0027E0  0E00               	movlw	0
  9376  0027E2  1423               	andwf	___ftpack@arg+1,w,c
  9377  0027E4  6E28               	movwf	(??___ftpack+1)& (0+255),c
  9378  0027E6  0EFE               	movlw	254
  9379  0027E8  1424               	andwf	___ftpack@arg+2,w,c
  9380  0027EA  6E29               	movwf	(??___ftpack+2)& (0+255),c
  9381  0027EC  5027               	movf	??___ftpack,w,c
  9382  0027EE  1028               	iorwf	??___ftpack+1,w,c
  9383  0027F0  1029               	iorwf	??___ftpack+2,w,c
  9384  0027F2  B4D8               	btfsc	status,2,c
  9385  0027F4  D00D               	goto	l4096
  9386  0027F6  D7EA               	goto	l4088
  9387  0027F8                     l4092:
  9388  0027F8  FFFF               	dw	65535	; assembler added errata NOP
  9389  0027FA  2A25               	incf	___ftpack@exp,f,c
  9390  0027FC  0E01               	movlw	1
  9391  0027FE  2622               	addwf	___ftpack@arg,f,c
  9392  002800  0E00               	movlw	0
  9393  002802  2223               	addwfc	___ftpack@arg+1,f,c
  9394  002804  0E00               	movlw	0
  9395  002806  2224               	addwfc	___ftpack@arg+2,f,c
  9396  002808  90D8               	bcf	status,0,c
  9397  00280A  3224               	rrcf	___ftpack@arg+2,f,c
  9398  00280C  3223               	rrcf	___ftpack@arg+1,f,c
  9399  00280E  3222               	rrcf	___ftpack@arg,f,c
  9400  002810                     l4096:
  9401  002810  FFFF               	dw	65535	; assembler added errata NOP
  9402  002812  0E00               	movlw	0
  9403  002814  1422               	andwf	___ftpack@arg,w,c
  9404  002816  6E27               	movwf	??___ftpack& (0+255),c
  9405  002818  0E00               	movlw	0
  9406  00281A  1423               	andwf	___ftpack@arg+1,w,c
  9407  00281C  6E28               	movwf	(??___ftpack+1)& (0+255),c
  9408  00281E  0EFF               	movlw	255
  9409  002820  1424               	andwf	___ftpack@arg+2,w,c
  9410  002822  6E29               	movwf	(??___ftpack+2)& (0+255),c
  9411  002824  5027               	movf	??___ftpack,w,c
  9412  002826  1028               	iorwf	??___ftpack+1,w,c
  9413  002828  1029               	iorwf	??___ftpack+2,w,c
  9414  00282A  B4D8               	btfsc	status,2,c
  9415  00282C  D007               	goto	l4100
  9416  00282E  D7E4               	goto	l4092
  9417  002830                     l4098:
  9418  002830  FFFF               	dw	65535	; assembler added errata NOP
  9419  002832  0625               	decf	___ftpack@exp,f,c
  9420  002834  90D8               	bcf	status,0,c
  9421  002836  3622               	rlcf	___ftpack@arg,f,c
  9422  002838  3623               	rlcf	___ftpack@arg+1,f,c
  9423  00283A  3624               	rlcf	___ftpack@arg+2,f,c
  9424  00283C                     l4100:
  9425  00283C  FFFF               	dw	65535	; assembler added errata NOP
  9426  00283E  BE23               	btfsc	___ftpack@arg+1,7,c
  9427  002840  D003               	goto	l753
  9428  002842  0E02               	movlw	2
  9429  002844  6025               	cpfslt	___ftpack@exp,c
  9430  002846  D7F4               	goto	l4098
  9431  002848                     l753:
  9432  002848  FFFF               	dw	65535	; assembler added errata NOP
  9433  00284A  A025               	btfss	___ftpack@exp,0,c
  9434  00284C  9E23               	bcf	___ftpack@arg+1,7,c
  9435  00284E  90D8               	bcf	status,0,c
  9436  002850  3225               	rrcf	___ftpack@exp,f,c
  9437  002852  5025               	movf	___ftpack@exp,w,c
  9438  002854  1224               	iorwf	___ftpack@arg+2,f,c
  9439  002856  5026               	movf	___ftpack@sign,w,c
  9440  002858  A4D8               	btfss	status,2,c
  9441  00285A  8E24               	bsf	___ftpack@arg+2,7,c
  9442  00285C  C022  F022         	movff	___ftpack@arg,?___ftpack
  9443  002860  C023  F023         	movff	___ftpack@arg+1,?___ftpack+1
  9444  002864  C024  F024         	movff	___ftpack@arg+2,?___ftpack+2
  9445  002868                     l742:
  9446  002868  FFFF               	dw	65535	; assembler added errata NOP
  9447  00286A  0012               	return		;funcret
  9448  00286C  FFFF               	dw	65535	; errata NOP
  9449  00286E                     __end_of___ftpack:
  9450                           	opt stack 0
  9451                           tblptru	equ	0xFF8
  9452                           tblptrh	equ	0xFF7
  9453                           tblptrl	equ	0xFF6
  9454                           tablat	equ	0xFF5
  9455                           prodh	equ	0xFF4
  9456                           prodl	equ	0xFF3
  9457                           indf0	equ	0xFEF
  9458                           postinc0	equ	0xFEE
  9459                           fsr0h	equ	0xFEA
  9460                           fsr0l	equ	0xFE9
  9461                           wreg	equ	0xFE8
  9462                           postdec1	equ	0xFE5
  9463                           fsr1l	equ	0xFE1
  9464                           indf2	equ	0xFDF
  9465                           postinc2	equ	0xFDE
  9466                           postdec2	equ	0xFDD
  9467                           fsr2h	equ	0xFDA
  9468                           fsr2l	equ	0xFD9
  9469                           status	equ	0xFD8
  9470                           
  9471 ;; *************** function _InitApp *****************
  9472 ;; Defined at:
  9473 ;;		line 29 in file "user.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;		None
  9476 ;; Auto vars:     Size  Location     Type
  9477 ;;  i               2   33[COMRAM] int 
  9478 ;; Return value:  Size  Location     Type
  9479 ;;                  1    wreg      void 
  9480 ;; Registers used:
  9481 ;;		wreg, status,2, status,0
  9482 ;; Tracked objects:
  9483 ;;		On entry : 0/0
  9484 ;;		On exit  : 0/0
  9485 ;;		Unchanged: 0/0
  9486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9487 ;;      Params:         0       0       0       0       0       0       0
  9488 ;;      Locals:         2       0       0       0       0       0       0
  9489 ;;      Temps:          0       0       0       0       0       0       0
  9490 ;;      Totals:         2       0       0       0       0       0       0
  9491 ;;Total ram usage:        2 bytes
  9492 ;; Hardware stack levels used:    1
  9493 ;; Hardware stack levels required when called:    2
  9494 ;; This function calls:
  9495 ;;		Nothing
  9496 ;; This function is called by:
  9497 ;;		_main
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           	psect	text27
  9502  0026E4                     __ptext27:
  9503                           	opt stack 0
  9504  0026E4                     _InitApp:
  9505                           	opt stack 0
  9506  0026E4  FFFF               	dw	65535	; assembler added errata NOP
  9507                           
  9508                           ;user.c: 31: PORTA = 0b00;
  9509                           
  9510                           ;incstack = 0
  9511  0026E6  0E00               	movlw	0
  9512  0026E8  6E80               	movwf	3968,c	;volatile
  9513                           
  9514                           ;user.c: 32: PORTB = 0b00;
  9515  0026EA  0E00               	movlw	0
  9516  0026EC  6E81               	movwf	3969,c	;volatile
  9517                           
  9518                           ;user.c: 33: PORTC = 0b00;
  9519  0026EE  0E00               	movlw	0
  9520  0026F0  6E82               	movwf	3970,c	;volatile
  9521                           
  9522                           ;user.c: 34: TRISAbits.RA0 = 1 ;
  9523  0026F2  8092               	bsf	3986,0,c	;volatile
  9524                           
  9525                           ;user.c: 35: TRISAbits.RA1 = 1 ;
  9526  0026F4  8292               	bsf	3986,1,c	;volatile
  9527                           
  9528                           ;user.c: 36: TRISAbits.RA2 = 1 ;
  9529  0026F6  8492               	bsf	3986,2,c	;volatile
  9530                           
  9531                           ;user.c: 37: TRISAbits.RA3 = 1 ;
  9532  0026F8  8692               	bsf	3986,3,c	;volatile
  9533                           
  9534                           ;user.c: 38: TRISBbits.RB7 = 0;
  9535  0026FA  9E93               	bcf	3987,7,c	;volatile
  9536                           
  9537                           ;user.c: 39: TRISCbits.RC7 = 1;
  9538  0026FC  8E94               	bsf	3988,7,c	;volatile
  9539                           
  9540                           ;user.c: 40: TRISCbits.RC6 = 0;
  9541  0026FE  9C94               	bcf	3988,6,c	;volatile
  9542                           
  9543                           ;user.c: 41: SPBRG = 10;
  9544  002700  0E0A               	movlw	10
  9545  002702  6EAF               	movwf	4015,c	;volatile
  9546                           
  9547                           ;user.c: 42: RCSTAbits.SPEN = 1;
  9548  002704  8EAB               	bsf	4011,7,c	;volatile
  9549                           
  9550                           ;user.c: 43: TXSTAbits.SYNC = 0;
  9551  002706  98AC               	bcf	4012,4,c	;volatile
  9552                           
  9553                           ;user.c: 44: TXSTAbits.BRGH = 1;
  9554  002708  84AC               	bsf	4012,2,c	;volatile
  9555                           
  9556                           ;user.c: 45: TXSTAbits.TXEN = 1;
  9557  00270A  8AAC               	bsf	4012,5,c	;volatile
  9558                           
  9559                           ;user.c: 46: RCSTAbits.CREN = 1;
  9560  00270C  88AB               	bsf	4011,4,c	;volatile
  9561                           
  9562                           ;user.c: 47: PIE1bits.RCIE = 1;
  9563  00270E  8A9D               	bsf	3997,5,c	;volatile
  9564                           
  9565                           ;user.c: 48: IPR1bits.RCIP = 1;
  9566  002710  8A9F               	bsf	3999,5,c	;volatile
  9567                           
  9568                           ;user.c: 51: T0CONbits.T08BIT = 0;
  9569  002712  9CD5               	bcf	4053,6,c	;volatile
  9570                           
  9571                           ;user.c: 52: T0CONbits.T0CS = 0;
  9572  002714  9AD5               	bcf	4053,5,c	;volatile
  9573                           
  9574                           ;user.c: 53: T0CONbits.T0SE = 0;
  9575  002716  98D5               	bcf	4053,4,c	;volatile
  9576                           
  9577                           ;user.c: 54: T0CONbits.PSA = 0;
  9578  002718  96D5               	bcf	4053,3,c	;volatile
  9579                           
  9580                           ;user.c: 55: T0CONbits.T0PS = 0b101;
  9581  00271A  50D5               	movf	4053,w,c	;volatile
  9582  00271C  0BF8               	andlw	-8
  9583  00271E  0905               	iorlw	5
  9584  002720  6ED5               	movwf	4053,c	;volatile
  9585                           
  9586                           ;user.c: 57: INTCON2bits.TMR0IP = 1;
  9587  002722  84F1               	bsf	intcon2,2,c	;volatile
  9588                           
  9589                           ;user.c: 58: INTCONbits.TMR0IE = 1;
  9590  002724  8AF2               	bsf	intcon,5,c	;volatile
  9591                           
  9592                           ;user.c: 59: T0CONbits.TMR0ON = 1;
  9593  002726  8ED5               	bsf	4053,7,c	;volatile
  9594                           
  9595                           ;user.c: 60: TMR0 = 65458;
  9596  002728  0EFF               	movlw	255
  9597  00272A  6ED7               	movwf	4055,c	;volatile
  9598  00272C  0EB2               	movlw	178
  9599  00272E  6ED6               	movwf	4054,c	;volatile
  9600                           
  9601                           ;user.c: 62: T1CONbits.RD16 = 1;
  9602  002730  8ECD               	bsf	4045,7,c	;volatile
  9603                           
  9604                           ;user.c: 63: T1CONbits.T1CKPS = 0b11;
  9605  002732  0E30               	movlw	48
  9606  002734  12CD               	iorwf	4045,f,c	;volatile
  9607                           
  9608                           ;user.c: 64: T1CONbits.TMR1CS = 0;
  9609  002736  92CD               	bcf	4045,1,c	;volatile
  9610                           
  9611                           ;user.c: 65: T1CONbits.T1SYNC = 1;
  9612  002738  84CD               	bsf	4045,2,c	;volatile
  9613                           
  9614                           ;user.c: 66: T1CONbits.TMR1ON = 1;
  9615  00273A  80CD               	bsf	4045,0,c	;volatile
  9616                           
  9617                           ;user.c: 67: PIE1bits.TMR1IE = 1;
  9618  00273C  809D               	bsf	3997,0,c	;volatile
  9619                           
  9620                           ;user.c: 68: IPR1bits.TMR1IP = 1;
  9621  00273E  809F               	bsf	3999,0,c	;volatile
  9622                           
  9623                           ;user.c: 69: TMR1 = 3036;
  9624  002740  0E0B               	movlw	11
  9625  002742  6ECF               	movwf	4047,c	;volatile
  9626  002744  0EDC               	movlw	220
  9627  002746  6ECE               	movwf	4046,c	;volatile
  9628                           
  9629                           ;user.c: 71: IPR2bits.TMR3IP = 1;
  9630  002748  82A2               	bsf	4002,1,c	;volatile
  9631                           
  9632                           ;user.c: 72: PIE2bits.TMR3IE = 1;
  9633  00274A  82A0               	bsf	4000,1,c	;volatile
  9634                           
  9635                           ;user.c: 73: T3CONbits.RD16 = 1;
  9636  00274C  8EB1               	bsf	4017,7,c	;volatile
  9637                           
  9638                           ;user.c: 74: T3CONbits.TMR3CS = 0;
  9639  00274E  92B1               	bcf	4017,1,c	;volatile
  9640                           
  9641                           ;user.c: 75: T3CONbits.T3CKPS1 = 1;
  9642  002750  8AB1               	bsf	4017,5,c	;volatile
  9643                           
  9644                           ;user.c: 76: T3CONbits.T3CKPS0 = 1;
  9645  002752  88B1               	bsf	4017,4,c	;volatile
  9646                           
  9647                           ;user.c: 77: T3CONbits.TMR3ON = 1;
  9648  002754  80B1               	bsf	4017,0,c	;volatile
  9649                           
  9650                           ;user.c: 78: TMR3 = 64911;
  9651  002756  0EFD               	movlw	253
  9652  002758  6EB3               	movwf	4019,c	;volatile
  9653  00275A  0E8F               	movlw	143
  9654  00275C  6EB2               	movwf	4018,c	;volatile
  9655                           
  9656                           ;user.c: 82: ADCON1bits.ADFM = 1;
  9657  00275E  8EC1               	bsf	4033,7,c	;volatile
  9658                           
  9659                           ;user.c: 83: ADCON1bits.ADCS2 = 0 ;
  9660  002760  9CC1               	bcf	4033,6,c	;volatile
  9661                           
  9662                           ;user.c: 84: ADCON0bits.ADCS = 0b10;
  9663  002762  50C2               	movf	4034,w,c	;volatile
  9664  002764  0B3F               	andlw	-193
  9665  002766  0980               	iorlw	128
  9666  002768  6EC2               	movwf	4034,c	;volatile
  9667                           
  9668                           ;user.c: 85: ADCON0bits.ADON = 1;
  9669  00276A  80C2               	bsf	4034,0,c	;volatile
  9670                           
  9671                           ;user.c: 86: RCONbits.IPEN = 1;
  9672  00276C  8ED0               	bsf	4048,7,c	;volatile
  9673                           
  9674                           ;user.c: 87: INTCONbits.GIE = 1;
  9675  00276E  8EF2               	bsf	intcon,7,c	;volatile
  9676                           
  9677                           ;user.c: 88: INTCONbits.PEIE = 1;
  9678  002770  8CF2               	bsf	intcon,6,c	;volatile
  9679                           
  9680                           ;user.c: 89: PIR1bits.ADIF = 0;
  9681  002772  9C9E               	bcf	3998,6,c	;volatile
  9682                           
  9683                           ;user.c: 90: IPR1bits.ADIP = 1;
  9684  002774  8C9F               	bsf	3999,6,c	;volatile
  9685                           
  9686                           ;user.c: 91: PIE1bits.ADIE = 1;
  9687  002776  8C9D               	bsf	3997,6,c	;volatile
  9688                           
  9689                           ;user.c: 92: ADCON1bits.PCFG = 0b0010 ;
  9690  002778  50C1               	movf	4033,w,c	;volatile
  9691  00277A  0BF0               	andlw	-16
  9692  00277C  0902               	iorlw	2
  9693  00277E  6EC1               	movwf	4033,c	;volatile
  9694                           
  9695                           ;user.c: 93: for (int i = 0; i < 20; i++) {
  9696  002780  0E00               	movlw	0
  9697  002782  6E23               	movwf	InitApp@i+1,c
  9698  002784  0E00               	movlw	0
  9699  002786  6E22               	movwf	InitApp@i,c
  9700  002788                     l3274:
  9701  002788  FFFF               	dw	65535	; assembler added errata NOP
  9702  00278A  BE23               	btfsc	InitApp@i+1,7,c
  9703  00278C  D006               	goto	l368
  9704  00278E  5023               	movf	InitApp@i+1,w,c
  9705  002790  E109               	bnz	l370
  9706  002792  0E14               	movlw	20
  9707  002794  5C22               	subwf	InitApp@i,w,c
  9708  002796  B0D8               	btfsc	status,0,c
  9709  002798  D005               	goto	l370
  9710  00279A                     l368:
  9711  00279A  FFFF               	dw	65535	; assembler added errata NOP
  9712                           
  9713                           ;user.c: 94: __nop();
  9714  00279C  F000               	nop	
  9715  00279E  4A22               	infsnz	InitApp@i,f,c
  9716  0027A0  2A23               	incf	InitApp@i+1,f,c
  9717  0027A2  D7F2               	goto	l3274
  9718  0027A4                     l370:
  9719  0027A4  FFFF               	dw	65535	; assembler added errata NOP
  9720  0027A6  0012               	return		;funcret
  9721  0027A8  FFFF               	dw	65535	; errata NOP
  9722  0027AA                     __end_of_InitApp:
  9723                           	opt stack 0
  9724                           tblptru	equ	0xFF8
  9725                           tblptrh	equ	0xFF7
  9726                           tblptrl	equ	0xFF6
  9727                           tablat	equ	0xFF5
  9728                           prodh	equ	0xFF4
  9729                           prodl	equ	0xFF3
  9730                           intcon	equ	0xFF2
  9731                           intcon2	equ	0xFF1
  9732                           indf0	equ	0xFEF
  9733                           postinc0	equ	0xFEE
  9734                           fsr0h	equ	0xFEA
  9735                           fsr0l	equ	0xFE9
  9736                           wreg	equ	0xFE8
  9737                           postdec1	equ	0xFE5
  9738                           fsr1l	equ	0xFE1
  9739                           indf2	equ	0xFDF
  9740                           postinc2	equ	0xFDE
  9741                           postdec2	equ	0xFDD
  9742                           fsr2h	equ	0xFDA
  9743                           fsr2l	equ	0xFD9
  9744                           status	equ	0xFD8
  9745                           
  9746 ;; *************** function _ConfigureOscillator *****************
  9747 ;; Defined at:
  9748 ;;		line 24 in file "system.c"
  9749 ;; Parameters:    Size  Location     Type
  9750 ;;		None
  9751 ;; Auto vars:     Size  Location     Type
  9752 ;;		None
  9753 ;; Return value:  Size  Location     Type
  9754 ;;                  1    wreg      void 
  9755 ;; Registers used:
  9756 ;;		None
  9757 ;; Tracked objects:
  9758 ;;		On entry : 0/0
  9759 ;;		On exit  : 0/0
  9760 ;;		Unchanged: 0/0
  9761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9762 ;;      Params:         0       0       0       0       0       0       0
  9763 ;;      Locals:         0       0       0       0       0       0       0
  9764 ;;      Temps:          0       0       0       0       0       0       0
  9765 ;;      Totals:         0       0       0       0       0       0       0
  9766 ;;Total ram usage:        0 bytes
  9767 ;; Hardware stack levels used:    1
  9768 ;; Hardware stack levels required when called:    2
  9769 ;; This function calls:
  9770 ;;		Nothing
  9771 ;; This function is called by:
  9772 ;;		_main
  9773 ;; This function uses a non-reentrant model
  9774 ;;
  9775                           
  9776                           	psect	text28
  9777  002E76                     __ptext28:
  9778                           	opt stack 0
  9779  002E76                     _ConfigureOscillator:
  9780                           	opt stack 0
  9781  002E76  FFFF               	dw	65535	; assembler added errata NOP
  9782                           
  9783                           ;incstack = 0
  9784  002E78  0012               	return		;funcret
  9785  002E7A  FFFF               	dw	65535	; errata NOP
  9786  002E7C                     __end_of_ConfigureOscillator:
  9787                           	opt stack 0
  9788                           tblptru	equ	0xFF8
  9789                           tblptrh	equ	0xFF7
  9790                           tblptrl	equ	0xFF6
  9791                           tablat	equ	0xFF5
  9792                           prodh	equ	0xFF4
  9793                           prodl	equ	0xFF3
  9794                           intcon	equ	0xFF2
  9795                           intcon2	equ	0xFF1
  9796                           indf0	equ	0xFEF
  9797                           postinc0	equ	0xFEE
  9798                           fsr0h	equ	0xFEA
  9799                           fsr0l	equ	0xFE9
  9800                           wreg	equ	0xFE8
  9801                           postdec1	equ	0xFE5
  9802                           fsr1l	equ	0xFE1
  9803                           indf2	equ	0xFDF
  9804                           postinc2	equ	0xFDE
  9805                           postdec2	equ	0xFDD
  9806                           fsr2h	equ	0xFDA
  9807                           fsr2l	equ	0xFD9
  9808                           status	equ	0xFD8
  9809                           
  9810 ;; *************** function _low_isr *****************
  9811 ;; Defined at:
  9812 ;;		line 94 in file "interrupts.c"
  9813 ;; Parameters:    Size  Location     Type
  9814 ;;		None
  9815 ;; Auto vars:     Size  Location     Type
  9816 ;;		None
  9817 ;; Return value:  Size  Location     Type
  9818 ;;                  1    wreg      void 
  9819 ;; Registers used:
  9820 ;;		None
  9821 ;; Tracked objects:
  9822 ;;		On entry : 0/0
  9823 ;;		On exit  : 0/0
  9824 ;;		Unchanged: 0/0
  9825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9826 ;;      Params:         0       0       0       0       0       0       0
  9827 ;;      Locals:         0       0       0       0       0       0       0
  9828 ;;      Temps:         17       0       0       0       0       0       0
  9829 ;;      Totals:        17       0       0       0       0       0       0
  9830 ;;Total ram usage:       17 bytes
  9831 ;; Hardware stack levels used:    1
  9832 ;; Hardware stack levels required when called:    1
  9833 ;; This function calls:
  9834 ;;		Nothing
  9835 ;; This function is called by:
  9836 ;;		Interrupt level 1
  9837 ;; This function uses a non-reentrant model
  9838 ;;
  9839                           
  9840                           	psect	intcodelo
  9841  000018                     __pintcodelo:
  9842                           	opt stack 0
  9843  000018                     _low_isr:
  9844                           	opt stack 0
  9845  000018  FFFF               	dw	65535	; assembler added errata NOP
  9846                           
  9847                           ;incstack = 0
  9848  00001A  805D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  9849  00001C  CFD8 F011          	movff	status,??_low_isr
  9850  000020  CFE8 F012          	movff	wreg,??_low_isr+1
  9851  000024  CFE0 F013          	movff	bsr,??_low_isr+2
  9852  000028  CFFA F014          	movff	pclath,??_low_isr+3
  9853  00002C  CFFB F015          	movff	pclatu,??_low_isr+4
  9854  000030  CFE9 F016          	movff	fsr0l,??_low_isr+5
  9855  000034  CFEA F017          	movff	fsr0h,??_low_isr+6
  9856  000038  CFE1 F018          	movff	fsr1l,??_low_isr+7
  9857  00003C  CFE2 F019          	movff	fsr1h,??_low_isr+8
  9858  000040  CFD9 F01A          	movff	fsr2l,??_low_isr+9
  9859  000044  CFDA F01B          	movff	fsr2h,??_low_isr+10
  9860  000048  CFF3 F01C          	movff	prodl,??_low_isr+11
  9861  00004C  CFF4 F01D          	movff	prodh,??_low_isr+12
  9862  000050  CFF6 F01E          	movff	tblptrl,??_low_isr+13
  9863  000054  CFF7 F01F          	movff	tblptrh,??_low_isr+14
  9864  000058  CFF8 F020          	movff	tblptru,??_low_isr+15
  9865  00005C  CFF5 F021          	movff	tablat,??_low_isr+16
  9866  000060  C021  FFF5         	movff	??_low_isr+16,tablat
  9867  000064  C020  FFF8         	movff	??_low_isr+15,tblptru
  9868  000068  C01F  FFF7         	movff	??_low_isr+14,tblptrh
  9869  00006C  C01E  FFF6         	movff	??_low_isr+13,tblptrl
  9870  000070  C01D  FFF4         	movff	??_low_isr+12,prodh
  9871  000074  C01C  FFF3         	movff	??_low_isr+11,prodl
  9872  000078  C01B  FFDA         	movff	??_low_isr+10,fsr2h
  9873  00007C  C01A  FFD9         	movff	??_low_isr+9,fsr2l
  9874  000080  C019  FFE2         	movff	??_low_isr+8,fsr1h
  9875  000084  C018  FFE1         	movff	??_low_isr+7,fsr1l
  9876  000088  C017  FFEA         	movff	??_low_isr+6,fsr0h
  9877  00008C  C016  FFE9         	movff	??_low_isr+5,fsr0l
  9878  000090  C015  FFFB         	movff	??_low_isr+4,pclatu
  9879  000094  C014  FFFA         	movff	??_low_isr+3,pclath
  9880  000098  C013  FFE0         	movff	??_low_isr+2,bsr
  9881  00009C  C012  FFE8         	movff	??_low_isr+1,wreg
  9882  0000A0  C011  FFD8         	movff	??_low_isr,status
  9883  0000A4  905D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9884  0000A6  0010               	retfie	
  9885  0000A8  FFFF               	dw	65535	; errata NOP
  9886  0000AA                     __end_of_low_isr:
  9887                           	opt stack 0
  9888                           pclatu	equ	0xFFB
  9889                           pclath	equ	0xFFA
  9890                           tblptru	equ	0xFF8
  9891                           tblptrh	equ	0xFF7
  9892                           tblptrl	equ	0xFF6
  9893                           tablat	equ	0xFF5
  9894                           prodh	equ	0xFF4
  9895                           prodl	equ	0xFF3
  9896                           intcon	equ	0xFF2
  9897                           intcon2	equ	0xFF1
  9898                           indf0	equ	0xFEF
  9899                           postinc0	equ	0xFEE
  9900                           fsr0h	equ	0xFEA
  9901                           fsr0l	equ	0xFE9
  9902                           wreg	equ	0xFE8
  9903                           postdec1	equ	0xFE5
  9904                           fsr1h	equ	0xFE2
  9905                           fsr1l	equ	0xFE1
  9906                           bsr	equ	0xFE0
  9907                           indf2	equ	0xFDF
  9908                           postinc2	equ	0xFDE
  9909                           postdec2	equ	0xFDD
  9910                           fsr2h	equ	0xFDA
  9911                           fsr2l	equ	0xFD9
  9912                           status	equ	0xFD8
  9913                           
  9914 ;; *************** function _high_isr *****************
  9915 ;; Defined at:
  9916 ;;		line 39 in file "interrupts.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;		None
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;		None
  9921 ;; Return value:  Size  Location     Type
  9922 ;;                  1    wreg      void 
  9923 ;; Registers used:
  9924 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9930 ;;      Params:         0       0       0       0       0       0       0
  9931 ;;      Locals:         0       0       0       0       0       0       0
  9932 ;;      Temps:         16       0       0       0       0       0       0
  9933 ;;      Totals:        16       0       0       0       0       0       0
  9934 ;;Total ram usage:       16 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; This function calls:
  9937 ;;		Nothing
  9938 ;; This function is called by:
  9939 ;;		Interrupt level 2
  9940 ;; This function uses a non-reentrant model
  9941 ;;
  9942                           
  9943                           	psect	intcode
  9944  000008                     __pintcode:
  9945                           	opt stack 0
  9946  000008                     _high_isr:
  9947                           	opt stack 0
  9948  000008  FFFF               	dw	65535	; assembler added errata NOP
  9949                           
  9950                           ;incstack = 0
  9951  00000A  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9952  00000C  CFFA F003          	movff	pclath,??_high_isr+2
  9953  000010  CFFB F004          	movff	pclatu,??_high_isr+3
  9954  000014  EF33  F011         	goto	int_func
  9955                           pclatu	equ	0xFFB
  9956                           pclath	equ	0xFFA
  9957                           tblptru	equ	0xFF8
  9958                           tblptrh	equ	0xFF7
  9959                           tblptrl	equ	0xFF6
  9960                           tablat	equ	0xFF5
  9961                           prodh	equ	0xFF4
  9962                           prodl	equ	0xFF3
  9963                           intcon	equ	0xFF2
  9964                           intcon2	equ	0xFF1
  9965                           indf0	equ	0xFEF
  9966                           postinc0	equ	0xFEE
  9967                           fsr0h	equ	0xFEA
  9968                           fsr0l	equ	0xFE9
  9969                           wreg	equ	0xFE8
  9970                           postdec1	equ	0xFE5
  9971                           fsr1h	equ	0xFE2
  9972                           fsr1l	equ	0xFE1
  9973                           bsr	equ	0xFE0
  9974                           indf2	equ	0xFDF
  9975                           postinc2	equ	0xFDE
  9976                           postdec2	equ	0xFDD
  9977                           fsr2h	equ	0xFDA
  9978                           fsr2l	equ	0xFD9
  9979                           status	equ	0xFD8
  9980                           
  9981                           	psect	intcode_body
  9982  002266                     __pintcode_body:
  9983                           	opt stack 25
  9984  002266                     int_func:
  9985                           	opt stack 25
  9986  002266  FFFF               	dw	65535	; errata NOP
  9987  002268  CFE9 F005          	movff	fsr0l,??_high_isr+4
  9988  00226C  CFEA F006          	movff	fsr0h,??_high_isr+5
  9989  002270  CFE1 F007          	movff	fsr1l,??_high_isr+6
  9990  002274  CFE2 F008          	movff	fsr1h,??_high_isr+7
  9991  002278  CFD9 F009          	movff	fsr2l,??_high_isr+8
  9992  00227C  CFDA F00A          	movff	fsr2h,??_high_isr+9
  9993  002280  CFF3 F00B          	movff	prodl,??_high_isr+10
  9994  002284  CFF4 F00C          	movff	prodh,??_high_isr+11
  9995  002288  CFF6 F00D          	movff	tblptrl,??_high_isr+12
  9996  00228C  CFF7 F00E          	movff	tblptrh,??_high_isr+13
  9997  002290  CFF8 F00F          	movff	tblptru,??_high_isr+14
  9998  002294  CFF5 F010          	movff	tablat,??_high_isr+15
  9999                           
 10000                           ;interrupts.c: 49: if (PIR1bits.ADIF == 1) {
 10001  002298  AC9E               	btfss	3998,6,c	;volatile
 10002  00229A  D00F               	goto	i2l3806
 10003                           
 10004                           ;interrupts.c: 51: __nop();
 10005  00229C  F000               	nop	
 10006                           
 10007                           ;interrupts.c: 52: resultadoadc = (ADRESH << 8) + ADRESL;
 10008  00229E  50C4               	movf	4036,w,c	;volatile
 10009  0022A0  6E02               	movwf	(??_high_isr+1)& (0+255),c
 10010  0022A2  6A01               	clrf	??_high_isr& (0+255),c
 10011  0022A4  50C3               	movf	4035,w,c	;volatile
 10012  0022A6  2401               	addwf	??_high_isr,w,c
 10013  0022A8  6E4C               	movwf	_resultadoadc,c
 10014  0022AA  0E00               	movlw	0
 10015  0022AC  2002               	addwfc	??_high_isr+1,w,c
 10016  0022AE  6E4D               	movwf	_resultadoadc+1,c
 10017                           
 10018                           ;interrupts.c: 53: conversionadc = 1;
 10019  0022B0  0E00               	movlw	0
 10020  0022B2  6E3F               	movwf	_conversionadc+1,c
 10021  0022B4  0E01               	movlw	1
 10022  0022B6  6E3E               	movwf	_conversionadc,c
 10023                           
 10024                           ;interrupts.c: 54: PIR1bits.ADIF = 0;
 10025  0022B8  9C9E               	bcf	3998,6,c	;volatile
 10026  0022BA                     i2l3806:
 10027  0022BA  FFFF               	dw	65535	; assembler added errata NOP
 10028                           
 10029                           ;interrupts.c: 55: }
 10030                           ;interrupts.c: 57: if (PIR1bits.RCIF == 1) {
 10031  0022BC  AA9E               	btfss	3998,5,c	;volatile
 10032  0022BE  D026               	goto	i2l3824
 10033                           
 10034                           ;interrupts.c: 58: dato = RCREG;
 10035  0022C0  CFAE F056          	movff	4014,_dato	;volatile
 10036                           
 10037                           ;interrupts.c: 59: if (dato != '\r') {
 10038  0022C4  0E0D               	movlw	13
 10039  0022C6  1856               	xorwf	_dato,w,c
 10040  0022C8  B4D8               	btfsc	status,2,c
 10041  0022CA  D010               	goto	i2l3818
 10042                           
 10043                           ;interrupts.c: 60: comando[n] = dato;
 10044  0022CC  0E46               	movlw	low _comando
 10045  0022CE  0100               	movlb	0	; () banked
 10046  0022D0  25D4               	addwf	_n& (0+255),w,b
 10047  0022D2  6ED9               	movwf	fsr2l,c
 10048  0022D4  0E01               	movlw	high _comando
 10049  0022D6  0100               	movlb	0	; () banked
 10050  0022D8  21D5               	addwfc	(_n+1)& (0+255),w,b
 10051  0022DA  6EDA               	movwf	fsr2h,c
 10052  0022DC  C056  FFDF         	movff	_dato,indf2
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;interrupts.c: 61: n++;
 10056  0022E0  0100               	movlb	0	; () banked
 10057  0022E2  4BD4               	infsnz	_n& (0+255),f,b
 10058  0022E4  2BD5               	incf	(_n+1)& (0+255),f,b
 10059                           
 10060                           ; BSR set to: 0
 10061                           ;interrupts.c: 62: tama++;
 10062  0022E6  4A54               	infsnz	_tama,f,c
 10063  0022E8  2A55               	incf	_tama+1,f,c
 10064                           
 10065                           ;interrupts.c: 63: } else if (dato == '\r') {
 10066  0022EA  D00E               	goto	i2l3822
 10067  0022EC                     i2l3818:
 10068  0022EC  FFFF               	dw	65535	; assembler added errata NOP
 10069  0022EE  0E0D               	movlw	13
 10070  0022F0  1856               	xorwf	_dato,w,c
 10071  0022F2  A4D8               	btfss	status,2,c
 10072  0022F4  D009               	goto	i2l3822
 10073                           
 10074                           ;interrupts.c: 64: n = 0;
 10075  0022F6  0E00               	movlw	0
 10076  0022F8  0100               	movlb	0	; () banked
 10077  0022FA  6FD5               	movwf	(_n+1)& (0+255),b
 10078  0022FC  0E00               	movlw	0
 10079  0022FE  6FD4               	movwf	_n& (0+255),b
 10080                           
 10081                           ;interrupts.c: 65: enter = 1;
 10082  002300  0E00               	movlw	0
 10083  002302  6E41               	movwf	_enter+1,c
 10084  002304  0E01               	movlw	1
 10085  002306  6E40               	movwf	_enter,c
 10086  002308                     i2l3822:
 10087  002308  FFFF               	dw	65535	; assembler added errata NOP
 10088                           
 10089                           ;interrupts.c: 66: }
 10090                           ;interrupts.c: 68: PIR1bits.RCIF = 0;
 10091  00230A  9A9E               	bcf	3998,5,c	;volatile
 10092  00230C                     i2l3824:
 10093  00230C  FFFF               	dw	65535	; assembler added errata NOP
 10094                           
 10095                           ;interrupts.c: 69: }
 10096                           ;interrupts.c: 70: if (PIR2bits.TMR3IF == 1) {
 10097  00230E  A2A1               	btfss	4001,1,c	;volatile
 10098  002310  D009               	goto	i2l3830
 10099                           
 10100                           ;interrupts.c: 71: led = 1;
 10101  002312  0E00               	movlw	0
 10102  002314  6E45               	movwf	_led+1,c
 10103  002316  0E01               	movlw	1
 10104  002318  6E44               	movwf	_led,c
 10105                           
 10106                           ;interrupts.c: 72: TMR3 = 3036;
 10107  00231A  0E0B               	movlw	11
 10108  00231C  6EB3               	movwf	4019,c	;volatile
 10109  00231E  0EDC               	movlw	220
 10110  002320  6EB2               	movwf	4018,c	;volatile
 10111                           
 10112                           ;interrupts.c: 73: PIR2bits.TMR3IF = 0;
 10113  002322  92A1               	bcf	4001,1,c	;volatile
 10114  002324                     i2l3830:
 10115  002324  FFFF               	dw	65535	; assembler added errata NOP
 10116                           
 10117                           ;interrupts.c: 74: }
 10118                           ;interrupts.c: 75: if (PIR1bits.TMR1IF == 1) {
 10119  002326  A09E               	btfss	3998,0,c	;volatile
 10120  002328  D00B               	goto	i2l3836
 10121                           
 10122                           ;interrupts.c: 76: PIR1bits.TMR1IF = 0;
 10123  00232A  909E               	bcf	3998,0,c	;volatile
 10124                           
 10125                           ;interrupts.c: 77: __nop();
 10126  00232C  F000               	nop	
 10127                           
 10128                           ;interrupts.c: 78: visualizacion = 1;
 10129  00232E  0E00               	movlw	0
 10130  002330  0100               	movlb	0	; () banked
 10131  002332  6FE5               	movwf	(_visualizacion+1)& (0+255),b
 10132  002334  0E01               	movlw	1
 10133  002336  6FE4               	movwf	_visualizacion& (0+255),b
 10134                           
 10135                           ;interrupts.c: 79: TMR1 = 3036;
 10136  002338  0E0B               	movlw	11
 10137  00233A  6ECF               	movwf	4047,c	;volatile
 10138  00233C  0EDC               	movlw	220
 10139  00233E  6ECE               	movwf	4046,c	;volatile
 10140  002340                     i2l3836:
 10141  002340  FFFF               	dw	65535	; assembler added errata NOP
 10142                           
 10143                           ;interrupts.c: 81: }
 10144                           ;interrupts.c: 82: if (INTCONbits.TMR0IF == 1) {
 10145  002342  A4F2               	btfss	intcon,2,c	;volatile
 10146  002344  D00A               	goto	i2l55
 10147                           
 10148                           ;interrupts.c: 83: INTCONbits.TMR0IF = 0;
 10149  002346  94F2               	bcf	intcon,2,c	;volatile
 10150                           
 10151                           ;interrupts.c: 84: muestreo = 1;
 10152  002348  0E00               	movlw	0
 10153  00234A  6E49               	movwf	_muestreo+1,c
 10154  00234C  0E01               	movlw	1
 10155  00234E  6E48               	movwf	_muestreo,c
 10156                           
 10157                           ;interrupts.c: 85: __nop();
 10158  002350  F000               	nop	
 10159                           
 10160                           ;interrupts.c: 86: TMR0 = 65530;
 10161  002352  0EFF               	movlw	255
 10162  002354  6ED7               	movwf	4055,c	;volatile
 10163  002356  0EFA               	movlw	250
 10164  002358  6ED6               	movwf	4054,c	;volatile
 10165  00235A                     i2l55:
 10166  00235A  FFFF               	dw	65535	; assembler added errata NOP
 10167  00235C  C010  FFF5         	movff	??_high_isr+15,tablat
 10168  002360  C00F  FFF8         	movff	??_high_isr+14,tblptru
 10169  002364  C00E  FFF7         	movff	??_high_isr+13,tblptrh
 10170  002368  C00D  FFF6         	movff	??_high_isr+12,tblptrl
 10171  00236C  C00C  FFF4         	movff	??_high_isr+11,prodh
 10172  002370  C00B  FFF3         	movff	??_high_isr+10,prodl
 10173  002374  C00A  FFDA         	movff	??_high_isr+9,fsr2h
 10174  002378  C009  FFD9         	movff	??_high_isr+8,fsr2l
 10175  00237C  C008  FFE2         	movff	??_high_isr+7,fsr1h
 10176  002380  C007  FFE1         	movff	??_high_isr+6,fsr1l
 10177  002384  C006  FFEA         	movff	??_high_isr+5,fsr0h
 10178  002388  C005  FFE9         	movff	??_high_isr+4,fsr0l
 10179  00238C  C004  FFFB         	movff	??_high_isr+3,pclatu
 10180  002390  C003  FFFA         	movff	??_high_isr+2,pclath
 10181  002394  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10182  002396  0011               	retfie		f
 10183  002398  FFFF               	dw	65535	; errata NOP
 10184  00239A                     __end_of_high_isr:
 10185                           	opt stack 0
 10186                           pclatu	equ	0xFFB
 10187                           pclath	equ	0xFFA
 10188                           tblptru	equ	0xFF8
 10189                           tblptrh	equ	0xFF7
 10190                           tblptrl	equ	0xFF6
 10191                           tablat	equ	0xFF5
 10192                           prodh	equ	0xFF4
 10193                           prodl	equ	0xFF3
 10194                           intcon	equ	0xFF2
 10195                           intcon2	equ	0xFF1
 10196                           indf0	equ	0xFEF
 10197                           postinc0	equ	0xFEE
 10198                           fsr0h	equ	0xFEA
 10199                           fsr0l	equ	0xFE9
 10200                           wreg	equ	0xFE8
 10201                           postdec1	equ	0xFE5
 10202                           fsr1h	equ	0xFE2
 10203                           fsr1l	equ	0xFE1
 10204                           bsr	equ	0xFE0
 10205                           indf2	equ	0xFDF
 10206                           postinc2	equ	0xFDE
 10207                           postdec2	equ	0xFDD
 10208                           fsr2h	equ	0xFDA
 10209                           fsr2l	equ	0xFD9
 10210                           status	equ	0xFD8
 10211                           pclatu	equ	0xFFB
 10212                           pclath	equ	0xFFA
 10213                           tblptru	equ	0xFF8
 10214                           tblptrh	equ	0xFF7
 10215                           tblptrl	equ	0xFF6
 10216                           tablat	equ	0xFF5
 10217                           prodh	equ	0xFF4
 10218                           prodl	equ	0xFF3
 10219                           intcon	equ	0xFF2
 10220                           intcon2	equ	0xFF1
 10221                           indf0	equ	0xFEF
 10222                           postinc0	equ	0xFEE
 10223                           fsr0h	equ	0xFEA
 10224                           fsr0l	equ	0xFE9
 10225                           wreg	equ	0xFE8
 10226                           postdec1	equ	0xFE5
 10227                           fsr1h	equ	0xFE2
 10228                           fsr1l	equ	0xFE1
 10229                           bsr	equ	0xFE0
 10230                           indf2	equ	0xFDF
 10231                           postinc2	equ	0xFDE
 10232                           postdec2	equ	0xFDD
 10233                           fsr2h	equ	0xFDA
 10234                           fsr2l	equ	0xFD9
 10235                           status	equ	0xFD8
 10236                           
 10237                           	psect	rparam
 10238  0000                     pclatu	equ	0xFFB
 10239                           pclath	equ	0xFFA
 10240                           tblptru	equ	0xFF8
 10241                           tblptrh	equ	0xFF7
 10242                           tblptrl	equ	0xFF6
 10243                           tablat	equ	0xFF5
 10244                           prodh	equ	0xFF4
 10245                           prodl	equ	0xFF3
 10246                           intcon	equ	0xFF2
 10247                           intcon2	equ	0xFF1
 10248                           indf0	equ	0xFEF
 10249                           postinc0	equ	0xFEE
 10250                           fsr0h	equ	0xFEA
 10251                           fsr0l	equ	0xFE9
 10252                           wreg	equ	0xFE8
 10253                           postdec1	equ	0xFE5
 10254                           fsr1h	equ	0xFE2
 10255                           fsr1l	equ	0xFE1
 10256                           bsr	equ	0xFE0
 10257                           indf2	equ	0xFDF
 10258                           postinc2	equ	0xFDE
 10259                           postdec2	equ	0xFDD
 10260                           fsr2h	equ	0xFDA
 10261                           fsr2l	equ	0xFD9
 10262                           status	equ	0xFD8
 10263                           
 10264                           	psect	temp
 10265  00005D                     btemp:
 10266                           	opt stack 0
 10267  00005D                     	ds	1
 10268  0000                     int$flags	set	btemp
 10269                           pclatu	equ	0xFFB
 10270                           pclath	equ	0xFFA
 10271                           tblptru	equ	0xFF8
 10272                           tblptrh	equ	0xFF7
 10273                           tblptrl	equ	0xFF6
 10274                           tablat	equ	0xFF5
 10275                           prodh	equ	0xFF4
 10276                           prodl	equ	0xFF3
 10277                           intcon	equ	0xFF2
 10278                           intcon2	equ	0xFF1
 10279                           indf0	equ	0xFEF
 10280                           postinc0	equ	0xFEE
 10281                           fsr0h	equ	0xFEA
 10282                           fsr0l	equ	0xFE9
 10283                           wreg	equ	0xFE8
 10284                           postdec1	equ	0xFE5
 10285                           fsr1h	equ	0xFE2
 10286                           fsr1l	equ	0xFE1
 10287                           bsr	equ	0xFE0
 10288                           indf2	equ	0xFDF
 10289                           postinc2	equ	0xFDE
 10290                           postdec2	equ	0xFDD
 10291                           fsr2h	equ	0xFDA
 10292                           fsr2l	equ	0xFD9
 10293                           status	equ	0xFD8


Data Sizes:
    Strings     94
    Constant    406
    Data        22
    BSS         171
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     59      92
    BANK0           128     53     118
    BANK1           256     26     121
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> INFO(CODE[5]), VISUALIZACION3(CODE[15]), VISUALIZACION2(CODE[15]), VISUALIZACION1(CODE[15]), 
		 -> MUESTREO3(CODE[10]), MUESTREO2(CODE[10]), MUESTREO1(CODE[10]), MODORAPIDO(CODE[11]), 
		 -> MODONORMAL(CODE[11]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 25
		 -> comando(BANK1[25]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_6(CODE[3]), STR_5(CODE[21]), STR_4(CODE[16]), STR_3(CODE[21]), 
		 -> STR_2(CODE[16]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 30
		 -> salida(BANK1[30]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    enviarTramaSE@datos	PTR unsigned char  size(2) Largest target is 30
		 -> salida(BANK1[30]), 

    enviarTrama@datos	PTR unsigned char  size(2) Largest target is 31
		 -> visualizacionnoaplica(CODE[24]), muestreonoaplica(CODE[19]), estadoactualrapido(CODE[24]), estadoactualnormal(CODE[24]), 
		 -> salida(BANK1[30]), noreconocido(CODE[22]), saludo(CODE[31]), comando(BANK1[25]), 


Critical Paths under _main in COMRAM

    _main->___ftmul
    _sprintf->___ftmul
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    _conversionADMues->___awdiv
    ___awdiv->___awmod
    ___ftdiv->___ftmul
    ___awtoft->___ftpack

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___ftmul

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   78321
                                             50 BANK0      3     3      0
                _ConfigureOscillator
                            _InitApp
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                   _conversionADMues
                        _enviarTrama
                      _enviarTramaSE
                          _ledestado
                            _sprintf
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4    1243
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             45    38      7   58535
                                             37 BANK0     13     6      7
                                              0 BANK1     26    26      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   13403
                                              9 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             33 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   13124
                                              9 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3004
                                             47 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5436
                                             53 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1819
                                             33 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     608
                                             33 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     827
                                             33 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2703
                                             41 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     848
                                             46 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     857
                                             33 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     602
                                             16 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4535
                                             31 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4171
                                             19 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     142
                                             33 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     660
                                             33 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _ledestado                                            3     1      2     150
                                             33 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _enviarTramaSE                                        2     0      2     173
                                             33 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _enviarTrama                                          2     0      2     813
                                             33 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _conversionADMues                                     8     6      2    2975
                                             47 COMRAM     8     6      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2447
                                             39 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3212
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2734
                                             41 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                             33 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              2     2      0      46
                                             33 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                             17    17      0       0
                                             16 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _high_isr                                            16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _conversionADMues
     ___awdiv
       ___awmod (ARG)
   _enviarTrama
   _enviarTramaSE
   _ledestado
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _strcmp

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1A      79       7       47.3%
BITBANK0            80      0       0       4        0.0%
BANK0               80     35      76       5       92.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3B      5C       1       73.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14B      15        0.0%
DATA                 0      0     14B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Oct 13 14:19:54 2017

                                                              _a 00C2  
                                                              _b 00C4  
                                                              _d 00C6  
                                                              _e 00C8  
                                                              _g 00CA  
                                                              _i 0042  
                                                              _n 00D4  
                                                             _h0 00CC  
                                                             _h1 00CE  
                                                             _h2 00D0  
                                                   ___awdiv@sign 002D  
                                                             bsr 000FE0  
                                            ___wmul@multiplicand 0032  
                                                   __CFG_CP0$OFF 000000  
                                                   __CFG_CP1$OFF 000000  
                                                   __CFG_CP2$OFF 000000  
                                                   __CFG_CP3$OFF 000000  
                                                    __CFG_OSC$HS 000000  
                                                   ___ftadd@exp1 009E  
                                                   ___ftadd@exp2 009D  
                                                   ___ftadd@sign 009C  
                                                            l300 1EF8  
                                                            l301 1F0A  
                                                            l303 1F10  
                                                            l306 1F7C  
                                                            l307 1F8E  
                                                            l244 1376  
                                                            l309 1F94  
                                                            l229 1066  
                                                            l270 2AE0  
                                                            l249 13B0  
                                                            l370 27A4  
                                                            l274 2B18  
                                                            l293 1E6A  
                                                            l277 2B22  
                                                            l285 2DC8  
                                                            l429 09C0  
                                                            l294 1E7C  
                                                            l368 279A  
                                                            l296 1E82  
                                                            l800 1B28  
                                                            l712 26DE  
                                                            l721 26CC  
                                                            l298 1FE6  
                                                            l811 20F6  
                                                            l900 2A1C  
                                                            l468 0800  
                                                            l742 2868  
                                                            l910 2B8C  
                                                            l399 193A  
                                                            l808 212C  
                                                            l816 25D6  
                                                            l840 24C4  
                                                            l753 2848  
                                                            l825 25C4  
                                                            l834 2904  
                                                            l850 2E2A  
                                                            l818 253A  
                                                            l819 2564  
                                                            l780 19E8  
                                                            l861 2260  
                                                            l782 1A16  
                                                            l791 1AFC  
                                                            l776 19AA  
                                                            l777 1BCA  
                                                   __CFG_CPB$OFF 000000  
                                                   __CFG_CPD$OFF 000000  
                                                   __CFG_BOR$OFF 000000  
                                                            _bin 00B5  
                                                            _led 0044  
                                                            _tam 0100  
                                                   __CFG_BORV$20 000000  
                                                   ___awmod@sign 0027  
                                                            wreg 000FE8  
                                                   __CFG_LVP$OFF 000000  
                                                   ___ftdiv@cntr 0092  
                                                   ___ftdiv@sign 0097  
                                                   __CFG_WDT$OFF 000000  
                                                           l4100 283C  
                                                           l3310 2CE0  
                                                           l5000 1F14  
                                                           l3304 2CC4  
                                                           l4200 23E4  
                                                           l4130 19BA  
                                                           l3314 2D16  
                                                           l4300 2A66  
                                                           l4204 23F4  
                                                           l3308 2CD6  
                                                           l4142 1A0A  
                                                           l4302 2A70  
                                                           l4222 2450  
                                                           l5016 1F4E  
                                                           l4160 1A90  
                                                           l4152 1A50  
                                                           l4136 19F8  
                                                           l4304 2A76  
                                                           l4312 2A98  
                                                           l4232 2486  
                                                           l5120 0E2A  
                                                           l3274 2788  
                                                           l4090 27D8  
                                                           l4170 1ADE  
                                                           l4162 1AA0  
                                                           l4218 2438  
                                                           l4330 1D22  
                                                           l5210 1148  
                                                           l5114 0E0C  
                                                           l4092 27F8  
                                                           l4084 27BC  
                                                           l5052 203A  
                                                           l4260 294A  
                                                           l5028 1F98  
                                                           l3284 2ABA  
                                                           l4172 1AEE  
                                                           l4164 1AAE  
                                                           l4500 26A2  
                                                           l4316 2AA8  
                                                           l4308 2A8C  
                                                           l4228 246E  
                                                           l5140 0F72  
                                                           l5132 0EE6  
                                                           l5108 0DEE  
                                                           l4262 2954  
                                                           l4254 2932  
                                                           l4158 1A80  
                                                           l5302 142C  
                                                           l5230 11FA  
                                                           l5214 1176  
                                                           l5142 0F80  
                                                           l4096 2810  
                                                           l4088 27CC  
                                                           l5056 2050  
                                                           l4280 2994  
                                                           l4272 2978  
                                                           l4264 295A  
                                                           l4248 2920  
                                                           l3288 2AEA  
                                                           l4520 28A0  
                                                           l4512 2D4A  
                                                           l4504 26B6  
                                                           l4440 259A  
                                                           l4352 1628  
                                                           l5232 1204  
                                                           l5216 1182  
                                                           l5152 0FAE  
                                                           l5136 0F48  
                                                           l5128 0E84  
                                                           l4098 2830  
                                                           l4530 2900  
                                                           l4178 1B54  
                                                           l4602 2A0C  
                                                           l4610 2B42  
                                                           l4506 26C4  
                                                           l4434 2580  
                                                           l4338 1DF2  
                                                           l4370 1846  
                                                           l4362 170A  
                                                           l5250 12CE  
                                                           l5154 0FB8  
                                                           l5076 20B2  
                                                           l4276 2984  
                                                           l3732 2DBA  
                                                           l4524 28D2  
                                                           l4188 1BA4  
                                                           l4612 2B50  
                                                           l4444 25AE  
                                                           l4292 2A48  
                                                           l5324 1492  
                                                           l5260 1344  
                                                           l5316 146E  
                                                           l5180 103A  
                                                           l5172 100E  
                                                           l5164 0FE2  
                                                           l4614 2B56  
                                                           l4446 25BC  
                                                           l4438 2592  
                                                           l4358 16E0  
                                                           l4710 03B0  
                                                           l5262 134E  
                                                           l5254 132A  
                                                           l5246 12BC  
                                                           l5158 0FCA  
                                                           l3736 2DD2  
                                                           l4624 2C1C  
                                                           l4296 2A56  
                                                           l4376 190C  
                                                           l4800 079E  
                                                           l4712 03C8  
                                                           l4640 00E2  
                                                           l5272 1382  
                                                           l5184 1050  
                                                           l5176 1024  
                                                           l5168 0FF8  
                                                           l5098 2D8E  
                                                           l4562 21DC  
                                                           l4618 2B7C  
                                                           l4626 2C2A  
                                                           l4482 266A  
                                                           l4474 2638  
                                                           l4810 07E0  
                                                           l4802 07AE  
                                                           l4722 045E  
                                                           l4714 03FA  
                                                           l4706 0388  
                                                           l4642 00FA  
                                                           l4634 00C0  
                                                           l5290 13D8  
                                                           l5274 138C  
                                                           l5266 1360  
                                                           l4580 224E  
                                                           l4572 2212  
                                                           l4388 2E54  
                                                           l4740 0550  
                                                           l4716 0412  
                                                           l4660 01B8  
                                                           l4652 013C  
                                                           l5284 13BC  
                                                           l5188 1078  
                                                           l4574 2224  
                                                           l4566 21F2  
                                                           l4590 29C6  
                                                           l4494 2688  
                                                           l4902 0B6E  
                                                           l4822 0838  
                                                           l4814 0806  
                                                           l4742 0558  
                                                           l4726 0486  
                                                           l4662 01C0  
                                                           l4646 0106  
                                                           l5286 13C6  
                                                           l5278 139E  
                                                           l4568 21FC  
                                                           l4576 2230  
                                                           l4592 29D4  
                                                           l4912 0BB4  
                                                           l4920 0BDE  
                                                           l4904 0B7A  
                                                           l4808 07CA  
                                                           l4736 04E8  
                                                           l5296 13F0  
                                                           l4594 29DA  
                                                           l4498 269A  
                                                           l4922 0BEC  
                                                           l4826 088C  
                                                           l4770 0660  
                                                           l4762 0624  
                                                           l4754 05A8  
                                                           l4682 026A  
                                                           l4666 01C8  
                                                           l4860 0A3A  
                                                           l4844 09B0  
                                                           l4836 0984  
                                                           l4668 020E  
                                                           l4950 0D8C  
                                                           l4934 0C48  
                                                           l4862 0A42  
                                                           l4838 0994  
                                                           l4790 06F4  
                                                           l4758 05FA  
                                                           l4936 0C5A  
                                                           l4944 0D64  
                                                           l4928 0C14  
                                                           l4856 0A0E  
                                                           l4792 06FE  
                                                           l4776 067C  
                                                           l4784 06B0  
                                                           l4952 0DA4  
                                                           l4938 0CE4  
                                                           l4946 0D78  
                                                           l4874 0A92  
                                                           l4890 0AEA  
                                                           l4786 06C6  
                                                           l4778 0694  
                                                           l4698 031E  
                                                           l4954 0DC6  
                                                           l4972 1E86  
                                                           l4876 0A9A  
                                                           l4892 0AFE  
                                                           l4982 1EC0  
                                                           l4898 0B34  
                                                           l4988 1ECC  
                                                           STR_1 7FFC  
                                                           STR_2 7FEC  
                                                           STR_3 7FB6  
                                                           STR_4 7FDC  
                                                           STR_5 7FA1  
                                                           STR_6 7FFC  
                                                           STR_7 7FCB  
                                                           u3200 2ADE  
                                                           u3220 2B0E  
                                                           u3207 2AD4  
                                                           u3227 2B04  
                                                           _INFO 7F9C  
                                                           u3270 2CA2  
                                                           u6010 1F0A  
                                                           u3276 2CA6  
                                                           u5300 2182  
                                                           u5071 24DC  
                                                           u4601 1976  
                                                           u5305 2176  
                                                           u6050 1F8E  
                                                           u5091 24F6  
                                                           u6071 2004  
                                                           u5281 214A  
                                                           u4801 23B0  
                                                           u6091 202A  
                                                           u4821 23D4  
                                                           u5710 07F8  
                                                           u6414 12F6  
                                                           u4591 1958  
                                                           u6415 12EC  
                                                           u5490 02B4  
                                                           i2l55 235A  
                                                           u5495 02A6  
                                                           u6391 1228  
                                                           u5970 1E7C  
                                                           _TMR0 000FD6  
                                                           _TMR1 000FCE  
                                                           _TMR3 000FB2  
                                                           _dato 0056  
                                                           _main 0DD8  
                                                           _info 00E8  
                                                   ___ftpack@arg 0022  
                                                           _modo 00D2  
                                                           _tama 0054  
                                                   ___ftpack@exp 0025  
                                                           fsr0h 000FEA  
                                                           fsr1h 000FE2  
                                                           indf0 000FEF  
                                                           fsr0l 000FE9  
                                                           fsr2h 000FDA  
                                                           fsr1l 000FE1  
                                                           indf2 000FDF  
                                                           fsr2l 000FD9  
                                                           btemp 005D  
                                                           _tvis 005B  
                                                           pclat 000FFA  
                                                   ?_enviarTrama 0022  
                                                           prodh 000FF4  
                                                           prodl 000FF3  
                                                           start 00AA  
                                                   _sprintf$2073 015F  
                                             ledestado@tiempoled 0022  
                                                   ___ftmul@cntr 0087  
                                         __size_of_enviarTramaSE 0032  
                                                   ___param_bank 000010  
                                                   ___ftmul@sign 0088  
                                                __end_of_InitApp 27AA  
                                                   ___fttol@exp1 009E  
                                                   ___fttol@lval 009A  
                                                  __CFG_OSCS$OFF 000000  
                                              conversionADMues@i 0032  
                                                          ?_main 0001  
                                                __end_of___awdiv 29A2  
                                                __end_of___ftadd 1BD0  
                                                __end_of___awmod 2AB6  
                                                __end_of___ftdiv 2132  
                                                __end_of___ftneg 2E3C  
                                                __end_of___lldiv 2A32  
                                                __end_of___ftmul 24CA  
                                                ___awdiv@divisor 002A  
                                                __end_of___llmod 2BA2  
                                                __end_of___ftsub 2D78  
                                                __end_of___fttol 2266  
                                                  _conversionadc 003E  
                                                ___awdiv@counter 002C  
                                                          _RCREG 000FAE  
                                                          _SPBRG 000FAF  
                                                          _PORTA 000F80  
                                                          _PORTB 000F81  
                                                          _PORTC 000F82  
                                                          _TXREG 000FAD  
                                            _ConfigureOscillator 2E76  
                                                  __CFG_PWRT$OFF 000000  
                                                  __CFG_WRT0$OFF 000000  
                                                  __CFG_WRT1$OFF 000000  
                                                  __CFG_WRT2$OFF 000000  
                                                  __CFG_WRT3$OFF 000000  
                                                   ___lltoft@exp 0032  
                                                 __CFG_EBTR0$OFF 000000  
                                                 __CFG_EBTR1$OFF 000000  
                                                 __CFG_EBTR2$OFF 000000  
                                                 __CFG_EBTR3$OFF 000000  
                                                  __CFG_STVR$OFF 000000  
                                                  __CFG_WRTB$OFF 000000  
                                                  __CFG_WRTC$OFF 000000  
                                                  __CFG_WRTD$OFF 000000  
                                                 __CFG_EBTRB$OFF 000000  
                                                  ___awtoft@sign 002D  
                                                __end_of_dpowers 7E33  
                                                          _enter 0040  
                                                          _scale 14DE  
                                                __end_of_isdigit 2E60  
                                                  ___ftpack@sign 0026  
                                                          _suma0 004E  
                                                          _suma1 0050  
                                                          _suma2 0052  
                                                          _tmues 0059  
                                                __end_of_low_isr 00AA  
                                                          tablat 000FF5  
                                                          status 000FD8  
                                                __end_of_sprintf 0DD8  
                                           ?_ConfigureOscillator 0001  
                                                   __end_of_INFO 7FA1  
                                                __initialization 2BA2  
                                                   __end_of_main 14DE  
                                             _estadoactualrapido 7EE2  
                                             _estadoactualnormal 7ECA  
                                                         ??_main 00B2  
                                                  ___fttol@sign1 0099  
                                                  __activetblptr 000002  
                                           __size_of__tdiv_to_l_ 0112  
                                                  _enviarTramaSE 2DB6  
                                               ___llmod@dividend 002F  
                                                         ?_scale 0089  
                                                         _ADRESH 000FC4  
                                                         _ADRESL 000FC3  
                                               ___awdiv@dividend 0028  
                                               __end_of___awtoft 2DB6  
                                               __end_of___ftpack 286E  
                                               __end_of___lltoft 2C78  
                                                         i2l3830 2324  
                                                         i2l3822 2308  
                                                         i2l3806 22BA  
                                                         i2l3824 230C  
                                                         i2l3818 22EC  
                                                         i2l3836 2340  
                                                         _RAPIDO 0057  
                                                         _NORMAL 003C  
                                                 __CFG_WDTPS$128 000000  
                                              __end_of_MUESTREO1 7F88  
                                              __end_of_MUESTREO2 7F92  
                                              __end_of_MUESTREO3 7F9C  
                                                      ??_InitApp 0022  
                                          ??_ConfigureOscillator 0022  
                                              ?_conversionADMues 0030  
                                               __end_of__powers_ 7E81  
                                               __end_of_high_isr 239A  
                                             ??_conversionADMues 0032  
                                                         ___ftge 286E  
                                                         _canal2 7EA1  
                                                         ___wmul 2DE8  
                                                      ??___awdiv 002C  
                                                      ??___ftadd 0099  
                                                      ??___awmod 0026  
                                                      ??___ftdiv 008F  
                                                      ??___ftneg 0025  
                                                      ??___lldiv 002A  
                                                      ??___ftmul 0080  
                                                      ??___llmod 0037  
                                                      ??___ftsub 003C  
                                                      ??___fttol 0094  
                                                         _binnum 00E6  
                                                  _visualizacion 00E4  
                                                         _fround 1BD0  
                                                         clear_0 2BE8  
                                                         clear_1 2BF4  
                                                         clear_2 2C00  
                                                         _salida 0128  
                                               ___awdiv@quotient 002E  
                                                         _saludo 7EAB  
                                                ___awmod@divisor 0024  
                                                ___awmod@counter 0026  
                                                         _strcmp 2CD2  
                                          ___ftmul@f3_as_product 0084  
                                                   __pdataCOMRAM 0057  
                                                      ??_isdigit 0022  
                                                 ?_enviarTramaSE 0022  
                                                   __mediumconst 7E0A  
                                                      ??_low_isr 0011  
                                                         tblptrh 000FF7  
                                                         tblptrl 000FF6  
                                                         tblptru 000FF8  
                                                      ??_sprintf 00AC  
                                                     __accesstop 0080  
                                        __end_of__initialization 2C06  
                                                     ___ftadd@f1 0093  
                                                     ___ftadd@f2 0096  
                                                     ___ftge@ff1 0022  
                                                     ___ftge@ff2 0025  
                                                  ___rparam_used 000001  
                                                     ___ftdiv@f1 0089  
                                                     ___ftdiv@f2 008C  
                                                     ___ftdiv@f3 0093  
                                                     ___ftneg@f1 0022  
                                                     ___awtoft@c 002A  
                                                     ___ftmul@f1 0036  
                                                     ___ftmul@f2 0039  
                                           __size_of_enviarTrama 0078  
                                                     ___ftsub@f1 009F  
                                                     ___ftsub@f2 00A2  
                                                     ___fttol@f1 0090  
                                                 __pcstackCOMRAM 0001  
                                                   __pidataBANK0 2E60  
                                                     ___lltoft@c 002A  
                                                  __end_of_scale 1940  
                                                     __div_to_l_ 25DC  
                                             enviarTramaSE@datos 0022  
                                                __div_to_l_@exp1 002D  
                                                __div_to_l_@cntr 002C  
                                                        ??_scale 003C  
                                                __div_to_l_@quot 0028  
                                                   sprintf@width 016B  
                                             __size_of_ledestado 005A  
                                                     __pbssBANK0 00B5  
                                                     __pbssBANK1 0100  
                                                  __div_to_l_@f1 0022  
                                                  __div_to_l_@f2 0025  
                                          conversionADMues@i_608 0034  
                                          conversionADMues@i_609 0036  
                                                        ?___ftge 0022  
                                               __CFG_CCP2MUX$OFF 000000  
                                                        ?___wmul 0030  
                                          conversionADMues@canal 0030  
                                             __end_of_MODORAPIDO 7F7E  
                                             __end_of_MODONORMAL 7F73  
                                                        ?_fround 0089  
                                                      ?___awtoft 002A  
                                                      ?___ftpack 0022  
                                                      ?___lltoft 002A  
                                                        ?_strcmp 0022  
                                                ??_enviarTramaSE 0024  
                                                      ?_high_isr 0001  
                                                        _InitApp 26E4  
                                              __end_of__npowers_ 7E5A  
                                                        __Hparam 0000  
                                                     _scale$2072 008C  
                                                        __Lparam 0000  
                                                __size_of___ftge 009C  
                                                        ___awdiv 290A  
                                                        ___ftadd 1940  
                                                        ___awmod 2A32  
                                                        ___ftdiv 1FEC  
                                                        ___ftneg 2E12  
                                                        ___lldiv 29A2  
                                                __size_of___wmul 002A  
                                                        ___ftmul 239A  
                                                        ___llmod 2B2E  
                                                        ___ftsub 2D26  
                                                        ___fttol 2132  
                                              __end_of_ledestado 2CD2  
                                                        __pcinit 2BA2  
                                                     ??___awtoft 002D  
                                                     ??___ftpack 0027  
                                                __size_of_fround 0270  
                                                        __ramtop 0600  
                                                     ??___lltoft 002E  
                                                        __ptext0 0DD8  
                                                        __ptext1 2CD2  
                                                        __ptext2 00AE  
                                                        __ptext3 14DE  
                                                        __ptext4 2E3C  
                                                        __ptext5 1BD0  
                                                        __ptext6 2DE8  
                                                        __ptext7 239A  
                                                        __ptext8 2A32  
                                                        __ptext9 24CA  
                                                        _comando 0146  
                                                      _T0CONbits 000FD5  
                                                __size_of_strcmp 0054  
                                              __end_of_hexpowers 7EA1  
                                                      _T1CONbits 000FCD  
                                                    ?__div_to_l_ 0022  
                                                        _dpowers 7E0B  
                                                 _visualizacion1 00F0  
                                                 _visualizacion2 00F2  
                                                        _isdigit 2E3C  
                                                 _visualizacion3 00F4  
                                                      _T3CONbits 000FB1  
                                               ___awmod@dividend 0022  
                                                        _low_isr 0018  
                                                        _sprintf 00AE  
                                                     ??_high_isr 0001  
                                                     _modoestado 0046  
                                                 __pintcode_body 2266  
                                           end_of_initialization 2C06  
                                                  __Lmediumconst 7E0A  
                                                        int_func 2266  
                                                ___lldiv@divisor 0026  
                                                ___lldiv@counter 002E  
                                                      _MUESTREO1 7F7E  
                                                      _MUESTREO2 7F88  
                                                      _MUESTREO3 7F92  
                                                      _RCSTAbits 000FAB  
                                  __end_of_visualizacionnoaplica 7F12  
                                                        postdec1 000FE5  
                                                        postdec2 000FDD  
                                                        postinc0 000FEE  
                                                        postinc2 000FDE  
                                                 __tdiv_to_l_@f1 0022  
                                                 __tdiv_to_l_@f2 0025  
                                                        strcmp@r 0027  
                                                  ??__tdiv_to_l_ 0028  
                                                      _PORTBbits 000F81  
                                      __size_of_conversionADMues 01AC  
                                                      _TRISAbits 000F92  
                                                      _TRISBbits 000F93  
                                                      _TRISCbits 000F94  
                                    __end_of_ConfigureOscillator 2E7C  
                                                    ___ftdiv@exp 0096  
                                                      _TXSTAbits 000FAC  
                                            __size_of__div_to_l_ 0108  
                                                    ___ftmul@exp 0083  
                                                 __end_of___ftge 290A  
                                                 __end_of_canal2 7EAB  
                                                 __end_of___wmul 2E12  
                                                  __pidataCOMRAM 2E70  
                                                 __end_of_fround 1E40  
                                                 __end_of_saludo 7ECA  
                                                 __end_of_strcmp 2D26  
                                            start_initialization 2BA2  
                                            __end_of__tdiv_to_l_ 25DC  
                                                ___llmod@divisor 0033  
                                                  ??_enviarTrama 0024  
                                                ___llmod@counter 0037  
                                                       ??___ftge 0028  
                                                       ??___wmul 0034  
                                                    __pdataBANK0 00E6  
                                                       ??_fround 003C  
                                                  sprintf@tmpval 0167  
                                                       ??_strcmp 0026  
                                                     fround@prec 0092  
                                              __size_of___awtoft 003E  
                                              __size_of___ftpack 00C4  
                                              __size_of___lltoft 0064  
                                                    __pbssCOMRAM 003C  
                                                  __pcstackBANK0 0080  
                                                  __pcstackBANK1 015F  
                                           __end_of_noreconocido 7F28  
                                                   _isdigit$1743 0023  
                                              __size_of_high_isr 2392  
                                                    sprintf@flag 0173  
                                                    sprintf@fval 0175  
                                                    sprintf@prec 0165  
                                                       ?_InitApp 0001  
                                                      __pintcode 0008  
                                                  __pmediumconst 7E0A  
                                                       ?___awdiv 0028  
                                                       ?___ftadd 0093  
                                                       ?___awmod 0022  
                                            __end_of_enviarTrama 2B2E  
                                                       ?___ftdiv 0089  
                                                       ?___ftneg 0022  
                                                       ?___lldiv 0022  
                                                       ?___ftmul 0036  
                                                       ?___llmod 002F  
                                                       ?___ftsub 009F  
                                                      __npowers_ 7E33  
                                                       ?___fttol 0090  
                                                    __pintcodelo 0018  
                                                    __tdiv_to_l_ 24CA  
                                                   ??__div_to_l_ 0028  
                                               _conversionADMues 1E40  
                                                      _ledestado 2C78  
                                                       ?_isdigit 0001  
                                          __end_of_enviarTramaSE 2DE8  
                                                       ?_low_isr 0001  
                                                      _hexpowers 7E81  
                                                       ?_sprintf 00A5  
                                                 __size_of_scale 0462  
                                                 ___wmul@product 0034  
                                                       _LATBbits 000F8A  
                                                       _IPR1bits 000F9F  
                                                       _IPR2bits 000FA2  
                                                       _PIE1bits 000F9D  
                                                       _PIE2bits 000FA0  
                                                      _unSegundo 00E2  
                                                       _PIR1bits 000F9E  
                                             __end_of__div_to_l_ 26E4  
                                                       _PIR2bits 000FA1  
                                                       _RCONbits 000FD0  
                                                      _muestreo1 00EA  
                                                      _muestreo2 00EC  
                                                      _muestreo3 00EE  
                                                      _promedio1 00D6  
                                                      _promedio2 00D8  
                                                      _promedio3 00DA  
                                                     _ADCON0bits 000FC2  
                                                     _ADCON1bits 000FC1  
                                              ___wmul@multiplier 0030  
                                               _muestreonoaplica 7F28  
                                                       InitApp@i 0022  
                                                     ?_ledestado 0022  
                                                 _VISUALIZACION1 7F3B  
                                                 _VISUALIZACION2 7F4A  
                                                 _VISUALIZACION3 7F59  
                                                    _INTCON2bits 000FF1  
                                                      copy_data0 2BB6  
                                                      copy_data1 2BD6  
                                                 _tvisualizacion 00E0  
                                                    _enviarTrama 2AB6  
                                               __size_of_InitApp 00C6  
                                                       __Hrparam 0000  
                                                       __Lrparam 0000  
                                               __size_of___awdiv 0098  
                                               __size_of___ftadd 0290  
                                               __size_of___awmod 0084  
                                               __size_of___ftdiv 0146  
                                               __size_of___ftneg 002A  
                                               __size_of___lldiv 0090  
                                               __size_of___ftmul 0130  
                                          _visualizacionnoaplica 7EFA  
                                               __size_of___llmod 0074  
                                               __size_of___ftsub 0052  
                                               __size_of___fttol 0134  
                                                       ___awtoft 2D78  
                                                       ___ftpack 27AA  
                                                    _fround$2070 008F  
                                                    _fround$2071 008C  
                                                       ___lltoft 2C14  
                                         __end_of_VISUALIZACION1 7F4A  
                                         __end_of_VISUALIZACION2 7F59  
                                         __end_of_VISUALIZACION3 7F68  
                                                     sprintf@idx 0162  
                                                     sprintf@exp 016D  
                                                     sprintf@val 016F  
                                               enviarTrama@datos 0022  
                                               __size_of_isdigit 0024  
                                               __size_of_low_isr 0092  
                                                       __ptext10 25DC  
                                                       __ptext11 2C14  
                                                       __ptext20 2DB6  
                                                       __ptext12 2B2E  
                                                       __ptext21 2AB6  
                                                       __ptext13 29A2  
                                                       __ptext22 1E40  
                                                       __ptext14 2132  
                                                       __ptext23 290A  
                                                       __ptext15 2D26  
                                                       __ptext24 1FEC  
                                                       __ptext16 1940  
                                                       __ptext25 2D78  
                                                       __ptext17 2E12  
                                                       __ptext26 27AA  
                                                       __ptext18 286E  
                                                       __ptext27 26E4  
                                                       __ptext19 2C78  
                                                       __ptext28 2E76  
                                                       __powers_ 7E5A  
                                                       _high_isr 0008  
                                               __size_of_sprintf 0D2A  
                                     __end_of_estadoactualrapido 7EFA  
                                     __end_of_estadoactualnormal 7EE2  
                                                  __size_of_main 0706  
                                   __size_of_ConfigureOscillator 0006  
                                                   _noreconocido 7F12  
                                                       _muestreo 0048  
                                                       int$flags 005D  
                                                       _promedio 004A  
                                                    ??_ledestado 0024  
                                                     _INTCONbits 000FF2  
                                                     _MODORAPIDO 7F73  
                                                       isdigit@c 0024  
                                                     _MODONORMAL 7F68  
                                                       scale@scl 008F  
                                                       intlevel1 2E7C  
                                                       intlevel2 2E7C  
                                                      sprintf@ap 0163  
                                               __tdiv_to_l_@exp1 0030  
                                               __tdiv_to_l_@cntr 002F  
                                                      sprintf@sp 00A5  
                                               __tdiv_to_l_@quot 002B  
                                               ___lldiv@dividend 0022  
                                       __end_of_conversionADMues 1FEC  
                                                   _resultadoadc 004C  
                                                   ?__tdiv_to_l_ 0022  
                                                       sprintf@c 0178  
                                                       sprintf@f 00A7  
                                                       strcmp@s1 0022  
                                                       strcmp@s2 0024  
                                               ___lldiv@quotient 002A  
                                                  _promediovolt1 00BF  
                                                  _promediovolt2 00DC  
                                                  _promediovolt3 00DE  
                                       __end_of_muestreonoaplica 7F3B  
